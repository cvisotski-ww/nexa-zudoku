var u = Object.defineProperty;
var d = (n, i, e) => i in n ? u(n, i, { enumerable: !0, configurable: !0, writable: !0, value: e }) : n[i] = e;
var a = (n, i, e) => d(n, typeof i != "symbol" ? i + "" : i, e);
import { A as w } from "./AuthenticationPlugin-CbgJ5SAh.js";
import { u as l } from "./state-CsuHT8ZO.js";
class g extends w {
  constructor(e) {
    super();
    a(this, "initialize", async () => {
      var t;
      const e = await this.clerk;
      e && (e.session ? l.setState({
        isAuthenticated: !0,
        isPending: !1,
        profile: {
          sub: e.session.user.id,
          name: e.session.user.fullName ?? void 0,
          email: (t = e.session.user.emailAddresses[0]) == null ? void 0 : t.emailAddress,
          emailVerified: !1,
          // TODO: Check this
          pictureUrl: e.session.user.imageUrl
        }
      }) : l.setState({
        isAuthenticated: !1,
        isPending: !1,
        profile: void 0
      }));
    });
    this.clerk = e;
  }
}
const h = ({
  clerkPubKey: n,
  redirectToAfterSignOut: i = "/",
  redirectToAfterSignUp: e = "/",
  redirectToAfterSignIn: t = "/"
}) => {
  let s;
  const r = (async () => {
    if (typeof window > "u") return;
    const { Clerk: o } = await import("@clerk/clerk-js");
    return s = new o(n), await s.load(), s;
  })();
  async function c() {
    if (await r, !s.session)
      throw new Error("No session available");
    const o = await s.session.getToken();
    if (!o)
      throw new Error("Could not get access token from Clerk");
    return o;
  }
  return {
    getAccessToken: c,
    signOut: async () => {
      await r, await s.signOut({
        redirectUrl: window.location.origin + i
      });
    },
    signIn: async () => {
      await r, await s.redirectToSignIn({
        signInForceRedirectUrl: window.location.origin + t,
        signUpForceRedirectUrl: window.location.origin + e
      });
    },
    signUp: async () => {
      await r, await s.redirectToSignUp({
        signInForceRedirectUrl: window.location.origin + t,
        signUpForceRedirectUrl: window.location.origin + e
      });
    },
    getAuthenticationPlugin() {
      return new g(r);
    }
  };
};
export {
  h as default
};
//# sourceMappingURL=zudoku.auth-clerk.js.map
