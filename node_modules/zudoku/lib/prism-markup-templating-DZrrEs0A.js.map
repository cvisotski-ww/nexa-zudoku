{"version":3,"file":"prism-markup-templating-DZrrEs0A.js","sources":["../../../node_modules/.pnpm/prismjs@1.29.0/node_modules/prismjs/components/prism-markup-templating.js"],"sourcesContent":["(function (Prism) {\n\n\t/**\n\t * Returns the placeholder for the given language id and index.\n\t *\n\t * @param {string} language\n\t * @param {string|number} index\n\t * @returns {string}\n\t */\n\tfunction getPlaceholder(language, index) {\n\t\treturn '___' + language.toUpperCase() + index + '___';\n\t}\n\n\tObject.defineProperties(Prism.languages['markup-templating'] = {}, {\n\t\tbuildPlaceholders: {\n\t\t\t/**\n\t\t\t * Tokenize all inline templating expressions matching `placeholderPattern`.\n\t\t\t *\n\t\t\t * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n\t\t\t * `true` will be replaced.\n\t\t\t *\n\t\t\t * @param {object} env The environment of the `before-tokenize` hook.\n\t\t\t * @param {string} language The language id.\n\t\t\t * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n\t\t\t * @param {(match: string) => boolean} [replaceFilter]\n\t\t\t */\n\t\t\tvalue: function (env, language, placeholderPattern, replaceFilter) {\n\t\t\t\tif (env.language !== language) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar tokenStack = env.tokenStack = [];\n\n\t\t\t\tenv.code = env.code.replace(placeholderPattern, function (match) {\n\t\t\t\t\tif (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n\t\t\t\t\t\treturn match;\n\t\t\t\t\t}\n\t\t\t\t\tvar i = tokenStack.length;\n\t\t\t\t\tvar placeholder;\n\n\t\t\t\t\t// Check for existing strings\n\t\t\t\t\twhile (env.code.indexOf(placeholder = getPlaceholder(language, i)) !== -1) {\n\t\t\t\t\t\t++i;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Create a sparse array\n\t\t\t\t\ttokenStack[i] = match;\n\n\t\t\t\t\treturn placeholder;\n\t\t\t\t});\n\n\t\t\t\t// Switch the grammar to markup\n\t\t\t\tenv.grammar = Prism.languages.markup;\n\t\t\t}\n\t\t},\n\t\ttokenizePlaceholders: {\n\t\t\t/**\n\t\t\t * Replace placeholders with proper tokens after tokenizing.\n\t\t\t *\n\t\t\t * @param {object} env The environment of the `after-tokenize` hook.\n\t\t\t * @param {string} language The language id.\n\t\t\t */\n\t\t\tvalue: function (env, language) {\n\t\t\t\tif (env.language !== language || !env.tokenStack) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Switch the grammar back\n\t\t\t\tenv.grammar = Prism.languages[language];\n\n\t\t\t\tvar j = 0;\n\t\t\t\tvar keys = Object.keys(env.tokenStack);\n\n\t\t\t\tfunction walkTokens(tokens) {\n\t\t\t\t\tfor (var i = 0; i < tokens.length; i++) {\n\t\t\t\t\t\t// all placeholders are replaced already\n\t\t\t\t\t\tif (j >= keys.length) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar token = tokens[i];\n\t\t\t\t\t\tif (typeof token === 'string' || (token.content && typeof token.content === 'string')) {\n\t\t\t\t\t\t\tvar k = keys[j];\n\t\t\t\t\t\t\tvar t = env.tokenStack[k];\n\t\t\t\t\t\t\tvar s = typeof token === 'string' ? token : token.content;\n\t\t\t\t\t\t\tvar placeholder = getPlaceholder(language, k);\n\n\t\t\t\t\t\t\tvar index = s.indexOf(placeholder);\n\t\t\t\t\t\t\tif (index > -1) {\n\t\t\t\t\t\t\t\t++j;\n\n\t\t\t\t\t\t\t\tvar before = s.substring(0, index);\n\t\t\t\t\t\t\t\tvar middle = new Prism.Token(language, Prism.tokenize(t, env.grammar), 'language-' + language, t);\n\t\t\t\t\t\t\t\tvar after = s.substring(index + placeholder.length);\n\n\t\t\t\t\t\t\t\tvar replacement = [];\n\t\t\t\t\t\t\t\tif (before) {\n\t\t\t\t\t\t\t\t\treplacement.push.apply(replacement, walkTokens([before]));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treplacement.push(middle);\n\t\t\t\t\t\t\t\tif (after) {\n\t\t\t\t\t\t\t\t\treplacement.push.apply(replacement, walkTokens([after]));\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (typeof token === 'string') {\n\t\t\t\t\t\t\t\t\ttokens.splice.apply(tokens, [i, 1].concat(replacement));\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ttoken.content = replacement;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (token.content /* && typeof token.content !== 'string' */) {\n\t\t\t\t\t\t\twalkTokens(token.content);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn tokens;\n\t\t\t\t}\n\n\t\t\t\twalkTokens(env.tokens);\n\t\t\t}\n\t\t}\n\t});\n\n}(Prism));\n"],"names":["Prism","getPlaceholder","language","index","env","placeholderPattern","replaceFilter","tokenStack","match","placeholder","j","keys","walkTokens","tokens","token","k","t","s","before","middle","after","replacement"],"mappings":"CAAC,SAAUA,GAAO;AASjB,WAASC,EAAeC,GAAUC,GAAO;AACxC,WAAO,QAAQD,EAAS,YAAW,IAAKC,IAAQ;AAAA,EAChD;AAED,SAAO,iBAAiBH,EAAM,UAAU,mBAAmB,IAAI,CAAA,GAAI;AAAA,IAClE,mBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAYlB,OAAO,SAAUI,GAAKF,GAAUG,GAAoBC,GAAe;AAClE,YAAIF,EAAI,aAAaF,GAIrB;AAAA,cAAIK,IAAaH,EAAI,aAAa;AAElC,UAAAA,EAAI,OAAOA,EAAI,KAAK,QAAQC,GAAoB,SAAUG,GAAO;AAChE,gBAAI,OAAOF,KAAkB,cAAc,CAACA,EAAcE,CAAK;AAC9D,qBAAOA;AAMR,qBAJI,IAAID,EAAW,QACfE,GAGGL,EAAI,KAAK,QAAQK,IAAcR,EAAeC,GAAU,CAAC,CAAC,MAAM;AACtE,gBAAE;AAIH,mBAAAK,EAAW,CAAC,IAAIC,GAETC;AAAA,UACZ,CAAK,GAGDL,EAAI,UAAUJ,EAAM,UAAU;AAAA;AAAA,MAC9B;AAAA,IACD;AAAA,IACD,sBAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOrB,OAAO,SAAUI,GAAKF,GAAU;AAC/B,YAAIE,EAAI,aAAaF,KAAY,CAACE,EAAI;AACrC;AAID,QAAAA,EAAI,UAAUJ,EAAM,UAAUE,CAAQ;AAEtC,YAAIQ,IAAI,GACJC,IAAO,OAAO,KAAKP,EAAI,UAAU;AAErC,iBAASQ,EAAWC,GAAQ;AAC3B,mBAAS,IAAI,GAAG,IAAIA,EAAO,UAEtB,EAAAH,KAAKC,EAAK,SAFoB,KAAK;AAMvC,gBAAIG,IAAQD,EAAO,CAAC;AACpB,gBAAI,OAAOC,KAAU,YAAaA,EAAM,WAAW,OAAOA,EAAM,WAAY,UAAW;AACtF,kBAAIC,IAAIJ,EAAKD,CAAC,GACVM,IAAIZ,EAAI,WAAWW,CAAC,GACpBE,IAAI,OAAOH,KAAU,WAAWA,IAAQA,EAAM,SAC9CL,IAAcR,EAAeC,GAAUa,CAAC,GAExCZ,IAAQc,EAAE,QAAQR,CAAW;AACjC,kBAAIN,IAAQ,IAAI;AACf,kBAAEO;AAEF,oBAAIQ,IAASD,EAAE,UAAU,GAAGd,CAAK,GAC7BgB,IAAS,IAAInB,EAAM,MAAME,GAAUF,EAAM,SAASgB,GAAGZ,EAAI,OAAO,GAAG,cAAcF,GAAUc,CAAC,GAC5FI,IAAQH,EAAE,UAAUd,IAAQM,EAAY,MAAM,GAE9CY,IAAc,CAAA;AAClB,gBAAIH,KACHG,EAAY,KAAK,MAAMA,GAAaT,EAAW,CAACM,CAAM,CAAC,CAAC,GAEzDG,EAAY,KAAKF,CAAM,GACnBC,KACHC,EAAY,KAAK,MAAMA,GAAaT,EAAW,CAACQ,CAAK,CAAC,CAAC,GAGpD,OAAON,KAAU,WACpBD,EAAO,OAAO,MAAMA,GAAQ,CAAC,GAAG,CAAC,EAAE,OAAOQ,CAAW,CAAC,IAEtDP,EAAM,UAAUO;AAAA,cAEjB;AAAA,YACR,MAAa,CAAIP,EAAM,WAChBF,EAAWE,EAAM,OAAO;AAAA,UAEzB;AAED,iBAAOD;AAAA,QACP;AAED,QAAAD,EAAWR,EAAI,MAAM;AAAA,MACrB;AAAA,IACD;AAAA,EACH,CAAE;AAEF,GAAE,KAAK;","x_google_ignoreList":[0]}