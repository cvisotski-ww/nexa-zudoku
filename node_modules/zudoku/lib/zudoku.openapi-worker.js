var kl = Object.defineProperty;
var To = (t) => {
  throw TypeError(t);
};
var Dl = (t, e, n) => e in t ? kl(t, e, { enumerable: !0, configurable: !0, writable: !0, value: n }) : t[e] = n;
var U = (t, e, n) => Dl(t, typeof e != "symbol" ? e + "" : e, n), Kr = (t, e, n) => e.has(t) || To("Cannot " + n);
var l = (t, e, n) => (Kr(t, e, "read from private field"), n ? n.call(t) : e.get(t)), H = (t, e, n) => e.has(t) ? To("Cannot add the same private member more than once") : e instanceof WeakSet ? e.add(t) : e.set(t, n), $ = (t, e, n, i) => (Kr(t, e, "write to private field"), i ? i.call(t, n) : e.set(t, n), n), k = (t, e, n) => (Kr(t, e, "access private method"), n);
var Sn = (t, e, n, i) => ({
  set _(r) {
    $(t, e, r, n);
  },
  get _() {
    return l(t, e, i);
  }
});
import { a as $l } from "./index-D06ATMgg.js";
import { g as jl } from "./index-DJqnphbT.js";
import { C as Qa, b as Wa, m as Ha, f as Ya } from "./urql-core-KJnLL26g.js";
function Pl(t, e) {
  for (var n = 0; n < e.length; n++) {
    const i = e[n];
    if (typeof i != "string" && !Array.isArray(i)) {
      for (const r in i)
        if (r !== "default" && !(r in t)) {
          const s = Object.getOwnPropertyDescriptor(i, r);
          s && Object.defineProperty(t, r, s.get ? s : {
            enumerable: !0,
            get: () => i[r]
          });
        }
    }
  }
  return Object.freeze(Object.defineProperty(t, Symbol.toStringTag, { value: "Module" }));
}
function Xr(t) {
  if (!Vs(t))
    throw new Error("Parameter was not an error");
}
function Vs(t) {
  return !!t && typeof t == "object" && Ml(t) === "[object Error]" || t instanceof Error;
}
function Ml(t) {
  return Object.prototype.toString.call(t);
}
const Ul = "Layerr";
let Vl = Ul;
function Bl() {
  return Vl;
}
function Gl(t) {
  let e, n = "";
  if (t.length === 0)
    e = {};
  else if (Vs(t[0]))
    e = {
      cause: t[0]
    }, n = t.slice(1).join(" ") || "";
  else if (t[0] && typeof t[0] == "object")
    e = Object.assign({}, t[0]), n = t.slice(1).join(" ") || "";
  else if (typeof t[0] == "string")
    e = {}, n = n = t.join(" ") || "";
  else
    throw new Error("Invalid arguments passed to Layerr");
  return {
    options: e,
    shortMessage: n
  };
}
class gt extends Error {
  constructor(e, n) {
    const i = [...arguments], { options: r, shortMessage: s } = Gl(i);
    let o = s;
    if (r.cause && (o = `${o}: ${r.cause.message}`), super(o), this.message = o, r.name && typeof r.name == "string" ? this.name = r.name : this.name = Bl(), r.cause && Object.defineProperty(this, "_cause", { value: r.cause }), Object.defineProperty(this, "_info", { value: {} }), r.info && typeof r.info == "object" && Object.assign(this._info, r.info), Error.captureStackTrace) {
      const a = r.constructorOpt || this.constructor;
      Error.captureStackTrace(this, a);
    }
  }
  static cause(e) {
    return Xr(e), e._cause && Vs(e._cause) ? e._cause : null;
  }
  static fullStack(e) {
    Xr(e);
    const n = gt.cause(e);
    return n ? `${e.stack}
caused by: ${gt.fullStack(n)}` : e.stack ?? "";
  }
  static info(e) {
    Xr(e);
    const n = {}, i = gt.cause(e);
    return i && Object.assign(n, gt.info(i)), e._info && Object.assign(n, e._info), n;
  }
  toString() {
    let e = this.name || this.constructor.name || this.constructor.prototype.name;
    return this.message && (e = `${e}: ${this.message}`), e;
  }
}
const xi = "0123456789ABCDEFGHJKMNPQRSTVWXYZ", Hn = 32, So = 281474976710655, _o = 10, ql = 16, An = Object.freeze({
  source: "ulid"
});
function zl(t) {
  const e = Ql(), n = e && (e.crypto || e.msCrypto) || null;
  if (typeof (n == null ? void 0 : n.getRandomValues) == "function")
    return () => {
      const i = new Uint8Array(1);
      return n.getRandomValues(i), i[0] / 255;
    };
  if (typeof (n == null ? void 0 : n.randomBytes) == "function")
    return () => n.randomBytes(1).readUInt8() / 255;
  throw new gt({
    info: {
      code: "PRNG_DETECT",
      ...An
    }
  }, "Failed to find a reliable PRNG");
}
function Ql() {
  return Yl() ? self : typeof window < "u" ? window : typeof global < "u" ? global : typeof globalThis < "u" ? globalThis : null;
}
function Wl(t, e) {
  let n = "";
  for (; t > 0; t--)
    n = Kl(e) + n;
  return n;
}
function Io(t, e) {
  if (isNaN(t))
    throw new gt({
      info: {
        code: "ENC_TIME_NAN",
        ...An
      }
    }, `Time must be a number: ${t}`);
  if (t > So)
    throw new gt({
      info: {
        code: "ENC_TIME_SIZE_EXCEED",
        ...An
      }
    }, `Cannot encode a time larger than ${So}: ${t}`);
  if (t < 0)
    throw new gt({
      info: {
        code: "ENC_TIME_NEG",
        ...An
      }
    }, `Time must be positive: ${t}`);
  if (Number.isInteger(t) === !1)
    throw new gt({
      info: {
        code: "ENC_TIME_TYPE",
        ...An
      }
    }, `Time must be an integer: ${t}`);
  let n, i = "";
  for (let r = e; r > 0; r--)
    n = t % Hn, i = xi.charAt(n) + i, t = (t - n) / Hn;
  return i;
}
function Hl(t) {
  let e, n = t.length, i, r, s = t;
  const o = Hn - 1;
  for (; !e && n-- >= 0; ) {
    if (i = s[n], r = xi.indexOf(i), r === -1)
      throw new gt({
        info: {
          code: "B32_INC_ENC",
          ...An
        }
      }, "Incorrectly encoded string");
    if (r === o) {
      s = Oo(s, n, xi[0]);
      continue;
    }
    e = Oo(s, n, xi[r + 1]);
  }
  if (typeof e == "string")
    return e;
  throw new gt({
    info: {
      code: "B32_INC_INVALID",
      ...An
    }
  }, "Failed incrementing string");
}
function Yl() {
  return typeof WorkerGlobalScope < "u" && self instanceof WorkerGlobalScope;
}
function Jl(t) {
  const e = zl();
  let n = 0, i;
  return function(s) {
    const o = isNaN(s) ? Date.now() : s;
    if (o <= n) {
      const u = i = Hl(i);
      return Io(n, _o) + u;
    }
    n = o;
    const a = i = Wl(ql, e);
    return Io(o, _o) + a;
  };
}
function Kl(t) {
  let e = Math.floor(t() * Hn);
  return e === Hn && (e = Hn - 1), xi.charAt(e);
}
function Oo(t, e, n) {
  return e > t.length - 1 ? t : t.substr(0, e) + n + t.substr(e + 1);
}
const Xl = () => {
  const t = /* @__PURE__ */ new Map();
  return [(i) => new Promise((r) => {
    t.set(i, r);
  }), (i, r) => {
    const s = t.get(i);
    s && (s(r), t.delete(i));
  }];
}, Zl = /* @__PURE__ */ new WeakMap(), Zr = Symbol("ENVELOP_IS_INTROSPECTION");
function ec(t) {
  return (typeof t == "string" ? t : t.body).indexOf("__schema") !== -1;
}
function tc(t) {
  return t.length === 1 ? t[0] : {
    schema: t[0],
    document: t[1],
    rootValue: t[2],
    contextValue: t[3],
    variableValues: t[4],
    operationName: t[5],
    fieldResolver: t[6],
    subscribeFieldResolver: t[7]
  };
}
const No = (t) => (...e) => t(tc(e));
function Ao(t, e) {
  const n = t[Symbol.asyncIterator]();
  async function i(s) {
    var o;
    if (s.done)
      return s;
    try {
      return { value: await e(s.value), done: !1 };
    } catch (a) {
      try {
        await ((o = n.return) == null ? void 0 : o.call(n));
      } catch {
      }
      throw a;
    }
  }
  const r = {
    [Symbol.asyncIterator]() {
      return r;
    },
    async next() {
      return await i(await n.next());
    },
    async return() {
      var o;
      const s = (o = n.return) == null ? void 0 : o.call(n);
      return s ? await i(await s) : { value: void 0, done: !0 };
    },
    async throw(s) {
      var a;
      const o = (a = n.throw) == null ? void 0 : a.call(n);
      if (o)
        return await i(await o);
      throw s;
    }
  };
  return r;
}
function nc(t) {
  return t.length === 1 ? t[0] : {
    schema: t[0],
    document: t[1],
    rootValue: t[2],
    contextValue: t[3],
    variableValues: t[4],
    operationName: t[5],
    fieldResolver: t[6],
    typeResolver: t[7]
  };
}
const xo = (t) => (...e) => t(nc(e));
function Qt(t) {
  return typeof t == "object" && t != null && typeof t[Symbol.asyncIterator] == "function";
}
function Fo(t, e) {
  if (Qt(t.result))
    return { onNext: e };
  e({
    args: t.args,
    result: t.result,
    setResult: t.setResult
  });
}
function Ro(t, e) {
  const n = t[Symbol.asyncIterator]();
  let i = !1;
  const r = {
    [Symbol.asyncIterator]() {
      return r;
    },
    async next() {
      const s = await n.next();
      return s.done && i === !1 && (i = !0, e()), s;
    },
    async return() {
      var o;
      const s = (o = n.return) == null ? void 0 : o.call(n);
      return i === !1 && (i = !0, e()), s ? await s : { done: !0, value: void 0 };
    },
    async throw(s) {
      var a;
      const o = (a = n.throw) == null ? void 0 : a.call(n);
      if (o)
        return await o;
      throw s;
    }
  };
  return r;
}
function ic(t, e) {
  const n = t[Symbol.asyncIterator](), i = {
    [Symbol.asyncIterator]() {
      return i;
    },
    async next() {
      try {
        return await n.next();
      } catch (r) {
        return e(r), { done: !0, value: void 0 };
      }
    },
    async return() {
      var s;
      const r = (s = n.return) == null ? void 0 : s.call(n);
      return r ? await r : { done: !0, value: void 0 };
    },
    async throw(r) {
      var o;
      const s = (o = n.throw) == null ? void 0 : o.call(n);
      if (s)
        return await s;
      throw r;
    }
  };
  return i;
}
function Yi(t) {
  throw Error(`No \`${t}\` function found! Register it using "useEngine" plugin.`);
}
function rc({ plugins: t }) {
  let e = null, n = !1;
  const i = () => Yi("parse"), r = () => Yi("validate"), s = () => Yi("execute"), o = () => Yi("subscribe"), a = (S, A = -1) => {
    if (e = S, n)
      for (const [O, C] of t.entries())
        O !== A && C.onSchemaChange && C.onSchemaChange({
          schema: e,
          replaceSchema: (T) => {
            a(T, O);
          }
        });
  }, u = [];
  for (let S = 0; S < t.length; S++) {
    const A = t[S], O = [];
    A.onPluginInit && A.onPluginInit({
      plugins: t,
      addPlugin: (C) => {
        O.push(C);
      },
      setSchema: (C) => a(C, S),
      registerContextErrorHandler: (C) => u.push(C)
    }), O.length && t.splice(S + 1, 0, ...O);
  }
  const c = {
    init: [],
    parse: [],
    validate: [],
    subscribe: [],
    execute: [],
    context: []
  };
  for (const { onContextBuilding: S, onExecute: A, onParse: O, onSubscribe: C, onValidate: T, onEnveloped: _ } of t)
    _ && c.init.push(_), S && c.context.push(S), A && c.execute.push(A), O && c.parse.push(O), C && c.subscribe.push(C), T && c.validate.push(T);
  const f = (S) => {
    for (const [A, O] of c.init.entries())
      O({
        context: S,
        extendContext: (C) => {
          S && Object.assign(S, C);
        },
        setSchema: (C) => a(C, A)
      });
  }, g = c.parse.length ? (S) => (A, O) => {
    let C = null, T = i;
    const _ = S, m = [];
    for (const b of c.parse) {
      const d = b({
        context: _,
        extendContext: (N) => {
          Object.assign(_, N);
        },
        params: { source: A, options: O },
        parseFn: T,
        setParseFn: (N) => {
          T = N;
        },
        setParsedDocument: (N) => {
          C = N;
        }
      });
      d && m.push(d);
    }
    if (C === null)
      try {
        C = T(A, O);
      } catch (b) {
        C = b;
      }
    for (const b of m)
      b({
        context: _,
        extendContext: (d) => {
          Object.assign(_, d);
        },
        replaceParseResult: (d) => {
          C = d;
        },
        result: C
      });
    if (C === null)
      throw new Error("Failed to parse document.");
    if (C instanceof Error)
      throw C;
    return Zl.set(C, A.toString()), C;
  } : () => i, p = c.validate.length ? (S) => (A, O, C, T, _) => {
    let m = C ? [...C] : void 0, b = r, d = null;
    const N = S, L = [];
    for (const q of c.validate) {
      const Z = q({
        context: N,
        extendContext: (W) => {
          Object.assign(N, W);
        },
        params: {
          schema: A,
          documentAST: O,
          rules: m,
          typeInfo: T,
          options: _
        },
        validateFn: b,
        addValidationRule: (W) => {
          m || (m = []), m.push(W);
        },
        setValidationFn: (W) => {
          b = W;
        },
        setResult: (W) => {
          d = W;
        }
      });
      Z && L.push(Z);
    }
    if (d || (d = b(A, O, m, T, _)), !d)
      return;
    const J = d.length === 0;
    for (const q of L)
      q({
        valid: J,
        result: d,
        context: N,
        extendContext: (Z) => {
          Object.assign(N, Z);
        },
        setResult: (Z) => {
          d = Z;
        }
      });
    return d;
  } : () => r, v = c.context.length ? (S) => async (A) => {
    const O = [], C = S;
    A && Object.assign(C, A);
    try {
      let T = !1;
      for (const _ of c.context) {
        const m = await _({
          context: C,
          extendContext: (b) => {
            Object.assign(C, b);
          },
          breakContextBuilding: () => {
            T = !0;
          }
        });
        if (typeof m == "function" && O.push(m), T === !0)
          break;
      }
      for (const _ of O)
        _({
          context: C,
          extendContext: (m) => {
            Object.assign(C, m);
          }
        });
      return C;
    } catch (T) {
      let _ = T;
      for (const m of u)
        m({
          context: C,
          error: _,
          setError: (b) => {
            _ = b;
          }
        });
      throw _;
    }
  } : (S) => (A) => (A && Object.assign(S, A), S), w = c.subscribe.length, R = No(w ? async (S) => {
    let A = o;
    const O = [], C = [], T = S.contextValue || {};
    let _;
    for (const d of c.subscribe) {
      const N = await d({
        subscribeFn: A,
        setSubscribeFn: (L) => {
          A = L;
        },
        extendContext: (L) => {
          Object.assign(T, L);
        },
        args: S,
        setResultAndStopExecution: (L) => {
          _ = L;
        }
      });
      if (N && (N.onSubscribeResult && O.push(N.onSubscribeResult), N.onSubscribeError && C.push(N.onSubscribeError)), _ !== void 0)
        break;
    }
    if (_ === void 0 && (_ = await A({
      ...S,
      contextValue: T
      // Casted for GraphQL.js 15 compatibility
      // Can be removed once we drop support for GraphQL.js 15
    })), !_)
      return;
    const m = [], b = [];
    for (const d of O) {
      const N = d({
        args: S,
        result: _,
        setResult: (L) => {
          _ = L;
        }
      });
      N && (N.onNext && m.push(N.onNext), N.onEnd && b.push(N.onEnd));
    }
    return m.length && Qt(_) && (_ = Ao(_, async (d) => {
      for (const N of m)
        await N({
          args: S,
          result: d,
          setResult: (L) => d = L
        });
      return d;
    })), b.length && Qt(_) && (_ = Ro(_, () => {
      for (const d of b)
        d();
    })), C.length && Qt(_) && (_ = ic(_, (d) => {
      let N = d;
      for (const L of C)
        L({
          error: N,
          setError: (J) => {
            N = J;
          }
        });
      throw N;
    })), _;
  } : o), x = c.execute.length, y = xo(x ? async (S) => {
    let A = s, O;
    const C = [], T = S.contextValue || {};
    for (const b of c.execute) {
      const d = await b({
        executeFn: A,
        setExecuteFn: (N) => {
          A = N;
        },
        setResultAndStopExecution: (N) => {
          O = N;
        },
        extendContext: (N) => {
          if (typeof N == "object")
            Object.assign(T, N);
          else
            throw new Error(`Invalid context extension provided! Expected "object", got: "${JSON.stringify(N)}" (${typeof N})`);
        },
        args: S
      });
      if (d != null && d.onExecuteDone && C.push(d.onExecuteDone), O !== void 0)
        break;
    }
    O === void 0 && (O = await A({
      ...S,
      contextValue: T
    }));
    const _ = [], m = [];
    for (const b of C) {
      const d = await b({
        args: S,
        result: O,
        setResult: (N) => {
          O = N;
        }
      });
      d && (d.onNext && _.push(d.onNext), d.onEnd && m.push(d.onEnd));
    }
    return _.length && Qt(O) && (O = Ao(O, async (b) => {
      for (const d of _)
        await d({
          args: S,
          result: b,
          setResult: (N) => {
            b = N;
          }
        });
      return b;
    })), m.length && Qt(O) && (O = Ro(O, () => {
      for (const b of m)
        b();
    })), O;
  } : s);
  if (n = !0, e)
    for (const [S, A] of t.entries())
      A.onSchemaChange && A.onSchemaChange({
        schema: e,
        replaceSchema: (O) => a(O, S)
      });
  return {
    getCurrentSchema() {
      return e;
    },
    init: f,
    parse: g,
    validate: p,
    execute: y,
    subscribe: R,
    contextFactory: v
  };
}
function sc(t) {
  return t != null;
}
function oc(t) {
  const e = t.plugins.filter(sc), n = rc({
    plugins: e
  }), i = (r = {}) => {
    const s = n;
    return s.init(r), {
      parse: s.parse(r),
      validate: s.validate(r),
      contextFactory: s.contextFactory(r),
      execute: s.execute,
      subscribe: s.subscribe,
      schema: s.getCurrentSchema()
    };
  };
  return i._plugins = e, i;
}
const Lo = {
  logFn: console.log
}, ac = (t = Lo) => {
  const e = {
    DEFAULT_OPTIONS: Lo,
    ...t
  };
  return {
    onParse({ extendContext: n, params: i }) {
      e.skipIntrospection && ec(i.source) && n({
        [Zr]: !0
      });
    },
    onExecute({ args: n }) {
      if (!n.contextValue[Zr])
        return e.logFn("execute-start", { args: n }), {
          onExecuteDone: ({ result: i }) => {
            e.logFn("execute-end", { args: n, result: i });
          }
        };
    },
    onSubscribe({ args: n }) {
      if (!n.contextValue[Zr])
        return e.logFn("subscribe-start", { args: n }), {
          onSubscribeResult: ({ result: i }) => {
            e.logFn("subscribe-end", { args: n, result: i });
          }
        };
    }
  };
}, uc = "Unexpected error.";
function lc(t) {
  return t instanceof Error && t.name === "GraphQLError";
}
function Ja(t) {
  return lc(t) ? t.originalError != null ? Ja(t.originalError) : !0 : !1;
}
function cc(t, e, n) {
  const i = new Error(t);
  if (i.name = "GraphQLError", n) {
    const r = e instanceof Error ? { message: e.message, stack: e.stack } : { message: String(e) };
    Object.defineProperty(i, "extensions", {
      get() {
        return r;
      }
    });
  }
  return Object.defineProperty(i, "toJSON", {
    value() {
      return {
        message: i.message,
        extensions: i.extensions
      };
    }
  }), i;
}
const fc = (t) => (e, n) => Ja(e) ? e : cc(n, e, t);
var Pa, Ma;
const dc = ((Ma = (Pa = globalThis.process) == null ? void 0 : Pa.env) == null ? void 0 : Ma.NODE_ENV) === "development", hc = fc(dc), pc = (t, e) => ({ result: n, setResult: i }) => {
  n.errors != null && i({ ...n, errors: n.errors.map((r) => t(r, e)) });
};
function gc(t) {
  const e = (t == null ? void 0 : t.maskError) ?? hc, n = (t == null ? void 0 : t.errorMessage) || uc, i = pc(e, n);
  return {
    onPluginInit(r) {
      r.registerContextErrorHandler(({ error: s, setError: o }) => {
        o(e(s, n));
      });
    },
    onExecute() {
      return {
        onExecuteDone(r) {
          return Fo(r, i);
        }
      };
    },
    onSubscribe() {
      return {
        onSubscribeResult(r) {
          return Fo(r, i);
        },
        onSubscribeError({ error: r, setError: s }) {
          s(e(r, n));
        }
      };
    }
  };
}
const mc = (t) => ({
  async onContextBuilding({ context: e, extendContext: n }) {
    n(await t(e));
  }
}), yc = (t) => ({
  onExecute: ({ setExecuteFn: e }) => {
    t.execute && e(t.execute);
  },
  onParse: ({ setParseFn: e }) => {
    t.parse && e(t.parse);
  },
  onValidate: ({ setValidationFn: e, addValidationRule: n }) => {
    var i;
    t.validate && e(t.validate), (i = t.specifiedRules) == null || i.map(n);
  },
  onSubscribe: ({ setSubscribeFn: e }) => {
    t.subscribe && e(t.subscribe);
  }
}), Ka = Object.freeze({
  major: 16,
  minor: 9,
  patch: 0,
  preReleaseTag: null
});
function ae(t, e) {
  if (!!!t)
    throw new Error(e);
}
function bc(t) {
  return typeof (t == null ? void 0 : t.then) == "function";
}
function Jt(t) {
  return typeof t == "object" && t !== null;
}
function Yt(t, e) {
  if (!!!t)
    throw new Error(
      e ?? "Unexpected invariant triggered."
    );
}
const wc = /\r\n|[\n\r]/g;
function ds(t, e) {
  let n = 0, i = 1;
  for (const r of t.body.matchAll(wc)) {
    if (typeof r.index == "number" || Yt(!1), r.index >= e)
      break;
    n = r.index + r[0].length, i += 1;
  }
  return {
    line: i,
    column: e + 1 - n
  };
}
function Ec(t) {
  return Xa(
    t.source,
    ds(t.source, t.start)
  );
}
function Xa(t, e) {
  const n = t.locationOffset.column - 1, i = "".padStart(n) + t.body, r = e.line - 1, s = t.locationOffset.line - 1, o = e.line + s, a = e.line === 1 ? n : 0, u = e.column + a, c = `${t.name}:${o}:${u}
`, f = i.split(/\r\n|[\n\r]/g), g = f[r];
  if (g.length > 120) {
    const p = Math.floor(u / 80), v = u % 80, w = [];
    for (let R = 0; R < g.length; R += 80)
      w.push(g.slice(R, R + 80));
    return c + Co([
      [`${o} |`, w[0]],
      ...w.slice(1, p + 1).map((R) => ["|", R]),
      ["|", "^".padStart(v)],
      ["|", w[p + 1]]
    ]);
  }
  return c + Co([
    // Lines specified like this: ["prefix", "string"],
    [`${o - 1} |`, f[r - 1]],
    [`${o} |`, g],
    ["|", "^".padStart(u)],
    [`${o + 1} |`, f[r + 1]]
  ]);
}
function Co(t) {
  const e = t.filter(([i, r]) => r !== void 0), n = Math.max(...e.map(([i]) => i.length));
  return e.map(([i, r]) => i.padStart(n) + (r ? " " + r : "")).join(`
`);
}
function vc(t) {
  const e = t[0];
  return e == null || "kind" in e || "length" in e ? {
    nodes: e,
    source: t[1],
    positions: t[2],
    path: t[3],
    originalError: t[4],
    extensions: t[5]
  } : e;
}
let j = class Za extends Error {
  /**
   * An array of `{ line, column }` locations within the source GraphQL document
   * which correspond to this error.
   *
   * Errors during validation often contain multiple locations, for example to
   * point out two things with the same name. Errors during execution include a
   * single location, the field which produced the error.
   *
   * Enumerable, and appears in the result of JSON.stringify().
   */
  /**
   * An array describing the JSON-path into the execution response which
   * corresponds to this error. Only included for errors during execution.
   *
   * Enumerable, and appears in the result of JSON.stringify().
   */
  /**
   * An array of GraphQL AST Nodes corresponding to this error.
   */
  /**
   * The source GraphQL document for the first location of this error.
   *
   * Note that if this Error represents more than one node, the source may not
   * represent nodes after the first node.
   */
  /**
   * An array of character offsets within the source GraphQL document
   * which correspond to this error.
   */
  /**
   * The original error thrown from a field resolver during execution.
   */
  /**
   * Extension fields to add to the formatted error.
   */
  /**
   * @deprecated Please use the `GraphQLErrorOptions` constructor overload instead.
   */
  constructor(e, ...n) {
    var i, r, s;
    const { nodes: o, source: a, positions: u, path: c, originalError: f, extensions: g } = vc(n);
    super(e), this.name = "GraphQLError", this.path = c ?? void 0, this.originalError = f ?? void 0, this.nodes = ko(
      Array.isArray(o) ? o : o ? [o] : void 0
    );
    const p = ko(
      (i = this.nodes) === null || i === void 0 ? void 0 : i.map((w) => w.loc).filter((w) => w != null)
    );
    this.source = a ?? (p == null || (r = p[0]) === null || r === void 0 ? void 0 : r.source), this.positions = u ?? (p == null ? void 0 : p.map((w) => w.start)), this.locations = u && a ? u.map((w) => ds(a, w)) : p == null ? void 0 : p.map((w) => ds(w.source, w.start));
    const v = Jt(
      f == null ? void 0 : f.extensions
    ) ? f == null ? void 0 : f.extensions : void 0;
    this.extensions = (s = g ?? v) !== null && s !== void 0 ? s : /* @__PURE__ */ Object.create(null), Object.defineProperties(this, {
      message: {
        writable: !0,
        enumerable: !0
      },
      name: {
        enumerable: !1
      },
      nodes: {
        enumerable: !1
      },
      source: {
        enumerable: !1
      },
      positions: {
        enumerable: !1
      },
      originalError: {
        enumerable: !1
      }
    }), f != null && f.stack ? Object.defineProperty(this, "stack", {
      value: f.stack,
      writable: !0,
      configurable: !0
    }) : Error.captureStackTrace ? Error.captureStackTrace(this, Za) : Object.defineProperty(this, "stack", {
      value: Error().stack,
      writable: !0,
      configurable: !0
    });
  }
  get [Symbol.toStringTag]() {
    return "GraphQLError";
  }
  toString() {
    let e = this.message;
    if (this.nodes)
      for (const n of this.nodes)
        n.loc && (e += `

` + Ec(n.loc));
    else if (this.source && this.locations)
      for (const n of this.locations)
        e += `

` + Xa(this.source, n);
    return e;
  }
  toJSON() {
    const e = {
      message: this.message
    };
    return this.locations != null && (e.locations = this.locations), this.path != null && (e.path = this.path), this.extensions != null && Object.keys(this.extensions).length > 0 && (e.extensions = this.extensions), e;
  }
};
function ko(t) {
  return t === void 0 || t.length === 0 ? void 0 : t;
}
function $e(t, e, n) {
  return new j(`Syntax Error: ${n}`, {
    source: t,
    positions: [e]
  });
}
class Tc {
  /**
   * The character offset at which this Node begins.
   */
  /**
   * The character offset at which this Node ends.
   */
  /**
   * The Token at which this Node begins.
   */
  /**
   * The Token at which this Node ends.
   */
  /**
   * The Source document the AST represents.
   */
  constructor(e, n, i) {
    this.start = e.start, this.end = n.end, this.startToken = e, this.endToken = n, this.source = i;
  }
  get [Symbol.toStringTag]() {
    return "Location";
  }
  toJSON() {
    return {
      start: this.start,
      end: this.end
    };
  }
}
class eu {
  /**
   * The kind of Token.
   */
  /**
   * The character offset at which this Node begins.
   */
  /**
   * The character offset at which this Node ends.
   */
  /**
   * The 1-indexed line number on which this Token appears.
   */
  /**
   * The 1-indexed column number at which this Token begins.
   */
  /**
   * For non-punctuation tokens, represents the interpreted value of the token.
   *
   * Note: is undefined for punctuation tokens, but typed as string for
   * convenience in the parser.
   */
  /**
   * Tokens exist as nodes in a double-linked-list amongst all tokens
   * including ignored tokens. <SOF> is always the first node and <EOF>
   * the last.
   */
  constructor(e, n, i, r, s, o) {
    this.kind = e, this.start = n, this.end = i, this.line = r, this.column = s, this.value = o, this.prev = null, this.next = null;
  }
  get [Symbol.toStringTag]() {
    return "Token";
  }
  toJSON() {
    return {
      kind: this.kind,
      value: this.value,
      line: this.line,
      column: this.column
    };
  }
}
const tu = {
  Name: [],
  Document: ["definitions"],
  OperationDefinition: [
    "name",
    "variableDefinitions",
    "directives",
    "selectionSet"
  ],
  VariableDefinition: ["variable", "type", "defaultValue", "directives"],
  Variable: ["name"],
  SelectionSet: ["selections"],
  Field: ["alias", "name", "arguments", "directives", "selectionSet"],
  Argument: ["name", "value"],
  FragmentSpread: ["name", "directives"],
  InlineFragment: ["typeCondition", "directives", "selectionSet"],
  FragmentDefinition: [
    "name",
    // Note: fragment variable definitions are deprecated and will removed in v17.0.0
    "variableDefinitions",
    "typeCondition",
    "directives",
    "selectionSet"
  ],
  IntValue: [],
  FloatValue: [],
  StringValue: [],
  BooleanValue: [],
  NullValue: [],
  EnumValue: [],
  ListValue: ["values"],
  ObjectValue: ["fields"],
  ObjectField: ["name", "value"],
  Directive: ["name", "arguments"],
  NamedType: ["name"],
  ListType: ["type"],
  NonNullType: ["type"],
  SchemaDefinition: ["description", "directives", "operationTypes"],
  OperationTypeDefinition: ["type"],
  ScalarTypeDefinition: ["description", "name", "directives"],
  ObjectTypeDefinition: [
    "description",
    "name",
    "interfaces",
    "directives",
    "fields"
  ],
  FieldDefinition: ["description", "name", "arguments", "type", "directives"],
  InputValueDefinition: [
    "description",
    "name",
    "type",
    "defaultValue",
    "directives"
  ],
  InterfaceTypeDefinition: [
    "description",
    "name",
    "interfaces",
    "directives",
    "fields"
  ],
  UnionTypeDefinition: ["description", "name", "directives", "types"],
  EnumTypeDefinition: ["description", "name", "directives", "values"],
  EnumValueDefinition: ["description", "name", "directives"],
  InputObjectTypeDefinition: ["description", "name", "directives", "fields"],
  DirectiveDefinition: ["description", "name", "arguments", "locations"],
  SchemaExtension: ["directives", "operationTypes"],
  ScalarTypeExtension: ["name", "directives"],
  ObjectTypeExtension: ["name", "interfaces", "directives", "fields"],
  InterfaceTypeExtension: ["name", "interfaces", "directives", "fields"],
  UnionTypeExtension: ["name", "directives", "types"],
  EnumTypeExtension: ["name", "directives", "values"],
  InputObjectTypeExtension: ["name", "directives", "fields"]
}, Sc = new Set(Object.keys(tu));
function hs(t) {
  const e = t == null ? void 0 : t.kind;
  return typeof e == "string" && Sc.has(e);
}
var Je;
(function(t) {
  t.QUERY = "query", t.MUTATION = "mutation", t.SUBSCRIPTION = "subscription";
})(Je || (Je = {}));
var K;
(function(t) {
  t.QUERY = "QUERY", t.MUTATION = "MUTATION", t.SUBSCRIPTION = "SUBSCRIPTION", t.FIELD = "FIELD", t.FRAGMENT_DEFINITION = "FRAGMENT_DEFINITION", t.FRAGMENT_SPREAD = "FRAGMENT_SPREAD", t.INLINE_FRAGMENT = "INLINE_FRAGMENT", t.VARIABLE_DEFINITION = "VARIABLE_DEFINITION", t.SCHEMA = "SCHEMA", t.SCALAR = "SCALAR", t.OBJECT = "OBJECT", t.FIELD_DEFINITION = "FIELD_DEFINITION", t.ARGUMENT_DEFINITION = "ARGUMENT_DEFINITION", t.INTERFACE = "INTERFACE", t.UNION = "UNION", t.ENUM = "ENUM", t.ENUM_VALUE = "ENUM_VALUE", t.INPUT_OBJECT = "INPUT_OBJECT", t.INPUT_FIELD_DEFINITION = "INPUT_FIELD_DEFINITION";
})(K || (K = {}));
var I;
(function(t) {
  t.NAME = "Name", t.DOCUMENT = "Document", t.OPERATION_DEFINITION = "OperationDefinition", t.VARIABLE_DEFINITION = "VariableDefinition", t.SELECTION_SET = "SelectionSet", t.FIELD = "Field", t.ARGUMENT = "Argument", t.FRAGMENT_SPREAD = "FragmentSpread", t.INLINE_FRAGMENT = "InlineFragment", t.FRAGMENT_DEFINITION = "FragmentDefinition", t.VARIABLE = "Variable", t.INT = "IntValue", t.FLOAT = "FloatValue", t.STRING = "StringValue", t.BOOLEAN = "BooleanValue", t.NULL = "NullValue", t.ENUM = "EnumValue", t.LIST = "ListValue", t.OBJECT = "ObjectValue", t.OBJECT_FIELD = "ObjectField", t.DIRECTIVE = "Directive", t.NAMED_TYPE = "NamedType", t.LIST_TYPE = "ListType", t.NON_NULL_TYPE = "NonNullType", t.SCHEMA_DEFINITION = "SchemaDefinition", t.OPERATION_TYPE_DEFINITION = "OperationTypeDefinition", t.SCALAR_TYPE_DEFINITION = "ScalarTypeDefinition", t.OBJECT_TYPE_DEFINITION = "ObjectTypeDefinition", t.FIELD_DEFINITION = "FieldDefinition", t.INPUT_VALUE_DEFINITION = "InputValueDefinition", t.INTERFACE_TYPE_DEFINITION = "InterfaceTypeDefinition", t.UNION_TYPE_DEFINITION = "UnionTypeDefinition", t.ENUM_TYPE_DEFINITION = "EnumTypeDefinition", t.ENUM_VALUE_DEFINITION = "EnumValueDefinition", t.INPUT_OBJECT_TYPE_DEFINITION = "InputObjectTypeDefinition", t.DIRECTIVE_DEFINITION = "DirectiveDefinition", t.SCHEMA_EXTENSION = "SchemaExtension", t.SCALAR_TYPE_EXTENSION = "ScalarTypeExtension", t.OBJECT_TYPE_EXTENSION = "ObjectTypeExtension", t.INTERFACE_TYPE_EXTENSION = "InterfaceTypeExtension", t.UNION_TYPE_EXTENSION = "UnionTypeExtension", t.ENUM_TYPE_EXTENSION = "EnumTypeExtension", t.INPUT_OBJECT_TYPE_EXTENSION = "InputObjectTypeExtension";
})(I || (I = {}));
function ps(t) {
  return t === 9 || t === 32;
}
function Ci(t) {
  return t >= 48 && t <= 57;
}
function nu(t) {
  return t >= 97 && t <= 122 || // A-Z
  t >= 65 && t <= 90;
}
function Bs(t) {
  return nu(t) || t === 95;
}
function iu(t) {
  return nu(t) || Ci(t) || t === 95;
}
function _c(t) {
  var e;
  let n = Number.MAX_SAFE_INTEGER, i = null, r = -1;
  for (let o = 0; o < t.length; ++o) {
    var s;
    const a = t[o], u = Ic(a);
    u !== a.length && (i = (s = i) !== null && s !== void 0 ? s : o, r = o, o !== 0 && u < n && (n = u));
  }
  return t.map((o, a) => a === 0 ? o : o.slice(n)).slice(
    (e = i) !== null && e !== void 0 ? e : 0,
    r + 1
  );
}
function Ic(t) {
  let e = 0;
  for (; e < t.length && ps(t.charCodeAt(e)); )
    ++e;
  return e;
}
function Oc(t, e) {
  const n = t.replace(/"""/g, '\\"""'), i = n.split(/\r\n|[\n\r]/g), r = i.length === 1, s = i.length > 1 && i.slice(1).every((v) => v.length === 0 || ps(v.charCodeAt(0))), o = n.endsWith('\\"""'), a = t.endsWith('"') && !o, u = t.endsWith("\\"), c = a || u, f = (
    // add leading and trailing new lines only if it improves readability
    !r || t.length > 70 || c || s || o
  );
  let g = "";
  const p = r && ps(t.charCodeAt(0));
  return (f && !p || s) && (g += `
`), g += n, (f || c) && (g += `
`), '"""' + g + '"""';
}
var D;
(function(t) {
  t.SOF = "<SOF>", t.EOF = "<EOF>", t.BANG = "!", t.DOLLAR = "$", t.AMP = "&", t.PAREN_L = "(", t.PAREN_R = ")", t.SPREAD = "...", t.COLON = ":", t.EQUALS = "=", t.AT = "@", t.BRACKET_L = "[", t.BRACKET_R = "]", t.BRACE_L = "{", t.PIPE = "|", t.BRACE_R = "}", t.NAME = "Name", t.INT = "Int", t.FLOAT = "Float", t.STRING = "String", t.BLOCK_STRING = "BlockString", t.COMMENT = "Comment";
})(D || (D = {}));
class Nc {
  /**
   * The previously focused non-ignored token.
   */
  /**
   * The currently focused non-ignored token.
   */
  /**
   * The (1-indexed) line containing the current token.
   */
  /**
   * The character offset at which the current line begins.
   */
  constructor(e) {
    const n = new eu(D.SOF, 0, 0, 0, 0);
    this.source = e, this.lastToken = n, this.token = n, this.line = 1, this.lineStart = 0;
  }
  get [Symbol.toStringTag]() {
    return "Lexer";
  }
  /**
   * Advances the token stream to the next non-ignored token.
   */
  advance() {
    return this.lastToken = this.token, this.token = this.lookahead();
  }
  /**
   * Looks ahead and returns the next non-ignored token, but does not change
   * the state of Lexer.
   */
  lookahead() {
    let e = this.token;
    if (e.kind !== D.EOF)
      do
        if (e.next)
          e = e.next;
        else {
          const n = xc(this, e.end);
          e.next = n, n.prev = e, e = n;
        }
      while (e.kind === D.COMMENT);
    return e;
  }
}
function Ac(t) {
  return t === D.BANG || t === D.DOLLAR || t === D.AMP || t === D.PAREN_L || t === D.PAREN_R || t === D.SPREAD || t === D.COLON || t === D.EQUALS || t === D.AT || t === D.BRACKET_L || t === D.BRACKET_R || t === D.BRACE_L || t === D.PIPE || t === D.BRACE_R;
}
function ci(t) {
  return t >= 0 && t <= 55295 || t >= 57344 && t <= 1114111;
}
function kr(t, e) {
  return ru(t.charCodeAt(e)) && su(t.charCodeAt(e + 1));
}
function ru(t) {
  return t >= 55296 && t <= 56319;
}
function su(t) {
  return t >= 56320 && t <= 57343;
}
function kn(t, e) {
  const n = t.source.body.codePointAt(e);
  if (n === void 0)
    return D.EOF;
  if (n >= 32 && n <= 126) {
    const i = String.fromCodePoint(n);
    return i === '"' ? `'"'` : `"${i}"`;
  }
  return "U+" + n.toString(16).toUpperCase().padStart(4, "0");
}
function _e(t, e, n, i, r) {
  const s = t.line, o = 1 + n - t.lineStart;
  return new eu(e, n, i, s, o, r);
}
function xc(t, e) {
  const n = t.source.body, i = n.length;
  let r = e;
  for (; r < i; ) {
    const s = n.charCodeAt(r);
    switch (s) {
      case 65279:
      case 9:
      case 32:
      case 44:
        ++r;
        continue;
      case 10:
        ++r, ++t.line, t.lineStart = r;
        continue;
      case 13:
        n.charCodeAt(r + 1) === 10 ? r += 2 : ++r, ++t.line, t.lineStart = r;
        continue;
      case 35:
        return Fc(t, r);
      case 33:
        return _e(t, D.BANG, r, r + 1);
      case 36:
        return _e(t, D.DOLLAR, r, r + 1);
      case 38:
        return _e(t, D.AMP, r, r + 1);
      case 40:
        return _e(t, D.PAREN_L, r, r + 1);
      case 41:
        return _e(t, D.PAREN_R, r, r + 1);
      case 46:
        if (n.charCodeAt(r + 1) === 46 && n.charCodeAt(r + 2) === 46)
          return _e(t, D.SPREAD, r, r + 3);
        break;
      case 58:
        return _e(t, D.COLON, r, r + 1);
      case 61:
        return _e(t, D.EQUALS, r, r + 1);
      case 64:
        return _e(t, D.AT, r, r + 1);
      case 91:
        return _e(t, D.BRACKET_L, r, r + 1);
      case 93:
        return _e(t, D.BRACKET_R, r, r + 1);
      case 123:
        return _e(t, D.BRACE_L, r, r + 1);
      case 124:
        return _e(t, D.PIPE, r, r + 1);
      case 125:
        return _e(t, D.BRACE_R, r, r + 1);
      case 34:
        return n.charCodeAt(r + 1) === 34 && n.charCodeAt(r + 2) === 34 ? $c(t, r) : Lc(t, r);
    }
    if (Ci(s) || s === 45)
      return Rc(t, r, s);
    if (Bs(s))
      return jc(t, r);
    throw $e(
      t.source,
      r,
      s === 39 ? `Unexpected single quote character ('), did you mean to use a double quote (")?` : ci(s) || kr(n, r) ? `Unexpected character: ${kn(t, r)}.` : `Invalid character: ${kn(t, r)}.`
    );
  }
  return _e(t, D.EOF, i, i);
}
function Fc(t, e) {
  const n = t.source.body, i = n.length;
  let r = e + 1;
  for (; r < i; ) {
    const s = n.charCodeAt(r);
    if (s === 10 || s === 13)
      break;
    if (ci(s))
      ++r;
    else if (kr(n, r))
      r += 2;
    else
      break;
  }
  return _e(
    t,
    D.COMMENT,
    e,
    r,
    n.slice(e + 1, r)
  );
}
function Rc(t, e, n) {
  const i = t.source.body;
  let r = e, s = n, o = !1;
  if (s === 45 && (s = i.charCodeAt(++r)), s === 48) {
    if (s = i.charCodeAt(++r), Ci(s))
      throw $e(
        t.source,
        r,
        `Invalid number, unexpected digit after 0: ${kn(
          t,
          r
        )}.`
      );
  } else
    r = es(t, r, s), s = i.charCodeAt(r);
  if (s === 46 && (o = !0, s = i.charCodeAt(++r), r = es(t, r, s), s = i.charCodeAt(r)), (s === 69 || s === 101) && (o = !0, s = i.charCodeAt(++r), (s === 43 || s === 45) && (s = i.charCodeAt(++r)), r = es(t, r, s), s = i.charCodeAt(r)), s === 46 || Bs(s))
    throw $e(
      t.source,
      r,
      `Invalid number, expected digit but got: ${kn(
        t,
        r
      )}.`
    );
  return _e(
    t,
    o ? D.FLOAT : D.INT,
    e,
    r,
    i.slice(e, r)
  );
}
function es(t, e, n) {
  if (!Ci(n))
    throw $e(
      t.source,
      e,
      `Invalid number, expected digit but got: ${kn(
        t,
        e
      )}.`
    );
  const i = t.source.body;
  let r = e + 1;
  for (; Ci(i.charCodeAt(r)); )
    ++r;
  return r;
}
function Lc(t, e) {
  const n = t.source.body, i = n.length;
  let r = e + 1, s = r, o = "";
  for (; r < i; ) {
    const a = n.charCodeAt(r);
    if (a === 34)
      return o += n.slice(s, r), _e(t, D.STRING, e, r + 1, o);
    if (a === 92) {
      o += n.slice(s, r);
      const u = n.charCodeAt(r + 1) === 117 ? n.charCodeAt(r + 2) === 123 ? Cc(t, r) : kc(t, r) : Dc(t, r);
      o += u.value, r += u.size, s = r;
      continue;
    }
    if (a === 10 || a === 13)
      break;
    if (ci(a))
      ++r;
    else if (kr(n, r))
      r += 2;
    else
      throw $e(
        t.source,
        r,
        `Invalid character within String: ${kn(
          t,
          r
        )}.`
      );
  }
  throw $e(t.source, r, "Unterminated string.");
}
function Cc(t, e) {
  const n = t.source.body;
  let i = 0, r = 3;
  for (; r < 12; ) {
    const s = n.charCodeAt(e + r++);
    if (s === 125) {
      if (r < 5 || !ci(i))
        break;
      return {
        value: String.fromCodePoint(i),
        size: r
      };
    }
    if (i = i << 4 | Ei(s), i < 0)
      break;
  }
  throw $e(
    t.source,
    e,
    `Invalid Unicode escape sequence: "${n.slice(
      e,
      e + r
    )}".`
  );
}
function kc(t, e) {
  const n = t.source.body, i = Do(n, e + 2);
  if (ci(i))
    return {
      value: String.fromCodePoint(i),
      size: 6
    };
  if (ru(i) && n.charCodeAt(e + 6) === 92 && n.charCodeAt(e + 7) === 117) {
    const r = Do(n, e + 8);
    if (su(r))
      return {
        value: String.fromCodePoint(i, r),
        size: 12
      };
  }
  throw $e(
    t.source,
    e,
    `Invalid Unicode escape sequence: "${n.slice(e, e + 6)}".`
  );
}
function Do(t, e) {
  return Ei(t.charCodeAt(e)) << 12 | Ei(t.charCodeAt(e + 1)) << 8 | Ei(t.charCodeAt(e + 2)) << 4 | Ei(t.charCodeAt(e + 3));
}
function Ei(t) {
  return t >= 48 && t <= 57 ? t - 48 : t >= 65 && t <= 70 ? t - 55 : t >= 97 && t <= 102 ? t - 87 : -1;
}
function Dc(t, e) {
  const n = t.source.body;
  switch (n.charCodeAt(e + 1)) {
    case 34:
      return {
        value: '"',
        size: 2
      };
    case 92:
      return {
        value: "\\",
        size: 2
      };
    case 47:
      return {
        value: "/",
        size: 2
      };
    case 98:
      return {
        value: "\b",
        size: 2
      };
    case 102:
      return {
        value: "\f",
        size: 2
      };
    case 110:
      return {
        value: `
`,
        size: 2
      };
    case 114:
      return {
        value: "\r",
        size: 2
      };
    case 116:
      return {
        value: "	",
        size: 2
      };
  }
  throw $e(
    t.source,
    e,
    `Invalid character escape sequence: "${n.slice(
      e,
      e + 2
    )}".`
  );
}
function $c(t, e) {
  const n = t.source.body, i = n.length;
  let r = t.lineStart, s = e + 3, o = s, a = "";
  const u = [];
  for (; s < i; ) {
    const c = n.charCodeAt(s);
    if (c === 34 && n.charCodeAt(s + 1) === 34 && n.charCodeAt(s + 2) === 34) {
      a += n.slice(o, s), u.push(a);
      const f = _e(
        t,
        D.BLOCK_STRING,
        e,
        s + 3,
        // Return a string of the lines joined with U+000A.
        _c(u).join(`
`)
      );
      return t.line += u.length - 1, t.lineStart = r, f;
    }
    if (c === 92 && n.charCodeAt(s + 1) === 34 && n.charCodeAt(s + 2) === 34 && n.charCodeAt(s + 3) === 34) {
      a += n.slice(o, s), o = s + 1, s += 4;
      continue;
    }
    if (c === 10 || c === 13) {
      a += n.slice(o, s), u.push(a), c === 13 && n.charCodeAt(s + 1) === 10 ? s += 2 : ++s, a = "", o = s, r = s;
      continue;
    }
    if (ci(c))
      ++s;
    else if (kr(n, s))
      s += 2;
    else
      throw $e(
        t.source,
        s,
        `Invalid character within String: ${kn(
          t,
          s
        )}.`
      );
  }
  throw $e(t.source, s, "Unterminated string.");
}
function jc(t, e) {
  const n = t.source.body, i = n.length;
  let r = e + 1;
  for (; r < i; ) {
    const s = n.charCodeAt(r);
    if (iu(s))
      ++r;
    else
      break;
  }
  return _e(
    t,
    D.NAME,
    e,
    r,
    n.slice(e, r)
  );
}
const Pc = 10, ou = 2;
function G(t) {
  return Dr(t, []);
}
function Dr(t, e) {
  switch (typeof t) {
    case "string":
      return JSON.stringify(t);
    case "function":
      return t.name ? `[function ${t.name}]` : "[function]";
    case "object":
      return Mc(t, e);
    default:
      return String(t);
  }
}
function Mc(t, e) {
  if (t === null)
    return "null";
  if (e.includes(t))
    return "[Circular]";
  const n = [...e, t];
  if (Uc(t)) {
    const i = t.toJSON();
    if (i !== t)
      return typeof i == "string" ? i : Dr(i, n);
  } else if (Array.isArray(t))
    return Bc(t, n);
  return Vc(t, n);
}
function Uc(t) {
  return typeof t.toJSON == "function";
}
function Vc(t, e) {
  const n = Object.entries(t);
  return n.length === 0 ? "{}" : e.length > ou ? "[" + Gc(t) + "]" : "{ " + n.map(
    ([r, s]) => r + ": " + Dr(s, e)
  ).join(", ") + " }";
}
function Bc(t, e) {
  if (t.length === 0)
    return "[]";
  if (e.length > ou)
    return "[Array]";
  const n = Math.min(Pc, t.length), i = t.length - n, r = [];
  for (let s = 0; s < n; ++s)
    r.push(Dr(t[s], e));
  return i === 1 ? r.push("... 1 more item") : i > 1 && r.push(`... ${i} more items`), "[" + r.join(", ") + "]";
}
function Gc(t) {
  const e = Object.prototype.toString.call(t).replace(/^\[object /, "").replace(/]$/, "");
  if (e === "Object" && typeof t.constructor == "function") {
    const n = t.constructor.name;
    if (typeof n == "string" && n !== "")
      return n;
  }
  return e;
}
const qc = globalThis.process && // eslint-disable-next-line no-undef
process.env.NODE_ENV === "production", qt = (
  /* c8 ignore next 6 */
  // FIXME: https://github.com/graphql/graphql-js/issues/2317
  qc ? function(e, n) {
    return e instanceof n;
  } : function(e, n) {
    if (e instanceof n)
      return !0;
    if (typeof e == "object" && e !== null) {
      var i;
      const r = n.prototype[Symbol.toStringTag], s = (
        // We still need to support constructor's name to detect conflicts with older versions of this library.
        Symbol.toStringTag in e ? e[Symbol.toStringTag] : (i = e.constructor) === null || i === void 0 ? void 0 : i.name
      );
      if (r === s) {
        const o = G(e);
        throw new Error(`Cannot use ${r} "${o}" from another module or realm.

Ensure that there is only one instance of "graphql" in the node_modules
directory. If different versions of "graphql" are the dependencies of other
relied on modules, use "resolutions" to ensure only one version is installed.

https://yarnpkg.com/en/docs/selective-version-resolutions

Duplicate "graphql" modules cannot be used at the same time since different
versions may have different capabilities and behavior. The data from one
version used in the function from another could produce confusing and
spurious results.`);
      }
    }
    return !1;
  }
);
class au {
  constructor(e, n = "GraphQL request", i = {
    line: 1,
    column: 1
  }) {
    typeof e == "string" || ae(!1, `Body must be a string. Received: ${G(e)}.`), this.body = e, this.name = n, this.locationOffset = i, this.locationOffset.line > 0 || ae(
      !1,
      "line in locationOffset is 1-indexed and must be positive."
    ), this.locationOffset.column > 0 || ae(
      !1,
      "column in locationOffset is 1-indexed and must be positive."
    );
  }
  get [Symbol.toStringTag]() {
    return "Source";
  }
}
function zc(t) {
  return qt(t, au);
}
function Qc(t, e) {
  return new Wc(t, e).parseDocument();
}
class Wc {
  constructor(e, n = {}) {
    const i = zc(e) ? e : new au(e);
    this._lexer = new Nc(i), this._options = n, this._tokenCounter = 0;
  }
  /**
   * Converts a name lex token into a name parse node.
   */
  parseName() {
    const e = this.expectToken(D.NAME);
    return this.node(e, {
      kind: I.NAME,
      value: e.value
    });
  }
  // Implements the parsing rules in the Document section.
  /**
   * Document : Definition+
   */
  parseDocument() {
    return this.node(this._lexer.token, {
      kind: I.DOCUMENT,
      definitions: this.many(
        D.SOF,
        this.parseDefinition,
        D.EOF
      )
    });
  }
  /**
   * Definition :
   *   - ExecutableDefinition
   *   - TypeSystemDefinition
   *   - TypeSystemExtension
   *
   * ExecutableDefinition :
   *   - OperationDefinition
   *   - FragmentDefinition
   *
   * TypeSystemDefinition :
   *   - SchemaDefinition
   *   - TypeDefinition
   *   - DirectiveDefinition
   *
   * TypeDefinition :
   *   - ScalarTypeDefinition
   *   - ObjectTypeDefinition
   *   - InterfaceTypeDefinition
   *   - UnionTypeDefinition
   *   - EnumTypeDefinition
   *   - InputObjectTypeDefinition
   */
  parseDefinition() {
    if (this.peek(D.BRACE_L))
      return this.parseOperationDefinition();
    const e = this.peekDescription(), n = e ? this._lexer.lookahead() : this._lexer.token;
    if (n.kind === D.NAME) {
      switch (n.value) {
        case "schema":
          return this.parseSchemaDefinition();
        case "scalar":
          return this.parseScalarTypeDefinition();
        case "type":
          return this.parseObjectTypeDefinition();
        case "interface":
          return this.parseInterfaceTypeDefinition();
        case "union":
          return this.parseUnionTypeDefinition();
        case "enum":
          return this.parseEnumTypeDefinition();
        case "input":
          return this.parseInputObjectTypeDefinition();
        case "directive":
          return this.parseDirectiveDefinition();
      }
      if (e)
        throw $e(
          this._lexer.source,
          this._lexer.token.start,
          "Unexpected description, descriptions are supported only on type definitions."
        );
      switch (n.value) {
        case "query":
        case "mutation":
        case "subscription":
          return this.parseOperationDefinition();
        case "fragment":
          return this.parseFragmentDefinition();
        case "extend":
          return this.parseTypeSystemExtension();
      }
    }
    throw this.unexpected(n);
  }
  // Implements the parsing rules in the Operations section.
  /**
   * OperationDefinition :
   *  - SelectionSet
   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet
   */
  parseOperationDefinition() {
    const e = this._lexer.token;
    if (this.peek(D.BRACE_L))
      return this.node(e, {
        kind: I.OPERATION_DEFINITION,
        operation: Je.QUERY,
        name: void 0,
        variableDefinitions: [],
        directives: [],
        selectionSet: this.parseSelectionSet()
      });
    const n = this.parseOperationType();
    let i;
    return this.peek(D.NAME) && (i = this.parseName()), this.node(e, {
      kind: I.OPERATION_DEFINITION,
      operation: n,
      name: i,
      variableDefinitions: this.parseVariableDefinitions(),
      directives: this.parseDirectives(!1),
      selectionSet: this.parseSelectionSet()
    });
  }
  /**
   * OperationType : one of query mutation subscription
   */
  parseOperationType() {
    const e = this.expectToken(D.NAME);
    switch (e.value) {
      case "query":
        return Je.QUERY;
      case "mutation":
        return Je.MUTATION;
      case "subscription":
        return Je.SUBSCRIPTION;
    }
    throw this.unexpected(e);
  }
  /**
   * VariableDefinitions : ( VariableDefinition+ )
   */
  parseVariableDefinitions() {
    return this.optionalMany(
      D.PAREN_L,
      this.parseVariableDefinition,
      D.PAREN_R
    );
  }
  /**
   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?
   */
  parseVariableDefinition() {
    return this.node(this._lexer.token, {
      kind: I.VARIABLE_DEFINITION,
      variable: this.parseVariable(),
      type: (this.expectToken(D.COLON), this.parseTypeReference()),
      defaultValue: this.expectOptionalToken(D.EQUALS) ? this.parseConstValueLiteral() : void 0,
      directives: this.parseConstDirectives()
    });
  }
  /**
   * Variable : $ Name
   */
  parseVariable() {
    const e = this._lexer.token;
    return this.expectToken(D.DOLLAR), this.node(e, {
      kind: I.VARIABLE,
      name: this.parseName()
    });
  }
  /**
   * ```
   * SelectionSet : { Selection+ }
   * ```
   */
  parseSelectionSet() {
    return this.node(this._lexer.token, {
      kind: I.SELECTION_SET,
      selections: this.many(
        D.BRACE_L,
        this.parseSelection,
        D.BRACE_R
      )
    });
  }
  /**
   * Selection :
   *   - Field
   *   - FragmentSpread
   *   - InlineFragment
   */
  parseSelection() {
    return this.peek(D.SPREAD) ? this.parseFragment() : this.parseField();
  }
  /**
   * Field : Alias? Name Arguments? Directives? SelectionSet?
   *
   * Alias : Name :
   */
  parseField() {
    const e = this._lexer.token, n = this.parseName();
    let i, r;
    return this.expectOptionalToken(D.COLON) ? (i = n, r = this.parseName()) : r = n, this.node(e, {
      kind: I.FIELD,
      alias: i,
      name: r,
      arguments: this.parseArguments(!1),
      directives: this.parseDirectives(!1),
      selectionSet: this.peek(D.BRACE_L) ? this.parseSelectionSet() : void 0
    });
  }
  /**
   * Arguments[Const] : ( Argument[?Const]+ )
   */
  parseArguments(e) {
    const n = e ? this.parseConstArgument : this.parseArgument;
    return this.optionalMany(D.PAREN_L, n, D.PAREN_R);
  }
  /**
   * Argument[Const] : Name : Value[?Const]
   */
  parseArgument(e = !1) {
    const n = this._lexer.token, i = this.parseName();
    return this.expectToken(D.COLON), this.node(n, {
      kind: I.ARGUMENT,
      name: i,
      value: this.parseValueLiteral(e)
    });
  }
  parseConstArgument() {
    return this.parseArgument(!0);
  }
  // Implements the parsing rules in the Fragments section.
  /**
   * Corresponds to both FragmentSpread and InlineFragment in the spec.
   *
   * FragmentSpread : ... FragmentName Directives?
   *
   * InlineFragment : ... TypeCondition? Directives? SelectionSet
   */
  parseFragment() {
    const e = this._lexer.token;
    this.expectToken(D.SPREAD);
    const n = this.expectOptionalKeyword("on");
    return !n && this.peek(D.NAME) ? this.node(e, {
      kind: I.FRAGMENT_SPREAD,
      name: this.parseFragmentName(),
      directives: this.parseDirectives(!1)
    }) : this.node(e, {
      kind: I.INLINE_FRAGMENT,
      typeCondition: n ? this.parseNamedType() : void 0,
      directives: this.parseDirectives(!1),
      selectionSet: this.parseSelectionSet()
    });
  }
  /**
   * FragmentDefinition :
   *   - fragment FragmentName on TypeCondition Directives? SelectionSet
   *
   * TypeCondition : NamedType
   */
  parseFragmentDefinition() {
    const e = this._lexer.token;
    return this.expectKeyword("fragment"), this._options.allowLegacyFragmentVariables === !0 ? this.node(e, {
      kind: I.FRAGMENT_DEFINITION,
      name: this.parseFragmentName(),
      variableDefinitions: this.parseVariableDefinitions(),
      typeCondition: (this.expectKeyword("on"), this.parseNamedType()),
      directives: this.parseDirectives(!1),
      selectionSet: this.parseSelectionSet()
    }) : this.node(e, {
      kind: I.FRAGMENT_DEFINITION,
      name: this.parseFragmentName(),
      typeCondition: (this.expectKeyword("on"), this.parseNamedType()),
      directives: this.parseDirectives(!1),
      selectionSet: this.parseSelectionSet()
    });
  }
  /**
   * FragmentName : Name but not `on`
   */
  parseFragmentName() {
    if (this._lexer.token.value === "on")
      throw this.unexpected();
    return this.parseName();
  }
  // Implements the parsing rules in the Values section.
  /**
   * Value[Const] :
   *   - [~Const] Variable
   *   - IntValue
   *   - FloatValue
   *   - StringValue
   *   - BooleanValue
   *   - NullValue
   *   - EnumValue
   *   - ListValue[?Const]
   *   - ObjectValue[?Const]
   *
   * BooleanValue : one of `true` `false`
   *
   * NullValue : `null`
   *
   * EnumValue : Name but not `true`, `false` or `null`
   */
  parseValueLiteral(e) {
    const n = this._lexer.token;
    switch (n.kind) {
      case D.BRACKET_L:
        return this.parseList(e);
      case D.BRACE_L:
        return this.parseObject(e);
      case D.INT:
        return this.advanceLexer(), this.node(n, {
          kind: I.INT,
          value: n.value
        });
      case D.FLOAT:
        return this.advanceLexer(), this.node(n, {
          kind: I.FLOAT,
          value: n.value
        });
      case D.STRING:
      case D.BLOCK_STRING:
        return this.parseStringLiteral();
      case D.NAME:
        switch (this.advanceLexer(), n.value) {
          case "true":
            return this.node(n, {
              kind: I.BOOLEAN,
              value: !0
            });
          case "false":
            return this.node(n, {
              kind: I.BOOLEAN,
              value: !1
            });
          case "null":
            return this.node(n, {
              kind: I.NULL
            });
          default:
            return this.node(n, {
              kind: I.ENUM,
              value: n.value
            });
        }
      case D.DOLLAR:
        if (e)
          if (this.expectToken(D.DOLLAR), this._lexer.token.kind === D.NAME) {
            const i = this._lexer.token.value;
            throw $e(
              this._lexer.source,
              n.start,
              `Unexpected variable "$${i}" in constant value.`
            );
          } else
            throw this.unexpected(n);
        return this.parseVariable();
      default:
        throw this.unexpected();
    }
  }
  parseConstValueLiteral() {
    return this.parseValueLiteral(!0);
  }
  parseStringLiteral() {
    const e = this._lexer.token;
    return this.advanceLexer(), this.node(e, {
      kind: I.STRING,
      value: e.value,
      block: e.kind === D.BLOCK_STRING
    });
  }
  /**
   * ListValue[Const] :
   *   - [ ]
   *   - [ Value[?Const]+ ]
   */
  parseList(e) {
    const n = () => this.parseValueLiteral(e);
    return this.node(this._lexer.token, {
      kind: I.LIST,
      values: this.any(D.BRACKET_L, n, D.BRACKET_R)
    });
  }
  /**
   * ```
   * ObjectValue[Const] :
   *   - { }
   *   - { ObjectField[?Const]+ }
   * ```
   */
  parseObject(e) {
    const n = () => this.parseObjectField(e);
    return this.node(this._lexer.token, {
      kind: I.OBJECT,
      fields: this.any(D.BRACE_L, n, D.BRACE_R)
    });
  }
  /**
   * ObjectField[Const] : Name : Value[?Const]
   */
  parseObjectField(e) {
    const n = this._lexer.token, i = this.parseName();
    return this.expectToken(D.COLON), this.node(n, {
      kind: I.OBJECT_FIELD,
      name: i,
      value: this.parseValueLiteral(e)
    });
  }
  // Implements the parsing rules in the Directives section.
  /**
   * Directives[Const] : Directive[?Const]+
   */
  parseDirectives(e) {
    const n = [];
    for (; this.peek(D.AT); )
      n.push(this.parseDirective(e));
    return n;
  }
  parseConstDirectives() {
    return this.parseDirectives(!0);
  }
  /**
   * ```
   * Directive[Const] : @ Name Arguments[?Const]?
   * ```
   */
  parseDirective(e) {
    const n = this._lexer.token;
    return this.expectToken(D.AT), this.node(n, {
      kind: I.DIRECTIVE,
      name: this.parseName(),
      arguments: this.parseArguments(e)
    });
  }
  // Implements the parsing rules in the Types section.
  /**
   * Type :
   *   - NamedType
   *   - ListType
   *   - NonNullType
   */
  parseTypeReference() {
    const e = this._lexer.token;
    let n;
    if (this.expectOptionalToken(D.BRACKET_L)) {
      const i = this.parseTypeReference();
      this.expectToken(D.BRACKET_R), n = this.node(e, {
        kind: I.LIST_TYPE,
        type: i
      });
    } else
      n = this.parseNamedType();
    return this.expectOptionalToken(D.BANG) ? this.node(e, {
      kind: I.NON_NULL_TYPE,
      type: n
    }) : n;
  }
  /**
   * NamedType : Name
   */
  parseNamedType() {
    return this.node(this._lexer.token, {
      kind: I.NAMED_TYPE,
      name: this.parseName()
    });
  }
  // Implements the parsing rules in the Type Definition section.
  peekDescription() {
    return this.peek(D.STRING) || this.peek(D.BLOCK_STRING);
  }
  /**
   * Description : StringValue
   */
  parseDescription() {
    if (this.peekDescription())
      return this.parseStringLiteral();
  }
  /**
   * ```
   * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }
   * ```
   */
  parseSchemaDefinition() {
    const e = this._lexer.token, n = this.parseDescription();
    this.expectKeyword("schema");
    const i = this.parseConstDirectives(), r = this.many(
      D.BRACE_L,
      this.parseOperationTypeDefinition,
      D.BRACE_R
    );
    return this.node(e, {
      kind: I.SCHEMA_DEFINITION,
      description: n,
      directives: i,
      operationTypes: r
    });
  }
  /**
   * OperationTypeDefinition : OperationType : NamedType
   */
  parseOperationTypeDefinition() {
    const e = this._lexer.token, n = this.parseOperationType();
    this.expectToken(D.COLON);
    const i = this.parseNamedType();
    return this.node(e, {
      kind: I.OPERATION_TYPE_DEFINITION,
      operation: n,
      type: i
    });
  }
  /**
   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?
   */
  parseScalarTypeDefinition() {
    const e = this._lexer.token, n = this.parseDescription();
    this.expectKeyword("scalar");
    const i = this.parseName(), r = this.parseConstDirectives();
    return this.node(e, {
      kind: I.SCALAR_TYPE_DEFINITION,
      description: n,
      name: i,
      directives: r
    });
  }
  /**
   * ObjectTypeDefinition :
   *   Description?
   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?
   */
  parseObjectTypeDefinition() {
    const e = this._lexer.token, n = this.parseDescription();
    this.expectKeyword("type");
    const i = this.parseName(), r = this.parseImplementsInterfaces(), s = this.parseConstDirectives(), o = this.parseFieldsDefinition();
    return this.node(e, {
      kind: I.OBJECT_TYPE_DEFINITION,
      description: n,
      name: i,
      interfaces: r,
      directives: s,
      fields: o
    });
  }
  /**
   * ImplementsInterfaces :
   *   - implements `&`? NamedType
   *   - ImplementsInterfaces & NamedType
   */
  parseImplementsInterfaces() {
    return this.expectOptionalKeyword("implements") ? this.delimitedMany(D.AMP, this.parseNamedType) : [];
  }
  /**
   * ```
   * FieldsDefinition : { FieldDefinition+ }
   * ```
   */
  parseFieldsDefinition() {
    return this.optionalMany(
      D.BRACE_L,
      this.parseFieldDefinition,
      D.BRACE_R
    );
  }
  /**
   * FieldDefinition :
   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?
   */
  parseFieldDefinition() {
    const e = this._lexer.token, n = this.parseDescription(), i = this.parseName(), r = this.parseArgumentDefs();
    this.expectToken(D.COLON);
    const s = this.parseTypeReference(), o = this.parseConstDirectives();
    return this.node(e, {
      kind: I.FIELD_DEFINITION,
      description: n,
      name: i,
      arguments: r,
      type: s,
      directives: o
    });
  }
  /**
   * ArgumentsDefinition : ( InputValueDefinition+ )
   */
  parseArgumentDefs() {
    return this.optionalMany(
      D.PAREN_L,
      this.parseInputValueDef,
      D.PAREN_R
    );
  }
  /**
   * InputValueDefinition :
   *   - Description? Name : Type DefaultValue? Directives[Const]?
   */
  parseInputValueDef() {
    const e = this._lexer.token, n = this.parseDescription(), i = this.parseName();
    this.expectToken(D.COLON);
    const r = this.parseTypeReference();
    let s;
    this.expectOptionalToken(D.EQUALS) && (s = this.parseConstValueLiteral());
    const o = this.parseConstDirectives();
    return this.node(e, {
      kind: I.INPUT_VALUE_DEFINITION,
      description: n,
      name: i,
      type: r,
      defaultValue: s,
      directives: o
    });
  }
  /**
   * InterfaceTypeDefinition :
   *   - Description? interface Name Directives[Const]? FieldsDefinition?
   */
  parseInterfaceTypeDefinition() {
    const e = this._lexer.token, n = this.parseDescription();
    this.expectKeyword("interface");
    const i = this.parseName(), r = this.parseImplementsInterfaces(), s = this.parseConstDirectives(), o = this.parseFieldsDefinition();
    return this.node(e, {
      kind: I.INTERFACE_TYPE_DEFINITION,
      description: n,
      name: i,
      interfaces: r,
      directives: s,
      fields: o
    });
  }
  /**
   * UnionTypeDefinition :
   *   - Description? union Name Directives[Const]? UnionMemberTypes?
   */
  parseUnionTypeDefinition() {
    const e = this._lexer.token, n = this.parseDescription();
    this.expectKeyword("union");
    const i = this.parseName(), r = this.parseConstDirectives(), s = this.parseUnionMemberTypes();
    return this.node(e, {
      kind: I.UNION_TYPE_DEFINITION,
      description: n,
      name: i,
      directives: r,
      types: s
    });
  }
  /**
   * UnionMemberTypes :
   *   - = `|`? NamedType
   *   - UnionMemberTypes | NamedType
   */
  parseUnionMemberTypes() {
    return this.expectOptionalToken(D.EQUALS) ? this.delimitedMany(D.PIPE, this.parseNamedType) : [];
  }
  /**
   * EnumTypeDefinition :
   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?
   */
  parseEnumTypeDefinition() {
    const e = this._lexer.token, n = this.parseDescription();
    this.expectKeyword("enum");
    const i = this.parseName(), r = this.parseConstDirectives(), s = this.parseEnumValuesDefinition();
    return this.node(e, {
      kind: I.ENUM_TYPE_DEFINITION,
      description: n,
      name: i,
      directives: r,
      values: s
    });
  }
  /**
   * ```
   * EnumValuesDefinition : { EnumValueDefinition+ }
   * ```
   */
  parseEnumValuesDefinition() {
    return this.optionalMany(
      D.BRACE_L,
      this.parseEnumValueDefinition,
      D.BRACE_R
    );
  }
  /**
   * EnumValueDefinition : Description? EnumValue Directives[Const]?
   */
  parseEnumValueDefinition() {
    const e = this._lexer.token, n = this.parseDescription(), i = this.parseEnumValueName(), r = this.parseConstDirectives();
    return this.node(e, {
      kind: I.ENUM_VALUE_DEFINITION,
      description: n,
      name: i,
      directives: r
    });
  }
  /**
   * EnumValue : Name but not `true`, `false` or `null`
   */
  parseEnumValueName() {
    if (this._lexer.token.value === "true" || this._lexer.token.value === "false" || this._lexer.token.value === "null")
      throw $e(
        this._lexer.source,
        this._lexer.token.start,
        `${Ji(
          this._lexer.token
        )} is reserved and cannot be used for an enum value.`
      );
    return this.parseName();
  }
  /**
   * InputObjectTypeDefinition :
   *   - Description? input Name Directives[Const]? InputFieldsDefinition?
   */
  parseInputObjectTypeDefinition() {
    const e = this._lexer.token, n = this.parseDescription();
    this.expectKeyword("input");
    const i = this.parseName(), r = this.parseConstDirectives(), s = this.parseInputFieldsDefinition();
    return this.node(e, {
      kind: I.INPUT_OBJECT_TYPE_DEFINITION,
      description: n,
      name: i,
      directives: r,
      fields: s
    });
  }
  /**
   * ```
   * InputFieldsDefinition : { InputValueDefinition+ }
   * ```
   */
  parseInputFieldsDefinition() {
    return this.optionalMany(
      D.BRACE_L,
      this.parseInputValueDef,
      D.BRACE_R
    );
  }
  /**
   * TypeSystemExtension :
   *   - SchemaExtension
   *   - TypeExtension
   *
   * TypeExtension :
   *   - ScalarTypeExtension
   *   - ObjectTypeExtension
   *   - InterfaceTypeExtension
   *   - UnionTypeExtension
   *   - EnumTypeExtension
   *   - InputObjectTypeDefinition
   */
  parseTypeSystemExtension() {
    const e = this._lexer.lookahead();
    if (e.kind === D.NAME)
      switch (e.value) {
        case "schema":
          return this.parseSchemaExtension();
        case "scalar":
          return this.parseScalarTypeExtension();
        case "type":
          return this.parseObjectTypeExtension();
        case "interface":
          return this.parseInterfaceTypeExtension();
        case "union":
          return this.parseUnionTypeExtension();
        case "enum":
          return this.parseEnumTypeExtension();
        case "input":
          return this.parseInputObjectTypeExtension();
      }
    throw this.unexpected(e);
  }
  /**
   * ```
   * SchemaExtension :
   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }
   *  - extend schema Directives[Const]
   * ```
   */
  parseSchemaExtension() {
    const e = this._lexer.token;
    this.expectKeyword("extend"), this.expectKeyword("schema");
    const n = this.parseConstDirectives(), i = this.optionalMany(
      D.BRACE_L,
      this.parseOperationTypeDefinition,
      D.BRACE_R
    );
    if (n.length === 0 && i.length === 0)
      throw this.unexpected();
    return this.node(e, {
      kind: I.SCHEMA_EXTENSION,
      directives: n,
      operationTypes: i
    });
  }
  /**
   * ScalarTypeExtension :
   *   - extend scalar Name Directives[Const]
   */
  parseScalarTypeExtension() {
    const e = this._lexer.token;
    this.expectKeyword("extend"), this.expectKeyword("scalar");
    const n = this.parseName(), i = this.parseConstDirectives();
    if (i.length === 0)
      throw this.unexpected();
    return this.node(e, {
      kind: I.SCALAR_TYPE_EXTENSION,
      name: n,
      directives: i
    });
  }
  /**
   * ObjectTypeExtension :
   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition
   *  - extend type Name ImplementsInterfaces? Directives[Const]
   *  - extend type Name ImplementsInterfaces
   */
  parseObjectTypeExtension() {
    const e = this._lexer.token;
    this.expectKeyword("extend"), this.expectKeyword("type");
    const n = this.parseName(), i = this.parseImplementsInterfaces(), r = this.parseConstDirectives(), s = this.parseFieldsDefinition();
    if (i.length === 0 && r.length === 0 && s.length === 0)
      throw this.unexpected();
    return this.node(e, {
      kind: I.OBJECT_TYPE_EXTENSION,
      name: n,
      interfaces: i,
      directives: r,
      fields: s
    });
  }
  /**
   * InterfaceTypeExtension :
   *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition
   *  - extend interface Name ImplementsInterfaces? Directives[Const]
   *  - extend interface Name ImplementsInterfaces
   */
  parseInterfaceTypeExtension() {
    const e = this._lexer.token;
    this.expectKeyword("extend"), this.expectKeyword("interface");
    const n = this.parseName(), i = this.parseImplementsInterfaces(), r = this.parseConstDirectives(), s = this.parseFieldsDefinition();
    if (i.length === 0 && r.length === 0 && s.length === 0)
      throw this.unexpected();
    return this.node(e, {
      kind: I.INTERFACE_TYPE_EXTENSION,
      name: n,
      interfaces: i,
      directives: r,
      fields: s
    });
  }
  /**
   * UnionTypeExtension :
   *   - extend union Name Directives[Const]? UnionMemberTypes
   *   - extend union Name Directives[Const]
   */
  parseUnionTypeExtension() {
    const e = this._lexer.token;
    this.expectKeyword("extend"), this.expectKeyword("union");
    const n = this.parseName(), i = this.parseConstDirectives(), r = this.parseUnionMemberTypes();
    if (i.length === 0 && r.length === 0)
      throw this.unexpected();
    return this.node(e, {
      kind: I.UNION_TYPE_EXTENSION,
      name: n,
      directives: i,
      types: r
    });
  }
  /**
   * EnumTypeExtension :
   *   - extend enum Name Directives[Const]? EnumValuesDefinition
   *   - extend enum Name Directives[Const]
   */
  parseEnumTypeExtension() {
    const e = this._lexer.token;
    this.expectKeyword("extend"), this.expectKeyword("enum");
    const n = this.parseName(), i = this.parseConstDirectives(), r = this.parseEnumValuesDefinition();
    if (i.length === 0 && r.length === 0)
      throw this.unexpected();
    return this.node(e, {
      kind: I.ENUM_TYPE_EXTENSION,
      name: n,
      directives: i,
      values: r
    });
  }
  /**
   * InputObjectTypeExtension :
   *   - extend input Name Directives[Const]? InputFieldsDefinition
   *   - extend input Name Directives[Const]
   */
  parseInputObjectTypeExtension() {
    const e = this._lexer.token;
    this.expectKeyword("extend"), this.expectKeyword("input");
    const n = this.parseName(), i = this.parseConstDirectives(), r = this.parseInputFieldsDefinition();
    if (i.length === 0 && r.length === 0)
      throw this.unexpected();
    return this.node(e, {
      kind: I.INPUT_OBJECT_TYPE_EXTENSION,
      name: n,
      directives: i,
      fields: r
    });
  }
  /**
   * ```
   * DirectiveDefinition :
   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations
   * ```
   */
  parseDirectiveDefinition() {
    const e = this._lexer.token, n = this.parseDescription();
    this.expectKeyword("directive"), this.expectToken(D.AT);
    const i = this.parseName(), r = this.parseArgumentDefs(), s = this.expectOptionalKeyword("repeatable");
    this.expectKeyword("on");
    const o = this.parseDirectiveLocations();
    return this.node(e, {
      kind: I.DIRECTIVE_DEFINITION,
      description: n,
      name: i,
      arguments: r,
      repeatable: s,
      locations: o
    });
  }
  /**
   * DirectiveLocations :
   *   - `|`? DirectiveLocation
   *   - DirectiveLocations | DirectiveLocation
   */
  parseDirectiveLocations() {
    return this.delimitedMany(D.PIPE, this.parseDirectiveLocation);
  }
  /*
   * DirectiveLocation :
   *   - ExecutableDirectiveLocation
   *   - TypeSystemDirectiveLocation
   *
   * ExecutableDirectiveLocation : one of
   *   `QUERY`
   *   `MUTATION`
   *   `SUBSCRIPTION`
   *   `FIELD`
   *   `FRAGMENT_DEFINITION`
   *   `FRAGMENT_SPREAD`
   *   `INLINE_FRAGMENT`
   *
   * TypeSystemDirectiveLocation : one of
   *   `SCHEMA`
   *   `SCALAR`
   *   `OBJECT`
   *   `FIELD_DEFINITION`
   *   `ARGUMENT_DEFINITION`
   *   `INTERFACE`
   *   `UNION`
   *   `ENUM`
   *   `ENUM_VALUE`
   *   `INPUT_OBJECT`
   *   `INPUT_FIELD_DEFINITION`
   */
  parseDirectiveLocation() {
    const e = this._lexer.token, n = this.parseName();
    if (Object.prototype.hasOwnProperty.call(K, n.value))
      return n;
    throw this.unexpected(e);
  }
  // Core parsing utility functions
  /**
   * Returns a node that, if configured to do so, sets a "loc" field as a
   * location object, used to identify the place in the source that created a
   * given parsed object.
   */
  node(e, n) {
    return this._options.noLocation !== !0 && (n.loc = new Tc(
      e,
      this._lexer.lastToken,
      this._lexer.source
    )), n;
  }
  /**
   * Determines if the next token is of a given kind
   */
  peek(e) {
    return this._lexer.token.kind === e;
  }
  /**
   * If the next token is of the given kind, return that token after advancing the lexer.
   * Otherwise, do not change the parser state and throw an error.
   */
  expectToken(e) {
    const n = this._lexer.token;
    if (n.kind === e)
      return this.advanceLexer(), n;
    throw $e(
      this._lexer.source,
      n.start,
      `Expected ${uu(e)}, found ${Ji(n)}.`
    );
  }
  /**
   * If the next token is of the given kind, return "true" after advancing the lexer.
   * Otherwise, do not change the parser state and return "false".
   */
  expectOptionalToken(e) {
    return this._lexer.token.kind === e ? (this.advanceLexer(), !0) : !1;
  }
  /**
   * If the next token is a given keyword, advance the lexer.
   * Otherwise, do not change the parser state and throw an error.
   */
  expectKeyword(e) {
    const n = this._lexer.token;
    if (n.kind === D.NAME && n.value === e)
      this.advanceLexer();
    else
      throw $e(
        this._lexer.source,
        n.start,
        `Expected "${e}", found ${Ji(n)}.`
      );
  }
  /**
   * If the next token is a given keyword, return "true" after advancing the lexer.
   * Otherwise, do not change the parser state and return "false".
   */
  expectOptionalKeyword(e) {
    const n = this._lexer.token;
    return n.kind === D.NAME && n.value === e ? (this.advanceLexer(), !0) : !1;
  }
  /**
   * Helper function for creating an error when an unexpected lexed token is encountered.
   */
  unexpected(e) {
    const n = e ?? this._lexer.token;
    return $e(
      this._lexer.source,
      n.start,
      `Unexpected ${Ji(n)}.`
    );
  }
  /**
   * Returns a possibly empty list of parse nodes, determined by the parseFn.
   * This list begins with a lex token of openKind and ends with a lex token of closeKind.
   * Advances the parser to the next lex token after the closing token.
   */
  any(e, n, i) {
    this.expectToken(e);
    const r = [];
    for (; !this.expectOptionalToken(i); )
      r.push(n.call(this));
    return r;
  }
  /**
   * Returns a list of parse nodes, determined by the parseFn.
   * It can be empty only if open token is missing otherwise it will always return non-empty list
   * that begins with a lex token of openKind and ends with a lex token of closeKind.
   * Advances the parser to the next lex token after the closing token.
   */
  optionalMany(e, n, i) {
    if (this.expectOptionalToken(e)) {
      const r = [];
      do
        r.push(n.call(this));
      while (!this.expectOptionalToken(i));
      return r;
    }
    return [];
  }
  /**
   * Returns a non-empty list of parse nodes, determined by the parseFn.
   * This list begins with a lex token of openKind and ends with a lex token of closeKind.
   * Advances the parser to the next lex token after the closing token.
   */
  many(e, n, i) {
    this.expectToken(e);
    const r = [];
    do
      r.push(n.call(this));
    while (!this.expectOptionalToken(i));
    return r;
  }
  /**
   * Returns a non-empty list of parse nodes, determined by the parseFn.
   * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.
   * Advances the parser to the next lex token after last item in the list.
   */
  delimitedMany(e, n) {
    this.expectOptionalToken(e);
    const i = [];
    do
      i.push(n.call(this));
    while (this.expectOptionalToken(e));
    return i;
  }
  advanceLexer() {
    const { maxTokens: e } = this._options, n = this._lexer.advance();
    if (e !== void 0 && n.kind !== D.EOF && (++this._tokenCounter, this._tokenCounter > e))
      throw $e(
        this._lexer.source,
        n.start,
        `Document contains more that ${e} tokens. Parsing aborted.`
      );
  }
}
function Ji(t) {
  const e = t.value;
  return uu(t.kind) + (e != null ? ` "${e}"` : "");
}
function uu(t) {
  return Ac(t) ? `"${t}"` : t;
}
const Hc = 5;
function yn(t, e) {
  const [n, i] = e ? [t, e] : [void 0, t];
  let r = " Did you mean ";
  n && (r += n + " ");
  const s = i.map((u) => `"${u}"`);
  switch (s.length) {
    case 0:
      return "";
    case 1:
      return r + s[0] + "?";
    case 2:
      return r + s[0] + " or " + s[1] + "?";
  }
  const o = s.slice(0, Hc), a = o.pop();
  return r + o.join(", ") + ", or " + a + "?";
}
function $o(t) {
  return t;
}
function oi(t, e) {
  const n = /* @__PURE__ */ Object.create(null);
  for (const i of t)
    n[e(i)] = i;
  return n;
}
function $r(t, e, n) {
  const i = /* @__PURE__ */ Object.create(null);
  for (const r of t)
    i[e(r)] = n(r);
  return i;
}
function jr(t, e) {
  const n = /* @__PURE__ */ Object.create(null);
  for (const i of Object.keys(t))
    n[i] = e(t[i], i);
  return n;
}
function Ui(t, e) {
  let n = 0, i = 0;
  for (; n < t.length && i < e.length; ) {
    let r = t.charCodeAt(n), s = e.charCodeAt(i);
    if (Ki(r) && Ki(s)) {
      let o = 0;
      do
        ++n, o = o * 10 + r - gs, r = t.charCodeAt(n);
      while (Ki(r) && o > 0);
      let a = 0;
      do
        ++i, a = a * 10 + s - gs, s = e.charCodeAt(i);
      while (Ki(s) && a > 0);
      if (o < a)
        return -1;
      if (o > a)
        return 1;
    } else {
      if (r < s)
        return -1;
      if (r > s)
        return 1;
      ++n, ++i;
    }
  }
  return t.length - e.length;
}
const gs = 48, Yc = 57;
function Ki(t) {
  return !isNaN(t) && gs <= t && t <= Yc;
}
function $n(t, e) {
  const n = /* @__PURE__ */ Object.create(null), i = new Jc(t), r = Math.floor(t.length * 0.4) + 1;
  for (const s of e) {
    const o = i.measure(s, r);
    o !== void 0 && (n[s] = o);
  }
  return Object.keys(n).sort((s, o) => {
    const a = n[s] - n[o];
    return a !== 0 ? a : Ui(s, o);
  });
}
class Jc {
  constructor(e) {
    this._input = e, this._inputLowerCase = e.toLowerCase(), this._inputArray = jo(this._inputLowerCase), this._rows = [
      new Array(e.length + 1).fill(0),
      new Array(e.length + 1).fill(0),
      new Array(e.length + 1).fill(0)
    ];
  }
  measure(e, n) {
    if (this._input === e)
      return 0;
    const i = e.toLowerCase();
    if (this._inputLowerCase === i)
      return 1;
    let r = jo(i), s = this._inputArray;
    if (r.length < s.length) {
      const f = r;
      r = s, s = f;
    }
    const o = r.length, a = s.length;
    if (o - a > n)
      return;
    const u = this._rows;
    for (let f = 0; f <= a; f++)
      u[0][f] = f;
    for (let f = 1; f <= o; f++) {
      const g = u[(f - 1) % 3], p = u[f % 3];
      let v = p[0] = f;
      for (let w = 1; w <= a; w++) {
        const R = r[f - 1] === s[w - 1] ? 0 : 1;
        let x = Math.min(
          g[w] + 1,
          // delete
          p[w - 1] + 1,
          // insert
          g[w - 1] + R
          // substitute
        );
        if (f > 1 && w > 1 && r[f - 1] === s[w - 2] && r[f - 2] === s[w - 1]) {
          const y = u[(f - 2) % 3][w - 2];
          x = Math.min(x, y + 1);
        }
        x < v && (v = x), p[w] = x;
      }
      if (v > n)
        return;
    }
    const c = u[o % 3][a];
    return c <= n ? c : void 0;
  }
}
function jo(t) {
  const e = t.length, n = new Array(e);
  for (let i = 0; i < e; ++i)
    n[i] = t.charCodeAt(i);
  return n;
}
function yt(t) {
  if (t == null)
    return /* @__PURE__ */ Object.create(null);
  if (Object.getPrototypeOf(t) === null)
    return t;
  const e = /* @__PURE__ */ Object.create(null);
  for (const [n, i] of Object.entries(t))
    e[n] = i;
  return e;
}
function Kc(t) {
  return `"${t.replace(Xc, Zc)}"`;
}
const Xc = /[\x00-\x1f\x22\x5c\x7f-\x9f]/g;
function Zc(t) {
  return ef[t.charCodeAt(0)];
}
const ef = [
  "\\u0000",
  "\\u0001",
  "\\u0002",
  "\\u0003",
  "\\u0004",
  "\\u0005",
  "\\u0006",
  "\\u0007",
  "\\b",
  "\\t",
  "\\n",
  "\\u000B",
  "\\f",
  "\\r",
  "\\u000E",
  "\\u000F",
  "\\u0010",
  "\\u0011",
  "\\u0012",
  "\\u0013",
  "\\u0014",
  "\\u0015",
  "\\u0016",
  "\\u0017",
  "\\u0018",
  "\\u0019",
  "\\u001A",
  "\\u001B",
  "\\u001C",
  "\\u001D",
  "\\u001E",
  "\\u001F",
  "",
  "",
  '\\"',
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  // 2F
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  // 3F
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  // 4F
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "\\\\",
  "",
  "",
  "",
  // 5F
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  // 6F
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "\\u007F",
  "\\u0080",
  "\\u0081",
  "\\u0082",
  "\\u0083",
  "\\u0084",
  "\\u0085",
  "\\u0086",
  "\\u0087",
  "\\u0088",
  "\\u0089",
  "\\u008A",
  "\\u008B",
  "\\u008C",
  "\\u008D",
  "\\u008E",
  "\\u008F",
  "\\u0090",
  "\\u0091",
  "\\u0092",
  "\\u0093",
  "\\u0094",
  "\\u0095",
  "\\u0096",
  "\\u0097",
  "\\u0098",
  "\\u0099",
  "\\u009A",
  "\\u009B",
  "\\u009C",
  "\\u009D",
  "\\u009E",
  "\\u009F"
], vi = Object.freeze({});
function Gs(t, e, n = tu) {
  const i = /* @__PURE__ */ new Map();
  for (const y of Object.values(I))
    i.set(y, Sr(e, y));
  let r, s = Array.isArray(t), o = [t], a = -1, u = [], c = t, f, g;
  const p = [], v = [];
  do {
    a++;
    const y = a === o.length, S = y && u.length !== 0;
    if (y) {
      if (f = v.length === 0 ? void 0 : p[p.length - 1], c = g, g = v.pop(), S)
        if (s) {
          c = c.slice();
          let O = 0;
          for (const [C, T] of u) {
            const _ = C - O;
            T === null ? (c.splice(_, 1), O++) : c[_] = T;
          }
        } else {
          c = Object.defineProperties(
            {},
            Object.getOwnPropertyDescriptors(c)
          );
          for (const [O, C] of u)
            c[O] = C;
        }
      a = r.index, o = r.keys, u = r.edits, s = r.inArray, r = r.prev;
    } else if (g) {
      if (f = s ? a : o[a], c = g[f], c == null)
        continue;
      p.push(f);
    }
    let A;
    if (!Array.isArray(c)) {
      var w, R;
      hs(c) || ae(!1, `Invalid AST Node: ${G(c)}.`);
      const O = y ? (w = i.get(c.kind)) === null || w === void 0 ? void 0 : w.leave : (R = i.get(c.kind)) === null || R === void 0 ? void 0 : R.enter;
      if (A = O == null ? void 0 : O.call(e, c, f, g, p, v), A === vi)
        break;
      if (A === !1) {
        if (!y) {
          p.pop();
          continue;
        }
      } else if (A !== void 0 && (u.push([f, A]), !y))
        if (hs(A))
          c = A;
        else {
          p.pop();
          continue;
        }
    }
    if (A === void 0 && S && u.push([f, c]), y)
      p.pop();
    else {
      var x;
      r = {
        inArray: s,
        index: a,
        keys: o,
        edits: u,
        prev: r
      }, s = Array.isArray(c), o = s ? c : (x = n[c.kind]) !== null && x !== void 0 ? x : [], a = -1, u = [], g && v.push(g), g = c;
    }
  } while (r !== void 0);
  return u.length !== 0 ? u[u.length - 1][1] : t;
}
function tf(t) {
  const e = new Array(t.length).fill(null), n = /* @__PURE__ */ Object.create(null);
  for (const i of Object.values(I)) {
    let r = !1;
    const s = new Array(t.length).fill(void 0), o = new Array(t.length).fill(void 0);
    for (let u = 0; u < t.length; ++u) {
      const { enter: c, leave: f } = Sr(t[u], i);
      r || (r = c != null || f != null), s[u] = c, o[u] = f;
    }
    if (!r)
      continue;
    const a = {
      enter(...u) {
        const c = u[0];
        for (let g = 0; g < t.length; g++)
          if (e[g] === null) {
            var f;
            const p = (f = s[g]) === null || f === void 0 ? void 0 : f.apply(t[g], u);
            if (p === !1)
              e[g] = c;
            else if (p === vi)
              e[g] = vi;
            else if (p !== void 0)
              return p;
          }
      },
      leave(...u) {
        const c = u[0];
        for (let g = 0; g < t.length; g++)
          if (e[g] === null) {
            var f;
            const p = (f = o[g]) === null || f === void 0 ? void 0 : f.apply(t[g], u);
            if (p === vi)
              e[g] = vi;
            else if (p !== void 0 && p !== !1)
              return p;
          } else e[g] === c && (e[g] = null);
      }
    };
    n[i] = a;
  }
  return n;
}
function Sr(t, e) {
  const n = t[e];
  return typeof n == "object" ? n : typeof n == "function" ? {
    enter: n,
    leave: void 0
  } : {
    enter: t.enter,
    leave: t.leave
  };
}
function be(t) {
  return Gs(t, rf);
}
const nf = 80, rf = {
  Name: {
    leave: (t) => t.value
  },
  Variable: {
    leave: (t) => "$" + t.name
  },
  // Document
  Document: {
    leave: (t) => Y(t.definitions, `

`)
  },
  OperationDefinition: {
    leave(t) {
      const e = se("(", Y(t.variableDefinitions, ", "), ")"), n = Y(
        [
          t.operation,
          Y([t.name, e]),
          Y(t.directives, " ")
        ],
        " "
      );
      return (n === "query" ? "" : n + " ") + t.selectionSet;
    }
  },
  VariableDefinition: {
    leave: ({ variable: t, type: e, defaultValue: n, directives: i }) => t + ": " + e + se(" = ", n) + se(" ", Y(i, " "))
  },
  SelectionSet: {
    leave: ({ selections: t }) => wt(t)
  },
  Field: {
    leave({ alias: t, name: e, arguments: n, directives: i, selectionSet: r }) {
      const s = se("", t, ": ") + e;
      let o = s + se("(", Y(n, ", "), ")");
      return o.length > nf && (o = s + se(`(
`, dr(Y(n, `
`)), `
)`)), Y([o, Y(i, " "), r], " ");
    }
  },
  Argument: {
    leave: ({ name: t, value: e }) => t + ": " + e
  },
  // Fragments
  FragmentSpread: {
    leave: ({ name: t, directives: e }) => "..." + t + se(" ", Y(e, " "))
  },
  InlineFragment: {
    leave: ({ typeCondition: t, directives: e, selectionSet: n }) => Y(
      [
        "...",
        se("on ", t),
        Y(e, " "),
        n
      ],
      " "
    )
  },
  FragmentDefinition: {
    leave: ({ name: t, typeCondition: e, variableDefinitions: n, directives: i, selectionSet: r }) => (
      // or removed in the future.
      `fragment ${t}${se("(", Y(n, ", "), ")")} on ${e} ${se("", Y(i, " "), " ")}` + r
    )
  },
  // Value
  IntValue: {
    leave: ({ value: t }) => t
  },
  FloatValue: {
    leave: ({ value: t }) => t
  },
  StringValue: {
    leave: ({ value: t, block: e }) => e ? Oc(t) : Kc(t)
  },
  BooleanValue: {
    leave: ({ value: t }) => t ? "true" : "false"
  },
  NullValue: {
    leave: () => "null"
  },
  EnumValue: {
    leave: ({ value: t }) => t
  },
  ListValue: {
    leave: ({ values: t }) => "[" + Y(t, ", ") + "]"
  },
  ObjectValue: {
    leave: ({ fields: t }) => "{" + Y(t, ", ") + "}"
  },
  ObjectField: {
    leave: ({ name: t, value: e }) => t + ": " + e
  },
  // Directive
  Directive: {
    leave: ({ name: t, arguments: e }) => "@" + t + se("(", Y(e, ", "), ")")
  },
  // Type
  NamedType: {
    leave: ({ name: t }) => t
  },
  ListType: {
    leave: ({ type: t }) => "[" + t + "]"
  },
  NonNullType: {
    leave: ({ type: t }) => t + "!"
  },
  // Type System Definitions
  SchemaDefinition: {
    leave: ({ description: t, directives: e, operationTypes: n }) => se("", t, `
`) + Y(["schema", Y(e, " "), wt(n)], " ")
  },
  OperationTypeDefinition: {
    leave: ({ operation: t, type: e }) => t + ": " + e
  },
  ScalarTypeDefinition: {
    leave: ({ description: t, name: e, directives: n }) => se("", t, `
`) + Y(["scalar", e, Y(n, " ")], " ")
  },
  ObjectTypeDefinition: {
    leave: ({ description: t, name: e, interfaces: n, directives: i, fields: r }) => se("", t, `
`) + Y(
      [
        "type",
        e,
        se("implements ", Y(n, " & ")),
        Y(i, " "),
        wt(r)
      ],
      " "
    )
  },
  FieldDefinition: {
    leave: ({ description: t, name: e, arguments: n, type: i, directives: r }) => se("", t, `
`) + e + (Po(n) ? se(`(
`, dr(Y(n, `
`)), `
)`) : se("(", Y(n, ", "), ")")) + ": " + i + se(" ", Y(r, " "))
  },
  InputValueDefinition: {
    leave: ({ description: t, name: e, type: n, defaultValue: i, directives: r }) => se("", t, `
`) + Y(
      [e + ": " + n, se("= ", i), Y(r, " ")],
      " "
    )
  },
  InterfaceTypeDefinition: {
    leave: ({ description: t, name: e, interfaces: n, directives: i, fields: r }) => se("", t, `
`) + Y(
      [
        "interface",
        e,
        se("implements ", Y(n, " & ")),
        Y(i, " "),
        wt(r)
      ],
      " "
    )
  },
  UnionTypeDefinition: {
    leave: ({ description: t, name: e, directives: n, types: i }) => se("", t, `
`) + Y(
      ["union", e, Y(n, " "), se("= ", Y(i, " | "))],
      " "
    )
  },
  EnumTypeDefinition: {
    leave: ({ description: t, name: e, directives: n, values: i }) => se("", t, `
`) + Y(["enum", e, Y(n, " "), wt(i)], " ")
  },
  EnumValueDefinition: {
    leave: ({ description: t, name: e, directives: n }) => se("", t, `
`) + Y([e, Y(n, " ")], " ")
  },
  InputObjectTypeDefinition: {
    leave: ({ description: t, name: e, directives: n, fields: i }) => se("", t, `
`) + Y(["input", e, Y(n, " "), wt(i)], " ")
  },
  DirectiveDefinition: {
    leave: ({ description: t, name: e, arguments: n, repeatable: i, locations: r }) => se("", t, `
`) + "directive @" + e + (Po(n) ? se(`(
`, dr(Y(n, `
`)), `
)`) : se("(", Y(n, ", "), ")")) + (i ? " repeatable" : "") + " on " + Y(r, " | ")
  },
  SchemaExtension: {
    leave: ({ directives: t, operationTypes: e }) => Y(
      ["extend schema", Y(t, " "), wt(e)],
      " "
    )
  },
  ScalarTypeExtension: {
    leave: ({ name: t, directives: e }) => Y(["extend scalar", t, Y(e, " ")], " ")
  },
  ObjectTypeExtension: {
    leave: ({ name: t, interfaces: e, directives: n, fields: i }) => Y(
      [
        "extend type",
        t,
        se("implements ", Y(e, " & ")),
        Y(n, " "),
        wt(i)
      ],
      " "
    )
  },
  InterfaceTypeExtension: {
    leave: ({ name: t, interfaces: e, directives: n, fields: i }) => Y(
      [
        "extend interface",
        t,
        se("implements ", Y(e, " & ")),
        Y(n, " "),
        wt(i)
      ],
      " "
    )
  },
  UnionTypeExtension: {
    leave: ({ name: t, directives: e, types: n }) => Y(
      [
        "extend union",
        t,
        Y(e, " "),
        se("= ", Y(n, " | "))
      ],
      " "
    )
  },
  EnumTypeExtension: {
    leave: ({ name: t, directives: e, values: n }) => Y(["extend enum", t, Y(e, " "), wt(n)], " ")
  },
  InputObjectTypeExtension: {
    leave: ({ name: t, directives: e, fields: n }) => Y(["extend input", t, Y(e, " "), wt(n)], " ")
  }
};
function Y(t, e = "") {
  var n;
  return (n = t == null ? void 0 : t.filter((i) => i).join(e)) !== null && n !== void 0 ? n : "";
}
function wt(t) {
  return se(`{
`, dr(Y(t, `
`)), `
}`);
}
function se(t, e, n = "") {
  return e != null && e !== "" ? t + e + n : "";
}
function dr(t) {
  return se("  ", t.replace(/\n/g, `
  `));
}
function Po(t) {
  var e;
  return (e = t == null ? void 0 : t.some((n) => n.includes(`
`))) !== null && e !== void 0 ? e : !1;
}
function ms(t, e) {
  switch (t.kind) {
    case I.NULL:
      return null;
    case I.INT:
      return parseInt(t.value, 10);
    case I.FLOAT:
      return parseFloat(t.value);
    case I.STRING:
    case I.ENUM:
    case I.BOOLEAN:
      return t.value;
    case I.LIST:
      return t.values.map(
        (n) => ms(n, e)
      );
    case I.OBJECT:
      return $r(
        t.fields,
        (n) => n.name.value,
        (n) => ms(n.value, e)
      );
    case I.VARIABLE:
      return e == null ? void 0 : e[t.name.value];
  }
}
function zt(t) {
  if (t != null || ae(!1, "Must provide name."), typeof t == "string" || ae(!1, "Expected name to be a string."), t.length === 0)
    throw new j("Expected name to be a non-empty string.");
  for (let e = 1; e < t.length; ++e)
    if (!iu(t.charCodeAt(e)))
      throw new j(
        `Names must only contain [_a-zA-Z0-9] but "${t}" does not.`
      );
  if (!Bs(t.charCodeAt(0)))
    throw new j(
      `Names must start with [_a-zA-Z] but "${t}" does not.`
    );
  return t;
}
function sf(t) {
  if (t === "true" || t === "false" || t === "null")
    throw new j(`Enum values cannot be named: ${t}`);
  return zt(t);
}
function qs(t) {
  return jn(t) || pe(t) || Ee(t) || Bt(t) || Gt(t) || ze(t) || Pe(t) || re(t);
}
function jn(t) {
  return qt(t, Vt);
}
function pe(t) {
  return qt(t, et);
}
function Ee(t) {
  return qt(t, In);
}
function Bt(t) {
  return qt(t, zn);
}
function Gt(t) {
  return qt(t, ai);
}
function ze(t) {
  return qt(t, Ri);
}
function Pe(t) {
  return qt(t, Ue);
}
function re(t) {
  return qt(t, ne);
}
function Pt(t) {
  return jn(t) || Gt(t) || ze(t) || zs(t) && Pt(t.ofType);
}
function Fi(t) {
  return jn(t) || pe(t) || Ee(t) || Bt(t) || Gt(t) || zs(t) && Fi(t.ofType);
}
function bn(t) {
  return jn(t) || Gt(t);
}
function wn(t) {
  return pe(t) || Ee(t) || Bt(t);
}
function nn(t) {
  return Ee(t) || Bt(t);
}
class Ue {
  constructor(e) {
    qs(e) || ae(!1, `Expected ${G(e)} to be a GraphQL type.`), this.ofType = e;
  }
  get [Symbol.toStringTag]() {
    return "GraphQLList";
  }
  toString() {
    return "[" + String(this.ofType) + "]";
  }
  toJSON() {
    return this.toString();
  }
}
class ne {
  constructor(e) {
    of(e) || ae(
      !1,
      `Expected ${G(e)} to be a GraphQL nullable type.`
    ), this.ofType = e;
  }
  get [Symbol.toStringTag]() {
    return "GraphQLNonNull";
  }
  toString() {
    return String(this.ofType) + "!";
  }
  toJSON() {
    return this.toString();
  }
}
function zs(t) {
  return Pe(t) || re(t);
}
function of(t) {
  return qs(t) && !re(t);
}
function lu(t) {
  if (t)
    return re(t) ? t.ofType : t;
}
function af(t) {
  return jn(t) || pe(t) || Ee(t) || Bt(t) || Gt(t) || ze(t);
}
function Mt(t) {
  if (t) {
    let e = t;
    for (; zs(e); )
      e = e.ofType;
    return e;
  }
}
function cu(t) {
  return typeof t == "function" ? t() : t;
}
function fu(t) {
  return typeof t == "function" ? t() : t;
}
class Vt {
  constructor(e) {
    var n, i, r, s;
    const o = (n = e.parseValue) !== null && n !== void 0 ? n : $o;
    this.name = zt(e.name), this.description = e.description, this.specifiedByURL = e.specifiedByURL, this.serialize = (i = e.serialize) !== null && i !== void 0 ? i : $o, this.parseValue = o, this.parseLiteral = (r = e.parseLiteral) !== null && r !== void 0 ? r : (a, u) => o(ms(a, u)), this.extensions = yt(e.extensions), this.astNode = e.astNode, this.extensionASTNodes = (s = e.extensionASTNodes) !== null && s !== void 0 ? s : [], e.specifiedByURL == null || typeof e.specifiedByURL == "string" || ae(
      !1,
      `${this.name} must provide "specifiedByURL" as a string, but got: ${G(e.specifiedByURL)}.`
    ), e.serialize == null || typeof e.serialize == "function" || ae(
      !1,
      `${this.name} must provide "serialize" function. If this custom Scalar is also used as an input type, ensure "parseValue" and "parseLiteral" functions are also provided.`
    ), e.parseLiteral && (typeof e.parseValue == "function" && typeof e.parseLiteral == "function" || ae(
      !1,
      `${this.name} must provide both "parseValue" and "parseLiteral" functions.`
    ));
  }
  get [Symbol.toStringTag]() {
    return "GraphQLScalarType";
  }
  toConfig() {
    return {
      name: this.name,
      description: this.description,
      specifiedByURL: this.specifiedByURL,
      serialize: this.serialize,
      parseValue: this.parseValue,
      parseLiteral: this.parseLiteral,
      extensions: this.extensions,
      astNode: this.astNode,
      extensionASTNodes: this.extensionASTNodes
    };
  }
  toString() {
    return this.name;
  }
  toJSON() {
    return this.toString();
  }
}
class et {
  constructor(e) {
    var n;
    this.name = zt(e.name), this.description = e.description, this.isTypeOf = e.isTypeOf, this.extensions = yt(e.extensions), this.astNode = e.astNode, this.extensionASTNodes = (n = e.extensionASTNodes) !== null && n !== void 0 ? n : [], this._fields = () => hu(e), this._interfaces = () => du(e), e.isTypeOf == null || typeof e.isTypeOf == "function" || ae(
      !1,
      `${this.name} must provide "isTypeOf" as a function, but got: ${G(e.isTypeOf)}.`
    );
  }
  get [Symbol.toStringTag]() {
    return "GraphQLObjectType";
  }
  getFields() {
    return typeof this._fields == "function" && (this._fields = this._fields()), this._fields;
  }
  getInterfaces() {
    return typeof this._interfaces == "function" && (this._interfaces = this._interfaces()), this._interfaces;
  }
  toConfig() {
    return {
      name: this.name,
      description: this.description,
      interfaces: this.getInterfaces(),
      fields: gu(this.getFields()),
      isTypeOf: this.isTypeOf,
      extensions: this.extensions,
      astNode: this.astNode,
      extensionASTNodes: this.extensionASTNodes
    };
  }
  toString() {
    return this.name;
  }
  toJSON() {
    return this.toString();
  }
}
function du(t) {
  var e;
  const n = cu(
    (e = t.interfaces) !== null && e !== void 0 ? e : []
  );
  return Array.isArray(n) || ae(
    !1,
    `${t.name} interfaces must be an Array or a function which returns an Array.`
  ), n;
}
function hu(t) {
  const e = fu(t.fields);
  return Yn(e) || ae(
    !1,
    `${t.name} fields must be an object with field names as keys or a function which returns such an object.`
  ), jr(e, (n, i) => {
    var r;
    Yn(n) || ae(
      !1,
      `${t.name}.${i} field config must be an object.`
    ), n.resolve == null || typeof n.resolve == "function" || ae(
      !1,
      `${t.name}.${i} field resolver must be a function if provided, but got: ${G(n.resolve)}.`
    );
    const s = (r = n.args) !== null && r !== void 0 ? r : {};
    return Yn(s) || ae(
      !1,
      `${t.name}.${i} args must be an object with argument names as keys.`
    ), {
      name: zt(i),
      description: n.description,
      type: n.type,
      args: pu(s),
      resolve: n.resolve,
      subscribe: n.subscribe,
      deprecationReason: n.deprecationReason,
      extensions: yt(n.extensions),
      astNode: n.astNode
    };
  });
}
function pu(t) {
  return Object.entries(t).map(([e, n]) => ({
    name: zt(e),
    description: n.description,
    type: n.type,
    defaultValue: n.defaultValue,
    deprecationReason: n.deprecationReason,
    extensions: yt(n.extensions),
    astNode: n.astNode
  }));
}
function Yn(t) {
  return Jt(t) && !Array.isArray(t);
}
function gu(t) {
  return jr(t, (e) => ({
    description: e.description,
    type: e.type,
    args: mu(e.args),
    resolve: e.resolve,
    subscribe: e.subscribe,
    deprecationReason: e.deprecationReason,
    extensions: e.extensions,
    astNode: e.astNode
  }));
}
function mu(t) {
  return $r(
    t,
    (e) => e.name,
    (e) => ({
      description: e.description,
      type: e.type,
      defaultValue: e.defaultValue,
      deprecationReason: e.deprecationReason,
      extensions: e.extensions,
      astNode: e.astNode
    })
  );
}
function Vi(t) {
  return re(t.type) && t.defaultValue === void 0;
}
class In {
  constructor(e) {
    var n;
    this.name = zt(e.name), this.description = e.description, this.resolveType = e.resolveType, this.extensions = yt(e.extensions), this.astNode = e.astNode, this.extensionASTNodes = (n = e.extensionASTNodes) !== null && n !== void 0 ? n : [], this._fields = hu.bind(void 0, e), this._interfaces = du.bind(void 0, e), e.resolveType == null || typeof e.resolveType == "function" || ae(
      !1,
      `${this.name} must provide "resolveType" as a function, but got: ${G(e.resolveType)}.`
    );
  }
  get [Symbol.toStringTag]() {
    return "GraphQLInterfaceType";
  }
  getFields() {
    return typeof this._fields == "function" && (this._fields = this._fields()), this._fields;
  }
  getInterfaces() {
    return typeof this._interfaces == "function" && (this._interfaces = this._interfaces()), this._interfaces;
  }
  toConfig() {
    return {
      name: this.name,
      description: this.description,
      interfaces: this.getInterfaces(),
      fields: gu(this.getFields()),
      resolveType: this.resolveType,
      extensions: this.extensions,
      astNode: this.astNode,
      extensionASTNodes: this.extensionASTNodes
    };
  }
  toString() {
    return this.name;
  }
  toJSON() {
    return this.toString();
  }
}
class zn {
  constructor(e) {
    var n;
    this.name = zt(e.name), this.description = e.description, this.resolveType = e.resolveType, this.extensions = yt(e.extensions), this.astNode = e.astNode, this.extensionASTNodes = (n = e.extensionASTNodes) !== null && n !== void 0 ? n : [], this._types = uf.bind(void 0, e), e.resolveType == null || typeof e.resolveType == "function" || ae(
      !1,
      `${this.name} must provide "resolveType" as a function, but got: ${G(e.resolveType)}.`
    );
  }
  get [Symbol.toStringTag]() {
    return "GraphQLUnionType";
  }
  getTypes() {
    return typeof this._types == "function" && (this._types = this._types()), this._types;
  }
  toConfig() {
    return {
      name: this.name,
      description: this.description,
      types: this.getTypes(),
      resolveType: this.resolveType,
      extensions: this.extensions,
      astNode: this.astNode,
      extensionASTNodes: this.extensionASTNodes
    };
  }
  toString() {
    return this.name;
  }
  toJSON() {
    return this.toString();
  }
}
function uf(t) {
  const e = cu(t.types);
  return Array.isArray(e) || ae(
    !1,
    `Must provide Array of types or a function which returns such an array for Union ${t.name}.`
  ), e;
}
class ai {
  /* <T> */
  constructor(e) {
    var n;
    this.name = zt(e.name), this.description = e.description, this.extensions = yt(e.extensions), this.astNode = e.astNode, this.extensionASTNodes = (n = e.extensionASTNodes) !== null && n !== void 0 ? n : [], this._values = typeof e.values == "function" ? e.values : Mo(this.name, e.values), this._valueLookup = null, this._nameLookup = null;
  }
  get [Symbol.toStringTag]() {
    return "GraphQLEnumType";
  }
  getValues() {
    return typeof this._values == "function" && (this._values = Mo(this.name, this._values())), this._values;
  }
  getValue(e) {
    return this._nameLookup === null && (this._nameLookup = oi(this.getValues(), (n) => n.name)), this._nameLookup[e];
  }
  serialize(e) {
    this._valueLookup === null && (this._valueLookup = new Map(
      this.getValues().map((i) => [i.value, i])
    ));
    const n = this._valueLookup.get(e);
    if (n === void 0)
      throw new j(
        `Enum "${this.name}" cannot represent value: ${G(e)}`
      );
    return n.name;
  }
  parseValue(e) {
    if (typeof e != "string") {
      const i = G(e);
      throw new j(
        `Enum "${this.name}" cannot represent non-string value: ${i}.` + Xi(this, i)
      );
    }
    const n = this.getValue(e);
    if (n == null)
      throw new j(
        `Value "${e}" does not exist in "${this.name}" enum.` + Xi(this, e)
      );
    return n.value;
  }
  parseLiteral(e, n) {
    if (e.kind !== I.ENUM) {
      const r = be(e);
      throw new j(
        `Enum "${this.name}" cannot represent non-enum value: ${r}.` + Xi(this, r),
        {
          nodes: e
        }
      );
    }
    const i = this.getValue(e.value);
    if (i == null) {
      const r = be(e);
      throw new j(
        `Value "${r}" does not exist in "${this.name}" enum.` + Xi(this, r),
        {
          nodes: e
        }
      );
    }
    return i.value;
  }
  toConfig() {
    const e = $r(
      this.getValues(),
      (n) => n.name,
      (n) => ({
        description: n.description,
        value: n.value,
        deprecationReason: n.deprecationReason,
        extensions: n.extensions,
        astNode: n.astNode
      })
    );
    return {
      name: this.name,
      description: this.description,
      values: e,
      extensions: this.extensions,
      astNode: this.astNode,
      extensionASTNodes: this.extensionASTNodes
    };
  }
  toString() {
    return this.name;
  }
  toJSON() {
    return this.toString();
  }
}
function Xi(t, e) {
  const n = t.getValues().map((r) => r.name), i = $n(e, n);
  return yn("the enum value", i);
}
function Mo(t, e) {
  return Yn(e) || ae(
    !1,
    `${t} values must be an object with value names as keys.`
  ), Object.entries(e).map(([n, i]) => (Yn(i) || ae(
    !1,
    `${t}.${n} must refer to an object with a "value" key representing an internal value but got: ${G(i)}.`
  ), {
    name: sf(n),
    description: i.description,
    value: i.value !== void 0 ? i.value : n,
    deprecationReason: i.deprecationReason,
    extensions: yt(i.extensions),
    astNode: i.astNode
  }));
}
class Ri {
  constructor(e) {
    var n, i;
    this.name = zt(e.name), this.description = e.description, this.extensions = yt(e.extensions), this.astNode = e.astNode, this.extensionASTNodes = (n = e.extensionASTNodes) !== null && n !== void 0 ? n : [], this.isOneOf = (i = e.isOneOf) !== null && i !== void 0 ? i : !1, this._fields = lf.bind(void 0, e);
  }
  get [Symbol.toStringTag]() {
    return "GraphQLInputObjectType";
  }
  getFields() {
    return typeof this._fields == "function" && (this._fields = this._fields()), this._fields;
  }
  toConfig() {
    const e = jr(this.getFields(), (n) => ({
      description: n.description,
      type: n.type,
      defaultValue: n.defaultValue,
      deprecationReason: n.deprecationReason,
      extensions: n.extensions,
      astNode: n.astNode
    }));
    return {
      name: this.name,
      description: this.description,
      fields: e,
      extensions: this.extensions,
      astNode: this.astNode,
      extensionASTNodes: this.extensionASTNodes,
      isOneOf: this.isOneOf
    };
  }
  toString() {
    return this.name;
  }
  toJSON() {
    return this.toString();
  }
}
function lf(t) {
  const e = fu(t.fields);
  return Yn(e) || ae(
    !1,
    `${t.name} fields must be an object with field names as keys or a function which returns such an object.`
  ), jr(e, (n, i) => (!("resolve" in n) || ae(
    !1,
    `${t.name}.${i} field has a resolve property, but Input Types cannot define resolvers.`
  ), {
    name: zt(i),
    description: n.description,
    type: n.type,
    defaultValue: n.defaultValue,
    deprecationReason: n.deprecationReason,
    extensions: yt(n.extensions),
    astNode: n.astNode
  }));
}
function yu(t) {
  return re(t.type) && t.defaultValue === void 0;
}
function ys(t, e) {
  return t === e ? !0 : re(t) && re(e) || Pe(t) && Pe(e) ? ys(t.ofType, e.ofType) : !1;
}
function Jn(t, e, n) {
  return e === n ? !0 : re(n) ? re(e) ? Jn(t, e.ofType, n.ofType) : !1 : re(e) ? Jn(t, e.ofType, n) : Pe(n) ? Pe(e) ? Jn(t, e.ofType, n.ofType) : !1 : Pe(e) ? !1 : nn(n) && (Ee(e) || pe(e)) && t.isSubType(n, e);
}
function Uo(t, e, n) {
  return e === n ? !0 : nn(e) ? nn(n) ? t.getPossibleTypes(e).some((i) => t.isSubType(n, i)) : t.isSubType(e, n) : nn(n) ? t.isSubType(n, e) : !1;
}
const ts = 2147483647, ns = -2147483648, Bi = new Vt({
  name: "Int",
  description: "The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.",
  serialize(t) {
    const e = qi(t);
    if (typeof e == "boolean")
      return e ? 1 : 0;
    let n = e;
    if (typeof e == "string" && e !== "" && (n = Number(e)), typeof n != "number" || !Number.isInteger(n))
      throw new j(
        `Int cannot represent non-integer value: ${G(e)}`
      );
    if (n > ts || n < ns)
      throw new j(
        "Int cannot represent non 32-bit signed integer value: " + G(e)
      );
    return n;
  },
  parseValue(t) {
    if (typeof t != "number" || !Number.isInteger(t))
      throw new j(
        `Int cannot represent non-integer value: ${G(t)}`
      );
    if (t > ts || t < ns)
      throw new j(
        `Int cannot represent non 32-bit signed integer value: ${t}`
      );
    return t;
  },
  parseLiteral(t) {
    if (t.kind !== I.INT)
      throw new j(
        `Int cannot represent non-integer value: ${be(t)}`,
        {
          nodes: t
        }
      );
    const e = parseInt(t.value, 10);
    if (e > ts || e < ns)
      throw new j(
        `Int cannot represent non 32-bit signed integer value: ${t.value}`,
        {
          nodes: t
        }
      );
    return e;
  }
}), Pr = new Vt({
  name: "Float",
  description: "The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).",
  serialize(t) {
    const e = qi(t);
    if (typeof e == "boolean")
      return e ? 1 : 0;
    let n = e;
    if (typeof e == "string" && e !== "" && (n = Number(e)), typeof n != "number" || !Number.isFinite(n))
      throw new j(
        `Float cannot represent non numeric value: ${G(e)}`
      );
    return n;
  },
  parseValue(t) {
    if (typeof t != "number" || !Number.isFinite(t))
      throw new j(
        `Float cannot represent non numeric value: ${G(t)}`
      );
    return t;
  },
  parseLiteral(t) {
    if (t.kind !== I.FLOAT && t.kind !== I.INT)
      throw new j(
        `Float cannot represent non numeric value: ${be(t)}`,
        t
      );
    return parseFloat(t.value);
  }
}), ue = new Vt({
  name: "String",
  description: "The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.",
  serialize(t) {
    const e = qi(t);
    if (typeof e == "string")
      return e;
    if (typeof e == "boolean")
      return e ? "true" : "false";
    if (typeof e == "number" && Number.isFinite(e))
      return e.toString();
    throw new j(
      `String cannot represent value: ${G(t)}`
    );
  },
  parseValue(t) {
    if (typeof t != "string")
      throw new j(
        `String cannot represent a non string value: ${G(t)}`
      );
    return t;
  },
  parseLiteral(t) {
    if (t.kind !== I.STRING)
      throw new j(
        `String cannot represent a non string value: ${be(t)}`,
        {
          nodes: t
        }
      );
    return t.value;
  }
}), je = new Vt({
  name: "Boolean",
  description: "The `Boolean` scalar type represents `true` or `false`.",
  serialize(t) {
    const e = qi(t);
    if (typeof e == "boolean")
      return e;
    if (Number.isFinite(e))
      return e !== 0;
    throw new j(
      `Boolean cannot represent a non boolean value: ${G(e)}`
    );
  },
  parseValue(t) {
    if (typeof t != "boolean")
      throw new j(
        `Boolean cannot represent a non boolean value: ${G(t)}`
      );
    return t;
  },
  parseLiteral(t) {
    if (t.kind !== I.BOOLEAN)
      throw new j(
        `Boolean cannot represent a non boolean value: ${be(t)}`,
        {
          nodes: t
        }
      );
    return t.value;
  }
}), Gi = new Vt({
  name: "ID",
  description: 'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.',
  serialize(t) {
    const e = qi(t);
    if (typeof e == "string")
      return e;
    if (Number.isInteger(e))
      return String(e);
    throw new j(
      `ID cannot represent value: ${G(t)}`
    );
  },
  parseValue(t) {
    if (typeof t == "string")
      return t;
    if (typeof t == "number" && Number.isInteger(t))
      return t.toString();
    throw new j(`ID cannot represent value: ${G(t)}`);
  },
  parseLiteral(t) {
    if (t.kind !== I.STRING && t.kind !== I.INT)
      throw new j(
        "ID cannot represent a non-string and non-integer value: " + be(t),
        {
          nodes: t
        }
      );
    return t.value;
  }
}), cf = Object.freeze([
  ue,
  Bi,
  Pr,
  je,
  Gi
]);
function qi(t) {
  if (Jt(t)) {
    if (typeof t.valueOf == "function") {
      const e = t.valueOf();
      if (!Jt(e))
        return e;
    }
    if (typeof t.toJSON == "function")
      return t.toJSON();
  }
  return t;
}
function bu(t) {
  return qt(t, rn);
}
class rn {
  constructor(e) {
    var n, i;
    this.name = zt(e.name), this.description = e.description, this.locations = e.locations, this.isRepeatable = (n = e.isRepeatable) !== null && n !== void 0 ? n : !1, this.extensions = yt(e.extensions), this.astNode = e.astNode, Array.isArray(e.locations) || ae(!1, `@${e.name} locations must be an Array.`);
    const r = (i = e.args) !== null && i !== void 0 ? i : {};
    Jt(r) && !Array.isArray(r) || ae(
      !1,
      `@${e.name} args must be an object with argument names as keys.`
    ), this.args = pu(r);
  }
  get [Symbol.toStringTag]() {
    return "GraphQLDirective";
  }
  toConfig() {
    return {
      name: this.name,
      description: this.description,
      locations: this.locations,
      args: mu(this.args),
      isRepeatable: this.isRepeatable,
      extensions: this.extensions,
      astNode: this.astNode
    };
  }
  toString() {
    return "@" + this.name;
  }
  toJSON() {
    return this.toString();
  }
}
const Qs = new rn({
  name: "include",
  description: "Directs the executor to include this field or fragment only when the `if` argument is true.",
  locations: [
    K.FIELD,
    K.FRAGMENT_SPREAD,
    K.INLINE_FRAGMENT
  ],
  args: {
    if: {
      type: new ne(je),
      description: "Included when true."
    }
  }
}), Ws = new rn({
  name: "skip",
  description: "Directs the executor to skip this field or fragment when the `if` argument is true.",
  locations: [
    K.FIELD,
    K.FRAGMENT_SPREAD,
    K.INLINE_FRAGMENT
  ],
  args: {
    if: {
      type: new ne(je),
      description: "Skipped when true."
    }
  }
}), ff = "No longer supported", wu = new rn({
  name: "deprecated",
  description: "Marks an element of a GraphQL schema as no longer supported.",
  locations: [
    K.FIELD_DEFINITION,
    K.ARGUMENT_DEFINITION,
    K.INPUT_FIELD_DEFINITION,
    K.ENUM_VALUE
  ],
  args: {
    reason: {
      type: ue,
      description: "Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).",
      defaultValue: ff
    }
  }
}), df = new rn({
  name: "specifiedBy",
  description: "Exposes a URL that specifies the behavior of this scalar.",
  locations: [K.SCALAR],
  args: {
    url: {
      type: new ne(ue),
      description: "The URL that specifies the behavior of this scalar."
    }
  }
}), hf = new rn({
  name: "oneOf",
  description: "Indicates exactly one field must be supplied and this field must not be `null`.",
  locations: [K.INPUT_OBJECT],
  args: {}
}), zi = Object.freeze([
  Qs,
  Ws,
  wu,
  df,
  hf
]);
function Eu(t) {
  return typeof t == "object" && typeof (t == null ? void 0 : t[Symbol.iterator]) == "function";
}
function Ti(t, e) {
  if (re(e)) {
    const n = Ti(t, e.ofType);
    return (n == null ? void 0 : n.kind) === I.NULL ? null : n;
  }
  if (t === null)
    return {
      kind: I.NULL
    };
  if (t === void 0)
    return null;
  if (Pe(e)) {
    const n = e.ofType;
    if (Eu(t)) {
      const i = [];
      for (const r of t) {
        const s = Ti(r, n);
        s != null && i.push(s);
      }
      return {
        kind: I.LIST,
        values: i
      };
    }
    return Ti(t, n);
  }
  if (ze(e)) {
    if (!Jt(t))
      return null;
    const n = [];
    for (const i of Object.values(e.getFields())) {
      const r = Ti(t[i.name], i.type);
      r && n.push({
        kind: I.OBJECT_FIELD,
        name: {
          kind: I.NAME,
          value: i.name
        },
        value: r
      });
    }
    return {
      kind: I.OBJECT,
      fields: n
    };
  }
  if (bn(e)) {
    const n = e.serialize(t);
    if (n == null)
      return null;
    if (typeof n == "boolean")
      return {
        kind: I.BOOLEAN,
        value: n
      };
    if (typeof n == "number" && Number.isFinite(n)) {
      const i = String(n);
      return Vo.test(i) ? {
        kind: I.INT,
        value: i
      } : {
        kind: I.FLOAT,
        value: i
      };
    }
    if (typeof n == "string")
      return Gt(e) ? {
        kind: I.ENUM,
        value: n
      } : e === Gi && Vo.test(n) ? {
        kind: I.INT,
        value: n
      } : {
        kind: I.STRING,
        value: n
      };
    throw new TypeError(`Cannot convert value to AST: ${G(n)}.`);
  }
  Yt(!1, "Unexpected input type: " + G(e));
}
const Vo = /^-?(?:0|[1-9][0-9]*)$/, Hs = new et({
  name: "__Schema",
  description: "A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.",
  fields: () => ({
    description: {
      type: ue,
      resolve: (t) => t.description
    },
    types: {
      description: "A list of all types supported by this server.",
      type: new ne(new Ue(new ne(Ut))),
      resolve(t) {
        return Object.values(t.getTypeMap());
      }
    },
    queryType: {
      description: "The type that query operations will be rooted at.",
      type: new ne(Ut),
      resolve: (t) => t.getQueryType()
    },
    mutationType: {
      description: "If this server supports mutation, the type that mutation operations will be rooted at.",
      type: Ut,
      resolve: (t) => t.getMutationType()
    },
    subscriptionType: {
      description: "If this server support subscription, the type that subscription operations will be rooted at.",
      type: Ut,
      resolve: (t) => t.getSubscriptionType()
    },
    directives: {
      description: "A list of all directives supported by this server.",
      type: new ne(
        new Ue(new ne(vu))
      ),
      resolve: (t) => t.getDirectives()
    }
  })
}), vu = new et({
  name: "__Directive",
  description: `A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.

In some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.`,
  fields: () => ({
    name: {
      type: new ne(ue),
      resolve: (t) => t.name
    },
    description: {
      type: ue,
      resolve: (t) => t.description
    },
    isRepeatable: {
      type: new ne(je),
      resolve: (t) => t.isRepeatable
    },
    locations: {
      type: new ne(
        new Ue(new ne(Tu))
      ),
      resolve: (t) => t.locations
    },
    args: {
      type: new ne(
        new Ue(new ne(Mr))
      ),
      args: {
        includeDeprecated: {
          type: je,
          defaultValue: !1
        }
      },
      resolve(t, { includeDeprecated: e }) {
        return e ? t.args : t.args.filter((n) => n.deprecationReason == null);
      }
    }
  })
}), Tu = new ai({
  name: "__DirectiveLocation",
  description: "A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.",
  values: {
    QUERY: {
      value: K.QUERY,
      description: "Location adjacent to a query operation."
    },
    MUTATION: {
      value: K.MUTATION,
      description: "Location adjacent to a mutation operation."
    },
    SUBSCRIPTION: {
      value: K.SUBSCRIPTION,
      description: "Location adjacent to a subscription operation."
    },
    FIELD: {
      value: K.FIELD,
      description: "Location adjacent to a field."
    },
    FRAGMENT_DEFINITION: {
      value: K.FRAGMENT_DEFINITION,
      description: "Location adjacent to a fragment definition."
    },
    FRAGMENT_SPREAD: {
      value: K.FRAGMENT_SPREAD,
      description: "Location adjacent to a fragment spread."
    },
    INLINE_FRAGMENT: {
      value: K.INLINE_FRAGMENT,
      description: "Location adjacent to an inline fragment."
    },
    VARIABLE_DEFINITION: {
      value: K.VARIABLE_DEFINITION,
      description: "Location adjacent to a variable definition."
    },
    SCHEMA: {
      value: K.SCHEMA,
      description: "Location adjacent to a schema definition."
    },
    SCALAR: {
      value: K.SCALAR,
      description: "Location adjacent to a scalar definition."
    },
    OBJECT: {
      value: K.OBJECT,
      description: "Location adjacent to an object type definition."
    },
    FIELD_DEFINITION: {
      value: K.FIELD_DEFINITION,
      description: "Location adjacent to a field definition."
    },
    ARGUMENT_DEFINITION: {
      value: K.ARGUMENT_DEFINITION,
      description: "Location adjacent to an argument definition."
    },
    INTERFACE: {
      value: K.INTERFACE,
      description: "Location adjacent to an interface definition."
    },
    UNION: {
      value: K.UNION,
      description: "Location adjacent to a union definition."
    },
    ENUM: {
      value: K.ENUM,
      description: "Location adjacent to an enum definition."
    },
    ENUM_VALUE: {
      value: K.ENUM_VALUE,
      description: "Location adjacent to an enum value definition."
    },
    INPUT_OBJECT: {
      value: K.INPUT_OBJECT,
      description: "Location adjacent to an input object type definition."
    },
    INPUT_FIELD_DEFINITION: {
      value: K.INPUT_FIELD_DEFINITION,
      description: "Location adjacent to an input object field definition."
    }
  }
}), Ut = new et({
  name: "__Type",
  description: "The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.",
  fields: () => ({
    kind: {
      type: new ne(Iu),
      resolve(t) {
        if (jn(t))
          return De.SCALAR;
        if (pe(t))
          return De.OBJECT;
        if (Ee(t))
          return De.INTERFACE;
        if (Bt(t))
          return De.UNION;
        if (Gt(t))
          return De.ENUM;
        if (ze(t))
          return De.INPUT_OBJECT;
        if (Pe(t))
          return De.LIST;
        if (re(t))
          return De.NON_NULL;
        Yt(!1, `Unexpected type: "${G(t)}".`);
      }
    },
    name: {
      type: ue,
      resolve: (t) => "name" in t ? t.name : void 0
    },
    description: {
      type: ue,
      resolve: (t) => (
        /* c8 ignore next */
        "description" in t ? t.description : void 0
      )
    },
    specifiedByURL: {
      type: ue,
      resolve: (t) => "specifiedByURL" in t ? t.specifiedByURL : void 0
    },
    fields: {
      type: new Ue(new ne(Su)),
      args: {
        includeDeprecated: {
          type: je,
          defaultValue: !1
        }
      },
      resolve(t, { includeDeprecated: e }) {
        if (pe(t) || Ee(t)) {
          const n = Object.values(t.getFields());
          return e ? n : n.filter((i) => i.deprecationReason == null);
        }
      }
    },
    interfaces: {
      type: new Ue(new ne(Ut)),
      resolve(t) {
        if (pe(t) || Ee(t))
          return t.getInterfaces();
      }
    },
    possibleTypes: {
      type: new Ue(new ne(Ut)),
      resolve(t, e, n, { schema: i }) {
        if (nn(t))
          return i.getPossibleTypes(t);
      }
    },
    enumValues: {
      type: new Ue(new ne(_u)),
      args: {
        includeDeprecated: {
          type: je,
          defaultValue: !1
        }
      },
      resolve(t, { includeDeprecated: e }) {
        if (Gt(t)) {
          const n = t.getValues();
          return e ? n : n.filter((i) => i.deprecationReason == null);
        }
      }
    },
    inputFields: {
      type: new Ue(new ne(Mr)),
      args: {
        includeDeprecated: {
          type: je,
          defaultValue: !1
        }
      },
      resolve(t, { includeDeprecated: e }) {
        if (ze(t)) {
          const n = Object.values(t.getFields());
          return e ? n : n.filter((i) => i.deprecationReason == null);
        }
      }
    },
    ofType: {
      type: Ut,
      resolve: (t) => "ofType" in t ? t.ofType : void 0
    },
    isOneOf: {
      type: je,
      resolve: (t) => {
        if (ze(t))
          return t.isOneOf;
      }
    }
  })
}), Su = new et({
  name: "__Field",
  description: "Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.",
  fields: () => ({
    name: {
      type: new ne(ue),
      resolve: (t) => t.name
    },
    description: {
      type: ue,
      resolve: (t) => t.description
    },
    args: {
      type: new ne(
        new Ue(new ne(Mr))
      ),
      args: {
        includeDeprecated: {
          type: je,
          defaultValue: !1
        }
      },
      resolve(t, { includeDeprecated: e }) {
        return e ? t.args : t.args.filter((n) => n.deprecationReason == null);
      }
    },
    type: {
      type: new ne(Ut),
      resolve: (t) => t.type
    },
    isDeprecated: {
      type: new ne(je),
      resolve: (t) => t.deprecationReason != null
    },
    deprecationReason: {
      type: ue,
      resolve: (t) => t.deprecationReason
    }
  })
}), Mr = new et({
  name: "__InputValue",
  description: "Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.",
  fields: () => ({
    name: {
      type: new ne(ue),
      resolve: (t) => t.name
    },
    description: {
      type: ue,
      resolve: (t) => t.description
    },
    type: {
      type: new ne(Ut),
      resolve: (t) => t.type
    },
    defaultValue: {
      type: ue,
      description: "A GraphQL-formatted string representing the default value for this input value.",
      resolve(t) {
        const { type: e, defaultValue: n } = t, i = Ti(n, e);
        return i ? be(i) : null;
      }
    },
    isDeprecated: {
      type: new ne(je),
      resolve: (t) => t.deprecationReason != null
    },
    deprecationReason: {
      type: ue,
      resolve: (t) => t.deprecationReason
    }
  })
}), _u = new et({
  name: "__EnumValue",
  description: "One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.",
  fields: () => ({
    name: {
      type: new ne(ue),
      resolve: (t) => t.name
    },
    description: {
      type: ue,
      resolve: (t) => t.description
    },
    isDeprecated: {
      type: new ne(je),
      resolve: (t) => t.deprecationReason != null
    },
    deprecationReason: {
      type: ue,
      resolve: (t) => t.deprecationReason
    }
  })
});
var De;
(function(t) {
  t.SCALAR = "SCALAR", t.OBJECT = "OBJECT", t.INTERFACE = "INTERFACE", t.UNION = "UNION", t.ENUM = "ENUM", t.INPUT_OBJECT = "INPUT_OBJECT", t.LIST = "LIST", t.NON_NULL = "NON_NULL";
})(De || (De = {}));
const Iu = new ai({
  name: "__TypeKind",
  description: "An enum describing what kind of type a given `__Type` is.",
  values: {
    SCALAR: {
      value: De.SCALAR,
      description: "Indicates this type is a scalar."
    },
    OBJECT: {
      value: De.OBJECT,
      description: "Indicates this type is an object. `fields` and `interfaces` are valid fields."
    },
    INTERFACE: {
      value: De.INTERFACE,
      description: "Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields."
    },
    UNION: {
      value: De.UNION,
      description: "Indicates this type is a union. `possibleTypes` is a valid field."
    },
    ENUM: {
      value: De.ENUM,
      description: "Indicates this type is an enum. `enumValues` is a valid field."
    },
    INPUT_OBJECT: {
      value: De.INPUT_OBJECT,
      description: "Indicates this type is an input object. `inputFields` is a valid field."
    },
    LIST: {
      value: De.LIST,
      description: "Indicates this type is a list. `ofType` is a valid field."
    },
    NON_NULL: {
      value: De.NON_NULL,
      description: "Indicates this type is a non-null. `ofType` is a valid field."
    }
  }
}), _r = {
  name: "__schema",
  type: new ne(Hs),
  description: "Access the current type schema of this server.",
  args: [],
  resolve: (t, e, n, { schema: i }) => i,
  deprecationReason: void 0,
  extensions: /* @__PURE__ */ Object.create(null),
  astNode: void 0
}, Ir = {
  name: "__type",
  type: Ut,
  description: "Request the type information of a single type.",
  args: [
    {
      name: "name",
      description: void 0,
      type: new ne(ue),
      defaultValue: void 0,
      deprecationReason: void 0,
      extensions: /* @__PURE__ */ Object.create(null),
      astNode: void 0
    }
  ],
  resolve: (t, { name: e }, n, { schema: i }) => i.getType(e),
  deprecationReason: void 0,
  extensions: /* @__PURE__ */ Object.create(null),
  astNode: void 0
}, Or = {
  name: "__typename",
  type: new ne(ue),
  description: "The name of the current Object type at runtime.",
  args: [],
  resolve: (t, e, n, { parentType: i }) => i.name,
  deprecationReason: void 0,
  extensions: /* @__PURE__ */ Object.create(null),
  astNode: void 0
}, Ou = Object.freeze([
  Hs,
  vu,
  Tu,
  Ut,
  Su,
  Mr,
  _u,
  Iu
]);
function Nu(t) {
  return Ou.some(({ name: e }) => t.name === e);
}
function Au(t) {
  return qt(t, Ys);
}
function pf(t) {
  if (!Au(t))
    throw new Error(`Expected ${G(t)} to be a GraphQL schema.`);
  return t;
}
class Ys {
  // Used as a cache for validateSchema().
  constructor(e) {
    var n, i;
    this.__validationErrors = e.assumeValid === !0 ? [] : void 0, Jt(e) || ae(!1, "Must provide configuration object."), !e.types || Array.isArray(e.types) || ae(
      !1,
      `"types" must be Array if provided but got: ${G(e.types)}.`
    ), !e.directives || Array.isArray(e.directives) || ae(
      !1,
      `"directives" must be Array if provided but got: ${G(e.directives)}.`
    ), this.description = e.description, this.extensions = yt(e.extensions), this.astNode = e.astNode, this.extensionASTNodes = (n = e.extensionASTNodes) !== null && n !== void 0 ? n : [], this._queryType = e.query, this._mutationType = e.mutation, this._subscriptionType = e.subscription, this._directives = (i = e.directives) !== null && i !== void 0 ? i : zi;
    const r = new Set(e.types);
    if (e.types != null)
      for (const s of e.types)
        r.delete(s), jt(s, r);
    this._queryType != null && jt(this._queryType, r), this._mutationType != null && jt(this._mutationType, r), this._subscriptionType != null && jt(this._subscriptionType, r);
    for (const s of this._directives)
      if (bu(s))
        for (const o of s.args)
          jt(o.type, r);
    jt(Hs, r), this._typeMap = /* @__PURE__ */ Object.create(null), this._subTypeMap = /* @__PURE__ */ Object.create(null), this._implementationsMap = /* @__PURE__ */ Object.create(null);
    for (const s of r) {
      if (s == null)
        continue;
      const o = s.name;
      if (o || ae(
        !1,
        "One of the provided types for building the Schema is missing a name."
      ), this._typeMap[o] !== void 0)
        throw new Error(
          `Schema must contain uniquely named types but contains multiple types named "${o}".`
        );
      if (this._typeMap[o] = s, Ee(s)) {
        for (const a of s.getInterfaces())
          if (Ee(a)) {
            let u = this._implementationsMap[a.name];
            u === void 0 && (u = this._implementationsMap[a.name] = {
              objects: [],
              interfaces: []
            }), u.interfaces.push(s);
          }
      } else if (pe(s)) {
        for (const a of s.getInterfaces())
          if (Ee(a)) {
            let u = this._implementationsMap[a.name];
            u === void 0 && (u = this._implementationsMap[a.name] = {
              objects: [],
              interfaces: []
            }), u.objects.push(s);
          }
      }
    }
  }
  get [Symbol.toStringTag]() {
    return "GraphQLSchema";
  }
  getQueryType() {
    return this._queryType;
  }
  getMutationType() {
    return this._mutationType;
  }
  getSubscriptionType() {
    return this._subscriptionType;
  }
  getRootType(e) {
    switch (e) {
      case Je.QUERY:
        return this.getQueryType();
      case Je.MUTATION:
        return this.getMutationType();
      case Je.SUBSCRIPTION:
        return this.getSubscriptionType();
    }
  }
  getTypeMap() {
    return this._typeMap;
  }
  getType(e) {
    return this.getTypeMap()[e];
  }
  getPossibleTypes(e) {
    return Bt(e) ? e.getTypes() : this.getImplementations(e).objects;
  }
  getImplementations(e) {
    const n = this._implementationsMap[e.name];
    return n ?? {
      objects: [],
      interfaces: []
    };
  }
  isSubType(e, n) {
    let i = this._subTypeMap[e.name];
    if (i === void 0) {
      if (i = /* @__PURE__ */ Object.create(null), Bt(e))
        for (const r of e.getTypes())
          i[r.name] = !0;
      else {
        const r = this.getImplementations(e);
        for (const s of r.objects)
          i[s.name] = !0;
        for (const s of r.interfaces)
          i[s.name] = !0;
      }
      this._subTypeMap[e.name] = i;
    }
    return i[n.name] !== void 0;
  }
  getDirectives() {
    return this._directives;
  }
  getDirective(e) {
    return this.getDirectives().find((n) => n.name === e);
  }
  toConfig() {
    return {
      description: this.description,
      query: this.getQueryType(),
      mutation: this.getMutationType(),
      subscription: this.getSubscriptionType(),
      types: Object.values(this.getTypeMap()),
      directives: this.getDirectives(),
      extensions: this.extensions,
      astNode: this.astNode,
      extensionASTNodes: this.extensionASTNodes,
      assumeValid: this.__validationErrors !== void 0
    };
  }
}
function jt(t, e) {
  const n = Mt(t);
  if (!e.has(n)) {
    if (e.add(n), Bt(n))
      for (const i of n.getTypes())
        jt(i, e);
    else if (pe(n) || Ee(n)) {
      for (const i of n.getInterfaces())
        jt(i, e);
      for (const i of Object.values(n.getFields())) {
        jt(i.type, e);
        for (const r of i.args)
          jt(r.type, e);
      }
    } else if (ze(n))
      for (const i of Object.values(n.getFields()))
        jt(i.type, e);
  }
  return e;
}
function gf(t) {
  if (pf(t), t.__validationErrors)
    return t.__validationErrors;
  const e = new mf(t);
  yf(e), bf(e), wf(e);
  const n = e.getErrors();
  return t.__validationErrors = n, n;
}
function xu(t) {
  const e = gf(t);
  if (e.length !== 0)
    throw new Error(e.map((n) => n.message).join(`

`));
}
class mf {
  constructor(e) {
    this._errors = [], this.schema = e;
  }
  reportError(e, n) {
    const i = Array.isArray(n) ? n.filter(Boolean) : n;
    this._errors.push(
      new j(e, {
        nodes: i
      })
    );
  }
  getErrors() {
    return this._errors;
  }
}
function yf(t) {
  const e = t.schema, n = e.getQueryType();
  if (!n)
    t.reportError("Query root type must be provided.", e.astNode);
  else if (!pe(n)) {
    var i;
    t.reportError(
      `Query root type must be Object type, it cannot be ${G(
        n
      )}.`,
      (i = is(
        e,
        Je.QUERY
      )) !== null && i !== void 0 ? i : n.astNode
    );
  }
  const r = e.getMutationType();
  if (r && !pe(r)) {
    var s;
    t.reportError(
      `Mutation root type must be Object type if provided, it cannot be ${G(r)}.`,
      (s = is(
        e,
        Je.MUTATION
      )) !== null && s !== void 0 ? s : r.astNode
    );
  }
  const o = e.getSubscriptionType();
  if (o && !pe(o)) {
    var a;
    t.reportError(
      `Subscription root type must be Object type if provided, it cannot be ${G(o)}.`,
      (a = is(
        e,
        Je.SUBSCRIPTION
      )) !== null && a !== void 0 ? a : o.astNode
    );
  }
}
function is(t, e) {
  var n;
  return (n = [t.astNode, ...t.extensionASTNodes].flatMap(
    // FIXME: https://github.com/graphql/graphql-js/issues/2203
    (i) => {
      var r;
      return (
        /* c8 ignore next */
        (r = i == null ? void 0 : i.operationTypes) !== null && r !== void 0 ? r : []
      );
    }
  ).find((i) => i.operation === e)) === null || n === void 0 ? void 0 : n.type;
}
function bf(t) {
  for (const n of t.schema.getDirectives()) {
    if (!bu(n)) {
      t.reportError(
        `Expected directive but got: ${G(n)}.`,
        n == null ? void 0 : n.astNode
      );
      continue;
    }
    Dn(t, n);
    for (const i of n.args)
      if (Dn(t, i), Pt(i.type) || t.reportError(
        `The type of @${n.name}(${i.name}:) must be Input Type but got: ${G(i.type)}.`,
        i.astNode
      ), Vi(i) && i.deprecationReason != null) {
        var e;
        t.reportError(
          `Required argument @${n.name}(${i.name}:) cannot be deprecated.`,
          [
            Js(i.astNode),
            (e = i.astNode) === null || e === void 0 ? void 0 : e.type
          ]
        );
      }
  }
}
function Dn(t, e) {
  e.name.startsWith("__") && t.reportError(
    `Name "${e.name}" must not begin with "__", which is reserved by GraphQL introspection.`,
    e.astNode
  );
}
function wf(t) {
  const e = Of(t), n = t.schema.getTypeMap();
  for (const i of Object.values(n)) {
    if (!af(i)) {
      t.reportError(
        `Expected GraphQL named type but got: ${G(i)}.`,
        i.astNode
      );
      continue;
    }
    Nu(i) || Dn(t, i), pe(i) || Ee(i) ? (Bo(t, i), Go(t, i)) : Bt(i) ? Tf(t, i) : Gt(i) ? Sf(t, i) : ze(i) && (_f(t, i), e(i));
  }
}
function Bo(t, e) {
  const n = Object.values(e.getFields());
  n.length === 0 && t.reportError(`Type ${e.name} must define one or more fields.`, [
    e.astNode,
    ...e.extensionASTNodes
  ]);
  for (const o of n) {
    if (Dn(t, o), !Fi(o.type)) {
      var i;
      t.reportError(
        `The type of ${e.name}.${o.name} must be Output Type but got: ${G(o.type)}.`,
        (i = o.astNode) === null || i === void 0 ? void 0 : i.type
      );
    }
    for (const a of o.args) {
      const u = a.name;
      if (Dn(t, a), !Pt(a.type)) {
        var r;
        t.reportError(
          `The type of ${e.name}.${o.name}(${u}:) must be Input Type but got: ${G(a.type)}.`,
          (r = a.astNode) === null || r === void 0 ? void 0 : r.type
        );
      }
      if (Vi(a) && a.deprecationReason != null) {
        var s;
        t.reportError(
          `Required argument ${e.name}.${o.name}(${u}:) cannot be deprecated.`,
          [
            Js(a.astNode),
            (s = a.astNode) === null || s === void 0 ? void 0 : s.type
          ]
        );
      }
    }
  }
}
function Go(t, e) {
  const n = /* @__PURE__ */ Object.create(null);
  for (const i of e.getInterfaces()) {
    if (!Ee(i)) {
      t.reportError(
        `Type ${G(e)} must only implement Interface types, it cannot implement ${G(i)}.`,
        Li(e, i)
      );
      continue;
    }
    if (e === i) {
      t.reportError(
        `Type ${e.name} cannot implement itself because it would create a circular reference.`,
        Li(e, i)
      );
      continue;
    }
    if (n[i.name]) {
      t.reportError(
        `Type ${e.name} can only implement ${i.name} once.`,
        Li(e, i)
      );
      continue;
    }
    n[i.name] = !0, vf(t, e, i), Ef(t, e, i);
  }
}
function Ef(t, e, n) {
  const i = e.getFields();
  for (const u of Object.values(n.getFields())) {
    const c = u.name, f = i[c];
    if (!f) {
      t.reportError(
        `Interface field ${n.name}.${c} expected but ${e.name} does not provide it.`,
        [u.astNode, e.astNode, ...e.extensionASTNodes]
      );
      continue;
    }
    if (!Jn(t.schema, f.type, u.type)) {
      var r, s;
      t.reportError(
        `Interface field ${n.name}.${c} expects type ${G(u.type)} but ${e.name}.${c} is type ${G(f.type)}.`,
        [
          (r = u.astNode) === null || r === void 0 ? void 0 : r.type,
          (s = f.astNode) === null || s === void 0 ? void 0 : s.type
        ]
      );
    }
    for (const g of u.args) {
      const p = g.name, v = f.args.find((w) => w.name === p);
      if (!v) {
        t.reportError(
          `Interface field argument ${n.name}.${c}(${p}:) expected but ${e.name}.${c} does not provide it.`,
          [g.astNode, f.astNode]
        );
        continue;
      }
      if (!ys(g.type, v.type)) {
        var o, a;
        t.reportError(
          `Interface field argument ${n.name}.${c}(${p}:) expects type ${G(g.type)} but ${e.name}.${c}(${p}:) is type ${G(v.type)}.`,
          [
            (o = g.astNode) === null || o === void 0 ? void 0 : o.type,
            (a = v.astNode) === null || a === void 0 ? void 0 : a.type
          ]
        );
      }
    }
    for (const g of f.args) {
      const p = g.name;
      !u.args.find((w) => w.name === p) && Vi(g) && t.reportError(
        `Object field ${e.name}.${c} includes required argument ${p} that is missing from the Interface field ${n.name}.${c}.`,
        [g.astNode, u.astNode]
      );
    }
  }
}
function vf(t, e, n) {
  const i = e.getInterfaces();
  for (const r of n.getInterfaces())
    i.includes(r) || t.reportError(
      r === e ? `Type ${e.name} cannot implement ${n.name} because it would create a circular reference.` : `Type ${e.name} must implement ${r.name} because it is implemented by ${n.name}.`,
      [
        ...Li(n, r),
        ...Li(e, n)
      ]
    );
}
function Tf(t, e) {
  const n = e.getTypes();
  n.length === 0 && t.reportError(
    `Union type ${e.name} must define one or more member types.`,
    [e.astNode, ...e.extensionASTNodes]
  );
  const i = /* @__PURE__ */ Object.create(null);
  for (const r of n) {
    if (i[r.name]) {
      t.reportError(
        `Union type ${e.name} can only include type ${r.name} once.`,
        qo(e, r.name)
      );
      continue;
    }
    i[r.name] = !0, pe(r) || t.reportError(
      `Union type ${e.name} can only include Object types, it cannot include ${G(r)}.`,
      qo(e, String(r))
    );
  }
}
function Sf(t, e) {
  const n = e.getValues();
  n.length === 0 && t.reportError(
    `Enum type ${e.name} must define one or more values.`,
    [e.astNode, ...e.extensionASTNodes]
  );
  for (const i of n)
    Dn(t, i);
}
function _f(t, e) {
  const n = Object.values(e.getFields());
  n.length === 0 && t.reportError(
    `Input Object type ${e.name} must define one or more fields.`,
    [e.astNode, ...e.extensionASTNodes]
  );
  for (const s of n) {
    if (Dn(t, s), !Pt(s.type)) {
      var i;
      t.reportError(
        `The type of ${e.name}.${s.name} must be Input Type but got: ${G(s.type)}.`,
        (i = s.astNode) === null || i === void 0 ? void 0 : i.type
      );
    }
    if (yu(s) && s.deprecationReason != null) {
      var r;
      t.reportError(
        `Required input field ${e.name}.${s.name} cannot be deprecated.`,
        [
          Js(s.astNode),
          (r = s.astNode) === null || r === void 0 ? void 0 : r.type
        ]
      );
    }
    e.isOneOf && If(e, s, t);
  }
}
function If(t, e, n) {
  if (re(e.type)) {
    var i;
    n.reportError(
      `OneOf input field ${t.name}.${e.name} must be nullable.`,
      (i = e.astNode) === null || i === void 0 ? void 0 : i.type
    );
  }
  e.defaultValue !== void 0 && n.reportError(
    `OneOf input field ${t.name}.${e.name} cannot have a default value.`,
    e.astNode
  );
}
function Of(t) {
  const e = /* @__PURE__ */ Object.create(null), n = [], i = /* @__PURE__ */ Object.create(null);
  return r;
  function r(s) {
    if (e[s.name])
      return;
    e[s.name] = !0, i[s.name] = n.length;
    const o = Object.values(s.getFields());
    for (const a of o)
      if (re(a.type) && ze(a.type.ofType)) {
        const u = a.type.ofType, c = i[u.name];
        if (n.push(a), c === void 0)
          r(u);
        else {
          const f = n.slice(c), g = f.map((p) => p.name).join(".");
          t.reportError(
            `Cannot reference Input Object "${u.name}" within itself through a series of non-null fields: "${g}".`,
            f.map((p) => p.astNode)
          );
        }
        n.pop();
      }
    i[s.name] = void 0;
  }
}
function Li(t, e) {
  const { astNode: n, extensionASTNodes: i } = t;
  return (n != null ? [n, ...i] : i).flatMap((s) => {
    var o;
    return (
      /* c8 ignore next */
      (o = s.interfaces) !== null && o !== void 0 ? o : []
    );
  }).filter((s) => s.name.value === e.name);
}
function qo(t, e) {
  const { astNode: n, extensionASTNodes: i } = t;
  return (n != null ? [n, ...i] : i).flatMap((s) => {
    var o;
    return (
      /* c8 ignore next */
      (o = s.types) !== null && o !== void 0 ? o : []
    );
  }).filter((s) => s.name.value === e);
}
function Js(t) {
  var e;
  return t == null || (e = t.directives) === null || e === void 0 ? void 0 : e.find(
    (n) => n.name.value === wu.name
  );
}
function it(t, e) {
  switch (e.kind) {
    case I.LIST_TYPE: {
      const n = it(t, e.type);
      return n && new Ue(n);
    }
    case I.NON_NULL_TYPE: {
      const n = it(t, e.type);
      return n && new ne(n);
    }
    case I.NAMED_TYPE:
      return t.getType(e.name.value);
  }
}
class Fu {
  constructor(e, n, i) {
    this._schema = e, this._typeStack = [], this._parentTypeStack = [], this._inputTypeStack = [], this._fieldDefStack = [], this._defaultValueStack = [], this._directive = null, this._argument = null, this._enumValue = null, this._getFieldDef = i ?? Nf, n && (Pt(n) && this._inputTypeStack.push(n), wn(n) && this._parentTypeStack.push(n), Fi(n) && this._typeStack.push(n));
  }
  get [Symbol.toStringTag]() {
    return "TypeInfo";
  }
  getType() {
    if (this._typeStack.length > 0)
      return this._typeStack[this._typeStack.length - 1];
  }
  getParentType() {
    if (this._parentTypeStack.length > 0)
      return this._parentTypeStack[this._parentTypeStack.length - 1];
  }
  getInputType() {
    if (this._inputTypeStack.length > 0)
      return this._inputTypeStack[this._inputTypeStack.length - 1];
  }
  getParentInputType() {
    if (this._inputTypeStack.length > 1)
      return this._inputTypeStack[this._inputTypeStack.length - 2];
  }
  getFieldDef() {
    if (this._fieldDefStack.length > 0)
      return this._fieldDefStack[this._fieldDefStack.length - 1];
  }
  getDefaultValue() {
    if (this._defaultValueStack.length > 0)
      return this._defaultValueStack[this._defaultValueStack.length - 1];
  }
  getDirective() {
    return this._directive;
  }
  getArgument() {
    return this._argument;
  }
  getEnumValue() {
    return this._enumValue;
  }
  enter(e) {
    const n = this._schema;
    switch (e.kind) {
      case I.SELECTION_SET: {
        const r = Mt(this.getType());
        this._parentTypeStack.push(
          wn(r) ? r : void 0
        );
        break;
      }
      case I.FIELD: {
        const r = this.getParentType();
        let s, o;
        r && (s = this._getFieldDef(n, r, e), s && (o = s.type)), this._fieldDefStack.push(s), this._typeStack.push(Fi(o) ? o : void 0);
        break;
      }
      case I.DIRECTIVE:
        this._directive = n.getDirective(e.name.value);
        break;
      case I.OPERATION_DEFINITION: {
        const r = n.getRootType(e.operation);
        this._typeStack.push(pe(r) ? r : void 0);
        break;
      }
      case I.INLINE_FRAGMENT:
      case I.FRAGMENT_DEFINITION: {
        const r = e.typeCondition, s = r ? it(n, r) : Mt(this.getType());
        this._typeStack.push(Fi(s) ? s : void 0);
        break;
      }
      case I.VARIABLE_DEFINITION: {
        const r = it(n, e.type);
        this._inputTypeStack.push(
          Pt(r) ? r : void 0
        );
        break;
      }
      case I.ARGUMENT: {
        var i;
        let r, s;
        const o = (i = this.getDirective()) !== null && i !== void 0 ? i : this.getFieldDef();
        o && (r = o.args.find(
          (a) => a.name === e.name.value
        ), r && (s = r.type)), this._argument = r, this._defaultValueStack.push(r ? r.defaultValue : void 0), this._inputTypeStack.push(Pt(s) ? s : void 0);
        break;
      }
      case I.LIST: {
        const r = lu(this.getInputType()), s = Pe(r) ? r.ofType : r;
        this._defaultValueStack.push(void 0), this._inputTypeStack.push(Pt(s) ? s : void 0);
        break;
      }
      case I.OBJECT_FIELD: {
        const r = Mt(this.getInputType());
        let s, o;
        ze(r) && (o = r.getFields()[e.name.value], o && (s = o.type)), this._defaultValueStack.push(
          o ? o.defaultValue : void 0
        ), this._inputTypeStack.push(
          Pt(s) ? s : void 0
        );
        break;
      }
      case I.ENUM: {
        const r = Mt(this.getInputType());
        let s;
        Gt(r) && (s = r.getValue(e.value)), this._enumValue = s;
        break;
      }
    }
  }
  leave(e) {
    switch (e.kind) {
      case I.SELECTION_SET:
        this._parentTypeStack.pop();
        break;
      case I.FIELD:
        this._fieldDefStack.pop(), this._typeStack.pop();
        break;
      case I.DIRECTIVE:
        this._directive = null;
        break;
      case I.OPERATION_DEFINITION:
      case I.INLINE_FRAGMENT:
      case I.FRAGMENT_DEFINITION:
        this._typeStack.pop();
        break;
      case I.VARIABLE_DEFINITION:
        this._inputTypeStack.pop();
        break;
      case I.ARGUMENT:
        this._argument = null, this._defaultValueStack.pop(), this._inputTypeStack.pop();
        break;
      case I.LIST:
      case I.OBJECT_FIELD:
        this._defaultValueStack.pop(), this._inputTypeStack.pop();
        break;
      case I.ENUM:
        this._enumValue = null;
        break;
    }
  }
}
function Nf(t, e, n) {
  const i = n.name.value;
  if (i === _r.name && t.getQueryType() === e)
    return _r;
  if (i === Ir.name && t.getQueryType() === e)
    return Ir;
  if (i === Or.name && wn(e))
    return Or;
  if (pe(e) || Ee(e))
    return e.getFields()[i];
}
function Ru(t, e) {
  return {
    enter(...n) {
      const i = n[0];
      t.enter(i);
      const r = Sr(e, i.kind).enter;
      if (r) {
        const s = r.apply(e, n);
        return s !== void 0 && (t.leave(i), hs(s) && t.enter(s)), s;
      }
    },
    leave(...n) {
      const i = n[0], r = Sr(e, i.kind).leave;
      let s;
      return r && (s = r.apply(e, n)), t.leave(i), s;
    }
  };
}
function Af(t) {
  return t.kind === I.OPERATION_DEFINITION || t.kind === I.FRAGMENT_DEFINITION;
}
function xf(t) {
  return t.kind === I.SCHEMA_DEFINITION || Ks(t) || t.kind === I.DIRECTIVE_DEFINITION;
}
function Ks(t) {
  return t.kind === I.SCALAR_TYPE_DEFINITION || t.kind === I.OBJECT_TYPE_DEFINITION || t.kind === I.INTERFACE_TYPE_DEFINITION || t.kind === I.UNION_TYPE_DEFINITION || t.kind === I.ENUM_TYPE_DEFINITION || t.kind === I.INPUT_OBJECT_TYPE_DEFINITION;
}
function Ff(t) {
  return t.kind === I.SCHEMA_EXTENSION || Lu(t);
}
function Lu(t) {
  return t.kind === I.SCALAR_TYPE_EXTENSION || t.kind === I.OBJECT_TYPE_EXTENSION || t.kind === I.INTERFACE_TYPE_EXTENSION || t.kind === I.UNION_TYPE_EXTENSION || t.kind === I.ENUM_TYPE_EXTENSION || t.kind === I.INPUT_OBJECT_TYPE_EXTENSION;
}
function Rf(t) {
  return {
    Document(e) {
      for (const n of e.definitions)
        if (!Af(n)) {
          const i = n.kind === I.SCHEMA_DEFINITION || n.kind === I.SCHEMA_EXTENSION ? "schema" : '"' + n.name.value + '"';
          t.reportError(
            new j(`The ${i} definition is not executable.`, {
              nodes: n
            })
          );
        }
      return !1;
    }
  };
}
function Lf(t) {
  return {
    Field(e) {
      const n = t.getParentType();
      if (n && !t.getFieldDef()) {
        const r = t.getSchema(), s = e.name.value;
        let o = yn(
          "to use an inline fragment on",
          Cf(r, n, s)
        );
        o === "" && (o = yn(kf(n, s))), t.reportError(
          new j(
            `Cannot query field "${s}" on type "${n.name}".` + o,
            {
              nodes: e
            }
          )
        );
      }
    }
  };
}
function Cf(t, e, n) {
  if (!nn(e))
    return [];
  const i = /* @__PURE__ */ new Set(), r = /* @__PURE__ */ Object.create(null);
  for (const o of t.getPossibleTypes(e))
    if (o.getFields()[n]) {
      i.add(o), r[o.name] = 1;
      for (const a of o.getInterfaces()) {
        var s;
        a.getFields()[n] && (i.add(a), r[a.name] = ((s = r[a.name]) !== null && s !== void 0 ? s : 0) + 1);
      }
    }
  return [...i].sort((o, a) => {
    const u = r[a.name] - r[o.name];
    return u !== 0 ? u : Ee(o) && t.isSubType(o, a) ? -1 : Ee(a) && t.isSubType(a, o) ? 1 : Ui(o.name, a.name);
  }).map((o) => o.name);
}
function kf(t, e) {
  if (pe(t) || Ee(t)) {
    const n = Object.keys(t.getFields());
    return $n(e, n);
  }
  return [];
}
function Df(t) {
  return {
    InlineFragment(e) {
      const n = e.typeCondition;
      if (n) {
        const i = it(t.getSchema(), n);
        if (i && !wn(i)) {
          const r = be(n);
          t.reportError(
            new j(
              `Fragment cannot condition on non composite type "${r}".`,
              {
                nodes: n
              }
            )
          );
        }
      }
    },
    FragmentDefinition(e) {
      const n = it(t.getSchema(), e.typeCondition);
      if (n && !wn(n)) {
        const i = be(e.typeCondition);
        t.reportError(
          new j(
            `Fragment "${e.name.value}" cannot condition on non composite type "${i}".`,
            {
              nodes: e.typeCondition
            }
          )
        );
      }
    }
  };
}
function $f(t) {
  return {
    // eslint-disable-next-line new-cap
    ...jf(t),
    Argument(e) {
      const n = t.getArgument(), i = t.getFieldDef(), r = t.getParentType();
      if (!n && i && r) {
        const s = e.name.value, o = i.args.map((u) => u.name), a = $n(s, o);
        t.reportError(
          new j(
            `Unknown argument "${s}" on field "${r.name}.${i.name}".` + yn(a),
            {
              nodes: e
            }
          )
        );
      }
    }
  };
}
function jf(t) {
  const e = /* @__PURE__ */ Object.create(null), n = t.getSchema(), i = n ? n.getDirectives() : zi;
  for (const o of i)
    e[o.name] = o.args.map((a) => a.name);
  const r = t.getDocument().definitions;
  for (const o of r)
    if (o.kind === I.DIRECTIVE_DEFINITION) {
      var s;
      const a = (s = o.arguments) !== null && s !== void 0 ? s : [];
      e[o.name.value] = a.map((u) => u.name.value);
    }
  return {
    Directive(o) {
      const a = o.name.value, u = e[a];
      if (o.arguments && u)
        for (const c of o.arguments) {
          const f = c.name.value;
          if (!u.includes(f)) {
            const g = $n(f, u);
            t.reportError(
              new j(
                `Unknown argument "${f}" on directive "@${a}".` + yn(g),
                {
                  nodes: c
                }
              )
            );
          }
        }
      return !1;
    }
  };
}
function Pf(t) {
  const e = /* @__PURE__ */ Object.create(null), n = t.getSchema(), i = n ? n.getDirectives() : zi;
  for (const s of i)
    e[s.name] = s.locations;
  const r = t.getDocument().definitions;
  for (const s of r)
    s.kind === I.DIRECTIVE_DEFINITION && (e[s.name.value] = s.locations.map((o) => o.value));
  return {
    Directive(s, o, a, u, c) {
      const f = s.name.value, g = e[f];
      if (!g) {
        t.reportError(
          new j(`Unknown directive "@${f}".`, {
            nodes: s
          })
        );
        return;
      }
      const p = Mf(c);
      p && !g.includes(p) && t.reportError(
        new j(
          `Directive "@${f}" may not be used on ${p}.`,
          {
            nodes: s
          }
        )
      );
    }
  };
}
function Mf(t) {
  const e = t[t.length - 1];
  switch ("kind" in e || Yt(!1), e.kind) {
    case I.OPERATION_DEFINITION:
      return Uf(e.operation);
    case I.FIELD:
      return K.FIELD;
    case I.FRAGMENT_SPREAD:
      return K.FRAGMENT_SPREAD;
    case I.INLINE_FRAGMENT:
      return K.INLINE_FRAGMENT;
    case I.FRAGMENT_DEFINITION:
      return K.FRAGMENT_DEFINITION;
    case I.VARIABLE_DEFINITION:
      return K.VARIABLE_DEFINITION;
    case I.SCHEMA_DEFINITION:
    case I.SCHEMA_EXTENSION:
      return K.SCHEMA;
    case I.SCALAR_TYPE_DEFINITION:
    case I.SCALAR_TYPE_EXTENSION:
      return K.SCALAR;
    case I.OBJECT_TYPE_DEFINITION:
    case I.OBJECT_TYPE_EXTENSION:
      return K.OBJECT;
    case I.FIELD_DEFINITION:
      return K.FIELD_DEFINITION;
    case I.INTERFACE_TYPE_DEFINITION:
    case I.INTERFACE_TYPE_EXTENSION:
      return K.INTERFACE;
    case I.UNION_TYPE_DEFINITION:
    case I.UNION_TYPE_EXTENSION:
      return K.UNION;
    case I.ENUM_TYPE_DEFINITION:
    case I.ENUM_TYPE_EXTENSION:
      return K.ENUM;
    case I.ENUM_VALUE_DEFINITION:
      return K.ENUM_VALUE;
    case I.INPUT_OBJECT_TYPE_DEFINITION:
    case I.INPUT_OBJECT_TYPE_EXTENSION:
      return K.INPUT_OBJECT;
    case I.INPUT_VALUE_DEFINITION: {
      const n = t[t.length - 3];
      return "kind" in n || Yt(!1), n.kind === I.INPUT_OBJECT_TYPE_DEFINITION ? K.INPUT_FIELD_DEFINITION : K.ARGUMENT_DEFINITION;
    }
    default:
      Yt(!1, "Unexpected kind: " + G(e.kind));
  }
}
function Uf(t) {
  switch (t) {
    case Je.QUERY:
      return K.QUERY;
    case Je.MUTATION:
      return K.MUTATION;
    case Je.SUBSCRIPTION:
      return K.SUBSCRIPTION;
  }
}
function Vf(t) {
  return {
    FragmentSpread(e) {
      const n = e.name.value;
      t.getFragment(n) || t.reportError(
        new j(`Unknown fragment "${n}".`, {
          nodes: e.name
        })
      );
    }
  };
}
function Bf(t) {
  const e = t.getSchema(), n = e ? e.getTypeMap() : /* @__PURE__ */ Object.create(null), i = /* @__PURE__ */ Object.create(null);
  for (const s of t.getDocument().definitions)
    Ks(s) && (i[s.name.value] = !0);
  const r = [
    ...Object.keys(n),
    ...Object.keys(i)
  ];
  return {
    NamedType(s, o, a, u, c) {
      const f = s.name.value;
      if (!n[f] && !i[f]) {
        var g;
        const p = (g = c[2]) !== null && g !== void 0 ? g : a, v = p != null && Gf(p);
        if (v && zo.includes(f))
          return;
        const w = $n(
          f,
          v ? zo.concat(r) : r
        );
        t.reportError(
          new j(
            `Unknown type "${f}".` + yn(w),
            {
              nodes: s
            }
          )
        );
      }
    }
  };
}
const zo = [...cf, ...Ou].map(
  (t) => t.name
);
function Gf(t) {
  return "kind" in t && (xf(t) || Ff(t));
}
function qf(t) {
  let e = 0;
  return {
    Document(n) {
      e = n.definitions.filter(
        (i) => i.kind === I.OPERATION_DEFINITION
      ).length;
    },
    OperationDefinition(n) {
      !n.name && e > 1 && t.reportError(
        new j(
          "This anonymous operation must be the only defined operation.",
          {
            nodes: n
          }
        )
      );
    }
  };
}
const zf = 3;
function Qf(t) {
  function e(n, i = /* @__PURE__ */ Object.create(null), r = 0) {
    if (n.kind === I.FRAGMENT_SPREAD) {
      const s = n.name.value;
      if (i[s] === !0)
        return !1;
      const o = t.getFragment(s);
      if (!o)
        return !1;
      try {
        return i[s] = !0, e(o, i, r);
      } finally {
        i[s] = void 0;
      }
    }
    if (n.kind === I.FIELD && // check all introspection lists
    (n.name.value === "fields" || n.name.value === "interfaces" || n.name.value === "possibleTypes" || n.name.value === "inputFields") && (r++, r >= zf))
      return !0;
    if ("selectionSet" in n && n.selectionSet) {
      for (const s of n.selectionSet.selections)
        if (e(s, i, r))
          return !0;
    }
    return !1;
  }
  return {
    Field(n) {
      if ((n.name.value === "__schema" || n.name.value === "__type") && e(n))
        return t.reportError(
          new j("Maximum introspection depth exceeded", {
            nodes: [n]
          })
        ), !1;
    }
  };
}
function Wf(t) {
  const e = /* @__PURE__ */ Object.create(null), n = [], i = /* @__PURE__ */ Object.create(null);
  return {
    OperationDefinition: () => !1,
    FragmentDefinition(s) {
      return r(s), !1;
    }
  };
  function r(s) {
    if (e[s.name.value])
      return;
    const o = s.name.value;
    e[o] = !0;
    const a = t.getFragmentSpreads(s.selectionSet);
    if (a.length !== 0) {
      i[o] = n.length;
      for (const u of a) {
        const c = u.name.value, f = i[c];
        if (n.push(u), f === void 0) {
          const g = t.getFragment(c);
          g && r(g);
        } else {
          const g = n.slice(f), p = g.slice(0, -1).map((v) => '"' + v.name.value + '"').join(", ");
          t.reportError(
            new j(
              `Cannot spread fragment "${c}" within itself` + (p !== "" ? ` via ${p}.` : "."),
              {
                nodes: g
              }
            )
          );
        }
        n.pop();
      }
      i[o] = void 0;
    }
  }
}
function Hf(t) {
  let e = /* @__PURE__ */ Object.create(null);
  return {
    OperationDefinition: {
      enter() {
        e = /* @__PURE__ */ Object.create(null);
      },
      leave(n) {
        const i = t.getRecursiveVariableUsages(n);
        for (const { node: r } of i) {
          const s = r.name.value;
          e[s] !== !0 && t.reportError(
            new j(
              n.name ? `Variable "$${s}" is not defined by operation "${n.name.value}".` : `Variable "$${s}" is not defined.`,
              {
                nodes: [r, n]
              }
            )
          );
        }
      }
    },
    VariableDefinition(n) {
      e[n.variable.name.value] = !0;
    }
  };
}
function Yf(t) {
  const e = [], n = [];
  return {
    OperationDefinition(i) {
      return e.push(i), !1;
    },
    FragmentDefinition(i) {
      return n.push(i), !1;
    },
    Document: {
      leave() {
        const i = /* @__PURE__ */ Object.create(null);
        for (const r of e)
          for (const s of t.getRecursivelyReferencedFragments(
            r
          ))
            i[s.name.value] = !0;
        for (const r of n) {
          const s = r.name.value;
          i[s] !== !0 && t.reportError(
            new j(`Fragment "${s}" is never used.`, {
              nodes: r
            })
          );
        }
      }
    }
  };
}
function Jf(t) {
  let e = [];
  return {
    OperationDefinition: {
      enter() {
        e = [];
      },
      leave(n) {
        const i = /* @__PURE__ */ Object.create(null), r = t.getRecursiveVariableUsages(n);
        for (const { node: s } of r)
          i[s.name.value] = !0;
        for (const s of e) {
          const o = s.variable.name.value;
          i[o] !== !0 && t.reportError(
            new j(
              n.name ? `Variable "$${o}" is never used in operation "${n.name.value}".` : `Variable "$${o}" is never used.`,
              {
                nodes: s
              }
            )
          );
        }
      }
    },
    VariableDefinition(n) {
      e.push(n);
    }
  };
}
function Xs(t) {
  switch (t.kind) {
    case I.OBJECT:
      return { ...t, fields: Kf(t.fields) };
    case I.LIST:
      return { ...t, values: t.values.map(Xs) };
    case I.INT:
    case I.FLOAT:
    case I.STRING:
    case I.BOOLEAN:
    case I.NULL:
    case I.ENUM:
    case I.VARIABLE:
      return t;
  }
}
function Kf(t) {
  return t.map((e) => ({
    ...e,
    value: Xs(e.value)
  })).sort(
    (e, n) => Ui(e.name.value, n.name.value)
  );
}
function Cu(t) {
  return Array.isArray(t) ? t.map(
    ([e, n]) => `subfields "${e}" conflict because ` + Cu(n)
  ).join(" and ") : t;
}
function Xf(t) {
  const e = new rd(), n = /* @__PURE__ */ new Map();
  return {
    SelectionSet(i) {
      const r = Zf(
        t,
        n,
        e,
        t.getParentType(),
        i
      );
      for (const [[s, o], a, u] of r) {
        const c = Cu(o);
        t.reportError(
          new j(
            `Fields "${s}" conflict because ${c}. Use different aliases on the fields to fetch both if this was intentional.`,
            {
              nodes: a.concat(u)
            }
          )
        );
      }
    }
  };
}
function Zf(t, e, n, i, r) {
  const s = [], [o, a] = xr(
    t,
    e,
    i,
    r
  );
  if (td(
    t,
    s,
    e,
    n,
    o
  ), a.length !== 0)
    for (let u = 0; u < a.length; u++) {
      Nr(
        t,
        s,
        e,
        n,
        !1,
        o,
        a[u]
      );
      for (let c = u + 1; c < a.length; c++)
        Ar(
          t,
          s,
          e,
          n,
          !1,
          a[u],
          a[c]
        );
    }
  return s;
}
function Nr(t, e, n, i, r, s, o) {
  const a = t.getFragment(o);
  if (!a)
    return;
  const [u, c] = ws(
    t,
    n,
    a
  );
  if (s !== u) {
    Zs(
      t,
      e,
      n,
      i,
      r,
      s,
      u
    );
    for (const f of c)
      i.has(
        f,
        o,
        r
      ) || (i.add(
        f,
        o,
        r
      ), Nr(
        t,
        e,
        n,
        i,
        r,
        s,
        f
      ));
  }
}
function Ar(t, e, n, i, r, s, o) {
  if (s === o || i.has(
    s,
    o,
    r
  ))
    return;
  i.add(s, o, r);
  const a = t.getFragment(s), u = t.getFragment(o);
  if (!a || !u)
    return;
  const [c, f] = ws(
    t,
    n,
    a
  ), [g, p] = ws(
    t,
    n,
    u
  );
  Zs(
    t,
    e,
    n,
    i,
    r,
    c,
    g
  );
  for (const v of p)
    Ar(
      t,
      e,
      n,
      i,
      r,
      s,
      v
    );
  for (const v of f)
    Ar(
      t,
      e,
      n,
      i,
      r,
      v,
      o
    );
}
function ed(t, e, n, i, r, s, o, a) {
  const u = [], [c, f] = xr(
    t,
    e,
    r,
    s
  ), [g, p] = xr(
    t,
    e,
    o,
    a
  );
  Zs(
    t,
    u,
    e,
    n,
    i,
    c,
    g
  );
  for (const v of p)
    Nr(
      t,
      u,
      e,
      n,
      i,
      c,
      v
    );
  for (const v of f)
    Nr(
      t,
      u,
      e,
      n,
      i,
      g,
      v
    );
  for (const v of f)
    for (const w of p)
      Ar(
        t,
        u,
        e,
        n,
        i,
        v,
        w
      );
  return u;
}
function td(t, e, n, i, r) {
  for (const [s, o] of Object.entries(r))
    if (o.length > 1)
      for (let a = 0; a < o.length; a++)
        for (let u = a + 1; u < o.length; u++) {
          const c = ku(
            t,
            n,
            i,
            !1,
            // within one collection is never mutually exclusive
            s,
            o[a],
            o[u]
          );
          c && e.push(c);
        }
}
function Zs(t, e, n, i, r, s, o) {
  for (const [a, u] of Object.entries(s)) {
    const c = o[a];
    if (c)
      for (const f of u)
        for (const g of c) {
          const p = ku(
            t,
            n,
            i,
            r,
            a,
            f,
            g
          );
          p && e.push(p);
        }
  }
}
function ku(t, e, n, i, r, s, o) {
  const [a, u, c] = s, [f, g, p] = o, v = i || a !== f && pe(a) && pe(f);
  if (!v) {
    const S = u.name.value, A = g.name.value;
    if (S !== A)
      return [
        [r, `"${S}" and "${A}" are different fields`],
        [u],
        [g]
      ];
    if (!nd(u, g))
      return [
        [r, "they have differing arguments"],
        [u],
        [g]
      ];
  }
  const w = c == null ? void 0 : c.type, R = p == null ? void 0 : p.type;
  if (w && R && bs(w, R))
    return [
      [
        r,
        `they return conflicting types "${G(w)}" and "${G(
          R
        )}"`
      ],
      [u],
      [g]
    ];
  const x = u.selectionSet, y = g.selectionSet;
  if (x && y) {
    const S = ed(
      t,
      e,
      n,
      v,
      Mt(w),
      x,
      Mt(R),
      y
    );
    return id(S, r, u, g);
  }
}
function nd(t, e) {
  const n = t.arguments, i = e.arguments;
  if (n === void 0 || n.length === 0)
    return i === void 0 || i.length === 0;
  if (i === void 0 || i.length === 0 || n.length !== i.length)
    return !1;
  const r = new Map(i.map(({ name: s, value: o }) => [s.value, o]));
  return n.every((s) => {
    const o = s.value, a = r.get(s.name.value);
    return a === void 0 ? !1 : Qo(o) === Qo(a);
  });
}
function Qo(t) {
  return be(Xs(t));
}
function bs(t, e) {
  return Pe(t) ? Pe(e) ? bs(t.ofType, e.ofType) : !0 : Pe(e) ? !0 : re(t) ? re(e) ? bs(t.ofType, e.ofType) : !0 : re(e) ? !0 : bn(t) || bn(e) ? t !== e : !1;
}
function xr(t, e, n, i) {
  const r = e.get(i);
  if (r)
    return r;
  const s = /* @__PURE__ */ Object.create(null), o = /* @__PURE__ */ Object.create(null);
  Du(
    t,
    n,
    i,
    s,
    o
  );
  const a = [s, Object.keys(o)];
  return e.set(i, a), a;
}
function ws(t, e, n) {
  const i = e.get(n.selectionSet);
  if (i)
    return i;
  const r = it(t.getSchema(), n.typeCondition);
  return xr(
    t,
    e,
    r,
    n.selectionSet
  );
}
function Du(t, e, n, i, r) {
  for (const s of n.selections)
    switch (s.kind) {
      case I.FIELD: {
        const o = s.name.value;
        let a;
        (pe(e) || Ee(e)) && (a = e.getFields()[o]);
        const u = s.alias ? s.alias.value : o;
        i[u] || (i[u] = []), i[u].push([e, s, a]);
        break;
      }
      case I.FRAGMENT_SPREAD:
        r[s.name.value] = !0;
        break;
      case I.INLINE_FRAGMENT: {
        const o = s.typeCondition, a = o ? it(t.getSchema(), o) : e;
        Du(
          t,
          a,
          s.selectionSet,
          i,
          r
        );
        break;
      }
    }
}
function id(t, e, n, i) {
  if (t.length > 0)
    return [
      [e, t.map(([r]) => r)],
      [n, ...t.map(([, r]) => r).flat()],
      [i, ...t.map(([, , r]) => r).flat()]
    ];
}
class rd {
  constructor() {
    this._data = /* @__PURE__ */ new Map();
  }
  has(e, n, i) {
    var r;
    const [s, o] = e < n ? [e, n] : [n, e], a = (r = this._data.get(s)) === null || r === void 0 ? void 0 : r.get(o);
    return a === void 0 ? !1 : i ? !0 : i === a;
  }
  add(e, n, i) {
    const [r, s] = e < n ? [e, n] : [n, e], o = this._data.get(r);
    o === void 0 ? this._data.set(r, /* @__PURE__ */ new Map([[s, i]])) : o.set(s, i);
  }
}
function sd(t) {
  return {
    InlineFragment(e) {
      const n = t.getType(), i = t.getParentType();
      if (wn(n) && wn(i) && !Uo(t.getSchema(), n, i)) {
        const r = G(i), s = G(n);
        t.reportError(
          new j(
            `Fragment cannot be spread here as objects of type "${r}" can never be of type "${s}".`,
            {
              nodes: e
            }
          )
        );
      }
    },
    FragmentSpread(e) {
      const n = e.name.value, i = od(t, n), r = t.getParentType();
      if (i && r && !Uo(t.getSchema(), i, r)) {
        const s = G(r), o = G(i);
        t.reportError(
          new j(
            `Fragment "${n}" cannot be spread here as objects of type "${s}" can never be of type "${o}".`,
            {
              nodes: e
            }
          )
        );
      }
    }
  };
}
function od(t, e) {
  const n = t.getFragment(e);
  if (n) {
    const i = it(t.getSchema(), n.typeCondition);
    if (wn(i))
      return i;
  }
}
function ad(t) {
  return {
    // eslint-disable-next-line new-cap
    ...ud(t),
    Field: {
      // Validate on leave to allow for deeper errors to appear first.
      leave(e) {
        var n;
        const i = t.getFieldDef();
        if (!i)
          return !1;
        const r = new Set(
          // FIXME: https://github.com/graphql/graphql-js/issues/2203
          /* c8 ignore next */
          (n = e.arguments) === null || n === void 0 ? void 0 : n.map((s) => s.name.value)
        );
        for (const s of i.args)
          if (!r.has(s.name) && Vi(s)) {
            const o = G(s.type);
            t.reportError(
              new j(
                `Field "${i.name}" argument "${s.name}" of type "${o}" is required, but it was not provided.`,
                {
                  nodes: e
                }
              )
            );
          }
      }
    }
  };
}
function ud(t) {
  var e;
  const n = /* @__PURE__ */ Object.create(null), i = t.getSchema(), r = (e = i == null ? void 0 : i.getDirectives()) !== null && e !== void 0 ? e : zi;
  for (const a of r)
    n[a.name] = oi(
      a.args.filter(Vi),
      (u) => u.name
    );
  const s = t.getDocument().definitions;
  for (const a of s)
    if (a.kind === I.DIRECTIVE_DEFINITION) {
      var o;
      const u = (o = a.arguments) !== null && o !== void 0 ? o : [];
      n[a.name.value] = oi(
        u.filter(ld),
        (c) => c.name.value
      );
    }
  return {
    Directive: {
      // Validate on leave to allow for deeper errors to appear first.
      leave(a) {
        const u = a.name.value, c = n[u];
        if (c) {
          var f;
          const g = (f = a.arguments) !== null && f !== void 0 ? f : [], p = new Set(g.map((v) => v.name.value));
          for (const [v, w] of Object.entries(c))
            if (!p.has(v)) {
              const R = qs(w.type) ? G(w.type) : be(w.type);
              t.reportError(
                new j(
                  `Directive "@${u}" argument "${v}" of type "${R}" is required, but it was not provided.`,
                  {
                    nodes: a
                  }
                )
              );
            }
        }
      }
    }
  };
}
function ld(t) {
  return t.type.kind === I.NON_NULL_TYPE && t.defaultValue == null;
}
function cd(t) {
  return {
    Field(e) {
      const n = t.getType(), i = e.selectionSet;
      if (n) {
        if (bn(Mt(n))) {
          if (i) {
            const r = e.name.value, s = G(n);
            t.reportError(
              new j(
                `Field "${r}" must not have a selection since type "${s}" has no subfields.`,
                {
                  nodes: i
                }
              )
            );
          }
        } else if (!i) {
          const r = e.name.value, s = G(n);
          t.reportError(
            new j(
              `Field "${r}" of type "${s}" must have a selection of subfields. Did you mean "${r} { ... }"?`,
              {
                nodes: e
              }
            )
          );
        }
      }
    }
  };
}
function fd(t) {
  return t.map(
    (e) => typeof e == "number" ? "[" + e.toString() + "]" : "." + e
  ).join("");
}
function Wo(t, e, n) {
  return {
    prev: t,
    key: e,
    typename: n
  };
}
function Xt(t) {
  const e = [];
  let n = t;
  for (; n; )
    e.push(n.key), n = n.prev;
  return e.reverse();
}
function dd(t, e, n = hd) {
  return Si(t, e, n, void 0);
}
function hd(t, e, n) {
  let i = "Invalid value " + G(e);
  throw t.length > 0 && (i += ` at "value${fd(t)}"`), n.message = i + ": " + n.message, n;
}
function Si(t, e, n, i) {
  if (re(e)) {
    if (t != null)
      return Si(t, e.ofType, n, i);
    n(
      Xt(i),
      t,
      new j(
        `Expected non-nullable type "${G(e)}" not to be null.`
      )
    );
    return;
  }
  if (t == null)
    return null;
  if (Pe(e)) {
    const r = e.ofType;
    return Eu(t) ? Array.from(t, (s, o) => {
      const a = Wo(i, o, void 0);
      return Si(s, r, n, a);
    }) : [Si(t, r, n, i)];
  }
  if (ze(e)) {
    if (!Jt(t)) {
      n(
        Xt(i),
        t,
        new j(`Expected type "${e.name}" to be an object.`)
      );
      return;
    }
    const r = {}, s = e.getFields();
    for (const o of Object.values(s)) {
      const a = t[o.name];
      if (a === void 0) {
        if (o.defaultValue !== void 0)
          r[o.name] = o.defaultValue;
        else if (re(o.type)) {
          const u = G(o.type);
          n(
            Xt(i),
            t,
            new j(
              `Field "${o.name}" of required type "${u}" was not provided.`
            )
          );
        }
        continue;
      }
      r[o.name] = Si(
        a,
        o.type,
        n,
        Wo(i, o.name, e.name)
      );
    }
    for (const o of Object.keys(t))
      if (!s[o]) {
        const a = $n(
          o,
          Object.keys(e.getFields())
        );
        n(
          Xt(i),
          t,
          new j(
            `Field "${o}" is not defined by type "${e.name}".` + yn(a)
          )
        );
      }
    if (e.isOneOf) {
      const o = Object.keys(r);
      o.length !== 1 && n(
        Xt(i),
        t,
        new j(
          `Exactly one key must be specified for OneOf type "${e.name}".`
        )
      );
      const a = o[0], u = r[a];
      u === null && n(
        Xt(i).concat(a),
        u,
        new j(`Field "${a}" must be non-null.`)
      );
    }
    return r;
  }
  if (bn(e)) {
    let r;
    try {
      r = e.parseValue(t);
    } catch (s) {
      s instanceof j ? n(Xt(i), t, s) : n(
        Xt(i),
        t,
        new j(`Expected type "${e.name}". ` + s.message, {
          originalError: s
        })
      );
      return;
    }
    return r === void 0 && n(
      Xt(i),
      t,
      new j(`Expected type "${e.name}".`)
    ), r;
  }
  Yt(!1, "Unexpected input type: " + G(e));
}
function xn(t, e, n) {
  if (t) {
    if (t.kind === I.VARIABLE) {
      const i = t.name.value;
      if (n == null || n[i] === void 0)
        return;
      const r = n[i];
      return r === null && re(e) ? void 0 : r;
    }
    if (re(e))
      return t.kind === I.NULL ? void 0 : xn(t, e.ofType, n);
    if (t.kind === I.NULL)
      return null;
    if (Pe(e)) {
      const i = e.ofType;
      if (t.kind === I.LIST) {
        const s = [];
        for (const o of t.values)
          if (Ho(o, n)) {
            if (re(i))
              return;
            s.push(null);
          } else {
            const a = xn(o, i, n);
            if (a === void 0)
              return;
            s.push(a);
          }
        return s;
      }
      const r = xn(t, i, n);
      return r === void 0 ? void 0 : [r];
    }
    if (ze(e)) {
      if (t.kind !== I.OBJECT)
        return;
      const i = /* @__PURE__ */ Object.create(null), r = oi(t.fields, (s) => s.name.value);
      for (const s of Object.values(e.getFields())) {
        const o = r[s.name];
        if (!o || Ho(o.value, n)) {
          if (s.defaultValue !== void 0)
            i[s.name] = s.defaultValue;
          else if (re(s.type))
            return;
          continue;
        }
        const a = xn(o.value, s.type, n);
        if (a === void 0)
          return;
        i[s.name] = a;
      }
      if (e.isOneOf) {
        const s = Object.keys(i);
        if (s.length !== 1 || i[s[0]] === null)
          return;
      }
      return i;
    }
    if (bn(e)) {
      let i;
      try {
        i = e.parseLiteral(t, n);
      } catch {
        return;
      }
      return i === void 0 ? void 0 : i;
    }
    Yt(!1, "Unexpected input type: " + G(e));
  }
}
function Ho(t, e) {
  return t.kind === I.VARIABLE && (e == null || e[t.name.value] === void 0);
}
function pd(t, e, n) {
  var i;
  const r = {}, s = (i = e.arguments) !== null && i !== void 0 ? i : [], o = oi(s, (a) => a.name.value);
  for (const a of t.args) {
    const u = a.name, c = a.type, f = o[u];
    if (!f) {
      if (a.defaultValue !== void 0)
        r[u] = a.defaultValue;
      else if (re(c))
        throw new j(
          `Argument "${u}" of required type "${G(c)}" was not provided.`,
          {
            nodes: e
          }
        );
      continue;
    }
    const g = f.value;
    let p = g.kind === I.NULL;
    if (g.kind === I.VARIABLE) {
      const w = g.name.value;
      if (n == null || !gd(n, w)) {
        if (a.defaultValue !== void 0)
          r[u] = a.defaultValue;
        else if (re(c))
          throw new j(
            `Argument "${u}" of required type "${G(c)}" was provided the variable "$${w}" which was not provided a runtime value.`,
            {
              nodes: g
            }
          );
        continue;
      }
      p = n[w] == null;
    }
    if (p && re(c))
      throw new j(
        `Argument "${u}" of non-null type "${G(c)}" must not be null.`,
        {
          nodes: g
        }
      );
    const v = xn(g, c, n);
    if (v === void 0)
      throw new j(
        `Argument "${u}" has invalid value ${be(g)}.`,
        {
          nodes: g
        }
      );
    r[u] = v;
  }
  return r;
}
function ui(t, e, n) {
  var i;
  const r = (i = e.directives) === null || i === void 0 ? void 0 : i.find(
    (s) => s.name.value === t.name
  );
  if (r)
    return pd(t, r, n);
}
function gd(t, e) {
  return Object.prototype.hasOwnProperty.call(t, e);
}
function md(t, e, n, i, r) {
  const s = /* @__PURE__ */ new Map();
  return Es(
    t,
    e,
    n,
    i,
    r,
    s,
    /* @__PURE__ */ new Set()
  ), s;
}
function Es(t, e, n, i, r, s, o) {
  for (const a of r.selections)
    switch (a.kind) {
      case I.FIELD: {
        if (!rs(n, a))
          continue;
        const u = yd(a), c = s.get(u);
        c !== void 0 ? c.push(a) : s.set(u, [a]);
        break;
      }
      case I.INLINE_FRAGMENT: {
        if (!rs(n, a) || !Yo(t, a, i))
          continue;
        Es(
          t,
          e,
          n,
          i,
          a.selectionSet,
          s,
          o
        );
        break;
      }
      case I.FRAGMENT_SPREAD: {
        const u = a.name.value;
        if (o.has(u) || !rs(n, a))
          continue;
        o.add(u);
        const c = e[u];
        if (!c || !Yo(t, c, i))
          continue;
        Es(
          t,
          e,
          n,
          i,
          c.selectionSet,
          s,
          o
        );
        break;
      }
    }
}
function rs(t, e) {
  const n = ui(Ws, e, t);
  if ((n == null ? void 0 : n.if) === !0)
    return !1;
  const i = ui(
    Qs,
    e,
    t
  );
  return (i == null ? void 0 : i.if) !== !1;
}
function Yo(t, e, n) {
  const i = e.typeCondition;
  if (!i)
    return !0;
  const r = it(t, i);
  return r === n ? !0 : nn(r) ? t.isSubType(r, n) : !1;
}
function yd(t) {
  return t.alias ? t.alias.value : t.name.value;
}
function bd(t) {
  return {
    OperationDefinition(e) {
      if (e.operation === "subscription") {
        const n = t.getSchema(), i = n.getSubscriptionType();
        if (i) {
          const r = e.name ? e.name.value : null, s = /* @__PURE__ */ Object.create(null), o = t.getDocument(), a = /* @__PURE__ */ Object.create(null);
          for (const c of o.definitions)
            c.kind === I.FRAGMENT_DEFINITION && (a[c.name.value] = c);
          const u = md(
            n,
            a,
            s,
            i,
            e.selectionSet
          );
          if (u.size > 1) {
            const g = [...u.values()].slice(1).flat();
            t.reportError(
              new j(
                r != null ? `Subscription "${r}" must select only one top level field.` : "Anonymous Subscription must select only one top level field.",
                {
                  nodes: g
                }
              )
            );
          }
          for (const c of u.values())
            c[0].name.value.startsWith("__") && t.reportError(
              new j(
                r != null ? `Subscription "${r}" must not select an introspection top level field.` : "Anonymous Subscription must not select an introspection top level field.",
                {
                  nodes: c
                }
              )
            );
        }
      }
    }
  };
}
function $u(t, e) {
  const n = /* @__PURE__ */ new Map();
  for (const i of t) {
    const r = e(i), s = n.get(r);
    s === void 0 ? n.set(r, [i]) : s.push(i);
  }
  return n;
}
function wd(t) {
  return {
    Field: e,
    Directive: e
  };
  function e(n) {
    var i;
    const r = (i = n.arguments) !== null && i !== void 0 ? i : [], s = $u(r, (o) => o.name.value);
    for (const [o, a] of s)
      a.length > 1 && t.reportError(
        new j(
          `There can be only one argument named "${o}".`,
          {
            nodes: a.map((u) => u.name)
          }
        )
      );
  }
}
function Ed(t) {
  const e = /* @__PURE__ */ Object.create(null), n = t.getSchema(), i = n ? n.getDirectives() : zi;
  for (const a of i)
    e[a.name] = !a.isRepeatable;
  const r = t.getDocument().definitions;
  for (const a of r)
    a.kind === I.DIRECTIVE_DEFINITION && (e[a.name.value] = !a.repeatable);
  const s = /* @__PURE__ */ Object.create(null), o = /* @__PURE__ */ Object.create(null);
  return {
    // Many different AST nodes may contain directives. Rather than listing
    // them all, just listen for entering any node, and check to see if it
    // defines any directives.
    enter(a) {
      if (!("directives" in a) || !a.directives)
        return;
      let u;
      if (a.kind === I.SCHEMA_DEFINITION || a.kind === I.SCHEMA_EXTENSION)
        u = s;
      else if (Ks(a) || Lu(a)) {
        const c = a.name.value;
        u = o[c], u === void 0 && (o[c] = u = /* @__PURE__ */ Object.create(null));
      } else
        u = /* @__PURE__ */ Object.create(null);
      for (const c of a.directives) {
        const f = c.name.value;
        e[f] && (u[f] ? t.reportError(
          new j(
            `The directive "@${f}" can only be used once at this location.`,
            {
              nodes: [u[f], c]
            }
          )
        ) : u[f] = c);
      }
    }
  };
}
function vd(t) {
  const e = /* @__PURE__ */ Object.create(null);
  return {
    OperationDefinition: () => !1,
    FragmentDefinition(n) {
      const i = n.name.value;
      return e[i] ? t.reportError(
        new j(
          `There can be only one fragment named "${i}".`,
          {
            nodes: [e[i], n.name]
          }
        )
      ) : e[i] = n.name, !1;
    }
  };
}
function Td(t) {
  const e = [];
  let n = /* @__PURE__ */ Object.create(null);
  return {
    ObjectValue: {
      enter() {
        e.push(n), n = /* @__PURE__ */ Object.create(null);
      },
      leave() {
        const i = e.pop();
        i || Yt(!1), n = i;
      }
    },
    ObjectField(i) {
      const r = i.name.value;
      n[r] ? t.reportError(
        new j(
          `There can be only one input field named "${r}".`,
          {
            nodes: [n[r], i.name]
          }
        )
      ) : n[r] = i.name;
    }
  };
}
function Sd(t) {
  const e = /* @__PURE__ */ Object.create(null);
  return {
    OperationDefinition(n) {
      const i = n.name;
      return i && (e[i.value] ? t.reportError(
        new j(
          `There can be only one operation named "${i.value}".`,
          {
            nodes: [
              e[i.value],
              i
            ]
          }
        )
      ) : e[i.value] = i), !1;
    },
    FragmentDefinition: () => !1
  };
}
function _d(t) {
  return {
    OperationDefinition(e) {
      var n;
      const i = (n = e.variableDefinitions) !== null && n !== void 0 ? n : [], r = $u(
        i,
        (s) => s.variable.name.value
      );
      for (const [s, o] of r)
        o.length > 1 && t.reportError(
          new j(
            `There can be only one variable named "$${s}".`,
            {
              nodes: o.map((a) => a.variable.name)
            }
          )
        );
    }
  };
}
function Id(t) {
  let e = {};
  return {
    OperationDefinition: {
      enter() {
        e = {};
      }
    },
    VariableDefinition(n) {
      e[n.variable.name.value] = n;
    },
    ListValue(n) {
      const i = lu(t.getParentInputType());
      if (!Pe(i))
        return _n(t, n), !1;
    },
    ObjectValue(n) {
      const i = Mt(t.getInputType());
      if (!ze(i))
        return _n(t, n), !1;
      const r = oi(n.fields, (s) => s.name.value);
      for (const s of Object.values(i.getFields()))
        if (!r[s.name] && yu(s)) {
          const a = G(s.type);
          t.reportError(
            new j(
              `Field "${i.name}.${s.name}" of required type "${a}" was not provided.`,
              {
                nodes: n
              }
            )
          );
        }
      i.isOneOf && Od(
        t,
        n,
        i,
        r,
        e
      );
    },
    ObjectField(n) {
      const i = Mt(t.getParentInputType());
      if (!t.getInputType() && ze(i)) {
        const s = $n(
          n.name.value,
          Object.keys(i.getFields())
        );
        t.reportError(
          new j(
            `Field "${n.name.value}" is not defined by type "${i.name}".` + yn(s),
            {
              nodes: n
            }
          )
        );
      }
    },
    NullValue(n) {
      const i = t.getInputType();
      re(i) && t.reportError(
        new j(
          `Expected value of type "${G(i)}", found ${be(n)}.`,
          {
            nodes: n
          }
        )
      );
    },
    EnumValue: (n) => _n(t, n),
    IntValue: (n) => _n(t, n),
    FloatValue: (n) => _n(t, n),
    StringValue: (n) => _n(t, n),
    BooleanValue: (n) => _n(t, n)
  };
}
function _n(t, e) {
  const n = t.getInputType();
  if (!n)
    return;
  const i = Mt(n);
  if (!bn(i)) {
    const r = G(n);
    t.reportError(
      new j(
        `Expected value of type "${r}", found ${be(e)}.`,
        {
          nodes: e
        }
      )
    );
    return;
  }
  try {
    if (i.parseLiteral(
      e,
      void 0
      /* variables */
    ) === void 0) {
      const s = G(n);
      t.reportError(
        new j(
          `Expected value of type "${s}", found ${be(e)}.`,
          {
            nodes: e
          }
        )
      );
    }
  } catch (r) {
    const s = G(n);
    r instanceof j ? t.reportError(r) : t.reportError(
      new j(
        `Expected value of type "${s}", found ${be(e)}; ` + r.message,
        {
          nodes: e,
          originalError: r
        }
      )
    );
  }
}
function Od(t, e, n, i, r) {
  var s;
  const o = Object.keys(i);
  if (o.length !== 1) {
    t.reportError(
      new j(
        `OneOf Input Object "${n.name}" must specify exactly one key.`,
        {
          nodes: [e]
        }
      )
    );
    return;
  }
  const u = (s = i[o[0]]) === null || s === void 0 ? void 0 : s.value, c = !u || u.kind === I.NULL, f = (u == null ? void 0 : u.kind) === I.VARIABLE;
  if (c) {
    t.reportError(
      new j(`Field "${n.name}.${o[0]}" must be non-null.`, {
        nodes: [e]
      })
    );
    return;
  }
  if (f) {
    const g = u.name.value;
    r[g].type.kind !== I.NON_NULL_TYPE && t.reportError(
      new j(
        `Variable "${g}" must be non-nullable to be used for OneOf Input Object "${n.name}".`,
        {
          nodes: [e]
        }
      )
    );
  }
}
function Nd(t) {
  return {
    VariableDefinition(e) {
      const n = it(t.getSchema(), e.type);
      if (n !== void 0 && !Pt(n)) {
        const i = e.variable.name.value, r = be(e.type);
        t.reportError(
          new j(
            `Variable "$${i}" cannot be non-input type "${r}".`,
            {
              nodes: e.type
            }
          )
        );
      }
    }
  };
}
function Ad(t) {
  let e = /* @__PURE__ */ Object.create(null);
  return {
    OperationDefinition: {
      enter() {
        e = /* @__PURE__ */ Object.create(null);
      },
      leave(n) {
        const i = t.getRecursiveVariableUsages(n);
        for (const { node: r, type: s, defaultValue: o } of i) {
          const a = r.name.value, u = e[a];
          if (u && s) {
            const c = t.getSchema(), f = it(c, u.type);
            if (f && !xd(
              c,
              f,
              u.defaultValue,
              s,
              o
            )) {
              const g = G(f), p = G(s);
              t.reportError(
                new j(
                  `Variable "$${a}" of type "${g}" used in position expecting type "${p}".`,
                  {
                    nodes: [u, r]
                  }
                )
              );
            }
          }
        }
      }
    },
    VariableDefinition(n) {
      e[n.variable.name.value] = n;
    }
  };
}
function xd(t, e, n, i, r) {
  if (re(i) && !re(e)) {
    if (!(n != null && n.kind !== I.NULL) && !(r !== void 0))
      return !1;
    const a = i.ofType;
    return Jn(t, e, a);
  }
  return Jn(t, e, i);
}
const Fd = Object.freeze([Qf]), ju = Object.freeze([
  Rf,
  Sd,
  qf,
  bd,
  Bf,
  Df,
  Nd,
  cd,
  Lf,
  vd,
  Vf,
  Yf,
  sd,
  Wf,
  _d,
  Hf,
  Jf,
  Pf,
  Ed,
  $f,
  wd,
  Id,
  ad,
  Ad,
  Xf,
  Td,
  ...Fd
]);
class Rd {
  constructor(e, n) {
    this._ast = e, this._fragments = void 0, this._fragmentSpreads = /* @__PURE__ */ new Map(), this._recursivelyReferencedFragments = /* @__PURE__ */ new Map(), this._onError = n;
  }
  get [Symbol.toStringTag]() {
    return "ASTValidationContext";
  }
  reportError(e) {
    this._onError(e);
  }
  getDocument() {
    return this._ast;
  }
  getFragment(e) {
    let n;
    if (this._fragments)
      n = this._fragments;
    else {
      n = /* @__PURE__ */ Object.create(null);
      for (const i of this.getDocument().definitions)
        i.kind === I.FRAGMENT_DEFINITION && (n[i.name.value] = i);
      this._fragments = n;
    }
    return n[e];
  }
  getFragmentSpreads(e) {
    let n = this._fragmentSpreads.get(e);
    if (!n) {
      n = [];
      const i = [e];
      let r;
      for (; r = i.pop(); )
        for (const s of r.selections)
          s.kind === I.FRAGMENT_SPREAD ? n.push(s) : s.selectionSet && i.push(s.selectionSet);
      this._fragmentSpreads.set(e, n);
    }
    return n;
  }
  getRecursivelyReferencedFragments(e) {
    let n = this._recursivelyReferencedFragments.get(e);
    if (!n) {
      n = [];
      const i = /* @__PURE__ */ Object.create(null), r = [e.selectionSet];
      let s;
      for (; s = r.pop(); )
        for (const o of this.getFragmentSpreads(s)) {
          const a = o.name.value;
          if (i[a] !== !0) {
            i[a] = !0;
            const u = this.getFragment(a);
            u && (n.push(u), r.push(u.selectionSet));
          }
        }
      this._recursivelyReferencedFragments.set(e, n);
    }
    return n;
  }
}
class Ld extends Rd {
  constructor(e, n, i, r) {
    super(n, r), this._schema = e, this._typeInfo = i, this._variableUsages = /* @__PURE__ */ new Map(), this._recursiveVariableUsages = /* @__PURE__ */ new Map();
  }
  get [Symbol.toStringTag]() {
    return "ValidationContext";
  }
  getSchema() {
    return this._schema;
  }
  getVariableUsages(e) {
    let n = this._variableUsages.get(e);
    if (!n) {
      const i = [], r = new Fu(this._schema);
      Gs(
        e,
        Ru(r, {
          VariableDefinition: () => !1,
          Variable(s) {
            i.push({
              node: s,
              type: r.getInputType(),
              defaultValue: r.getDefaultValue()
            });
          }
        })
      ), n = i, this._variableUsages.set(e, n);
    }
    return n;
  }
  getRecursiveVariableUsages(e) {
    let n = this._recursiveVariableUsages.get(e);
    if (!n) {
      n = this.getVariableUsages(e);
      for (const i of this.getRecursivelyReferencedFragments(e))
        n = n.concat(this.getVariableUsages(i));
      this._recursiveVariableUsages.set(e, n);
    }
    return n;
  }
  getType() {
    return this._typeInfo.getType();
  }
  getParentType() {
    return this._typeInfo.getParentType();
  }
  getInputType() {
    return this._typeInfo.getInputType();
  }
  getParentInputType() {
    return this._typeInfo.getParentInputType();
  }
  getFieldDef() {
    return this._typeInfo.getFieldDef();
  }
  getDirective() {
    return this._typeInfo.getDirective();
  }
  getArgument() {
    return this._typeInfo.getArgument();
  }
  getEnumValue() {
    return this._typeInfo.getEnumValue();
  }
}
function Cd(t, e, n = ju, i, r = new Fu(t)) {
  var s;
  const o = (s = i == null ? void 0 : i.maxErrors) !== null && s !== void 0 ? s : 100;
  e || ae(!1, "Must provide document."), xu(t);
  const a = Object.freeze({}), u = [], c = new Ld(
    t,
    e,
    r,
    (g) => {
      if (u.length >= o)
        throw u.push(
          new j(
            "Too many validation errors, error limit reached. Validation aborted."
          )
        ), a;
      u.push(g);
    }
  ), f = tf(n.map((g) => g(c)));
  try {
    Gs(e, Ru(r, f));
  } catch (g) {
    if (g !== a)
      throw g;
  }
  return u;
}
function kd(t) {
  return t instanceof Error ? t : new Dd(t);
}
let Dd = class extends Error {
  constructor(e) {
    super("Unexpected error value: " + G(e)), this.name = "NonErrorThrown", this.thrownValue = e;
  }
};
function tt(t, e, n) {
  var i;
  const r = kd(t);
  return $d(r) ? r : new j(r.message, {
    nodes: (i = r.nodes) !== null && i !== void 0 ? i : e,
    source: r.source,
    positions: r.positions,
    path: n,
    originalError: r
  });
}
function $d(t) {
  return Array.isArray(t.path);
}
const Jo = function(t, e, n, i) {
  if (Jt(t) && typeof t.__typename == "string")
    return t.__typename;
  const r = n.schema.getPossibleTypes(i), s = [];
  for (let o = 0; o < r.length; o++) {
    const a = r[o];
    if (a.isTypeOf) {
      const u = a.isTypeOf(t, e, n);
      if (bc(u))
        s[o] = u;
      else if (u)
        return a.name;
    }
  }
  if (s.length)
    return Promise.all(s).then((o) => {
      for (let a = 0; a < o.length; a++)
        if (o[a])
          return r[a].name;
    });
}, hr = function(t, e, n, i) {
  if (Jt(t) || typeof t == "function") {
    const r = t[i.fieldName];
    return typeof r == "function" ? t[i.fieldName](e, n, i) : r;
  }
};
function eo(t, e) {
  let n = null;
  for (const r of t.definitions)
    if (r.kind === I.OPERATION_DEFINITION) {
      var i;
      if (e == null) {
        if (n)
          return null;
        n = r;
      } else if (((i = r.name) === null || i === void 0 ? void 0 : i.value) === e)
        return r;
    }
  return n;
}
function jd(t) {
  const e = t.toConfig(), n = $r(
    ss(e.types),
    (p) => p.name,
    g
  );
  return new Ys({
    ...e,
    types: Object.values(n),
    directives: ss(e.directives).map(o),
    query: s(e.query),
    mutation: s(e.mutation),
    subscription: s(e.subscription)
  });
  function i(p) {
    return Pe(p) ? new Ue(i(p.ofType)) : re(p) ? new ne(i(p.ofType)) : r(p);
  }
  function r(p) {
    return n[p.name];
  }
  function s(p) {
    return p && r(p);
  }
  function o(p) {
    const v = p.toConfig();
    return new rn({
      ...v,
      locations: Pu(v.locations, (w) => w),
      args: a(v.args)
    });
  }
  function a(p) {
    return Zi(p, (v) => ({ ...v, type: i(v.type) }));
  }
  function u(p) {
    return Zi(p, (v) => ({
      ...v,
      type: i(v.type),
      args: v.args && a(v.args)
    }));
  }
  function c(p) {
    return Zi(p, (v) => ({
      ...v,
      type: i(v.type)
    }));
  }
  function f(p) {
    return ss(p).map(r);
  }
  function g(p) {
    if (jn(p) || Nu(p))
      return p;
    if (pe(p)) {
      const v = p.toConfig();
      return new et({
        ...v,
        interfaces: () => f(v.interfaces),
        fields: () => u(v.fields)
      });
    }
    if (Ee(p)) {
      const v = p.toConfig();
      return new In({
        ...v,
        interfaces: () => f(v.interfaces),
        fields: () => u(v.fields)
      });
    }
    if (Bt(p)) {
      const v = p.toConfig();
      return new zn({
        ...v,
        types: () => f(v.types)
      });
    }
    if (Gt(p)) {
      const v = p.toConfig();
      return new ai({
        ...v,
        values: Zi(v.values, (w) => w)
      });
    }
    if (ze(p)) {
      const v = p.toConfig();
      return new Ri({
        ...v,
        fields: () => c(v.fields)
      });
    }
    Yt(!1, "Unexpected type: " + G(p));
  }
}
function Zi(t, e) {
  const n = /* @__PURE__ */ Object.create(null);
  for (const i of Object.keys(t).sort(Ui))
    n[i] = e(t[i]);
  return n;
}
function ss(t) {
  return Pu(t, (e) => e.name);
}
function Pu(t, e) {
  return t.slice().sort((n, i) => {
    const r = e(n), s = e(i);
    return Ui(r, s);
  });
}
class Qi extends j {
  constructor(e, n) {
    super(e, n), this.name = "PothosError";
  }
}
class ie extends Qi {
  constructor(e, n) {
    super(e, n), this.name = "PothosSchemaError";
  }
}
const Pd = Symbol.for("Pothos.contextCache");
function Md(t) {
  const e = /* @__PURE__ */ new WeakMap();
  return (n, ...i) => {
    const r = n[Pd] || n;
    if (e.has(r))
      return e.get(r);
    const s = t(n, ...i);
    return e.set(r, s), s;
  };
}
function hi(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
const pi = /* @__PURE__ */ new WeakMap();
class Ud {
  /**
  * Called for each type defined with the SchemaBuilder
  * @param  {PothosTypeConfig} typeConfig - Config object describing the added type
  * @return {PothosTypeConfig} Original or updated `typeConfig`
  */
  onTypeConfig(e) {
    return e;
  }
  /**
  * Called for each field on an Object or Interface type
  * @param  {PothosOutputFieldConfig} fieldConfig - Config object describing the added field
  * @return {PothosOutputFieldConfig} Original or updated `fieldConfig`
  */
  onOutputFieldConfig(e) {
    return e;
  }
  /**
  * Called for each argument or field on an Input object defined in your schema
  * @param  {PothosInputFieldConfig} fieldConfig - Config object describing the added field
  * @return {PothosInputFieldConfig} Original or updated `fieldConfig`
  */
  onInputFieldConfig(e) {
    return e;
  }
  /**
  * Called for each Enum value defined in your schema
  * @param  {PothosEnumValueConfig} valueConfig - Config object describing the enum value
  * @return {PothosEnumValueConfig} Original or updated `valueConfig`
  */
  onEnumValueConfig(e) {
    return e;
  }
  /**
  * Called before builder.toSchema() schema is called
  */
  beforeBuild() {
  }
  /**
  * Called after all fields and types have been built during `builder.toSchema()`
  * @param  {GraphQLSchema} schema - the generated schema
  * @return {PothosEnumValueConfig} Original or updated `schema`
  */
  afterBuild(e) {
    return e;
  }
  /**
  * Called with the resolver for each field in the schema
  * @param  {GraphQLFieldResolver} resolve - the resolve function
  * @param  {PothosOutputFieldConfig} fieldConfig - the config object for the field associated with this resolve function
  * @return {GraphQLFieldResolver} - Either the original, or a new resolver function to use for this field
  */
  wrapResolve(e, n) {
    return e;
  }
  /**
  * Called with the subscribe for each field on the Subscription type
  * @param  {GraphQLFieldResolver} subscribe - the subscribe function
  * @param  {PothosOutputFieldConfig} fieldConfig - the config object for the field associated with this subscribe function
  * @return {GraphQLFieldResolver} - Either the original, or a new subscribe function to use for this field
  */
  wrapSubscribe(e, n) {
    return e;
  }
  /**
  * Called with the resolveType for each Interface or Union type
  * @param  {GraphQLTypeResolver} resolveType - the resolveType function
  * @param  {PothosInterfaceTypeConfig | PothosUnionTypeConfig} typeConfig - the config object for the Interface or Union type
  * @return {GraphQLTypeResolver} - Either the original, or a new resolveType function to use for this field
  */
  wrapResolveType(e, n) {
    return e;
  }
  /**
  * Called with the isTypeOf for each Object type
  * @param  {GraphQLTypeResolver} resolveType - the resolveType function
  * @param  {PothosObjectTypeConfig} typeConfig - the config object for the Interface or Union type
  * @return {GraphQLTypeResolver} - Either the original, or a new resolveType function to use for this field
  */
  wrapIsTypeOf(e, n) {
    return e;
  }
  runUnique(e, n) {
    if (pi.has(this.builder) || pi.set(this.builder, /* @__PURE__ */ new Map()), !pi.get(this.builder).has(e)) {
      const i = n();
      return pi.get(this.builder).set(e, i), i;
    }
    return pi.get(this.builder).get(e);
  }
  /**
  * Creates a data object unique to the current request for use by this plugin
  * @param  {Types['Context']} context - the context object for the current request
  * @return {object} - The data object for the current request
  */
  createRequestData(e) {
    throw new Qi("createRequestData not implemented");
  }
  /**
  * Returns a data object for the current request.  requires `createRequestData` to be implemented
  * @param  {Types['Context']} context - the context object for the current request
  * @return {object} - The data object for the current request
  */
  requestData(e) {
    return this.requestDataMap(e);
  }
  constructor(e, n) {
    hi(this, "name", void 0), hi(this, "builder", void 0), hi(this, "buildCache", void 0), hi(this, "options", void 0), hi(this, "requestDataMap", Md((i) => this.createRequestData(i))), this.name = n, this.builder = e.builder, this.buildCache = e, this.options = e.options;
  }
}
function Vd(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
class Bd extends Ud {
  onTypeConfig(e) {
    return this.plugins.reduceRight((n, i) => n === null ? n : i.onTypeConfig(n), e);
  }
  onInputFieldConfig(e) {
    return this.plugins.reduceRight((n, i) => n === null ? n : i.onInputFieldConfig(n), e);
  }
  onOutputFieldConfig(e) {
    return this.plugins.reduceRight((n, i) => n === null ? n : i.onOutputFieldConfig(n), e);
  }
  onEnumValueConfig(e) {
    return this.plugins.reduceRight((n, i) => n === null ? n : i.onEnumValueConfig(n), e);
  }
  beforeBuild() {
    for (const e of this.plugins)
      e.beforeBuild();
  }
  afterBuild(e) {
    return this.plugins.reduceRight((n, i) => i.afterBuild(n), e);
  }
  wrapResolve(e, n) {
    return this.plugins.reduceRight((i, r) => r.wrapResolve(i, n), e);
  }
  wrapSubscribe(e, n) {
    return this.plugins.reduceRight((i, r) => r.wrapSubscribe(i, n), e);
  }
  wrapResolveType(e, n) {
    return this.plugins.reduceRight((i, r) => r.wrapResolveType(i, n), e);
  }
  wrapIsTypeOf(e, n) {
    return this.plugins.reduceRight((i, r) => r.wrapIsTypeOf(i, n), e);
  }
  constructor(e, n) {
    super(e, "PothosMergedPlugin"), Vd(this, "plugins", void 0), this.plugins = n;
  }
}
const Pn = Symbol.for("Pothos.outputShapeKey"), fi = Symbol.for("Pothos.parentShapeKey"), Wi = Symbol.for("Pothos.inputShapeKey"), Gd = Symbol.for("Pothos.inputFieldShapeKey"), qd = Symbol.for("Pothos.outputFieldShapeKey"), Fr = Symbol.for("Pothos.typeBrandKey");
function Ko(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
class Ne {
  toString() {
    return `${this.kind}Ref<${this.name}>`;
  }
  constructor(e, n) {
    Ko(this, "kind", void 0), Ko(this, "name", void 0), this.kind = e, this.name = n;
  }
}
function Un(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
let zd = Pn, Qd = fi, Wd = Wi;
class Mu extends Ne {
  constructor(e) {
    super("Scalar", e), Un(this, "kind", "Scalar"), Un(this, "$inferType", void 0), Un(this, "$inferInput", void 0), Un(this, zd, void 0), Un(this, Qd, void 0), Un(this, Wd, void 0);
  }
}
function Hd(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
class Uu extends Mu {
  constructor(e) {
    super(e.name), Hd(this, "type", void 0), this.type = e;
  }
}
function gi(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
let Yd = Wi;
class Ur extends Ne {
  constructor(e, n) {
    super("InputList", `InputList<${String(e)}>`), gi(this, "kind", "InputList"), gi(this, Yd, void 0), gi(this, "$inferInput", void 0), gi(this, "listType", void 0), gi(this, "required", void 0), this.listType = e, this.required = n;
  }
}
function Vn(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
let Jd = Pn, Kd = fi;
class Vr extends Ne {
  constructor(e, n) {
    super("List", `List<${String(e)}>`), Vn(this, "kind", "List"), Vn(this, "$inferType", void 0), Vn(this, Jd, void 0), Vn(this, Kd, void 0), Vn(this, "listType", void 0), Vn(this, "nullable", void 0), this.listType = e, this.nullable = n;
  }
}
function Xd(t) {
  const e = {};
  return Array.isArray(t) ? t.forEach((n) => {
    e[String(n)] = {
      pothosOptions: {}
    };
  }) : Object.entries(t).forEach(([n, i]) => {
    i && typeof i == "object" ? e[n] = {
      ...i,
      pothosOptions: i
    } : typeof i == "string" && (e[i] = {
      pothosOptions: {}
    });
  }), e;
}
function Zd(t, e) {
  const n = {};
  return Object.keys(t).filter((i) => typeof t[t[i]] != "number").forEach((i) => {
    n[i] = {
      value: t[i],
      pothosOptions: {},
      ...e == null ? void 0 : e[i]
    };
  }), n;
}
function vs(t, e, n) {
  const i = typeof n == "object" ? n.items : !1, r = typeof n == "object" ? n.list : !!n;
  if (Array.isArray(t))
    return {
      kind: "List",
      type: vs(t[0], e, i),
      nullable: r
    };
  if (t instanceof Vr)
    return {
      kind: "List",
      type: vs(t.listType, e, t.nullable),
      nullable: r
    };
  const s = e.getOutputTypeRef(t), o = s instanceof Ne ? s.kind : e.getTypeConfig(s).graphqlKind, a = s instanceof Ne ? s.name : e.getTypeConfig(s).name;
  if (o !== "InputObject" && o !== "List" && o !== "InputList")
    return {
      kind: o,
      ref: s,
      nullable: r
    };
  throw new ie(`Expected input param ${a} to be an output type but got ${o}`);
}
function Ts(t, e, n) {
  const i = typeof n == "object" ? n.items : !0, r = typeof n == "object" ? n.list : !!n;
  if (Array.isArray(t))
    return {
      kind: "List",
      type: Ts(t[0], e, i),
      required: r
    };
  if (t instanceof Ur)
    return {
      kind: "List",
      type: Ts(t.listType, e, t.required),
      required: r
    };
  const s = e.getInputTypeRef(t), o = s instanceof Ne ? s.kind : e.getTypeConfig(s).graphqlKind, a = s instanceof Ne ? s.name : e.getTypeConfig(s).name;
  if (o === "InputObject" || o === "Enum" || o === "Scalar")
    return {
      kind: o,
      ref: s,
      required: r
    };
  throw new ie(`Expected input param ${a} to be an InputObject, Enum, or Scalar but got ${o}`);
}
function eh(t) {
  throw new TypeError(`Unexpected value: ${t}`);
}
function th(t) {
  return !!(t && (typeof t == "object" || typeof t == "function") && typeof t.then == "function");
}
function Zt(t) {
  if (t === void 0)
    throw new ie(`Received undefined as a type ref.

This is often caused by a circular import
If this ref is imported from a file that re-exports it (like index.ts)
you may be able to resolve this by importing it directly from the file that defines it.
`);
}
function Xo(t) {
  if (!(!t || typeof t == "function")) {
    if (!Array.isArray(t))
      throw new ie("interfaces must be an array or function");
    for (const e of t)
      if (e === void 0)
        throw new ie(`Received undefined in list of interfaces.

This is often caused by a circular import
If this ref is imported from a file that re-exports it (like index.ts)
you may be able to resolve this by importing it directly from the file that defines it.

Alternatively you can define interfaces with a function that will be lazily evaluated,
which may resolver issues with circular dependencies:

Example:
builder.objectType('MyObject', {
  interface: () => [Interface1, Interface2],
  ...
});
`);
  }
}
function nh(t) {
  return typeof t == "object" && t !== null && Fr in t ? t[Fr] : null;
}
function Ss(t) {
  return Array.isArray(t) ? Ss(t[0]) : t instanceof Vr || t instanceof Ur ? Ss(t.listType) : t;
}
function ht(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
class ih {
  getTypeConfig(e, n) {
    const i = this.configStore.getTypeConfig(e, n);
    return this.typeConfigs.has(i.name) || this.typeConfigs.set(i.name, this.plugin.onTypeConfig(i)), this.typeConfigs.get(i.name);
  }
  getInputTypeFieldConfigs(e) {
    const n = this.getTypeConfig(e, "InputObject"), i = this.types.get(n.name);
    if (!i)
      throw new ie(`Input type ${n.name} has not been built yet`);
    const r = i.getFields(), s = {};
    return Object.keys(r).forEach((o) => {
      var a;
      s[o] = (a = r[o].extensions) === null || a === void 0 ? void 0 : a.pothosConfig;
    }), s;
  }
  getImplementers(e) {
    if (this.implementers.has(e.name))
      return this.implementers.get(e.name);
    const n = [
      ...this.configStore.typeConfigs.values()
    ].filter((i) => i.kind === "Object" && i.interfaces.find((r) => this.configStore.getTypeConfig(r).name === e.name));
    return this.implementers.set(e.name, n), n;
  }
  buildAll() {
    this.configStore.prepareForBuild(), this.configStore.typeConfigs.forEach((e) => {
      (e.kind === "Enum" || e.kind === "Scalar") && this.buildTypeFromConfig(e);
    }), this.configStore.typeConfigs.forEach((e) => {
      e.kind === "InputObject" && this.buildTypeFromConfig(e);
    }), this.types.forEach((e) => {
      e instanceof Ri && e.getFields();
    }), this.configStore.typeConfigs.forEach((e) => {
      e.kind === "Interface" && this.buildTypeFromConfig(e);
    }), this.configStore.typeConfigs.forEach((e) => {
      e.kind === "Object" && this.buildTypeFromConfig(e);
    }), this.configStore.typeConfigs.forEach((e) => {
      e.kind === "Union" && this.buildTypeFromConfig(e);
    }), this.configStore.typeConfigs.forEach((e) => {
      (e.kind === "Query" || e.kind === "Mutation" || e.kind === "Subscription") && this.buildTypeFromConfig(e);
    }), this.types.forEach((e) => {
      e instanceof et || e instanceof In ? e.getFields() : e instanceof zn && e.getTypes();
    });
  }
  buildTypeFromConfig(e) {
    const n = this.getTypeConfig(e.name), { name: i } = n;
    switch (this.typeConfigs.set(i, n), n.kind) {
      case "Enum":
        this.addType(i, this.buildEnum(n));
        break;
      case "InputObject":
        this.addType(i, this.buildInputObject(n));
        break;
      case "Interface":
        this.addType(i, this.buildInterface(n));
        break;
      case "Scalar":
        this.addType(i, this.buildScalar(n));
        break;
      case "Union":
        this.addType(i, this.buildUnion(n));
        break;
      case "Object":
      case "Query":
      case "Mutation":
      case "Subscription":
        this.addType(i, this.buildObject(n));
        break;
      default:
        eh(n);
    }
  }
  addType(e, n) {
    if (this.types.has(e))
      throw new ie(`reference or name has already been used to create another type (${n.name})`);
    this.types.set(e, n);
  }
  buildOutputTypeParam(e) {
    return e.kind === "List" ? e.nullable ? new Ue(this.buildOutputTypeParam(e.type)) : new ne(new Ue(this.buildOutputTypeParam(e.type))) : e.nullable ? this.getOutputType(e.ref) : new ne(this.getOutputType(e.ref));
  }
  buildInputTypeParam(e) {
    return e.kind === "List" ? e.required ? new ne(new Ue(this.buildInputTypeParam(e.type))) : new Ue(this.buildInputTypeParam(e.type)) : e.required ? new ne(this.getInputType(e.ref)) : this.getInputType(e.ref);
  }
  buildFields(e) {
    const n = {};
    for (const [s, o] of e) {
      this.outputFieldConfigs.has(o) || this.outputFieldConfigs.set(o, this.plugin.onOutputFieldConfig(o));
      const a = this.outputFieldConfigs.get(o);
      if (!a)
        continue;
      const u = {
        ...a
      }, c = /* @__PURE__ */ new Map();
      Object.keys(u.args).forEach((w) => {
        c.set(w, u.args[w]);
      });
      const f = this.buildInputFields(c), g = {};
      Object.keys(u.args).forEach((w) => {
        g[w] = this.inputFieldConfigs.get(u.args[w]);
      }), u.args = g;
      var i;
      const p = this.plugin.wrapResolve((i = u.resolve) !== null && i !== void 0 ? i : hr, u), v = this.plugin.wrapSubscribe(u.subscribe, u);
      var r;
      n[s] = {
        ...u,
        type: this.buildOutputTypeParam(u.type),
        args: f,
        extensions: {
          ...u.extensions,
          pothosResolveWrapped: p !== ((r = u.resolve) !== null && r !== void 0 ? r : hr),
          pothosSubscribeWrapped: v !== u.subscribe,
          pothosOptions: u.pothosOptions,
          pothosConfig: u
        },
        resolve: p === hr ? void 0 : p,
        subscribe: v
      };
    }
    return n;
  }
  buildInputFields(e) {
    const n = {};
    for (const [i, r] of e) {
      this.inputFieldConfigs.has(r) || this.inputFieldConfigs.set(r, this.plugin.onInputFieldConfig(r));
      const s = this.inputFieldConfigs.get(r);
      s && (n[i] = {
        ...s,
        type: this.buildInputTypeParam(s.type),
        extensions: {
          ...s.extensions,
          pothosOptions: s.pothosOptions,
          pothosConfig: s
        }
      });
    }
    return n;
  }
  getInterfaceFields(e) {
    const n = e.getInterfaces().reduce((s, o) => ({
      ...this.getFields(o),
      ...s
    }), {}), i = this.configStore.getFields(e.name, "Interface"), r = this.buildFields(i);
    return {
      ...n,
      ...r
    };
  }
  getObjectFields(e) {
    const n = e.getInterfaces().reduce((r, s) => ({
      ...this.getFields(s),
      ...r
    }), {}), i = this.buildFields(this.configStore.getFields(e.name, "Object"));
    return {
      ...n,
      ...i
    };
  }
  getRootFields(e) {
    return this.buildFields(this.configStore.getFields(e.name, "Object"));
  }
  getFields(e) {
    if (e instanceof et)
      return e.name === "Query" || e.name === "Mutation" || e.name === "Subscription" ? this.getRootFields(e) : this.getObjectFields(e);
    if (e instanceof In)
      return this.getInterfaceFields(e);
    throw new ie(`Type ${e.name} does not have fields to resolve`);
  }
  getInputFields(e) {
    return this.buildInputFields(this.configStore.getFields(e.name, "InputObject"));
  }
  getType(e) {
    if (e instanceof Uu)
      return e.type;
    const n = this.configStore.getTypeConfig(e), i = this.types.get(n.name);
    return i || (this.buildTypeFromConfig(n), this.types.get(n.name));
  }
  getOutputType(e) {
    const n = this.getType(e);
    if (n instanceof Ri)
      throw new ie(`Expected ${String(e)} to be an output type but it was defined as an InputObject`);
    return n;
  }
  getInputType(e) {
    const n = this.getType(e);
    if (!n)
      throw new ie(`Missing implementation of for type ${String(e)}`);
    if (n instanceof et)
      throw new ie(`Expected ${n.name} to be an input type but it was defined as a GraphQLObjectType`);
    if (n instanceof In)
      throw new ie(`Expected ${n.name} to be an input type but it was defined as a GraphQLInterfaceType`);
    if (n instanceof zn)
      throw new ie(`Expected ${String(e)} to be an input type but it was defined as an GraphQLUnionType`);
    return n;
  }
  getTypeOfKind(e, n) {
    const i = this.getType(e);
    switch (n) {
      case "Object":
      case "Query":
      case "Mutation":
      case "Subscription":
        if (i instanceof et)
          return i;
        break;
      case "Interface":
        if (i instanceof In)
          return i;
        break;
      case "Union":
        if (i instanceof zn)
          return i;
        break;
      case "Enum":
        if (i instanceof ai)
          return i;
        break;
      case "Scalar":
        if (i instanceof Vt)
          return i;
        break;
      case "InputObject":
        if (i instanceof Vt)
          return i;
        break;
    }
    throw new ie(`Expected ${String(e)} to be of type ${n}`);
  }
  buildObject(e) {
    var n;
    const i = new et({
      ...e,
      extensions: {
        ...e.extensions,
        pothosOptions: e.pothosOptions,
        pothosConfig: e
      },
      fields: () => this.getFields(i),
      isTypeOf: e.kind === "Object" ? this.plugin.wrapIsTypeOf((n = e.isTypeOf) !== null && n !== void 0 ? n : void 0, e) : void 0,
      interfaces: e.kind === "Object" ? () => e.interfaces.map((r) => this.getTypeOfKind(r, "Interface")) : void 0
    });
    return i;
  }
  buildInterface(e) {
    const n = (r, s, o) => {
      const a = nh(r);
      if (a)
        return typeof a == "string" ? a : this.getTypeConfig(a).name;
      var u;
      return ((u = e.resolveType) !== null && u !== void 0 ? u : Jo)(r, s, o, i);
    }, i = new In({
      ...e,
      extensions: {
        ...e.extensions,
        pothosOptions: e.pothosOptions,
        pothosConfig: e
      },
      interfaces: () => e.interfaces.map((r) => this.getTypeOfKind(r, "Interface")),
      fields: () => this.getFields(i),
      resolveType: this.plugin.wrapResolveType(n, e)
    });
    return i;
  }
  buildUnion(e) {
    const n = (i, r, s, o) => {
      if (typeof i == "object" && i !== null && Fr in i) {
        const c = i[Fr];
        return typeof c == "string" ? c : this.getTypeConfig(c).name;
      }
      if (!e.resolveType)
        return Jo(i, r, s, o);
      const a = e.resolveType(i, r, s, o), u = (c) => {
        if (typeof c == "string" || !c)
          return c;
        if (c instanceof et)
          return c.name;
        try {
          return this.configStore.getTypeConfig(c).name;
        } catch {
        }
        return c;
      };
      return th(a) ? a.then(u) : u(a);
    };
    return new zn({
      ...e,
      extensions: {
        ...e.extensions,
        pothosOptions: e.pothosOptions,
        pothosConfig: e
      },
      types: () => e.types.map((i) => this.getTypeOfKind(i, "Object")),
      resolveType: this.plugin.wrapResolveType(n, e)
    });
  }
  buildInputObject(e) {
    const n = new Ri({
      ...e,
      extensions: {
        ...e.extensions,
        pothosOptions: e.pothosOptions,
        pothosConfig: e
      },
      fields: () => this.getInputFields(n)
    });
    return n;
  }
  buildScalar(e) {
    return e.name === "ID" ? Gi : e.name === "Int" ? Bi : e.name === "Float" ? Pr : e.name === "Boolean" ? je : e.name === "String" ? ue : new Vt({
      ...e,
      extensions: {
        ...e.extensions,
        pothosOptions: e.pothosOptions,
        pothosConfig: e
      }
    });
  }
  buildEnum(e) {
    const n = {};
    for (const i of Object.keys(e.values)) {
      const r = e.values[i];
      this.enumValueConfigs.has(r) || this.enumValueConfigs.set(r, this.plugin.onEnumValueConfig(r)), this.enumValueConfigs.get(r) && (n[i] = this.enumValueConfigs.get(r));
    }
    return new ai({
      ...e,
      values: n,
      extensions: {
        ...e.extensions,
        pothosOptions: e.pothosOptions,
        pothosConfig: e
      }
    });
  }
  constructor(e, n) {
    ht(this, "types", /* @__PURE__ */ new Map()), ht(this, "builder", void 0), ht(this, "plugin", void 0), ht(this, "options", void 0), ht(this, "configStore", void 0), ht(this, "pluginMap", void 0), ht(this, "pluginList", void 0), ht(this, "implementers", /* @__PURE__ */ new Map()), ht(this, "typeConfigs", /* @__PURE__ */ new Map()), ht(this, "enumValueConfigs", /* @__PURE__ */ new Map()), ht(this, "outputFieldConfigs", /* @__PURE__ */ new Map()), ht(this, "inputFieldConfigs", /* @__PURE__ */ new Map()), this.builder = e, this.configStore = e.configStore, this.options = n;
    const i = {};
    var r;
    this.pluginList = ((r = e.options.plugins) !== null && r !== void 0 ? r : []).map((s) => {
      const o = this.builder.constructor.plugins[s];
      if (!o)
        throw new Qi(`No plugin named ${s} was registered`);
      return i[s] = new o(this, s), i[s];
    }), this.pluginMap = i, this.plugin = new Bd(this, this.pluginList);
  }
}
function os(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
let rh = Wi;
class sh extends Ne {
  constructor(e, n) {
    super(e, n), os(this, "kind", void 0), os(this, "$inferInput", void 0), os(this, rh, void 0), this.kind = e;
  }
}
function er(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
let oh = Pn, ah = fi;
class uh extends Ne {
  constructor(e, n) {
    super(e, n), er(this, "kind", void 0), er(this, "$inferType", void 0), er(this, oh, void 0), er(this, ah, void 0), this.kind = e;
  }
}
function Et(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
class lh {
  hasConfig(e) {
    return typeof e == "string" ? this.typeConfigs.has(e) : this.refsToName.has(e);
  }
  addUnionTypes(e, n) {
    this.onPrepare(() => {
      const i = this.getTypeConfig(e);
      if (i.graphqlKind !== "Union")
        throw new ie(`Can not add types to ${e} because it is a ${i.kind}`);
      i.types = [
        ...i.types,
        ...typeof n == "function" ? n() : n
      ];
    });
  }
  addInterfaces(e, n) {
    this.onPrepare(() => {
      const i = this.getTypeConfig(e);
      if (i.graphqlKind !== "Object" && i.graphqlKind !== "Interface" || i.kind === "Query" || i.kind === "Mutation" || i.kind === "Subscription")
        throw new ie(`Can not add interfaces to ${e} because it is a ${i.kind}`);
      i.interfaces = [
        ...i.interfaces,
        ...typeof n == "function" ? n() : n
      ];
    });
  }
  addFieldRef(e, n, i, r) {
    if (this.fieldRefs.has(e))
      throw new ie(`FieldRef ${String(e)} has already been added to config store`);
    const s = Ss(n), o = Object.keys(i).map((u) => {
      const c = i[u];
      return c.fieldName = u, c.argFor = e, c;
    }), a = () => {
      for (const u of o)
        if (this.pendingFields.has(u)) {
          const c = this.pendingFields.get(u);
          this.pendingFields.set(e, c), this.onTypeConfig(c, a);
          return;
        }
      this.pendingFields.delete(e), this.fieldRefs.set(e, r);
    };
    this.hasConfig(s) || s instanceof Ne || this.scalarsToRefs.has(s) ? a() : (this.pendingFields.set(e, s), this.onTypeConfig(s, () => {
      a();
    }));
  }
  createFieldConfig(e, n, i, r, s) {
    if (!this.fieldRefs.has(e))
      throw this.pendingFields.has(e) ? new ie(`Missing implementation for ${this.describeRef(this.pendingFields.get(e))} used in field ${n} of ${i.name}`) : new ie(`Missing definition for ${String(e)}`);
    const o = this.fieldRefs.get(e)(n, r, i);
    if (s && o.graphqlKind !== s)
      throw new Qi(`Expected ref for field named ${n} to resolve to a ${s} type, but got ${o.graphqlKind}`);
    return o;
  }
  associateRefWithName(e, n) {
    if (!this.typeConfigs.has(n))
      throw new ie(`${n} has not been implemented yet`);
    if (this.refsToName.set(e, n), this.pendingRefResolutions.has(e)) {
      const i = this.pendingRefResolutions.get(e);
      this.pendingRefResolutions.delete(e), i.forEach((r) => void r(this.typeConfigs.get(n)));
    }
  }
  addTypeConfig(e, n) {
    const { name: i } = e;
    if (this.typeConfigs.has(i))
      throw new ie(`Duplicate typename: Another type with name ${i} already exists.`);
    if (this.typeConfigs.set(e.name, e), n && this.associateRefWithName(n, i), this.pendingRefResolutions.has(i)) {
      const r = this.pendingRefResolutions.get(i);
      this.pendingRefResolutions.delete(i), r.forEach((s) => void s(e));
    }
  }
  getTypeConfig(e, n) {
    let i;
    if (typeof e == "string") {
      if (!this.typeConfigs.has(e))
        throw new ie(`Type ${String(e)} has not been implemented`);
      i = this.typeConfigs.get(e);
    } else if (this.refsToName.has(e))
      i = this.typeConfigs.get(this.refsToName.get(e));
    else throw e instanceof Vr || e instanceof Ur ? new ie(`Expected a base type but got a ${e.kind} of ${String(e.listType)}`) : new ie(`Ref ${String(e)} has not been implemented`);
    if (n && i.graphqlKind !== n)
      throw new ie(`Expected ref to resolve to a ${n} type, but got ${i.kind}`);
    return i;
  }
  getInputTypeRef(e) {
    if (e instanceof Ne) {
      if (e.kind !== "InputObject" && e.kind !== "Enum" && e.kind !== "Scalar")
        throw new ie(`Expected ${e.name} to be an input type but got ${e.kind}`);
      return e;
    }
    if (typeof e == "string") {
      if (this.scalarsToRefs.has(e))
        return this.scalarsToRefs.get(e);
      if (this.typeConfigs.has(e)) {
        const n = this.typeConfigs.get(e);
        if (n.graphqlKind !== "InputObject" && n.graphqlKind !== "Enum" && n.graphqlKind !== "Scalar")
          throw new ie(`Expected ${n.name} to be an input type but got ${n.graphqlKind}`);
        const i = new sh(n.graphqlKind, n.name);
        return this.refsToName.set(i, n.name), i;
      }
    }
    return e;
  }
  getOutputTypeRef(e) {
    if (e instanceof Ne) {
      if (e.kind === "InputObject" || e.kind === "InputList")
        throw new ie(`Expected ${e.name} to be an output type but got ${e.kind}`);
      if (e.kind === "List")
        throw new ie(`Expected ${e.name} to be a base type but got a ${e.kind}`);
      return e;
    }
    if (typeof e == "string") {
      if (this.scalarsToRefs.has(e))
        return this.scalarsToRefs.get(e);
      if (this.typeConfigs.has(e)) {
        const n = this.typeConfigs.get(e);
        if (n.graphqlKind === "InputObject")
          throw new ie(`Expected ${n.name} to be an output type but got ${n.graphqlKind}`);
        const i = new uh(n.graphqlKind, n.name);
        return this.refsToName.set(i, n.name), i;
      }
    }
    return e;
  }
  onTypeConfig(e, n) {
    if (!e)
      throw new ie(`${String(e)} is not a valid type ref`);
    if (this.refsToName.has(e))
      n(this.getTypeConfig(e));
    else if (typeof e == "string" && this.typeConfigs.has(e))
      n(this.typeConfigs.get(e));
    else if (this.pending)
      this.pendingRefResolutions.has(e) ? this.pendingRefResolutions.get(e).push(n) : this.pendingRefResolutions.set(e, [
        n
      ]);
    else throw new ie(`Ref ${String(e)} has not been implemented`);
  }
  onFieldUse(e, n) {
    this.fieldRefCallbacks.has(e) || this.fieldRefCallbacks.set(e, []), this.fieldRefCallbacks.get(e).push(n), this.fieldRefsToConfigs.has(e) && this.fieldRefsToConfigs.get(e).forEach((i) => void n(i));
  }
  getFields(e, n) {
    const i = this.getTypeConfig(e);
    this.fields.has(e) || this.fields.set(e, /* @__PURE__ */ new Map());
    const r = this.fields.get(e);
    if (n && i.graphqlKind !== n)
      throw new ie(`Expected ${e} to be a ${n} type, but found ${i.graphqlKind}`);
    return r;
  }
  prepareForBuild() {
    this.pending = !1;
    const { pendingActions: e } = this;
    if (this.pendingActions = [], e.forEach((n) => void n()), this.pendingRefResolutions.size > 0)
      throw new ie(`Missing implementations for some references (${[
        ...this.pendingRefResolutions.keys()
      ].map((n) => this.describeRef(n)).join(", ")}).`);
  }
  onPrepare(e) {
    this.pending ? this.pendingActions.push(e) : e();
  }
  addFields(e, n) {
    this.onPrepare(() => void this.onTypeConfig(e, (i) => {
      this.buildFields(e, typeof n == "function" ? n() : n);
    }));
  }
  getImplementers(e) {
    const n = this.getTypeConfig(e, "Interface");
    return [
      ...this.typeConfigs.values()
    ].filter((r) => r.kind === "Object" && r.interfaces.find((s) => this.getTypeConfig(s).name === n.name));
  }
  describeRef(e) {
    var n;
    if (typeof e == "string")
      return e;
    if (e.toString !== {}.toString)
      return String(e);
    const i = (n = [
      ...this.pendingFields.entries()
    ].find(([r, s]) => s === e)) === null || n === void 0 ? void 0 : n[0];
    return i ? `<unnamed ref or enum: used by ${i}>` : "<unnamed ref or enum>";
  }
  buildFields(e, n) {
    Object.keys(n).forEach((i) => {
      const r = n[i];
      r.fieldName = i, this.pendingFields.has(r) ? this.onTypeConfig(this.pendingFields.get(r), () => {
        this.buildField(e, r, i);
      }) : this.buildField(e, r, i);
    });
  }
  buildField(e, n, i) {
    const r = this.getTypeConfig(e), s = this.createFieldConfig(n, i, r), o = this.getFields(r.name);
    if (o.has(i))
      throw new ie(`Duplicate field definition for field ${i} in ${r.name}`);
    if (s.graphqlKind !== r.graphqlKind)
      throw new ie(`${r.name}.${i} was defined as a ${s.graphqlKind} field but ${r.name} is a ${r.graphqlKind}`);
    o.set(i, s), this.fieldRefsToConfigs.has(n) || this.fieldRefsToConfigs.set(n, []), this.fieldRefsToConfigs.get(n).push(s), this.fieldRefCallbacks.has(n) && this.fieldRefCallbacks.get(n).forEach((a) => void a(s));
  }
  constructor() {
    Et(this, "typeConfigs", /* @__PURE__ */ new Map()), Et(this, "fieldRefs", /* @__PURE__ */ new WeakMap()), Et(this, "fields", /* @__PURE__ */ new Map()), Et(this, "pendingActions", []), Et(this, "refsToName", /* @__PURE__ */ new Map()), Et(this, "scalarsToRefs", /* @__PURE__ */ new Map()), Et(this, "fieldRefsToConfigs", /* @__PURE__ */ new Map()), Et(this, "pendingFields", /* @__PURE__ */ new Map()), Et(this, "pendingRefResolutions", /* @__PURE__ */ new Map()), Et(this, "fieldRefCallbacks", /* @__PURE__ */ new Map()), Et(this, "pending", !0), [
      Gi,
      Bi,
      Pr,
      ue,
      je
    ].forEach((n) => {
      const i = new Uu(n);
      this.scalarsToRefs.set(n.name, i), this.refsToName.set(i, n.name);
    });
  }
}
function Bn(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
let ch = Gd;
class fh {
  toString() {
    var e;
    if (this.kind !== "Arg")
      return this.fieldName ? `${this.parentTypename}.${this.fieldName}` : this.parentTypename;
    var n;
    const i = (n = (e = this.argFor) === null || e === void 0 ? void 0 : e.fieldName) !== null && n !== void 0 ? n : "[unnamed field]";
    var r;
    const s = (r = this.fieldName) !== null && r !== void 0 ? r : "[unnamed argument]";
    return `${this.parentTypename}.${i}(${s})`;
  }
  constructor(e, n) {
    Bn(this, "kind", void 0), Bn(this, "parentTypename", void 0), Bn(this, "fieldName", void 0), Bn(this, "argFor", void 0), Bn(this, "$inferInput", void 0), Bn(this, ch, void 0), this.kind = e, this.parentTypename = n;
  }
}
function Ze(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
class _s {
  argBuilder() {
    const e = this.field.bind(this), n = Object.keys(Object.getPrototypeOf(this)).filter((i) => typeof this[i] == "function" && Function.prototype[i] === void 0);
    return [
      ...Object.keys(this),
      ...n
    ].forEach((i) => {
      e[i] = typeof this[i] == "function" ? this[i].bind(this) : this[i];
    }), e;
  }
  /**
  * Create in input field or argument for the current type
  * @param {PothosSchemaTypes.InputFieldOptions} [options={}] - Options for this field
  */
  field(e) {
    const n = new fh(this.kind, this.typename);
    return this.builder.configStore.addFieldRef(n, e.type, {}, (i, r, s) => {
      var o;
      return {
        name: i,
        parentField: r,
        kind: this.kind,
        graphqlKind: this.kind,
        parentType: s.name,
        type: Ts(e.type, this.builder.configStore, (o = e.required) !== null && o !== void 0 ? o : this.builder.defaultInputFieldRequiredness),
        pothosOptions: e,
        description: e.description,
        deprecationReason: e.deprecationReason,
        defaultValue: e.defaultValue,
        extensions: e.extensions
      };
    }), n;
  }
  helper(e) {
    return (...n) => {
      const [i = {}] = n;
      return this.field({
        ...i,
        type: e
      });
    };
  }
  constructor(e, n, i) {
    Ze(this, "builder", void 0), Ze(this, "kind", void 0), Ze(this, "typename", void 0), Ze(this, "boolean", this.helper("Boolean")), Ze(this, "float", this.helper("Float")), Ze(this, "id", this.helper("ID")), Ze(this, "int", this.helper("Int")), Ze(this, "string", this.helper("String")), Ze(this, "booleanList", this.helper([
      "Boolean"
    ])), Ze(this, "floatList", this.helper([
      "Float"
    ])), Ze(this, "idList", this.helper([
      "ID"
    ])), Ze(this, "intList", this.helper([
      "Int"
    ])), Ze(this, "stringList", this.helper([
      "String"
    ])), Ze(this, "listRef", (r, s) => {
      var o;
      return new Ur(r, (o = s == null ? void 0 : s.required) !== null && o !== void 0 ? o : !0);
    }), this.builder = e, this.kind = n, this.typename = i;
  }
}
function mi(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
let dh = qd;
class hh {
  toString() {
    return this.fieldName ? `${this.parentTypename}.${this.fieldName}` : this.parentTypename;
  }
  constructor(e, n) {
    mi(this, "kind", void 0), mi(this, "parentTypename", void 0), mi(this, "fieldName", void 0), mi(this, "$inferType", void 0), mi(this, dh, void 0), this.kind = e, this.parentTypename = n;
  }
}
function tr(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
class ph {
  createField(e) {
    const n = new hh(this.kind, this.typename);
    var i;
    return this.builder.configStore.addFieldRef(n, e.type, (i = e.args) !== null && i !== void 0 ? i : {}, (r, s, o) => {
      var a;
      const u = {};
      e.args && Object.keys(e.args).forEach((v) => {
        const w = e.args[v];
        u[v] = this.builder.configStore.createFieldConfig(w, v, o, r, "Arg");
      });
      var c;
      let f = (c = e.resolve) !== null && c !== void 0 ? c : () => {
        throw new ie(`Not implemented: No resolver found for ${this.typename}.${r}`);
      };
      ((a = e.extensions) === null || a === void 0 ? void 0 : a.pothosExposedField) === r && (f = hr);
      const { subscribe: g } = e;
      var p;
      return {
        kind: this.kind,
        graphqlKind: this.graphqlKind,
        parentType: o.name,
        name: r,
        args: u,
        type: vs(e.type, this.builder.configStore, (p = e.nullable) !== null && p !== void 0 ? p : this.builder.defaultFieldNullability),
        pothosOptions: e,
        extensions: {
          pothosOriginalResolve: f,
          pothosOriginalSubscribe: g,
          ...e.extensions
        },
        description: e.description,
        deprecationReason: e.deprecationReason,
        resolve: f,
        subscribe: g
      };
    }), n;
  }
  exposeField(e, { extensions: n, ...i }) {
    return this.createField({
      ...i,
      extensions: {
        pothosExposedField: e,
        ...n
      },
      resolve: (r) => r[e]
    });
  }
  constructor(e, n, i, r) {
    tr(this, "typename", void 0), tr(this, "builder", void 0), tr(this, "kind", void 0), tr(this, "graphqlKind", void 0), this.typename = e, this.builder = n, this.kind = i, this.graphqlKind = r;
  }
}
function gh(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
class Br extends ph {
  /**
  * Create a Boolean field
  * @param {PothosSchemaTypes.FieldOptions} options - Options for this field
  */
  boolean(...e) {
    const [n = {}] = e;
    return this.createField({
      resolve: void 0,
      ...n,
      type: "Boolean"
    });
  }
  /**
  * Create a Float field
  * @param {PothosSchemaTypes.FieldOptions} options - Options for this field
  */
  float(...e) {
    const [n = {}] = e;
    return this.createField({
      resolve: void 0,
      ...n,
      type: "Float"
    });
  }
  /**
  * Create a ID field
  * @param {PothosSchemaTypes.FieldOptions} options - Options for this field
  */
  id(...e) {
    const [n = {}] = e;
    return this.createField({
      resolve: void 0,
      ...n,
      type: "ID"
    });
  }
  /**
  * Create a Int field
  * @param {PothosSchemaTypes.FieldOptions} options - Options for this field
  */
  int(...e) {
    const [n = {}] = e;
    return this.createField({
      resolve: void 0,
      ...n,
      type: "Int"
    });
  }
  /**
  * Create a String field
  * @param {PothosSchemaTypes.FieldOptions} options - Options for this field
  */
  string(...e) {
    const [n = {}] = e;
    return this.createField({
      resolve: void 0,
      ...n,
      type: "String"
    });
  }
  /**
  * Create a Boolean list field
  * @param {PothosSchemaTypes.FieldOptions} options - Options for this field
  */
  booleanList(...e) {
    const [n = {}] = e;
    return this.createField({
      resolve: void 0,
      ...n,
      type: [
        "Boolean"
      ]
    });
  }
  /**
  * Create a Float list field
  * @param {PothosSchemaTypes.FieldOptions} options - Options for this field
  */
  floatList(...e) {
    const [n = {}] = e;
    return this.createField({
      resolve: void 0,
      ...n,
      type: [
        "Float"
      ]
    });
  }
  /**
  * Create a ID list field
  * @param {PothosSchemaTypes.FieldOptions} options - Options for this field
  */
  idList(...e) {
    const [n = {}] = e;
    return this.createField({
      resolve: void 0,
      ...n,
      type: [
        "ID"
      ]
    });
  }
  /**
  * Create a Int list field
  * @param {PothosSchemaTypes.FieldOptions} options - Options for this field
  */
  intList(...e) {
    const [n = {}] = e;
    return this.createField({
      resolve: void 0,
      ...n,
      type: [
        "Int"
      ]
    });
  }
  /**
  * Create a String list field
  * @param {PothosSchemaTypes.FieldOptions} options - Options for this field
  */
  stringList(...e) {
    const [n = {}] = e;
    return this.createField({
      resolve: void 0,
      ...n,
      type: [
        "String"
      ]
    });
  }
  /**
  * create a new field for the current type
  * @param {PothosSchemaTypes.FieldOptions} options - options for this field
  */
  field(e) {
    return this.createField(e);
  }
  listRef(e, n) {
    var i;
    return new Vr(e, (i = n == null ? void 0 : n.nullable) !== null && i !== void 0 ? i : !1);
  }
  constructor(...e) {
    super(...e), gh(this, "arg", new _s(this.builder, "Arg", this.typename).argBuilder());
  }
}
class Vu extends Br {
  /**
  * Create a Boolean field from a boolean property on the parent object
  * @param {string} name - the name of the property on the source object (does not need to match the field name).
  * @param {object} [options={}] - Options for this field
  */
  exposeBoolean(e, ...n) {
    const [i = {}] = n;
    return this.exposeField(e, {
      ...i,
      type: "Boolean"
    });
  }
  /**
  * Create a Float field from a numeric property on the parent object
  * @param {string} name - the name of the property on the source object (does not need to match the field name).
  * @param {object} [options={}] - Options for this field
  */
  exposeFloat(e, ...n) {
    const [i = {}] = n;
    return this.exposeField(e, {
      ...i,
      type: "Float"
    });
  }
  /**
  * Create an ID field from a property on the parent object
  * @param {string} name - the name of the property on the source object (does not need to match the field name).
  * @param {object} [options={}] - Options for this field
  */
  exposeID(e, ...n) {
    const [i = {}] = n;
    return this.exposeField(e, {
      ...i,
      type: "ID"
    });
  }
  /**
  * Create an Int field from a numeric property on the parent object
  * @param {string} name - the name of the property on the source object (does not need to match the field name).
  * @param {object} [options={}] - Options for this field
  */
  exposeInt(e, ...n) {
    const [i = {}] = n;
    return this.exposeField(e, {
      ...i,
      type: "Int"
    });
  }
  /**
  * Create a String field from a string property on the parent object
  * @param {string} name - the name of the property on the source object (does not need to match the field name).
  * @param {object} [options={}] - Options for this field
  */
  exposeString(e, ...n) {
    const [i = {}] = n;
    return this.exposeField(e, {
      ...i,
      type: "String"
    });
  }
  /**
  * Create a Boolean list field from a boolean[] property on the parent object
  * @param {string} name - the name of the property on the source object (does not need to match the field name).
  * @param {object} [options={}] - Options for this field
  */
  exposeBooleanList(e, ...n) {
    const [i = {}] = n;
    return this.exposeField(e, {
      ...i,
      type: [
        "Boolean"
      ]
    });
  }
  /**
  * Create a Float list field from a number[] property on the parent object
  * @param {string} name - the name of the property on the source object (does not need to match the field name).
  * @param {object} [options={}] - Options for this field
  */
  exposeFloatList(e, ...n) {
    const [i = {}] = n;
    return this.exposeField(e, {
      ...i,
      type: [
        "Float"
      ]
    });
  }
  /**
  * Create an ID list field from an id[] property on the parent object
  * @param {string} name - the name of the property on the source object (does not need to match the field name).
  * @param {object} [options={}] - Options for this field
  */
  exposeIDList(e, ...n) {
    const [i = {}] = n;
    return this.exposeField(e, {
      ...i,
      type: [
        "ID"
      ]
    });
  }
  /**
  * Create a Int list field from a number[] property on the parent object
  * @param {string} name - the name of the property on the source object (does not need to match the field name).
  * @param {object} [options={}] - Options for this field
  */
  exposeIntList(e, ...n) {
    const [i = {}] = n;
    return this.exposeField(e, {
      ...i,
      type: [
        "Int"
      ]
    });
  }
  /**
  * Create a String list field from a string[] property on the parent object
  * @param {string} name - the name of the property on the source object (does not need to match the field name).
  * @param {object} [options={}] - Options for this field
  */
  exposeStringList(e, ...n) {
    const [i = {}] = n;
    return this.exposeField(e, {
      ...i,
      type: [
        "String"
      ]
    });
  }
  /**
  * Create a field that resolves to a property of the corresponding type on the parent object
  * @param {string} name - the name of the property on the source object (does not need to match the field name).
  * @param {object} [options={}] - Options for this field
  */
  expose(e, ...n) {
    const [i = {}] = n;
    return this.exposeField(e, i);
  }
}
class nr extends Vu {
  constructor(e, n) {
    super(e, n, "Interface", "Interface");
  }
}
class ir extends Br {
  constructor(e) {
    super("Mutation", e, "Mutation", "Object");
  }
}
class rr extends Vu {
  constructor(e, n) {
    super(e, n, "Object", "Object");
  }
}
class sr extends Br {
  constructor(e) {
    super("Query", e, "Query", "Object");
  }
}
class or extends Br {
  constructor(e) {
    super("Subscription", e, "Subscription", "Object");
  }
}
function yi(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
let mh = Pn, yh = Wi;
class bh extends Ne {
  constructor(e) {
    super("Enum", e), yi(this, "kind", "Enum"), yi(this, "$inferType", void 0), yi(this, "$inferInput", void 0), yi(this, mh, void 0), yi(this, yh, void 0);
  }
}
function pr(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
let wh = Wi;
class Bu extends Ne {
  constructor(e) {
    super("InputObject", e), pr(this, "kind", "InputObject"), pr(this, "$inferInput", void 0), pr(this, wh, void 0);
  }
}
class Eh extends Bu {
  implement(e) {
    return this.builder.inputType(this, e), this;
  }
  constructor(e, n) {
    super(n), pr(this, "builder", void 0), this.builder = e;
  }
}
function _i(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
let vh = Pn, Th = fi;
class Gu extends Ne {
  constructor(e) {
    super("Interface", e), _i(this, "kind", "Interface"), _i(this, "$inferType", void 0), _i(this, vh, void 0), _i(this, Th, void 0);
  }
}
class Sh extends Gu {
  implement(e) {
    return this.builder.interfaceType(this, e);
  }
  constructor(e, n) {
    super(n), _i(this, "builder", void 0), this.builder = e;
  }
}
function Ii(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
let _h = Pn, Ih = fi;
class Is extends Ne {
  constructor(e) {
    super("Object", e), Ii(this, "kind", "Object"), Ii(this, "$inferType", void 0), Ii(this, _h, void 0), Ii(this, Ih, void 0);
  }
}
class Oh extends Is {
  implement(e) {
    return this.builder.objectType(this, e);
  }
  constructor(e, n) {
    super(n), Ii(this, "builder", void 0), this.builder = e;
  }
}
function ar(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
let Nh = Pn, Ah = fi;
class xh extends Ne {
  constructor(e) {
    super("Union", e), ar(this, "kind", "Union"), ar(this, "$inferType", void 0), ar(this, Nh, void 0), ar(this, Ah, void 0);
  }
}
function Qn(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
let to = class {
  static registerPlugin(e, n) {
    if (!this.allowPluginReRegistration && this.plugins[e])
      throw new Qi(`Received multiple implementations for plugin ${e}`);
    this.plugins[e] = n;
  }
  objectType(e, n, i) {
    Zt(e), Xo(n.interfaces);
    var r;
    const s = typeof e == "string" ? e : (r = n.name) !== null && r !== void 0 ? r : e.name;
    if (s === "Query" || s === "Mutation" || s === "Subscription")
      throw new ie(`Invalid object name ${s} use .create${s}Type() instead`);
    const o = e instanceof Ne ? e : new Is(s), a = {
      kind: "Object",
      graphqlKind: "Object",
      name: s,
      interfaces: [],
      description: n.description,
      extensions: n.extensions,
      isTypeOf: n.isTypeOf,
      pothosOptions: n
    };
    return this.configStore.addTypeConfig(a, o), n.interfaces && this.configStore.addInterfaces(s, n.interfaces), typeof e == "function" && this.configStore.associateRefWithName(e, s), i && this.configStore.addFields(o, () => i(new rr(s, this))), n.fields && this.configStore.addFields(o, () => {
      const u = new rr(s, this);
      return n.fields(u);
    }), o;
  }
  objectFields(e, n) {
    Zt(e), this.configStore.onTypeConfig(e, ({ name: i }) => {
      this.configStore.addFields(e, () => n(new rr(i, this)));
    });
  }
  objectField(e, n, i) {
    Zt(e), this.configStore.onTypeConfig(e, ({ name: r }) => {
      this.configStore.addFields(e, () => ({
        [n]: i(new rr(r, this))
      }));
    });
  }
  queryType(...e) {
    const [n = {}, i] = e, r = {
      kind: "Query",
      graphqlKind: "Object",
      name: "Query",
      description: n.description,
      pothosOptions: n,
      extensions: n.extensions
    }, s = new Is("Query");
    return this.configStore.addTypeConfig(r, s), i && this.configStore.addFields("Query", () => i(new sr(this))), n.fields && this.configStore.addFields("Query", () => n.fields(new sr(this))), s;
  }
  queryFields(e) {
    this.configStore.addFields("Query", () => e(new sr(this)));
  }
  queryField(e, n) {
    this.configStore.addFields("Query", () => ({
      [e]: n(new sr(this))
    }));
  }
  mutationType(...e) {
    const [n = {}, i] = e, r = {
      kind: "Mutation",
      graphqlKind: "Object",
      name: "Mutation",
      description: n.description,
      pothosOptions: n,
      extensions: n.extensions
    };
    this.configStore.addTypeConfig(r), i && this.configStore.addFields("Mutation", () => i(new ir(this))), n.fields && this.configStore.addFields("Mutation", () => n.fields(new ir(this)));
  }
  mutationFields(e) {
    this.configStore.addFields("Mutation", () => e(new ir(this)));
  }
  mutationField(e, n) {
    this.configStore.addFields("Mutation", () => ({
      [e]: n(new ir(this))
    }));
  }
  subscriptionType(...e) {
    const [n = {}, i] = e, r = {
      kind: "Subscription",
      graphqlKind: "Object",
      name: "Subscription",
      description: n.description,
      pothosOptions: n,
      extensions: n.extensions
    };
    this.configStore.addTypeConfig(r), i && this.configStore.addFields("Subscription", () => i(new or(this))), n.fields && this.configStore.addFields("Subscription", () => n.fields(new or(this)));
  }
  subscriptionFields(e) {
    this.configStore.addFields("Subscription", () => e(new or(this)));
  }
  subscriptionField(e, n) {
    this.configStore.addFields("Subscription", () => ({
      [e]: n(new or(this))
    }));
  }
  args(e) {
    return e(new _s(this, "Arg", "[unknown]"));
  }
  interfaceType(e, n, i) {
    Zt(e), Xo(n.interfaces);
    var r;
    const s = typeof e == "string" ? e : (r = n.name) !== null && r !== void 0 ? r : e.name, o = e instanceof Ne ? e : new Gu(s), a = o.name, u = {
      kind: "Interface",
      graphqlKind: "Interface",
      name: a,
      interfaces: [],
      description: n.description,
      pothosOptions: n,
      extensions: n.extensions,
      resolveType: n.resolveType
    };
    return this.configStore.addTypeConfig(u, o), n.interfaces && this.configStore.addInterfaces(a, n.interfaces), typeof e == "function" && this.configStore.associateRefWithName(e, s), i && this.configStore.addFields(o, () => i(new nr(a, this))), n.fields && this.configStore.addFields(o, () => n.fields(new nr(a, this))), o;
  }
  interfaceFields(e, n) {
    Zt(e), this.configStore.onTypeConfig(e, ({ name: i }) => {
      this.configStore.addFields(e, () => n(new nr(i, this)));
    });
  }
  interfaceField(e, n, i) {
    Zt(e), this.configStore.onTypeConfig(e, ({ name: r }) => {
      this.configStore.addFields(e, () => ({
        [n]: i(new nr(r, this))
      }));
    });
  }
  unionType(e, n) {
    const i = new xh(e);
    Array.isArray(n.types) && n.types.forEach((s) => {
      Zt(s);
    });
    const r = {
      kind: "Union",
      graphqlKind: "Union",
      name: e,
      types: [],
      description: n.description,
      resolveType: n.resolveType,
      pothosOptions: n,
      extensions: n.extensions
    };
    return this.configStore.addTypeConfig(r, i), this.configStore.addUnionTypes(e, n.types), i;
  }
  enumType(e, n) {
    Zt(e);
    const i = typeof e == "string" ? e : n.name, r = new bh(i), s = typeof e == "object" ? Zd(
      // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
      e,
      n == null ? void 0 : n.values
    ) : Xd(n.values), o = {
      kind: "Enum",
      graphqlKind: "Enum",
      name: i,
      values: s,
      description: n.description,
      pothosOptions: n,
      extensions: n.extensions
    };
    return this.configStore.addTypeConfig(o, r), typeof e != "string" && this.configStore.associateRefWithName(e, i), r;
  }
  scalarType(e, n) {
    const i = new Mu(e), r = {
      kind: "Scalar",
      graphqlKind: "Scalar",
      name: e,
      description: n.description,
      parseLiteral: n.parseLiteral,
      parseValue: n.parseValue,
      serialize: n.serialize,
      pothosOptions: n,
      extensions: n.extensions
    };
    return this.configStore.addTypeConfig(r, i), i;
  }
  addScalarType(e, n, ...i) {
    const [r = {}] = i, s = n.toConfig();
    return this.scalarType(e, {
      ...s,
      ...r,
      extensions: {
        ...s.extensions,
        ...r.extensions
      }
    });
  }
  inputType(e, n) {
    Zt(e);
    const i = typeof e == "string" ? e : e.name, r = typeof e == "string" ? new Bu(i) : e, s = {
      kind: "InputObject",
      graphqlKind: "InputObject",
      name: i,
      isOneOf: n.isOneOf,
      description: n.description,
      pothosOptions: n,
      extensions: n.extensions
    };
    return this.configStore.addTypeConfig(s, r), this.configStore.addFields(r, () => n.fields(new _s(this, "InputObject", i))), r;
  }
  inputRef(e) {
    return new Eh(this, e);
  }
  objectRef(e) {
    return new Oh(this, e);
  }
  interfaceRef(e) {
    return new Sh(this, e);
  }
  toSchema(...e) {
    const [n = {}] = e, { directives: i, extensions: r } = n;
    [
      Gi,
      Bi,
      Pr,
      ue,
      je
    ].forEach((f) => {
      this.configStore.hasConfig(f.name) || this.addScalarType(f.name, f);
    });
    const o = new ih(this, n);
    o.plugin.beforeBuild(), o.buildAll();
    const a = [
      ...o.types.values()
    ], u = new Ys({
      query: o.types.get("Query"),
      mutation: o.types.get("Mutation"),
      subscription: o.types.get("Subscription"),
      extensions: r ?? {},
      directives: i,
      types: a
    }), c = o.plugin.afterBuild(u);
    return n.sortSchema === !1 ? c : jd(c);
  }
  constructor(e) {
    Qn(this, "configStore", void 0), Qn(this, "options", void 0), Qn(this, "defaultFieldNullability", void 0), Qn(this, "defaultInputFieldRequiredness", void 0), this.options = e, this.configStore = new lh();
    var n;
    this.defaultFieldNullability = (n = e.defaultFieldNullability) !== null && n !== void 0 ? n : !1;
    var i;
    this.defaultInputFieldRequiredness = (i = e.defaultInputFieldRequiredness) !== null && i !== void 0 ? i : !1;
  }
};
Qn(to, "plugins", {});
Qn(to, "allowPluginReRegistration", !1);
const Fh = to;
function Zo(t) {
  return t;
}
function ea(t) {
  if (typeof t != "object" || t === null || Array.isArray(t))
    throw new TypeError("JSONObject cannot represent non-object value: " + t);
  return t;
}
function qu(t, e, n) {
  var i = /* @__PURE__ */ Object.create(null);
  return e.fields.forEach(function(r) {
    i[r.name.value] = no(t, r.value, n);
  }), i;
}
function no(t, e, n) {
  switch (e.kind) {
    case I.STRING:
    case I.BOOLEAN:
      return e.value;
    case I.INT:
    case I.FLOAT:
      return parseFloat(e.value);
    case I.OBJECT:
      return qu(t, e, n);
    case I.LIST:
      return e.values.map(function(i) {
        return no(t, i, n);
      });
    case I.NULL:
      return null;
    case I.VARIABLE:
      return n ? n[e.name.value] : void 0;
    default:
      throw new TypeError(t + " cannot represent value: " + be(e));
  }
}
var Rh = new Vt({
  name: "JSON",
  description: "The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).",
  specifiedByUrl: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf",
  serialize: Zo,
  parseValue: Zo,
  parseLiteral: function(e, n) {
    return no("JSON", e, n);
  }
}), Lh = new Vt({
  name: "JSONObject",
  description: "The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).",
  specifiedByUrl: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf",
  serialize: ea,
  parseValue: ea,
  parseLiteral: function(e, n) {
    if (e.kind !== I.OBJECT)
      throw new TypeError("JSONObject cannot represent non-object value: " + be(e));
    return qu("JSONObject", e, n);
  }
});
const zu = 3;
function nt(t) {
  return Gr(t, []);
}
function Gr(t, e) {
  switch (typeof t) {
    case "string":
      return JSON.stringify(t);
    case "function":
      return t.name ? `[function ${t.name}]` : "[function]";
    case "object":
      return Ch(t, e);
    default:
      return String(t);
  }
}
function ta(t) {
  return (t.name = "GraphQLError") ? t.toString() : `${t.name}: ${t.message};
 ${t.stack}`;
}
function Ch(t, e) {
  if (t === null)
    return "null";
  if (t instanceof Error)
    return t.name === "AggregateError" ? ta(t) + `
` + na(t.errors, e) : ta(t);
  if (e.includes(t))
    return "[Circular]";
  const n = [...e, t];
  if (kh(t)) {
    const i = t.toJSON();
    if (i !== t)
      return typeof i == "string" ? i : Gr(i, n);
  } else if (Array.isArray(t))
    return na(t, n);
  return Dh(t, n);
}
function kh(t) {
  return typeof t.toJSON == "function";
}
function Dh(t, e) {
  const n = Object.entries(t);
  return n.length === 0 ? "{}" : e.length > zu ? "[" + $h(t) + "]" : "{ " + n.map(([r, s]) => r + ": " + Gr(s, e)).join(", ") + " }";
}
function na(t, e) {
  if (t.length === 0)
    return "[]";
  if (e.length > zu)
    return "[Array]";
  const n = t.length, i = [];
  for (let r = 0; r < n; ++r)
    i.push(Gr(t[r], e));
  return "[" + i.join(", ") + "]";
}
function $h(t) {
  const e = Object.prototype.toString.call(t).replace(/^\[object /, "").replace(/]$/, "");
  if (e === "Object" && typeof t.constructor == "function") {
    const n = t.constructor.name;
    if (typeof n == "string" && n !== "")
      return n;
  }
  return e;
}
const jh = [
  "message",
  "locations",
  "path",
  "nodes",
  "source",
  "positions",
  "originalError",
  "name",
  "stack",
  "extensions"
];
function Ph(t) {
  return t != null && typeof t == "object" && Object.keys(t).every((e) => jh.includes(e));
}
function X(t, e) {
  return e != null && e.originalError && !(e.originalError instanceof Error) && Ph(e.originalError) && (e.originalError = X(e.originalError.message, e.originalError)), Ka.major >= 17 ? new j(t, e) : new j(t, e == null ? void 0 : e.nodes, e == null ? void 0 : e.source, e == null ? void 0 : e.positions, e == null ? void 0 : e.path, e == null ? void 0 : e.originalError, e == null ? void 0 : e.extensions);
}
function Mh(t) {
  return t != null && typeof t == "object" && Symbol.iterator in t;
}
function Qu(t) {
  return typeof t == "object" && t !== null;
}
function Ae(t) {
  return (t == null ? void 0 : t.then) != null;
}
function Uh(t, e, n) {
  let i = n;
  for (const r of t)
    i = Ae(i) ? i.then((s) => e(s, r)) : e(i, r);
  return i;
}
function Wu(t, e) {
  return Object.prototype.hasOwnProperty.call(t, e);
}
function Hu(t, e, n = {}) {
  const i = {}, s = (e.arguments ?? []).reduce((o, a) => ({
    ...o,
    [a.name.value]: a
  }), {});
  for (const { name: o, type: a, defaultValue: u } of t.args) {
    const c = s[o];
    if (!c) {
      if (u !== void 0)
        i[o] = u;
      else if (re(a))
        throw X(`Argument "${o}" of required type "${nt(a)}" was not provided.`, {
          nodes: [e]
        });
      continue;
    }
    const f = c.value;
    let g = f.kind === I.NULL;
    if (f.kind === I.VARIABLE) {
      const v = f.name.value;
      if (n == null || !Wu(n, v)) {
        if (u !== void 0)
          i[o] = u;
        else if (re(a))
          throw X(`Argument "${o}" of required type "${nt(a)}" was provided the variable "$${v}" which was not provided a runtime value.`, {
            nodes: [f]
          });
        continue;
      }
      g = n[v] == null;
    }
    if (g && re(a))
      throw X(`Argument "${o}" of non-null type "${nt(a)}" must not be null.`, {
        nodes: [f]
      });
    const p = xn(f, a, n);
    if (p === void 0)
      throw X(`Argument "${o}" has invalid value ${be(f)}.`, {
        nodes: [f]
      });
    i[o] = p;
  }
  return i;
}
function Yu(t) {
  const e = /* @__PURE__ */ new WeakMap();
  return function(i) {
    const r = e.get(i);
    if (r === void 0) {
      const s = t(i);
      return e.set(i, s), s;
    }
    return r;
  };
}
function Vh(t) {
  const e = /* @__PURE__ */ new WeakMap();
  return function(i, r, s) {
    let o = e.get(i);
    if (!o) {
      o = /* @__PURE__ */ new WeakMap(), e.set(i, o);
      const c = /* @__PURE__ */ new WeakMap();
      o.set(r, c);
      const f = t(i, r, s);
      return c.set(s, f), f;
    }
    let a = o.get(r);
    if (!a) {
      a = /* @__PURE__ */ new WeakMap(), o.set(r, a);
      const c = t(i, r, s);
      return a.set(s, c), c;
    }
    const u = a.get(s);
    if (u === void 0) {
      const c = t(i, r, s);
      return a.set(s, c), c;
    }
    return u;
  };
}
function Bh(t) {
  const e = /* @__PURE__ */ new WeakMap();
  return function(i, r, s, o, a) {
    let u = e.get(i);
    if (!u) {
      u = /* @__PURE__ */ new WeakMap(), e.set(i, u);
      const v = /* @__PURE__ */ new WeakMap();
      u.set(r, v);
      const w = /* @__PURE__ */ new WeakMap();
      v.set(s, w);
      const R = /* @__PURE__ */ new WeakMap();
      w.set(o, R);
      const x = t(i, r, s, o, a);
      return R.set(a, x), x;
    }
    let c = u.get(r);
    if (!c) {
      c = /* @__PURE__ */ new WeakMap(), u.set(r, c);
      const v = /* @__PURE__ */ new WeakMap();
      c.set(s, v);
      const w = /* @__PURE__ */ new WeakMap();
      v.set(o, w);
      const R = t(i, r, s, o, a);
      return w.set(a, R), R;
    }
    let f = c.get(s);
    if (!f) {
      f = /* @__PURE__ */ new WeakMap(), c.set(s, f);
      const v = /* @__PURE__ */ new WeakMap();
      f.set(o, v);
      const w = t(i, r, s, o, a);
      return v.set(a, w), w;
    }
    let g = f.get(o);
    if (!g) {
      g = /* @__PURE__ */ new WeakMap(), f.set(o, g);
      const v = t(i, r, s, o, a);
      return g.set(a, v), v;
    }
    const p = g.get(a);
    if (p === void 0) {
      const v = t(i, r, s, o, a);
      return g.set(a, v), v;
    }
    return p;
  };
}
function Gh(t, e, n) {
  const r = qh(t).get(e);
  if (r == null)
    throw X(`Schema is not configured to execute ${e} operation.`, {
      nodes: n
    });
  return r;
}
const qh = Yu(function(e) {
  const n = /* @__PURE__ */ new Map(), i = e.getQueryType();
  i && n.set("query", i);
  const r = e.getMutationType();
  r && n.set("mutation", r);
  const s = e.getSubscriptionType();
  return s && n.set("subscription", s), n;
});
function Ju(t, e, n, i) {
  Symbol.asyncIterator in t && (t = t[Symbol.asyncIterator]());
  let r, s;
  typeof t.return == "function" && (r = t.return, s = (u) => {
    const c = () => Promise.reject(u);
    return r.call(t).then(c, c);
  });
  function o(u) {
    return u.done ? u : ia(u.value, e).then(ra, s);
  }
  let a;
  if (n) {
    const u = n;
    a = (c) => ia(c, u).then(ra, s);
  }
  return {
    next() {
      return t.next().then(o, a);
    },
    return() {
      return r ? r.call(t).then(o, a) : Promise.resolve({ value: void 0, done: !0 });
    },
    throw(u) {
      return typeof t.throw == "function" ? t.throw(u).then(o, a) : Promise.reject(u).catch(s);
    },
    [Symbol.asyncIterator]() {
      return this;
    }
  };
}
function ia(t, e) {
  return new Promise((n) => n(e(t)));
}
function ra(t) {
  return { value: t, done: !1 };
}
class Rr extends Map {
  get [Symbol.toStringTag]() {
    return "AccumulatorMap";
  }
  add(e, n) {
    const i = this.get(e);
    i === void 0 ? this.set(e, [n]) : i.push(n);
  }
}
const zh = new rn({
  name: "defer",
  description: "Directs the executor to defer this fragment when the `if` argument is true or undefined.",
  locations: [K.FRAGMENT_SPREAD, K.INLINE_FRAGMENT],
  args: {
    if: {
      type: new ne(je),
      description: "Deferred when true or undefined.",
      defaultValue: !0
    },
    label: {
      type: ue,
      description: "Unique name"
    }
  }
}), Qh = new rn({
  name: "stream",
  description: "Directs the executor to stream plural fields when the `if` argument is true or undefined.",
  locations: [K.FIELD],
  args: {
    if: {
      type: new ne(je),
      description: "Stream when true or undefined.",
      defaultValue: !0
    },
    label: {
      type: ue,
      description: "Unique name"
    },
    initialCount: {
      defaultValue: 0,
      type: Bi,
      description: "Number of items to return immediately"
    }
  }
});
function Wn(t, e, n, i, r, s, o, a) {
  for (const u of r.selections)
    switch (u.kind) {
      case I.FIELD: {
        if (!as(n, u))
          continue;
        s.add(Wh(u), u);
        break;
      }
      case I.INLINE_FRAGMENT: {
        if (!as(n, u) || !sa(t, u, i))
          continue;
        const c = oa(n, u);
        if (c) {
          const f = new Rr();
          Wn(t, e, n, i, u.selectionSet, f, o, a), o.push({
            label: c.label,
            fields: f
          });
        } else
          Wn(t, e, n, i, u.selectionSet, s, o, a);
        break;
      }
      case I.FRAGMENT_SPREAD: {
        const c = u.name.value;
        if (!as(n, u))
          continue;
        const f = oa(n, u);
        if (a.has(c) && !f)
          continue;
        const g = e[c];
        if (!g || !sa(t, g, i))
          continue;
        if (f || a.add(c), f) {
          const p = new Rr();
          Wn(t, e, n, i, g.selectionSet, p, o, a), o.push({
            label: f.label,
            fields: p
          });
        } else
          Wn(t, e, n, i, g.selectionSet, s, o, a);
        break;
      }
    }
}
function Ku(t, e, n, i, r) {
  const s = new Rr(), o = [];
  return Wn(t, e, n, i, r, s, o, /* @__PURE__ */ new Set()), { fields: s, patches: o };
}
function as(t, e) {
  const n = ui(Ws, e, t);
  if ((n == null ? void 0 : n.if) === !0)
    return !1;
  const i = ui(Qs, e, t);
  return (i == null ? void 0 : i.if) !== !1;
}
function sa(t, e, n) {
  const i = e.typeCondition;
  if (!i)
    return !0;
  const r = it(t, i);
  return r === n ? !0 : nn(r) ? t.getPossibleTypes(r).includes(n) : !1;
}
function Wh(t) {
  return t.alias ? t.alias.value : t.name.value;
}
function oa(t, e) {
  const n = ui(zh, e, t);
  if (n && n.if !== !1)
    return {
      label: typeof n.label == "string" ? n.label : void 0
    };
}
const Hh = Bh(function(e, n, i, r, s) {
  const o = new Rr(), a = /* @__PURE__ */ new Set(), u = [], c = {
    fields: o,
    patches: u
  };
  for (const f of s)
    f.selectionSet && Wn(e, n, i, r, f.selectionSet, o, u, a);
  return c;
});
function qr(t) {
  return (t == null ? void 0 : t[Symbol.asyncIterator]) != null;
}
function di(t, e, n) {
  return { prev: t, key: e, typename: n };
}
function Ve(t) {
  const e = [];
  let n = t;
  for (; n; )
    e.push(n.key), n = n.prev;
  return e.reverse();
}
function Yh(t) {
  return t.map((e) => typeof e == "number" ? "[" + e.toString() + "]" : "." + e).join("");
}
function Jh(t) {
  return t != null && typeof t == "object" && "errors" in t;
}
function Kh(t) {
  return t != null && typeof t.toString == "function";
}
function li(t) {
  return t instanceof j;
}
function Xu(t) {
  return t instanceof j ? t.originalError != null ? Xu(t.originalError) : !0 : !1;
}
function Zu(t) {
  var e;
  return typeof t == "object" && ((e = t == null ? void 0 : t.constructor) == null ? void 0 : e.name) === "DOMException" && t.name === "AbortError";
}
function gr(t, e, n) {
  const i = /* @__PURE__ */ new Set();
  if (Jh(t))
    for (const r of t.errors) {
      const s = gr(r, e, n);
      for (const o of s)
        i.add(o);
    }
  else if (Zu(t))
    n.debug("Request aborted");
  else if (e) {
    const r = e.maskError(t, e.errorMessage, e.isDev);
    r !== t && n.error(t), i.add(li(r) ? r : X(r.message, {
      originalError: r
    }));
  } else li(t) ? i.add(t) : t instanceof Error ? i.add(X(t.message, {
    originalError: t
  })) : typeof t == "string" ? i.add(X(t, {
    extensions: {
      unexpected: !0
    }
  })) : Kh(t) ? i.add(X(t.toString(), {
    extensions: {
      unexpected: !0
    }
  })) : (n.error(t), i.add(X("Unexpected error.", {
    extensions: {
      http: {
        unexpected: !0
      }
    }
  })));
  return Array.from(i);
}
function io(t, e = {}, n = !1) {
  var s, o, a, u;
  let i, r = !1;
  if ("extensions" in t && ((s = t.extensions) != null && s.http) && (t.extensions.http.headers && Object.assign(e, t.extensions.http.headers), t.extensions.http.status && (i = t.extensions.http.status)), "errors" in t && ((o = t.errors) != null && o.length))
    for (const c of t.errors)
      if ((a = c.extensions) != null && a.http) {
        if (c.extensions.http.headers && Object.assign(e, c.extensions.http.headers), n && c.extensions.http.spec)
          continue;
        c.extensions.http.status && (!i || c.extensions.http.status > i) && (i = c.extensions.http.status);
      } else (!Xu(c) || (u = c.extensions) != null && u.unexpected) && (r = !0);
  else
    i || (i = 200);
  return i || (r && !("data" in t) ? i = 500 : i = 200), {
    status: i,
    headers: e
  };
}
function Xh(t) {
  return Array.isArray(t) && t.length > 0 && // if one item in the array is a GraphQLError, we're good
  t.some(li);
}
const En = {
  red: "\x1B[31m",
  yellow: "\x1B[33m",
  magenta: "\x1B[35m",
  cyan: "\x1B[36m",
  reset: "\x1B[0m"
}, aa = En.yellow + "WARN" + En.reset, ua = En.cyan + "INFO" + En.reset, la = En.red + "ERR" + En.reset, ca = En.magenta + "DEBUG" + En.reset, bi = {
  debug: 0,
  info: 1,
  warn: 2,
  error: 3,
  silent: 4
}, ur = () => {
}, zr = (t) => (...e) => console.log(t, ...e), Zh = console.debug ? (...t) => console.debug(ca, ...t) : zr(ca), ep = console.info ? (...t) => console.info(ua, ...t) : zr(ua), tp = console.warn ? (...t) => console.warn(aa, ...t) : zr(aa), np = console.error ? (...t) => console.error(la, ...t) : zr(la), us = (t = ((e) => (e = globalThis.process) == null ? void 0 : e.env.DEBUG)() === "1" ? "debug" : "info") => {
  const n = bi[t];
  return {
    debug: n > bi.debug ? ur : Zh,
    info: n > bi.info ? ur : ep,
    warn: n > bi.warn ? ur : tp,
    error: n > bi.error ? ur : np
  };
}, ip = '<!doctype html><html lang=en><head><meta charset=utf-8><title>__TITLE__</title><link rel=icon href=https://raw.githubusercontent.com/dotansimha/graphql-yoga/main/website/public/favicon.ico><link rel=stylesheet href=https://unpkg.com/@graphql-yoga/graphiql@4.3.1/dist/style.css></head><body id=body class=no-focus-outline><noscript>You need to enable JavaScript to run this app.</noscript><div id=root></div><script type=module>import{renderYogaGraphiQL}from"https://unpkg.com/@graphql-yoga/graphiql@4.3.1/dist/yoga-graphiql.es.js";renderYogaGraphiQL(root,__OPTS__)<\/script></body></html>';
function rp({ headers: t, method: e }) {
  var n;
  return e === "GET" && !!((n = t == null ? void 0 : t.get("accept")) != null && n.includes("text/html"));
}
const sp = (t) => ip.replace("__TITLE__", (t == null ? void 0 : t.title) || "Yoga GraphiQL").replace("__OPTS__", JSON.stringify(t ?? {}));
function op(t) {
  const e = t.logger ?? console;
  let n;
  typeof (t == null ? void 0 : t.options) == "function" ? n = t == null ? void 0 : t.options : typeof (t == null ? void 0 : t.options) == "object" ? n = () => t == null ? void 0 : t.options : (t == null ? void 0 : t.options) === !1 ? n = () => !1 : n = () => ({});
  const i = (t == null ? void 0 : t.render) ?? sp;
  let r;
  const s = ({ URLPattern: o }) => (r || (r = new o({
    pathname: t.graphqlEndpoint
  })), r);
  return {
    async onRequest({ request: o, serverContext: a, fetchAPI: u, endResponse: c, url: f }) {
      if (rp(o) && (o.url.endsWith(t.graphqlEndpoint) || o.url.endsWith(`${t.graphqlEndpoint}/`) || f.pathname === t.graphqlEndpoint || f.pathname === `${t.graphqlEndpoint}/` || s(u).test(f))) {
        e.debug("Rendering GraphiQL");
        const g = await n(o, a);
        if (g) {
          const p = await i({
            ...g === !0 ? {} : g
          }), v = new u.Response(p, {
            headers: {
              "Content-Type": "text/html"
            },
            status: 200
          });
          c(v);
        }
      }
    }
  };
}
const ap = (t) => {
  if (t == null)
    return {};
  if (Au(t))
    return {
      onPluginInit({ setSchema: n }) {
        n(t);
      }
    };
  if ("then" in t) {
    let n;
    return {
      onRequestParse() {
        return {
          async onRequestParseDone() {
            n || (n = await t);
          }
        };
      },
      onEnveloped({ setSchema: i }) {
        if (!n)
          throw new Error("You provide a promise of a schema but it hasn't been resolved yet. Make sure you use this plugin with GraphQL Yoga.");
        i(n);
      }
    };
  }
  const e = /* @__PURE__ */ new WeakMap();
  return {
    onRequestParse({ request: n, serverContext: i }) {
      return {
        async onRequestParseDone() {
          const r = await t({
            ...i,
            request: n
          });
          e.set(n, r);
        }
      };
    },
    onEnveloped({ setSchema: n, context: i }) {
      if ((i == null ? void 0 : i.request) == null)
        throw new Error("Request object is not available in the context. Make sure you use this plugin with GraphQL Yoga.");
      const r = e.get(i.request);
      if (r == null)
        throw new Error("No schema found for this request. Make sure you use this plugin with GraphQL Yoga.");
      n(r);
    }
  };
};
function up(t) {
  return t != null && typeof t.then == "function";
}
const lp = (t) => {
  throw t;
};
class pt {
  constructor(e) {
    U(this, "state");
    let n;
    try {
      n = e();
    } catch (i) {
      this.state = { status: "rejected", value: i };
      return;
    }
    if (up(n)) {
      this.state = { status: "pending", value: n };
      return;
    }
    this.state = { status: "fulfilled", value: n };
  }
  then(e, n) {
    const i = this.state;
    if (i.status === "pending")
      return new pt(() => i.value.then(e, n));
    const r = typeof n == "function" ? n : lp;
    if (i.status === "rejected")
      return new pt(() => r(i.value));
    try {
      const s = typeof e == "function" ? e : void 0;
      return s === void 0 ? new pt(() => i.value) : new pt(() => s(i.value));
    } catch (s) {
      return new pt(() => r(s));
    }
  }
  catch(e) {
    return this.then(void 0, e);
  }
  resolve() {
    const e = this.state;
    if (e.status === "pending")
      return Promise.resolve(e.value);
    if (e.status === "rejected")
      throw e.value;
    return e.value;
  }
  static all(e) {
    let n = !1, i, r = !1;
    const s = [];
    for (const o of e) {
      const a = o.state;
      if (a.status === "rejected") {
        if (n)
          continue;
        n = !0, i = a.value;
        continue;
      }
      a.status === "pending" && (r = !0), s.push(a.value);
    }
    return r ? n ? (Promise.all(s).catch(() => {
    }), new pt(() => {
      throw i;
    })) : new pt(() => Promise.all(s)) : new pt(() => s);
  }
}
function Wt(t) {
  if (t instanceof Error)
    return t;
  if (typeof t == "object" && t != null && "message" in t && typeof t.message == "string") {
    let e;
    "cause" in t && (e = { cause: t.cause });
    const n = new Error(t.message, e);
    return "stack" in t && typeof t.stack == "string" && (n.stack = t.stack), "name" in t && typeof t.name == "string" && (n.name = t.name), n;
  }
  return new Error(String(t));
}
function cp(t) {
  const e = t[Symbol.asyncIterator]();
  let n, i, r = !1;
  async function s() {
    if (r)
      return { value: void 0, done: !0 };
    try {
      if (!n) {
        if (i)
          return await i, await s();
        let u;
        i = new Promise((f) => {
          u = f;
        });
        const c = await e.next();
        return c.done ? (r = !0, await s()) : (n = c.value[Symbol.asyncIterator](), i = void 0, u(), await s());
      }
      const o = n, a = await n.next();
      return a.done ? (n === o && (n = void 0), await s()) : a;
    } catch (o) {
      throw r = !0, o;
    }
  }
  return {
    next: s,
    async return() {
      var o, a;
      return r = !0, await Promise.all([(o = n == null ? void 0 : n.return) == null ? void 0 : o.call(n), (a = e.return) == null ? void 0 : a.call(e)]), { value: void 0, done: !0 };
    },
    async throw(o) {
      var a, u;
      throw r = !0, await Promise.all([(a = n == null ? void 0 : n.throw) == null ? void 0 : a.call(n, o), (u = e.throw) == null ? void 0 : u.call(e, o)]), o;
    },
    [Symbol.asyncIterator]() {
      return this;
    }
  };
}
function fa(t, e) {
  if (!t)
    throw new Error(e ?? "Unexpected invariant triggered.");
}
async function da(t, e) {
  const n = /* @__PURE__ */ Object.create(null);
  return await new Promise((i, r) => {
    e == null || e.addEventListener("abort", () => {
      r(e.reason);
    }), Promise.all(Object.entries(t).map(async ([s, o]) => {
      n[s] = await o;
    })).then(() => i(), r);
  }), n;
}
function fp(t, e, n, i) {
  const r = [], s = i == null ? void 0 : i.maxErrors;
  try {
    const o = dp(t, e, n, (a) => {
      if (s != null && r.length >= s)
        throw X("Too many errors processing variables, error limit reached. Execution aborted.");
      r.push(a);
    });
    if (r.length === 0)
      return { coerced: o };
  } catch (o) {
    r.push(o);
  }
  return { errors: r };
}
function dp(t, e, n, i) {
  const r = {};
  for (const s of e) {
    const o = s.variable.name.value, a = it(t, s.type);
    if (!Pt(a)) {
      const c = be(s.type);
      i(X(`Variable "$${o}" expected value of type "${c}" which cannot be used as an input type.`, { nodes: s.type }));
      continue;
    }
    if (!Wu(n, o)) {
      if (s.defaultValue)
        r[o] = xn(s.defaultValue, a);
      else if (re(a)) {
        const c = nt(a);
        i(X(`Variable "$${o}" of required type "${c}" was not provided.`, {
          nodes: s
        }));
      }
      continue;
    }
    const u = n[o];
    if (u === null && re(a)) {
      const c = nt(a);
      i(X(`Variable "$${o}" of non-null type "${c}" must not be null.`, {
        nodes: s
      }));
      continue;
    }
    r[o] = dd(u, a, (c, f, g) => {
      let p = `Variable "$${o}" got invalid value ` + nt(f);
      c.length > 0 && (p += ` at "${o}${Yh(c)}"`), i(X(p + "; " + g.message, {
        nodes: s,
        originalError: g
      }));
    });
  }
  return r;
}
const hp = Vh((t, e, n) => Hh(t.schema, t.fragments, t.variableValues, e, n));
function pp(t) {
  const e = tl(t);
  return "schema" in e ? el(e) : {
    errors: e.map((n) => {
      var i;
      return Object.defineProperty(n, "extensions", {
        value: {
          ...n.extensions,
          http: {
            ...(i = n.extensions) == null ? void 0 : i.http,
            status: 400
          }
        }
      }), n;
    })
  };
}
function el(t) {
  var n;
  if ((n = t.signal) != null && n.aborted)
    throw t.signal.reason;
  return new pt(() => yp(t)).then((i) => {
    const r = ha(i, t.errors);
    return t.subsequentPayloads.size > 0 ? {
      initialResult: {
        ...r,
        hasNext: !0
      },
      subsequentResults: Cp(t)
    } : r;
  }, (i) => {
    var r;
    if ((r = t.signal) != null && r.aborted)
      throw t.signal.reason;
    return i.errors ? t.errors.push(...i.errors) : t.errors.push(i), ha(null, t.errors);
  }).resolve();
}
function ha(t, e) {
  return e.length === 0 ? { data: t } : { errors: e, data: t };
}
const gp = Yu(function(e) {
  const n = /* @__PURE__ */ Object.create(null);
  for (const i of e.definitions)
    i.kind === I.FRAGMENT_DEFINITION && (n[i.name.value] = i);
  return n;
});
function tl(t) {
  var R;
  const { schema: e, document: n, rootValue: i, contextValue: r, variableValues: s, operationName: o, fieldResolver: a, typeResolver: u, subscribeFieldResolver: c, signal: f } = t;
  xu(e);
  const g = gp(n);
  let p;
  for (const x of n.definitions)
    switch (x.kind) {
      case I.OPERATION_DEFINITION:
        if (o == null) {
          if (p !== void 0)
            return [
              X("Must provide operation name if query contains multiple operations.")
            ];
          p = x;
        } else ((R = x.name) == null ? void 0 : R.value) === o && (p = x);
        break;
    }
  if (p == null)
    return o != null ? [X(`Unknown operation named "${o}".`)] : [X("Must provide an operation.")];
  const v = p.variableDefinitions ?? [], w = fp(e, v, s ?? {}, {
    maxErrors: 50
  });
  return w.errors ? w.errors : {
    schema: e,
    fragments: g,
    rootValue: i,
    contextValue: r,
    operation: p,
    variableValues: w.coerced,
    fieldResolver: a ?? ya,
    typeResolver: u ?? _p,
    subscribeFieldResolver: c ?? ya,
    subsequentPayloads: /* @__PURE__ */ new Set(),
    errors: [],
    signal: f
  };
}
function mp(t, e) {
  return {
    ...t,
    rootValue: e,
    subsequentPayloads: /* @__PURE__ */ new Set(),
    errors: []
  };
}
function yp(t) {
  const { operation: e, schema: n, fragments: i, variableValues: r, rootValue: s } = t, o = Gh(n, e.operation, [e]);
  o == null && X(`Schema is not configured to execute ${e.operation} operation.`, {
    nodes: e
  });
  const { fields: a, patches: u } = Ku(n, i, r, o, e.selectionSet), c = void 0;
  let f;
  e.operation === "mutation" ? f = bp(t, o, s, c, a) : f = ro(t, o, s, c, a);
  for (const g of u) {
    const { label: p, fields: v } = g;
    al(t, o, s, v, p, c);
  }
  return f;
}
function bp(t, e, n, i, r) {
  return Uh(r, (s, [o, a]) => {
    var c;
    const u = di(i, o, e.name);
    if ((c = t.signal) != null && c.aborted)
      throw t.signal.reason;
    return new pt(() => nl(t, e, n, a, u)).then((f) => (f === void 0 || (s[o] = f), s));
  }, /* @__PURE__ */ Object.create(null)).resolve();
}
function ro(t, e, n, i, r, s) {
  var u;
  const o = /* @__PURE__ */ Object.create(null);
  let a = !1;
  try {
    for (const [c, f] of r) {
      if ((u = t.signal) != null && u.aborted)
        throw t.signal.reason;
      const g = di(i, c, e.name), p = nl(t, e, n, f, g, s);
      p !== void 0 && (o[c] = p, Ae(p) && (a = !0));
    }
  } catch (c) {
    if (a)
      return da(o, t.signal).finally(() => {
        throw c;
      });
    throw c;
  }
  return a ? da(o, t.signal) : o;
}
function nl(t, e, n, i, r, s) {
  const o = (s == null ? void 0 : s.errors) ?? t.errors, a = ll(t.schema, e, i[0]);
  if (!a)
    return;
  const u = a.type, c = a.resolve ?? t.fieldResolver, f = il(t, a, i, e, r);
  try {
    const g = Hu(a, i[0], t.variableValues), p = t.contextValue, v = c(n, g, p, f);
    let w;
    return Ae(v) ? w = v.then((R) => vn(t, u, i, f, r, R, s)) : w = vn(t, u, i, f, r, v, s), Ae(w) ? w.then(void 0, (R) => {
      if (R instanceof AggregateError)
        return new AggregateError(R.errors.map((S) => {
          S = Wt(S);
          const A = tt(S, i, Ve(r)), O = mt(A, u, o);
          return dt(t, r, s), O;
        }));
      R = Wt(R);
      const x = tt(R, i, Ve(r)), y = mt(x, u, o);
      return dt(t, r, s), y;
    }) : w;
  } catch (g) {
    if (g instanceof AggregateError)
      return new AggregateError(g.errors.map((R) => {
        const x = Wt(R), y = tt(x, i, Ve(r));
        return mt(y, u, o);
      }));
    const p = Wt(g), v = tt(p, i, Ve(r)), w = mt(v, u, o);
    return dt(t, r, s), w;
  }
}
function il(t, e, n, i, r) {
  return {
    fieldName: e.name,
    fieldNodes: n,
    returnType: e.type,
    parentType: i,
    path: r,
    schema: t.schema,
    fragments: t.fragments,
    rootValue: t.rootValue,
    operation: t.operation,
    variableValues: t.variableValues
  };
}
const wp = "CRITICAL_ERROR";
function mt(t, e, n) {
  var i;
  if (re(e) || (i = t.extensions) != null && i[wp])
    throw t;
  return n.push(t), null;
}
function vn(t, e, n, i, r, s, o) {
  if (s instanceof Error)
    throw s;
  if (re(e)) {
    const a = vn(t, e.ofType, n, i, r, s, o);
    if (a === null)
      throw new Error(`Cannot return null for non-nullable field ${i.parentType.name}.${i.fieldName}.`);
    return a;
  }
  if (s == null)
    return null;
  if (Pe(e))
    return vp(t, e, n, i, r, s, o);
  if (bn(e))
    return Tp(e, s);
  if (nn(e))
    return Sp(t, e, n, i, r, s, o);
  if (pe(e))
    return Os(t, e, n, i, r, s, o);
  console.assert(!1, "Cannot complete value of unexpected output type: " + nt(e));
}
function rl(t, e, n) {
  if (typeof n.key == "number")
    return;
  const i = ui(Qh, e[0], t.variableValues);
  if (i && i.if !== !1)
    return fa(typeof i.initialCount == "number", "initialCount must be a number"), fa(i.initialCount >= 0, "initialCount must be a positive integer"), {
      initialCount: i.initialCount,
      label: typeof i.label == "string" ? i.label : void 0
    };
}
async function Ep(t, e, n, i, r, s, o) {
  var p;
  (p = t.signal) == null || p.addEventListener("abort", () => {
    var v;
    (v = s.return) == null || v.call(s);
  });
  const a = (o == null ? void 0 : o.errors) ?? t.errors, u = rl(t, n, r);
  let c = !1;
  const f = [];
  let g = 0;
  for (; ; ) {
    if (u && typeof u.initialCount == "number" && g >= u.initialCount) {
      Rp(g, s, t, n, i, e, r, u.label, o);
      break;
    }
    const v = di(r, g, void 0);
    let w;
    try {
      if (w = await s.next(), w.done)
        break;
    } catch (R) {
      const x = Wt(R), y = tt(x, n, Ve(v));
      f.push(mt(y, e, a));
      break;
    }
    sl(w.value, f, a, t, e, n, i, v, o) && (c = !0), g += 1;
  }
  return c ? Promise.all(f) : f;
}
function vp(t, e, n, i, r, s, o) {
  const a = e.ofType, u = (o == null ? void 0 : o.errors) ?? t.errors;
  if (qr(s)) {
    const w = s[Symbol.asyncIterator]();
    return Ep(t, a, n, i, r, w, o);
  }
  if (!Mh(s))
    throw X(`Expected Iterable, but did not find one for field "${i.parentType.name}.${i.fieldName}".`);
  const c = rl(t, n, r);
  let f = !1, g = o;
  const p = [];
  let v = 0;
  for (const w of s) {
    const R = di(r, v, void 0);
    if (c && typeof c.initialCount == "number" && v >= c.initialCount) {
      g = xp(r, R, w, t, n, i, a, c.label, g), v++;
      continue;
    }
    sl(w, p, u, t, a, n, i, R, o) && (f = !0), v++;
  }
  return f ? Promise.all(p) : p;
}
function sl(t, e, n, i, r, s, o, a, u) {
  try {
    let c;
    if (Ae(t) ? c = t.then((f) => vn(i, r, s, o, a, f, u)) : c = vn(i, r, s, o, a, t, u), Ae(c))
      return e.push(c.then(void 0, (f) => {
        f = Wt(f);
        const g = tt(f, s, Ve(a)), p = mt(g, r, n);
        return dt(i, a, u), p;
      })), !0;
    e.push(c);
  } catch (c) {
    const f = Wt(c), g = tt(f, s, Ve(a)), p = mt(g, r, n);
    dt(i, a, u), e.push(p);
  }
  return !1;
}
function Tp(t, e) {
  let n;
  try {
    n = t.serialize(e);
  } catch (i) {
    throw i instanceof j ? new Error(i.message) : i;
  }
  if (n == null)
    throw new Error(`Expected \`${nt(t)}.serialize(${nt(e)})\` to return non-nullable value, returned: ${nt(n)}`);
  return n;
}
function Sp(t, e, n, i, r, s, o) {
  const a = e.resolveType ?? t.typeResolver, u = t.contextValue, c = a(s, u, i, e);
  return Ae(c) ? c.then((f) => Os(t, pa(f, t, e, n, i, s), n, i, r, s, o)) : Os(t, pa(c, t, e, n, i, s), n, i, r, s, o);
}
function pa(t, e, n, i, r, s) {
  if (t == null)
    throw X(`Abstract type "${n.name}" must resolve to an Object type at runtime for field "${r.parentType.name}.${r.fieldName}". Either the "${n.name}" type should provide a "resolveType" function or each possible type should provide an "isTypeOf" function.`, { nodes: i });
  if (pe(t)) {
    if (Ka.major >= 16)
      throw X("Support for returning GraphQLObjectType from resolveType was removed in graphql-js@16.0.0 please return type name instead.");
    t = t.name;
  }
  if (typeof t != "string")
    throw X(`Abstract type "${n.name}" must resolve to an Object type at runtime for field "${r.parentType.name}.${r.fieldName}" with value ${nt(s)}, received "${nt(t)}".`);
  const o = e.schema.getType(t);
  if (o == null)
    throw X(`Abstract type "${n.name}" was resolved to a type "${t}" that does not exist inside the schema.`, { nodes: i });
  if (!pe(o))
    throw X(`Abstract type "${n.name}" was resolved to a non-object type "${t}".`, { nodes: i });
  if (!e.schema.isSubType(n, o))
    throw X(`Runtime Object type "${o.name}" is not a possible type for "${n.name}".`, { nodes: i });
  return o;
}
function Os(t, e, n, i, r, s, o) {
  if (e.isTypeOf) {
    const a = e.isTypeOf(s, t.contextValue, i);
    if (Ae(a))
      return a.then((u) => {
        if (!u)
          throw ga(e, s, n);
        return ma(t, e, n, r, s, o);
      });
    if (!a)
      throw ga(e, s, n);
  }
  return ma(t, e, n, r, s, o);
}
function ga(t, e, n) {
  return X(`Expected value of type "${t.name}" but got: ${nt(e)}.`, {
    nodes: n
  });
}
function ma(t, e, n, i, r, s) {
  const { fields: o, patches: a } = hp(t, e, n), u = ro(t, e, r, i, o, s);
  for (const c of a) {
    const { label: f, fields: g } = c;
    al(t, e, r, g, f, i, s);
  }
  return u;
}
const _p = function(t, e, n, i) {
  if (Qu(t) && typeof t.__typename == "string")
    return t.__typename;
  const r = n.schema.getPossibleTypes(i), s = [];
  for (let o = 0; o < r.length; o++) {
    const a = r[o];
    if (a.isTypeOf) {
      const u = a.isTypeOf(t, e, n);
      if (Ae(u))
        s[o] = u;
      else if (u)
        return a.name;
    }
  }
  if (s.length)
    return Promise.all(s).then((o) => {
      for (let a = 0; a < o.length; a++)
        if (o[a])
          return r[a].name;
    });
}, ya = function(t, e, n, i) {
  if (Qu(t) || typeof t == "function") {
    const r = t[i.fieldName];
    return typeof r == "function" ? t[i.fieldName](e, n, i) : r;
  }
};
function Ip(t) {
  const e = tl(t);
  if (!("schema" in e))
    return {
      errors: e.map((i) => {
        var r;
        return Object.defineProperty(i, "extensions", {
          value: {
            ...i.extensions,
            http: {
              ...(r = i.extensions) == null ? void 0 : r.http,
              status: 400
            }
          }
        }), i;
      })
    };
  const n = Np(e);
  return Ae(n) ? n.then((i) => ba(e, i)) : ba(e, n);
}
function ol(t) {
  const e = t.subsequentResults;
  let n = !1, i = !1;
  return {
    [Symbol.asyncIterator]() {
      return this;
    },
    next() {
      return i ? Promise.resolve({
        value: void 0,
        done: i
      }) : n ? e.next() : (n = !0, Promise.resolve({
        value: t.initialResult,
        done: i
      }));
    },
    return() {
      return i = !0, e.return();
    },
    throw(r) {
      return i = !0, e.throw(r);
    }
  };
}
async function* Op(t) {
  "initialResult" in t ? yield* ol(t) : yield t;
}
function ba(t, e) {
  return qr(e) ? cp(Ju(e, async (n) => Op(await el(mp(t, n))), (n) => {
    throw n instanceof AggregateError ? new AggregateError(n.errors.map((i) => wa(i, t.operation)), n.message) : wa(n, t.operation);
  })) : e;
}
function wa(t, e) {
  return X(t.message, {
    originalError: t,
    nodes: [e]
  });
}
function Np(t) {
  try {
    const e = Ap(t);
    return Ae(e) ? e.then(void 0, (n) => ({ errors: [n] })) : e;
  } catch (e) {
    return { errors: [e] };
  }
}
function Ap(t) {
  const { schema: e, fragments: n, operation: i, variableValues: r, rootValue: s } = t, o = e.getSubscriptionType();
  if (o == null)
    throw X("Schema is not configured to execute subscription operation.", {
      nodes: i
    });
  const { fields: a } = Ku(e, n, r, o, i.selectionSet), [u, c] = [...a.entries()][0], f = c[0].name.value, g = ll(e, o, c[0]);
  if (!g)
    throw X(`The subscription field "${f}" is not defined.`, {
      nodes: c
    });
  const p = di(void 0, u, o.name), v = il(t, g, c, o, p);
  try {
    const w = Hu(g, c[0], r), R = t.contextValue, y = (g.subscribe ?? t.subscribeFieldResolver)(s, w, R, v);
    return Ae(y) ? y.then(Ea).then(void 0, (S) => {
      throw tt(S, c, Ve(p));
    }) : Ea(y, t.signal);
  } catch (w) {
    throw tt(w, c, Ve(p));
  }
}
function Ea(t, e) {
  if (t instanceof Error)
    throw t;
  if (!qr(t))
    throw X(`Subscription field must return Async Iterable. Received: ${nt(t)}.`);
  return {
    [Symbol.asyncIterator]() {
      const n = t[Symbol.asyncIterator]();
      return e == null || e.addEventListener("abort", () => {
        var i;
        (i = n.return) == null || i.call(n);
      }), n;
    }
  };
}
function al(t, e, n, i, r, s, o) {
  const a = new kp({
    label: r,
    path: s,
    parentContext: o,
    exeContext: t
  });
  let u;
  try {
    u = ro(t, e, n, s, i, a), Ae(u) && (u = u.then(null, (c) => (a.errors.push(c), null)));
  } catch (c) {
    a.errors.push(c), u = null;
  }
  a.addData(u);
}
function xp(t, e, n, i, r, s, o, a, u) {
  const c = new ul({
    label: a,
    path: e,
    parentContext: u,
    exeContext: i
  });
  let f;
  try {
    try {
      Ae(n) ? f = n.then((p) => vn(i, o, r, s, e, p, c)) : f = vn(i, o, r, s, e, n, c), Ae(f) && (f = f.then(void 0, (p) => {
        p = Wt(p);
        const v = tt(p, r, Ve(e)), w = mt(v, o, c.errors);
        return dt(i, e, c), w;
      }));
    } catch (p) {
      const v = Wt(p), w = tt(v, r, Ve(e));
      f = mt(w, o, c.errors), dt(i, e, c);
    }
  } catch (p) {
    return c.errors.push(p), dt(i, t, c), c.addItems(null), c;
  }
  let g;
  return Ae(f) ? g = f.then((p) => [p], (p) => (c.errors.push(p), dt(i, t, c), null)) : g = [f], c.addItems(g), c;
}
async function Fp(t, e, n, i, r, s, o) {
  let a;
  try {
    const { value: c, done: f } = await t.next();
    if (f)
      return s.setIsCompletedIterator(), { done: f, value: void 0 };
    a = c;
  } catch (c) {
    const f = Wt(c), g = tt(f, n, Ve(o));
    return { done: !0, value: mt(g, r, s.errors) };
  }
  let u;
  try {
    return u = vn(e, r, n, i, o, a, s), Ae(u) && (u = u.then(void 0, (c) => {
      const f = tt(c, n, Ve(o)), g = mt(f, r, s.errors);
      return dt(e, o, s), g;
    })), { done: !1, value: u };
  } catch (c) {
    const f = tt(c, n, Ve(o)), g = mt(f, r, s.errors);
    return dt(e, o, s), { done: !1, value: g };
  }
}
async function Rp(t, e, n, i, r, s, o, a, u) {
  let c = t, f = u ?? void 0;
  for (; ; ) {
    const g = di(o, c, void 0), p = new ul({
      label: a,
      path: g,
      parentContext: f,
      iterator: e,
      exeContext: n
    });
    let v;
    try {
      v = await Fp(e, n, i, r, s, p, g);
    } catch (y) {
      p.errors.push(y), dt(n, o, p), p.addItems(null), e != null && e.return && e.return().catch(() => {
      });
      return;
    }
    const { done: w, value: R } = v;
    let x;
    if (Ae(R) ? x = R.then((y) => [y], (y) => (p.errors.push(y), dt(n, o, p), null)) : x = [R], p.addItems(x), w)
      break;
    f = p, c++;
  }
}
function dt(t, e, n) {
  const i = Ve(e);
  t.subsequentPayloads.forEach((r) => {
    var s;
    if (r !== n) {
      for (let o = 0; o < i.length; o++)
        if (r.path[o] !== i[o])
          return;
      so(r) && ((s = r.iterator) != null && s.return) && r.iterator.return().catch(() => {
      }), t.subsequentPayloads.delete(r);
    }
  });
}
function Lp(t) {
  const e = [];
  for (const n of t.subsequentPayloads) {
    const i = {};
    if (n.isCompleted) {
      if (t.subsequentPayloads.delete(n), so(n)) {
        const r = n.items;
        if (n.isCompletedIterator)
          continue;
        i.items = r;
      } else {
        const r = n.data;
        i.data = r ?? null;
      }
      i.path = n.path, n.label && (i.label = n.label), n.errors.length > 0 && (i.errors = n.errors), e.push(i);
    }
  }
  return e;
}
function Cp(t) {
  let e = !1;
  const n = new Promise((s, o) => {
    var a;
    (a = t.signal) == null || a.addEventListener("abort", () => {
      var u;
      e = !0, o((u = t.signal) == null ? void 0 : u.reason);
    });
  });
  async function i() {
    if (e)
      return { value: void 0, done: !0 };
    if (await Promise.race([
      n,
      ...Array.from(t.subsequentPayloads).map((a) => a.promise)
    ]), e)
      return { value: void 0, done: !0 };
    const s = Lp(t), o = t.subsequentPayloads.size > 0;
    return !s.length && o ? i() : (o || (e = !0), {
      value: s.length ? { incremental: s, hasNext: o } : { hasNext: o },
      done: !1
    });
  }
  function r() {
    const s = [];
    return t.subsequentPayloads.forEach((o) => {
      var a;
      so(o) && ((a = o.iterator) != null && a.return) && s.push(o.iterator.return());
    }), Promise.all(s);
  }
  return {
    [Symbol.asyncIterator]() {
      return this;
    },
    next: i,
    async return() {
      return await r(), e = !0, { value: void 0, done: !0 };
    },
    async throw(s) {
      return await r(), e = !0, Promise.reject(s);
    }
  };
}
class kp {
  constructor(e) {
    U(this, "type");
    U(this, "errors");
    U(this, "label");
    U(this, "path");
    U(this, "promise");
    U(this, "data");
    U(this, "parentContext");
    U(this, "isCompleted");
    U(this, "_exeContext");
    U(this, "_resolve");
    this.type = "defer", this.label = e.label, this.path = Ve(e.path), this.parentContext = e.parentContext, this.errors = [], this._exeContext = e.exeContext, this._exeContext.subsequentPayloads.add(this), this.isCompleted = !1, this.data = null, this.promise = new Promise((n) => {
      this._resolve = (i) => {
        n(i);
      };
    }).then((n) => {
      this.data = n, this.isCompleted = !0;
    });
  }
  addData(e) {
    var i, r, s;
    const n = (i = this.parentContext) == null ? void 0 : i.promise;
    if (n) {
      (r = this._resolve) == null || r.call(this, n.then(() => e));
      return;
    }
    (s = this._resolve) == null || s.call(this, e);
  }
}
class ul {
  constructor(e) {
    U(this, "type");
    U(this, "errors");
    U(this, "label");
    U(this, "path");
    U(this, "items");
    U(this, "promise");
    U(this, "parentContext");
    U(this, "iterator");
    U(this, "isCompletedIterator");
    U(this, "isCompleted");
    U(this, "_exeContext");
    U(this, "_resolve");
    this.type = "stream", this.items = null, this.label = e.label, this.path = Ve(e.path), this.parentContext = e.parentContext, this.iterator = e.iterator, this.errors = [], this._exeContext = e.exeContext, this._exeContext.subsequentPayloads.add(this), this.isCompleted = !1, this.items = null, this.promise = new Promise((n) => {
      this._resolve = (i) => {
        n(i);
      };
    }).then((n) => {
      this.items = n, this.isCompleted = !0;
    });
  }
  addItems(e) {
    var i, r, s;
    const n = (i = this.parentContext) == null ? void 0 : i.promise;
    if (n) {
      (r = this._resolve) == null || r.call(this, n.then(() => e));
      return;
    }
    (s = this._resolve) == null || s.call(this, e);
  }
  setIsCompletedIterator() {
    this.isCompletedIterator = !0;
  }
}
function so(t) {
  return t.type === "stream";
}
function ll(t, e, n) {
  const i = n.name.value;
  return i === _r.name && t.getQueryType() === e ? _r : i === Ir.name && t.getQueryType() === e ? Ir : i === Or.name ? Or : e.getFields()[i];
}
function va(t) {
  const e = eo(t.document, t.operationName);
  if (e == null)
    throw new Error("Must provide an operation.");
  return e.operation === "subscription" ? Ip(t) : new pt(() => pp(t)).then((n) => "initialResult" in n ? ol(n) : n).resolve();
}
var we = {}, Dp = we.fetch = globalThis.fetch, $p = we.Headers = globalThis.Headers, jp = we.Request = globalThis.Request, cl = we.Response = globalThis.Response, Pp = we.FormData = globalThis.FormData, Mp = we.ReadableStream = globalThis.ReadableStream, Up = we.WritableStream = globalThis.WritableStream, Vp = we.TransformStream = globalThis.TransformStream, Bp = we.CompressionStream = globalThis.CompressionStream, Gp = we.DecompressionStream = globalThis.DecompressionStream, qp = we.Blob = globalThis.Blob, zp = we.File = globalThis.File, Qp = we.crypto = globalThis.crypto, Wp = we.btoa = globalThis.btoa, Hp = we.TextEncoder = globalThis.TextEncoder, Yp = we.TextDecoder = globalThis.TextDecoder, Jp = we.URLPattern = globalThis.URLPattern, fl = we.URL = globalThis.URL, oo = we.URLSearchParams = globalThis.URLSearchParams, Kp = we.createFetch = () => globalThis;
const dl = /* @__PURE__ */ Pl({
  __proto__: null,
  Blob: qp,
  CompressionStream: Bp,
  DecompressionStream: Gp,
  File: zp,
  FormData: Pp,
  Headers: $p,
  ReadableStream: Mp,
  Request: jp,
  Response: cl,
  TextDecoder: Yp,
  TextEncoder: Hp,
  TransformStream: Vp,
  URL: fl,
  URLPattern: Jp,
  URLSearchParams: oo,
  WritableStream: Up,
  btoa: Wp,
  createFetch: Kp,
  crypto: Qp,
  default: we,
  fetch: Dp
}, [we]);
function hl(t) {
  return t != null && typeof t == "object" && typeof t[Symbol.asyncIterator] == "function";
}
function Xp(t) {
  var i, r, s, o, a;
  if ((i = t.socket) != null && i.localPort)
    return (r = t.socket) == null ? void 0 : r.localPort;
  const e = ((s = t.headers) == null ? void 0 : s[":authority"]) || ((o = t.headers) == null ? void 0 : o.host), n = (a = e == null ? void 0 : e.split(":")) == null ? void 0 : a[1];
  return n || 80;
}
function Zp(t) {
  var i, r, s, o, a;
  if ((i = t.headers) != null && i[":authority"])
    return (r = t.headers) == null ? void 0 : r[":authority"];
  if ((s = t.headers) != null && s.host)
    return (o = t.headers) == null ? void 0 : o.host;
  const e = Xp(t);
  if (t.hostname)
    return t.hostname + ":" + e;
  const n = (a = t.socket) == null ? void 0 : a.localAddress;
  return n && !(n != null && n.includes("::")) && !(n != null && n.includes("ffff")) ? `${n}:${e}` : "localhost";
}
function eg(t) {
  var r;
  const e = Zp(t), n = t.protocol || ((r = t.socket) != null && r.encrypted ? "https" : "http"), i = t.originalUrl || t.url || "/graphql";
  return `${n}://${e}${i}`;
}
function tg(t) {
  const e = t[Symbol.toStringTag];
  return !!(typeof t == "string" || e === "Uint8Array" || e === "Blob" || e === "FormData" || e === "URLSearchParams" || hl(t));
}
class pl extends EventTarget {
  constructor() {
    super(...arguments);
    U(this, "aborted", !1);
    U(this, "_onabort", null);
    U(this, "reason");
  }
  throwIfAborted() {
    if (this.aborted)
      throw this.reason;
  }
  sendAbort() {
    this.reason = new DOMException("This operation was aborted", "AbortError"), this.aborted = !0, this.dispatchEvent(new Event("abort"));
  }
  get onabort() {
    return this._onabort;
  }
  set onabort(n) {
    this._onabort = n, n ? this.addEventListener("abort", n) : this.removeEventListener("abort", n);
  }
  any(n) {
    return AbortSignal.any([...n]);
  }
}
let Ta = !1;
const Ns = /* @__PURE__ */ new WeakMap();
function ng(t, e) {
  var u, c, f, g;
  const n = t.raw || t.req || t;
  let i = eg(n);
  if (t.query) {
    const p = new fl(i);
    for (const v in t.query)
      p.searchParams.set(v, t.query[v]);
    i = p.toString();
  }
  let r;
  const s = Ns.get(t);
  Ns.delete(t);
  let o = t.headers;
  if ((u = t.headers) != null && u[":method"]) {
    o = {};
    for (const p in t.headers)
      p.startsWith(":") || (o[p] = t.headers[p]);
  }
  if (s != null && s.once) {
    let p;
    if (e !== globalThis.Request)
      r = new pl(), p = () => r.sendAbort();
    else {
      const w = new AbortController();
      r = w.signal, p = () => w.abort();
    }
    const v = () => {
      r && !r.aborted && (n.aborted = !0, p());
    };
    s.once("error", v), s.once("close", v), s.once("finish", () => {
      s.removeListener("close", v);
    });
  }
  if (t.method === "GET" || t.method === "HEAD")
    return new e(i, {
      method: t.method,
      headers: o,
      signal: r
    });
  const a = t.body;
  if (a != null && Object.keys(a).length > 0) {
    if (tg(a))
      return new e(i, {
        method: t.method,
        headers: o,
        body: a,
        signal: r
      });
    const p = new e(i, {
      method: t.method,
      headers: o,
      signal: r
    });
    return (c = p.headers.get("content-type")) != null && c.includes("json") || p.headers.set("content-type", "application/json; charset=utf-8"), new Proxy(p, {
      get: (v, w, R) => {
        switch (w) {
          case "json":
            return async () => a;
          case "text":
            return async () => JSON.stringify(a);
          default:
            return Reflect.get(v, w, R);
        }
      }
    });
  }
  return (g = (f = globalThis.process) == null ? void 0 : f.versions) != null && g.bun && ao(n) ? (Ta || (Ta = !0, console.warn(`You use Bun Node compatibility mode, which is not recommended!
It will affect your performance. Please check our Bun integration recipe, and avoid using 'http' for your server implementation.`)), new e(i, {
    method: t.method,
    headers: o,
    duplex: "half",
    body: new ReadableStream({
      start(p) {
        n.on("data", (v) => {
          p.enqueue(v);
        }), n.on("error", (v) => {
          p.error(v);
        }), n.on("end", () => {
          p.close();
        });
      },
      cancel(p) {
        n.destroy(p);
      }
    }),
    signal: r
  })) : new e(i, {
    method: t.method,
    headers: o,
    body: n,
    duplex: "half",
    signal: r
  });
}
function ao(t) {
  return t.read != null;
}
function ig(t) {
  return ao(t);
}
function Sa(t) {
  return t != null && t.setHeader != null && t.end != null && t.once != null && t.write != null;
}
function rg(t) {
  return t != null && t.request != null && t.respondWith != null;
}
function sg(t) {
  var e, n, i, r, s, o;
  (n = (e = t == null ? void 0 : t.socket) == null ? void 0 : e.setTimeout) == null || n.call(e, 0), (r = (i = t == null ? void 0 : t.socket) == null ? void 0 : i.setNoDelay) == null || r.call(i, !0), (o = (s = t == null ? void 0 : t.socket) == null ? void 0 : s.setKeepAlive) == null || o.call(s, !0);
}
function mr(t) {
  t.end(null, null, null);
}
async function og(t, e) {
  let n = !1;
  const i = () => {
    n = !0;
  };
  t.once("error", i), t.once("close", i), t.once("finish", () => {
    t.removeListener("close", i);
  });
  for await (const r of e) {
    if (n)
      break;
    if (!t.write(r)) {
      if (n)
        break;
      await new Promise((s) => t.once("drain", s));
    }
  }
  mr(t);
}
function _a(t, e, n) {
  if (e.closed || e.destroyed || e.writableEnded)
    return;
  if (!t) {
    e.statusCode = 404, e.end();
    return;
  }
  e.statusCode = t.status, e.statusMessage = t.statusText;
  let i = !1;
  t.headers.forEach((o, a) => {
    var u, c;
    if (a === "set-cookie") {
      if (i)
        return;
      i = !0;
      const f = (c = (u = t.headers).getSetCookie) == null ? void 0 : c.call(u);
      if (f) {
        e.setHeader("set-cookie", f);
        return;
      }
    }
    e.setHeader(a, o);
  });
  const r = t._buffer;
  if (r) {
    e.write(r), mr(e);
    return;
  }
  const s = t.body;
  if (s == null) {
    mr(e);
    return;
  }
  if (s[Symbol.toStringTag] === "Uint8Array") {
    e.write(s), mr(e);
    return;
  }
  if (sg(n), ao(s)) {
    e.once("close", () => {
      s.destroy();
    }), s.pipe(e);
    return;
  }
  if (hl(s))
    return og(e, s);
}
function ag(t) {
  return t != null && typeof t == "object" && ("body" in t || "cache" in t || "credentials" in t || "headers" in t || "integrity" in t || "keepalive" in t || "method" in t || "mode" in t || "redirect" in t || "referrer" in t || "referrerPolicy" in t || "signal" in t || "window" in t);
}
function lr(...t) {
  const [e, ...n] = t.filter((i) => i != null && typeof i == "object");
  return n.forEach((i) => {
    const r = Object.getOwnPropertyNames(i).reduce((s, o) => (Object.getOwnPropertyDescriptor(i, o) && (s[o] = Object.getOwnPropertyDescriptor(i, o)), s), {});
    Object.getOwnPropertySymbols(i).forEach((s) => {
      const o = Object.getOwnPropertyDescriptor(i, s);
      o != null && o.enumerable && (r[s] = o);
    }), Object.defineProperties(e, r);
  }), e;
}
function pn(t) {
  return (t == null ? void 0 : t.then) != null;
}
function Ia(t, e) {
  const n = t[Symbol.iterator]();
  let i = !1;
  function r() {
    i = !0;
  }
  function s() {
    const { done: o, value: a } = n.next();
    if (o)
      return;
    const u = e(a, r);
    if (pn(u))
      return u.then(() => {
        if (!i)
          return s();
      });
    if (!i)
      return s();
  }
  return s();
}
function cr(t, e) {
  return new e(t.stack || t.message || t.toString(), {
    status: t.status || 500
  });
}
function Oa(t, e) {
  if (t == null) {
    if (e == null)
      return {};
    t = {};
  }
  const n = {}, i = /* @__PURE__ */ new Set();
  return new Proxy(t, {
    get(r, s) {
      if (e != null && s === "waitUntil")
        return function(u) {
          e.push(u.catch((c) => console.error(c)));
        };
      const o = n[s];
      if (o != null)
        return typeof o == "function" ? o.bind(n) : o;
      if (!i.has(s))
        return r[s];
    },
    set(r, s, o) {
      return n[s] = o, !0;
    },
    has(r, s) {
      return e != null && s === "waitUntil" ? !0 : i.has(s) ? !1 : s in n ? !0 : s in r;
    },
    defineProperty(r, s, o) {
      return Reflect.defineProperty(n, s, o);
    },
    deleteProperty(r, s) {
      return s in n ? Reflect.deleteProperty(n, s) : (i.add(s), !0);
    },
    ownKeys(r) {
      const s = Reflect.ownKeys(n), o = Reflect.ownKeys(r), a = Array.from(i), u = new Set(s.concat(o.filter((c) => !a.includes(c))));
      return e != null && u.add("waitUntil"), Array.from(u);
    },
    getOwnPropertyDescriptor(r, s) {
      if (s in n)
        return Reflect.getOwnPropertyDescriptor(n, s);
      if (!i.has(s))
        return Reflect.getOwnPropertyDescriptor(r, s);
    }
  });
}
function ug() {
  let t, e;
  return {
    promise: new Promise(function(r, s) {
      t = r, e = s;
    }),
    get resolve() {
      return t;
    },
    get reject() {
      return e;
    }
  };
}
function Na(t, e) {
  if (pn(t) && e) {
    const n = ug();
    return e.addEventListener("abort", function() {
      n.reject(e.reason);
    }), t.then(function(r) {
      n.resolve(r);
    }).catch(function(r) {
      n.reject(r);
    }), n.promise;
  }
  return t;
}
function lg(t) {
  return !!t.onData;
}
function cg({ req: t, res: e, fetchAPI: n, signal: i }) {
  let r;
  const s = t.getMethod();
  if (s !== "get" && s !== "head") {
    let c;
    r = new n.ReadableStream({
      start(g) {
        c = g;
      }
    });
    const f = r.readable;
    if (f)
      i.addEventListener("abort", () => {
        f.push(null);
      }), e.onData(function(g, p) {
        const v = Buffer.from(g, 0, g.byteLength);
        f.push(Buffer.from(v)), p && f.push(null);
      });
    else {
      let g = !1;
      i.addEventListener("abort", () => {
        g || (g = !0, c.close());
      }), e.onData(function(p, v) {
        const w = Buffer.from(p, 0, p.byteLength);
        c.enqueue(Buffer.from(w)), v && (g = !0, c.close());
      });
    }
  }
  const o = new n.Headers();
  t.forEach((c, f) => {
    o.append(c, f);
  });
  let a = `http://localhost${t.getUrl()}`;
  const u = t.getQuery();
  return u && (a += `?${u}`), new n.Request(a, {
    method: s,
    headers: o,
    body: r,
    signal: i,
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore - not in the TS types yet
    duplex: "half"
  });
}
async function fg(t, e, n) {
  for await (const i of e.body) {
    if (n.aborted)
      return;
    t.cork(() => {
      t.write(i);
    });
  }
  t.cork(() => {
    t.end();
  });
}
function Aa(t, e, n) {
  if (!e) {
    t.writeStatus("404 Not Found"), t.end();
    return;
  }
  const i = e._buffer;
  if (!n.aborted && (t.cork(() => {
    var r, s;
    t.writeStatus(`${e.status} ${e.statusText}`);
    for (const [o, a] of e.headers)
      if (o !== "content-length") {
        if (o === "set-cookie") {
          const u = (s = (r = e.headers).getSetCookie) == null ? void 0 : s.call(r);
          if (u) {
            for (const c of u)
              t.writeHeader(o, c);
            continue;
          }
        }
        t.writeHeader(o, a);
      }
    i && t.end(i);
  }), !i)) {
    if (!e.body) {
      t.end();
      return;
    }
    return fg(t, e, n);
  }
}
async function dg(t) {
  await Promise.allSettled(t);
}
function hg(t) {
  try {
    return !!(t != null && t.request);
  } catch {
    return !1;
  }
}
const pg = {};
function gg(t, e) {
  const n = {
    ...dl,
    ...e == null ? void 0 : e.fetchAPI
  }, i = typeof t == "function" ? t : t.handle, r = [], s = [];
  if ((e == null ? void 0 : e.plugins) != null)
    for (const y of e.plugins)
      y.onRequest && r.push(y.onRequest), y.onResponse && s.push(y.onResponse);
  const o = r.length > 0 || s.length > 0 ? function(S, A) {
    let O = i, C;
    if (r.length === 0)
      return b();
    let T = new Proxy(pg, {
      get(d, N, L) {
        return T = new n.URL(S.url, "http://localhost"), Reflect.get(T, N, T);
      }
    });
    const _ = Ia(r, (d, N) => d({
      request: S,
      setRequest(L) {
        S = L;
      },
      serverContext: A,
      fetchAPI: n,
      url: T,
      requestHandler: O,
      setRequestHandler(L) {
        O = L;
      },
      endResponse(L) {
        C = L, L && N();
      }
    }));
    function m(d) {
      if (s.length === 0)
        return d;
      const N = {
        request: S,
        response: d,
        serverContext: A,
        setResponse(J) {
          d = J;
        },
        fetchAPI: n
      }, L = Ia(s, (J) => J(N));
      return pn(L) ? L.then(() => d) : d;
    }
    function b() {
      if (!C) {
        const d = O(S, A);
        return pn(d) ? d.then(m) : m(d);
      }
      return m(C);
    }
    return pn(_) ? _.then(b) : b();
  } : i;
  function a(y, ...S) {
    const A = S.length > 1 ? lr(...S) : S[0] || {}, O = ng(y, n.Request);
    return o(O, A);
  }
  function u(y, S, ...A) {
    const O = S.raw || S;
    return Ns.set(y, O), a(y, ...A);
  }
  function c(y, S, ...A) {
    const O = [], C = {
      req: y,
      res: S,
      waitUntil(_) {
        O.push(_.catch((m) => console.error(m)));
      }
    };
    let T;
    try {
      T = u(y, S, C, ...A);
    } catch (_) {
      T = cr(_, n.Response);
    }
    if (pn(T))
      return T.catch((_) => cr(_, n.Response)).then((_) => _a(_, S, y)).catch((_) => {
        console.error(`Unexpected error while handling request: ${_.message || _}`);
      });
    try {
      return _a(T, S, y);
    } catch (_) {
      console.error(`Unexpected error while handling request: ${_.message || _}`);
    }
  }
  function f(y, S, ...A) {
    const O = [], C = {
      res: y,
      req: S,
      waitUntil(q) {
        O.push(q.catch((Z) => console.error(Z)));
      }
    }, _ = A.filter((q) => q != null).length > 0 ? lr(C, ...A) : C, m = new pl(), b = y.end.bind(y);
    let d = !1;
    y.end = function(q) {
      return d = !0, b(q);
    }, y.onAborted.bind(y)(function() {
      m.sendAbort();
    }), y.onAborted = function(q) {
      m.addEventListener("abort", q);
    };
    const L = cg({
      req: S,
      res: y,
      fetchAPI: n,
      signal: m
    });
    let J;
    try {
      J = o(L, _);
    } catch (q) {
      J = cr(q, n.Response);
    }
    if (pn(J))
      return J.catch((q) => cr(q, n.Response)).then((q) => {
        if (!m.aborted && !d)
          return Aa(y, q, m);
      }).catch((q) => {
        console.error(`Unexpected error while handling request: 
${q.stack || q.message || q}`);
      });
    try {
      if (!m.aborted && !d)
        return Aa(y, J, m);
    } catch (q) {
      console.error(`Unexpected error while handling request: 
${q.stack || q.message || q}`);
    }
  }
  function g(y, ...S) {
    if (!y.respondWith || !y.request)
      throw new TypeError(`Expected FetchEvent, got ${y}`);
    const A = S.filter((T) => T != null), O = A.length > 0 ? lr({}, y, ...A) : Oa(y), C = o(y.request, O);
    y.respondWith(C);
  }
  function p(y, ...S) {
    const A = S.filter((_) => _ != null);
    let O;
    const C = A.length > 1 ? lr({}, ...A) : Oa(A[0], A[0] == null || A[0].waitUntil == null ? O = [] : void 0), T = o(y, C);
    return O != null && O.length ? dg(O).then(() => T) : T;
  }
  const v = (y, ...S) => {
    if (typeof y == "string" || "href" in y) {
      const [O, ...C] = S;
      if (ag(O)) {
        const _ = new n.Request(y, O), m = p(_, ...C);
        return Na(m, O == null ? void 0 : O.signal);
      }
      const T = new n.Request(y);
      return p(T, ...S);
    }
    const A = p(y, ...S);
    return Na(A, y._signal);
  }, w = (y, ...S) => {
    const [A, ...O] = S;
    if (ig(y)) {
      if (!Sa(A))
        throw new TypeError(`Expected ServerResponse, got ${A}`);
      return c(y, A, ...O);
    }
    if (lg(y))
      return f(y, A, ...O);
    if (Sa(A))
      throw new TypeError("Got Node response without Node request");
    return hg(y) ? rg(y) ? g(y, ...S) : p(y.request, y, ...S) : v(y, ...S);
  }, R = {
    handleRequest: p,
    fetch: v,
    handleNodeRequest: a,
    handleNodeRequestAndResponse: u,
    requestListener: c,
    handleEvent: g,
    handleUWS: f,
    handle: w
  }, x = new Proxy(w, {
    // It should have all the attributes of the handler function and the server instance
    has: (y, S) => S in R || S in w || t && S in t,
    get: (y, S) => {
      const A = R[S];
      if (A)
        return A.bind ? A.bind(R) : A;
      const O = w[S];
      if (O)
        return O.bind ? O.bind(w) : O;
      if (t) {
        const C = t[S];
        if (C)
          return C.bind ? function(...T) {
            const _ = t[S](...T);
            return _ === t ? x : _;
          } : C;
      }
    },
    apply(y, S, A) {
      return w(...A);
    }
  });
  return x;
}
function mg(t, e) {
  var r, s;
  const n = t.headers.get("origin");
  if (e === !1 || n == null)
    return null;
  const i = {};
  if (e.origin == null || e.origin.length === 0 || e.origin.includes("*") ? (i["Access-Control-Allow-Origin"] = n, i.Vary = "Origin") : typeof e.origin == "string" ? i["Access-Control-Allow-Origin"] = e.origin : Array.isArray(e.origin) && (e.origin.length === 1 ? i["Access-Control-Allow-Origin"] = e.origin[0] : e.origin.includes(n) ? (i["Access-Control-Allow-Origin"] = n, i.Vary = "Origin") : i["Access-Control-Allow-Origin"] = "null"), (r = e.methods) != null && r.length)
    i["Access-Control-Allow-Methods"] = e.methods.join(", ");
  else {
    const o = t.headers.get("access-control-request-method");
    o && (i["Access-Control-Allow-Methods"] = o);
  }
  if ((s = e.allowedHeaders) != null && s.length)
    i["Access-Control-Allow-Headers"] = e.allowedHeaders.join(", ");
  else {
    const o = t.headers.get("access-control-request-headers");
    o && (i["Access-Control-Allow-Headers"] = o, i.Vary ? i.Vary += ", Access-Control-Request-Headers" : i.Vary = "Access-Control-Request-Headers");
  }
  return e.credentials != null ? e.credentials === !0 && (i["Access-Control-Allow-Credentials"] = "true") : i["Access-Control-Allow-Origin"] !== "*" && (i["Access-Control-Allow-Credentials"] = "true"), e.exposedHeaders && (i["Access-Control-Expose-Headers"] = e.exposedHeaders.join(", ")), e.maxAge && (i["Access-Control-Max-Age"] = e.maxAge.toString()), i;
}
async function yg(t, e, n) {
  const i = await e(t, n);
  return mg(t, i);
}
function bg(t) {
  let e = () => ({});
  if (t != null)
    if (typeof t == "function")
      e = t;
    else if (typeof t == "object") {
      const n = {
        ...t
      };
      e = () => n;
    } else t === !1 && (e = () => !1);
  return {
    onRequest({ request: n, fetchAPI: i, endResponse: r }) {
      if (n.method.toUpperCase() === "OPTIONS") {
        const s = new i.Response(null, {
          status: 204,
          // Safari (and potentially other browsers) need content-length 0,
          // for 204 or they just hang waiting for a body
          // see: https://github.com/expressjs/cors/blob/master/lib/index.js#L176
          headers: {
            "Content-Length": "0"
          }
        });
        r(s);
      }
    },
    async onResponse({ request: n, serverContext: i, response: r }) {
      const s = await yg(n, e, i);
      if (s != null)
        for (const o in s)
          r.headers.set(o, s[o]);
    }
  };
}
function wg(t = cl) {
  return function(n) {
    return n.details || n.status || n.headers || n.name === "HTTPError" ? new t(typeof n.details == "object" ? JSON.stringify(n.details) : n.message, {
      status: n.status,
      headers: n.headers || {}
    }) : (console.error(n), As(t));
  };
}
function As(t) {
  return t.error ? t.error() : new t(null, { status: 500 });
}
function Eg(t) {
  return {
    onRequest({ requestHandler: e, setRequestHandler: n, fetchAPI: i }) {
      const r = t || wg(i.Response);
      n(function(o, a) {
        try {
          const u = e(o, a);
          return pn(u) ? u.catch((c) => r(c, o, a) || As(i.Response)) : u;
        } catch (u) {
          return r(u, o, a) || As(i.Response);
        }
      });
    }
  };
}
function gl(t) {
  const e = t.get("operationName") || void 0, n = t.get("query") || void 0, i = t.get("variables") || void 0, r = t.get("extensions") || void 0;
  return {
    operationName: e,
    query: n,
    variables: i ? JSON.parse(i) : void 0,
    extensions: r ? JSON.parse(r) : void 0
  };
}
function vg(t) {
  const e = new oo(t);
  return gl(e);
}
function ki(t, e) {
  let n = t.headers.get("content-type");
  return n = (n == null ? void 0 : n.split(",")[0]) || null, n === e || !!(n != null && n.startsWith(`${e};`));
}
function Tg(t) {
  return t.method === "GET";
}
function Sg(t) {
  const [, e = ""] = t.url.split("?"), n = new oo(e);
  return gl(n);
}
function _g(t) {
  return t.method === "POST" && ki(t, "application/x-www-form-urlencoded");
}
async function Ig(t) {
  const e = await t.text();
  return vg(e);
}
function Og(t) {
  return t.method === "POST" && ki(t, "application/graphql");
}
async function Ng(t) {
  return {
    query: await t.text()
  };
}
function Ag(t) {
  return t.method === "POST" && (ki(t, "application/json") || ki(t, "application/graphql+json"));
}
async function xg(t) {
  let e;
  try {
    e = await t.json();
  } catch (i) {
    const r = {
      http: {
        spec: !0,
        status: 400
      }
    };
    throw i instanceof Error && (r.originalError = {
      name: i.name,
      message: i.message
    }), X("POST body sent invalid JSON.", {
      extensions: r
    });
  }
  if (e == null)
    throw X(`POST body is expected to be object but received ${e}`, {
      extensions: {
        http: {
          status: 400
        }
      }
    });
  const n = typeof e;
  if (n !== "object")
    throw X(`POST body is expected to be object but received ${n}`, {
      extensions: {
        http: {
          status: 400
        }
      }
    });
  return e;
}
function Fg(t, e, n) {
  e.split && (e = e.split("."));
  for (var i = 0, r = e.length, s = t, o, a; i < r && (a = "" + e[i++], !(a === "__proto__" || a === "constructor" || a === "prototype")); )
    s = s[a] = i === r ? n : typeof (o = s[a]) == typeof e ? o : e[i] * 0 !== 0 || ~("" + e[i]).indexOf(".") ? {} : [];
}
function Rg(t) {
  return t.method === "POST" && ki(t, "multipart/form-data");
}
async function Lg(t) {
  let e;
  try {
    e = await t.formData();
  } catch (s) {
    throw s instanceof Error && s.message.startsWith("File size limit exceeded: ") ? X(s.message, {
      extensions: {
        http: {
          status: 413
        }
      }
    }) : s;
  }
  const n = e.get("operations");
  if (!n)
    throw X('Missing multipart form field "operations"');
  if (typeof n != "string")
    throw X('Multipart form field "operations" must be a string');
  let i;
  try {
    i = JSON.parse(n);
  } catch {
    throw X('Multipart form field "operations" must be a valid JSON string');
  }
  const r = e.get("map");
  if (r != null) {
    if (typeof r != "string")
      throw X('Multipart form field "map" must be a string');
    let s;
    try {
      s = JSON.parse(r);
    } catch {
      throw X('Multipart form field "map" must be a valid JSON string');
    }
    for (const o in s) {
      const a = e.get(o), u = s[o];
      for (const c of u)
        Fg(i, c, a);
    }
  }
  return i;
}
const Cg = /* @__PURE__ */ new Set(["query", "variables", "operationName", "extensions"]);
function kg(t, e) {
  if (t == null || typeof t != "object")
    throw X('Invalid "params" in the request body', {
      extensions: {
        http: {
          spec: !0,
          status: 400
        }
      }
    });
  for (const n in t)
    if (t[n] != null && !Cg.has(n)) {
      if (e != null && e.includes(n))
        continue;
      throw X(`Unexpected parameter "${n}" in the request body.`, {
        extensions: {
          http: {
            status: 400
          }
        }
      });
    }
}
function Dg(t, e) {
  if (!jg(t))
    throw X(`Expected params to be an object but given ${Oi(t)}.`, {
      extensions: {
        http: {
          status: 400,
          headers: {
            Allow: "GET, POST"
          }
        }
      }
    });
  if (kg(t, e), t.query == null)
    throw X("Must provide query string.", {
      extensions: {
        http: {
          spec: !0,
          status: 400,
          headers: {
            Allow: "GET, POST"
          }
        }
      }
    });
  const n = Oi(t.query);
  if (n !== "string")
    throw X(`Expected "query" param to be a string, but given ${n}.`, {
      extensions: {
        http: {
          status: 400,
          headers: {
            Allow: "GET, POST"
          }
        }
      }
    });
  const i = Oi(t.variables);
  if (!["object", "null", "undefined"].includes(i))
    throw X(`Expected "variables" param to be empty or an object, but given ${i}.`, {
      extensions: {
        http: {
          status: 400,
          headers: {
            Allow: "GET, POST"
          }
        }
      }
    });
  const r = Oi(t.extensions);
  if (!["object", "null", "undefined"].includes(r))
    throw X(`Expected "extensions" param to be empty or an object, but given ${r}.`, {
      extensions: {
        http: {
          status: 400,
          headers: {
            Allow: "GET, POST"
          }
        }
      }
    });
  return t;
}
function $g(t) {
  return {
    onParams({ params: e }) {
      Dg(e, t);
    }
  };
}
function Oi(t) {
  return t === null ? "null" : Array.isArray(t) ? "array" : typeof t;
}
function jg(t) {
  return Oi(t) === "object";
}
function Pg(t) {
  return t === "GET" || t === "POST";
}
function Mg() {
  return {
    onRequestParse({ request: t }) {
      if (!Pg(t.method))
        throw X("GraphQL only supports GET and POST requests.", {
          extensions: {
            http: {
              status: 405,
              headers: {
                Allow: "GET, POST"
              }
            }
          }
        });
    }
  };
}
function Ug() {
  return {
    onValidate() {
      return ({ valid: t, result: e }) => {
        var n, i;
        if (!t)
          for (const r of e)
            r.extensions.http = {
              ...r.extensions.http,
              spec: ((n = r.extensions.http) == null ? void 0 : n.spec) ?? !0,
              status: ((i = r.extensions.http) == null ? void 0 : i.status) ?? 400
            };
      };
    }
  };
}
function Vg(t) {
  return {
    onRequestParse() {
      return {
        onRequestParseDone({ requestParserResult: e }) {
          if (Array.isArray(e)) {
            if (!t)
              throw X("Batching is not supported.", {
                extensions: {
                  http: {
                    status: 400
                  }
                }
              });
            if (e.length > t)
              throw X(`Batching is limited to ${t} operations per request.`, {
                extensions: {
                  http: {
                    status: 413
                  }
                }
              });
          }
        }
      };
    }
  };
}
function Bg(t, e, n) {
  const i = e ? eo(e, n) ?? void 0 : void 0;
  if (!i)
    throw X("Could not determine what operation to execute.", {
      extensions: {
        http: {
          status: 400
        }
      }
    });
  if (i.operation === "mutation" && t === "GET")
    throw X("Can only perform a mutation operation from a POST request.", {
      extensions: {
        http: {
          status: 405,
          headers: {
            Allow: "POST"
          }
        }
      }
    });
}
function Gg() {
  return {
    onParse() {
      return ({ result: t, context: {
        request: e,
        // the `params` might be missing in cases where the user provided
        // malformed context to getEnveloped (like `yoga.getEnveloped({})`)
        params: { operationName: n } = {}
      } }) => {
        if (e) {
          if (t instanceof Error)
            throw t instanceof j && (t.extensions.http = {
              spec: !0,
              status: 400
            }), t;
          Bg(e.method, t, n);
        }
      };
    }
  };
}
function qg({ id: t = Date.now().toString(), logger: e = console, endpoint: n = "/health" } = {}) {
  return {
    onRequest({ endResponse: i, fetchAPI: r, request: s }) {
      if (s.url.endsWith(n)) {
        e.debug("Responding Health Check");
        const o = new r.Response(null, {
          status: 200,
          headers: {
            "x-yoga-id": t
          }
        });
        i(o);
      }
    }
  };
}
const Gn = typeof performance == "object" && performance && typeof performance.now == "function" ? performance : Date, ml = /* @__PURE__ */ new Set(), xs = typeof process == "object" && process ? process : {}, yl = (t, e, n, i) => {
  typeof xs.emitWarning == "function" ? xs.emitWarning(t, e, n, i) : console.error(`[${n}] ${e}: ${t}`);
};
let Lr = globalThis.AbortController, xa = globalThis.AbortSignal;
var Ua;
if (typeof Lr > "u") {
  xa = class {
    constructor() {
      U(this, "onabort");
      U(this, "_onabort", []);
      U(this, "reason");
      U(this, "aborted", !1);
    }
    addEventListener(i, r) {
      this._onabort.push(r);
    }
  }, Lr = class {
    constructor() {
      U(this, "signal", new xa());
      e();
    }
    abort(i) {
      var r, s;
      if (!this.signal.aborted) {
        this.signal.reason = i, this.signal.aborted = !0;
        for (const o of this.signal._onabort)
          o(i);
        (s = (r = this.signal).onabort) == null || s.call(r, i);
      }
    }
  };
  let t = ((Ua = xs.env) == null ? void 0 : Ua.LRU_CACHE_IGNORE_AC_WARNING) !== "1";
  const e = () => {
    t && (t = !1, yl("AbortController is not defined. If using lru-cache in node 14, load an AbortController polyfill from the `node-abort-controller` package. A minimal polyfill is provided for use by LRUCache.fetch(), but it should not be relied upon in other contexts (eg, passing it to other APIs that use AbortController/AbortSignal might have undesirable effects). You may disable this with LRU_CACHE_IGNORE_AC_WARNING=1 in the env.", "NO_ABORT_CONTROLLER", "ENOTSUP", e));
  };
}
const zg = (t) => !ml.has(t), sn = (t) => t && t === Math.floor(t) && t > 0 && isFinite(t), bl = (t) => sn(t) ? t <= Math.pow(2, 8) ? Uint8Array : t <= Math.pow(2, 16) ? Uint16Array : t <= Math.pow(2, 32) ? Uint32Array : t <= Number.MAX_SAFE_INTEGER ? yr : null : null;
let yr = class extends Array {
  constructor(e) {
    super(e), this.fill(0);
  }
};
var Ht, Kn;
let Qg = (Ht = class {
  constructor(e, n) {
    U(this, "heap");
    U(this, "length");
    if (!l(Ht, Kn))
      throw new TypeError("instantiate Stack using Stack.create(n)");
    this.heap = new n(e), this.length = 0;
  }
  static create(e) {
    const n = bl(e);
    if (!n)
      return [];
    $(Ht, Kn, !0);
    const i = new Ht(e, n);
    return $(Ht, Kn, !1), i;
  }
  push(e) {
    this.heap[this.length++] = e;
  }
  pop() {
    return this.heap[--this.length];
  }
}, Kn = new WeakMap(), // private constructor
H(Ht, Kn, !1), Ht);
var Va, Ba, vt, rt, Tt, St, Xn, Zn, Ie, _t, Te, de, ee, Qe, st, Ge, Re, It, Le, Ot, Nt, ot, At, gn, We, V, Fs, Fn, en, $i, at, wl, Rn, ei, ji, on, an, Rs, br, wr, ce, Ls, Ni, un, Cs, ti;
let Wg = (ti = class {
  constructor(e) {
    H(this, V);
    // options that cannot be changed without disaster
    H(this, vt);
    H(this, rt);
    H(this, Tt);
    H(this, St);
    H(this, Xn);
    H(this, Zn);
    /**
     * {@link LRUCache.OptionsBase.ttl}
     */
    U(this, "ttl");
    /**
     * {@link LRUCache.OptionsBase.ttlResolution}
     */
    U(this, "ttlResolution");
    /**
     * {@link LRUCache.OptionsBase.ttlAutopurge}
     */
    U(this, "ttlAutopurge");
    /**
     * {@link LRUCache.OptionsBase.updateAgeOnGet}
     */
    U(this, "updateAgeOnGet");
    /**
     * {@link LRUCache.OptionsBase.updateAgeOnHas}
     */
    U(this, "updateAgeOnHas");
    /**
     * {@link LRUCache.OptionsBase.allowStale}
     */
    U(this, "allowStale");
    /**
     * {@link LRUCache.OptionsBase.noDisposeOnSet}
     */
    U(this, "noDisposeOnSet");
    /**
     * {@link LRUCache.OptionsBase.noUpdateTTL}
     */
    U(this, "noUpdateTTL");
    /**
     * {@link LRUCache.OptionsBase.maxEntrySize}
     */
    U(this, "maxEntrySize");
    /**
     * {@link LRUCache.OptionsBase.sizeCalculation}
     */
    U(this, "sizeCalculation");
    /**
     * {@link LRUCache.OptionsBase.noDeleteOnFetchRejection}
     */
    U(this, "noDeleteOnFetchRejection");
    /**
     * {@link LRUCache.OptionsBase.noDeleteOnStaleGet}
     */
    U(this, "noDeleteOnStaleGet");
    /**
     * {@link LRUCache.OptionsBase.allowStaleOnFetchAbort}
     */
    U(this, "allowStaleOnFetchAbort");
    /**
     * {@link LRUCache.OptionsBase.allowStaleOnFetchRejection}
     */
    U(this, "allowStaleOnFetchRejection");
    /**
     * {@link LRUCache.OptionsBase.ignoreFetchAbort}
     */
    U(this, "ignoreFetchAbort");
    // computed properties
    H(this, Ie);
    H(this, _t);
    H(this, Te);
    H(this, de);
    H(this, ee);
    H(this, Qe);
    H(this, st);
    H(this, Ge);
    H(this, Re);
    H(this, It);
    H(this, Le);
    H(this, Ot);
    H(this, Nt);
    H(this, ot);
    H(this, At);
    H(this, gn);
    H(this, We);
    // conditionally set private methods related to TTL
    H(this, Fn, () => {
    });
    H(this, en, () => {
    });
    H(this, $i, () => {
    });
    /* c8 ignore stop */
    H(this, at, () => !1);
    H(this, Rn, (e) => {
    });
    H(this, ei, (e, n, i) => {
    });
    H(this, ji, (e, n, i, r) => {
      if (i || r)
        throw new TypeError("cannot set size without setting maxSize or maxEntrySize on cache");
      return 0;
    });
    /**
     * A String value that is used in the creation of the default string
     * description of an object. Called by the built-in method
     * `Object.prototype.toString`.
     */
    U(this, Va, "LRUCache");
    const { max: n = 0, ttl: i, ttlResolution: r = 1, ttlAutopurge: s, updateAgeOnGet: o, updateAgeOnHas: a, allowStale: u, dispose: c, disposeAfter: f, noDisposeOnSet: g, noUpdateTTL: p, maxSize: v = 0, maxEntrySize: w = 0, sizeCalculation: R, fetchMethod: x, memoMethod: y, noDeleteOnFetchRejection: S, noDeleteOnStaleGet: A, allowStaleOnFetchRejection: O, allowStaleOnFetchAbort: C, ignoreFetchAbort: T } = e;
    if (n !== 0 && !sn(n))
      throw new TypeError("max option must be a nonnegative integer");
    const _ = n ? bl(n) : Array;
    if (!_)
      throw new Error("invalid max value: " + n);
    if ($(this, vt, n), $(this, rt, v), this.maxEntrySize = w || l(this, rt), this.sizeCalculation = R, this.sizeCalculation) {
      if (!l(this, rt) && !this.maxEntrySize)
        throw new TypeError("cannot set sizeCalculation without setting maxSize or maxEntrySize");
      if (typeof this.sizeCalculation != "function")
        throw new TypeError("sizeCalculation set to non-function");
    }
    if (y !== void 0 && typeof y != "function")
      throw new TypeError("memoMethod must be a function if defined");
    if ($(this, Zn, y), x !== void 0 && typeof x != "function")
      throw new TypeError("fetchMethod must be a function if specified");
    if ($(this, Xn, x), $(this, gn, !!x), $(this, Te, /* @__PURE__ */ new Map()), $(this, de, new Array(n).fill(void 0)), $(this, ee, new Array(n).fill(void 0)), $(this, Qe, new _(n)), $(this, st, new _(n)), $(this, Ge, 0), $(this, Re, 0), $(this, It, Qg.create(n)), $(this, Ie, 0), $(this, _t, 0), typeof c == "function" && $(this, Tt, c), typeof f == "function" ? ($(this, St, f), $(this, Le, [])) : ($(this, St, void 0), $(this, Le, void 0)), $(this, At, !!l(this, Tt)), $(this, We, !!l(this, St)), this.noDisposeOnSet = !!g, this.noUpdateTTL = !!p, this.noDeleteOnFetchRejection = !!S, this.allowStaleOnFetchRejection = !!O, this.allowStaleOnFetchAbort = !!C, this.ignoreFetchAbort = !!T, this.maxEntrySize !== 0) {
      if (l(this, rt) !== 0 && !sn(l(this, rt)))
        throw new TypeError("maxSize must be a positive integer if specified");
      if (!sn(this.maxEntrySize))
        throw new TypeError("maxEntrySize must be a positive integer if specified");
      k(this, V, wl).call(this);
    }
    if (this.allowStale = !!u, this.noDeleteOnStaleGet = !!A, this.updateAgeOnGet = !!o, this.updateAgeOnHas = !!a, this.ttlResolution = sn(r) || r === 0 ? r : 1, this.ttlAutopurge = !!s, this.ttl = i || 0, this.ttl) {
      if (!sn(this.ttl))
        throw new TypeError("ttl must be a positive integer if specified");
      k(this, V, Fs).call(this);
    }
    if (l(this, vt) === 0 && this.ttl === 0 && l(this, rt) === 0)
      throw new TypeError("At least one of max, maxSize, or ttl is required");
    if (!this.ttlAutopurge && !l(this, vt) && !l(this, rt)) {
      const m = "LRU_CACHE_UNBOUNDED";
      zg(m) && (ml.add(m), yl("TTL caching without ttlAutopurge, max, or maxSize can result in unbounded memory consumption.", "UnboundedCacheWarning", m, ti));
    }
  }
  /**
   * Do not call this method unless you need to inspect the
   * inner workings of the cache.  If anything returned by this
   * object is modified in any way, strange breakage may occur.
   *
   * These fields are private for a reason!
   *
   * @internal
   */
  static unsafeExposeInternals(e) {
    return {
      // properties
      starts: l(e, Nt),
      ttls: l(e, ot),
      sizes: l(e, Ot),
      keyMap: l(e, Te),
      keyList: l(e, de),
      valList: l(e, ee),
      next: l(e, Qe),
      prev: l(e, st),
      get head() {
        return l(e, Ge);
      },
      get tail() {
        return l(e, Re);
      },
      free: l(e, It),
      // methods
      isBackgroundFetch: (n) => {
        var i;
        return k(i = e, V, ce).call(i, n);
      },
      backgroundFetch: (n, i, r, s) => {
        var o;
        return k(o = e, V, wr).call(o, n, i, r, s);
      },
      moveToTail: (n) => {
        var i;
        return k(i = e, V, Ni).call(i, n);
      },
      indexes: (n) => {
        var i;
        return k(i = e, V, on).call(i, n);
      },
      rindexes: (n) => {
        var i;
        return k(i = e, V, an).call(i, n);
      },
      isStale: (n) => {
        var i;
        return l(i = e, at).call(i, n);
      }
    };
  }
  // Protected read-only members
  /**
   * {@link LRUCache.OptionsBase.max} (read-only)
   */
  get max() {
    return l(this, vt);
  }
  /**
   * {@link LRUCache.OptionsBase.maxSize} (read-only)
   */
  get maxSize() {
    return l(this, rt);
  }
  /**
   * The total computed size of items in the cache (read-only)
   */
  get calculatedSize() {
    return l(this, _t);
  }
  /**
   * The number of items stored in the cache (read-only)
   */
  get size() {
    return l(this, Ie);
  }
  /**
   * {@link LRUCache.OptionsBase.fetchMethod} (read-only)
   */
  get fetchMethod() {
    return l(this, Xn);
  }
  get memoMethod() {
    return l(this, Zn);
  }
  /**
   * {@link LRUCache.OptionsBase.dispose} (read-only)
   */
  get dispose() {
    return l(this, Tt);
  }
  /**
   * {@link LRUCache.OptionsBase.disposeAfter} (read-only)
   */
  get disposeAfter() {
    return l(this, St);
  }
  /**
   * Return the number of ms left in the item's TTL. If item is not in cache,
   * returns `0`. Returns `Infinity` if item is in cache without a defined TTL.
   */
  getRemainingTTL(e) {
    return l(this, Te).has(e) ? 1 / 0 : 0;
  }
  /**
   * Return a generator yielding `[key, value]` pairs,
   * in order from most recently used to least recently used.
   */
  *entries() {
    for (const e of k(this, V, on).call(this))
      l(this, ee)[e] !== void 0 && l(this, de)[e] !== void 0 && !k(this, V, ce).call(this, l(this, ee)[e]) && (yield [l(this, de)[e], l(this, ee)[e]]);
  }
  /**
   * Inverse order version of {@link LRUCache.entries}
   *
   * Return a generator yielding `[key, value]` pairs,
   * in order from least recently used to most recently used.
   */
  *rentries() {
    for (const e of k(this, V, an).call(this))
      l(this, ee)[e] !== void 0 && l(this, de)[e] !== void 0 && !k(this, V, ce).call(this, l(this, ee)[e]) && (yield [l(this, de)[e], l(this, ee)[e]]);
  }
  /**
   * Return a generator yielding the keys in the cache,
   * in order from most recently used to least recently used.
   */
  *keys() {
    for (const e of k(this, V, on).call(this)) {
      const n = l(this, de)[e];
      n !== void 0 && !k(this, V, ce).call(this, l(this, ee)[e]) && (yield n);
    }
  }
  /**
   * Inverse order version of {@link LRUCache.keys}
   *
   * Return a generator yielding the keys in the cache,
   * in order from least recently used to most recently used.
   */
  *rkeys() {
    for (const e of k(this, V, an).call(this)) {
      const n = l(this, de)[e];
      n !== void 0 && !k(this, V, ce).call(this, l(this, ee)[e]) && (yield n);
    }
  }
  /**
   * Return a generator yielding the values in the cache,
   * in order from most recently used to least recently used.
   */
  *values() {
    for (const e of k(this, V, on).call(this))
      l(this, ee)[e] !== void 0 && !k(this, V, ce).call(this, l(this, ee)[e]) && (yield l(this, ee)[e]);
  }
  /**
   * Inverse order version of {@link LRUCache.values}
   *
   * Return a generator yielding the values in the cache,
   * in order from least recently used to most recently used.
   */
  *rvalues() {
    for (const e of k(this, V, an).call(this))
      l(this, ee)[e] !== void 0 && !k(this, V, ce).call(this, l(this, ee)[e]) && (yield l(this, ee)[e]);
  }
  /**
   * Iterating over the cache itself yields the same results as
   * {@link LRUCache.entries}
   */
  [(Ba = Symbol.iterator, Va = Symbol.toStringTag, Ba)]() {
    return this.entries();
  }
  /**
   * Find a value for which the supplied fn method returns a truthy value,
   * similar to `Array.find()`. fn is called as `fn(value, key, cache)`.
   */
  find(e, n = {}) {
    for (const i of k(this, V, on).call(this)) {
      const r = l(this, ee)[i], s = k(this, V, ce).call(this, r) ? r.__staleWhileFetching : r;
      if (s !== void 0 && e(s, l(this, de)[i], this))
        return this.get(l(this, de)[i], n);
    }
  }
  /**
   * Call the supplied function on each item in the cache, in order from most
   * recently used to least recently used.
   *
   * `fn` is called as `fn(value, key, cache)`.
   *
   * If `thisp` is provided, function will be called in the `this`-context of
   * the provided object, or the cache if no `thisp` object is provided.
   *
   * Does not update age or recenty of use, or iterate over stale values.
   */
  forEach(e, n = this) {
    for (const i of k(this, V, on).call(this)) {
      const r = l(this, ee)[i], s = k(this, V, ce).call(this, r) ? r.__staleWhileFetching : r;
      s !== void 0 && e.call(n, s, l(this, de)[i], this);
    }
  }
  /**
   * The same as {@link LRUCache.forEach} but items are iterated over in
   * reverse order.  (ie, less recently used items are iterated over first.)
   */
  rforEach(e, n = this) {
    for (const i of k(this, V, an).call(this)) {
      const r = l(this, ee)[i], s = k(this, V, ce).call(this, r) ? r.__staleWhileFetching : r;
      s !== void 0 && e.call(n, s, l(this, de)[i], this);
    }
  }
  /**
   * Delete any stale entries. Returns true if anything was removed,
   * false otherwise.
   */
  purgeStale() {
    let e = !1;
    for (const n of k(this, V, an).call(this, { allowStale: !0 }))
      l(this, at).call(this, n) && (k(this, V, un).call(this, l(this, de)[n], "expire"), e = !0);
    return e;
  }
  /**
   * Get the extended info about a given entry, to get its value, size, and
   * TTL info simultaneously. Returns `undefined` if the key is not present.
   *
   * Unlike {@link LRUCache#dump}, which is designed to be portable and survive
   * serialization, the `start` value is always the current timestamp, and the
   * `ttl` is a calculated remaining time to live (negative if expired).
   *
   * Always returns stale values, if their info is found in the cache, so be
   * sure to check for expirations (ie, a negative {@link LRUCache.Entry#ttl})
   * if relevant.
   */
  info(e) {
    const n = l(this, Te).get(e);
    if (n === void 0)
      return;
    const i = l(this, ee)[n], r = k(this, V, ce).call(this, i) ? i.__staleWhileFetching : i;
    if (r === void 0)
      return;
    const s = { value: r };
    if (l(this, ot) && l(this, Nt)) {
      const o = l(this, ot)[n], a = l(this, Nt)[n];
      if (o && a) {
        const u = o - (Gn.now() - a);
        s.ttl = u, s.start = Date.now();
      }
    }
    return l(this, Ot) && (s.size = l(this, Ot)[n]), s;
  }
  /**
   * Return an array of [key, {@link LRUCache.Entry}] tuples which can be
   * passed to {@link LRLUCache#load}.
   *
   * The `start` fields are calculated relative to a portable `Date.now()`
   * timestamp, even if `performance.now()` is available.
   *
   * Stale entries are always included in the `dump`, even if
   * {@link LRUCache.OptionsBase.allowStale} is false.
   *
   * Note: this returns an actual array, not a generator, so it can be more
   * easily passed around.
   */
  dump() {
    const e = [];
    for (const n of k(this, V, on).call(this, { allowStale: !0 })) {
      const i = l(this, de)[n], r = l(this, ee)[n], s = k(this, V, ce).call(this, r) ? r.__staleWhileFetching : r;
      if (s === void 0 || i === void 0)
        continue;
      const o = { value: s };
      if (l(this, ot) && l(this, Nt)) {
        o.ttl = l(this, ot)[n];
        const a = Gn.now() - l(this, Nt)[n];
        o.start = Math.floor(Date.now() - a);
      }
      l(this, Ot) && (o.size = l(this, Ot)[n]), e.unshift([i, o]);
    }
    return e;
  }
  /**
   * Reset the cache and load in the items in entries in the order listed.
   *
   * The shape of the resulting cache may be different if the same options are
   * not used in both caches.
   *
   * The `start` fields are assumed to be calculated relative to a portable
   * `Date.now()` timestamp, even if `performance.now()` is available.
   */
  load(e) {
    this.clear();
    for (const [n, i] of e) {
      if (i.start) {
        const r = Date.now() - i.start;
        i.start = Gn.now() - r;
      }
      this.set(n, i.value, i);
    }
  }
  /**
   * Add a value to the cache.
   *
   * Note: if `undefined` is specified as a value, this is an alias for
   * {@link LRUCache#delete}
   *
   * Fields on the {@link LRUCache.SetOptions} options param will override
   * their corresponding values in the constructor options for the scope
   * of this single `set()` operation.
   *
   * If `start` is provided, then that will set the effective start
   * time for the TTL calculation. Note that this must be a previous
   * value of `performance.now()` if supported, or a previous value of
   * `Date.now()` if not.
   *
   * Options object may also include `size`, which will prevent
   * calling the `sizeCalculation` function and just use the specified
   * number if it is a positive integer, and `noDisposeOnSet` which
   * will prevent calling a `dispose` function in the case of
   * overwrites.
   *
   * If the `size` (or return value of `sizeCalculation`) for a given
   * entry is greater than `maxEntrySize`, then the item will not be
   * added to the cache.
   *
   * Will update the recency of the entry.
   *
   * If the value is `undefined`, then this is an alias for
   * `cache.delete(key)`. `undefined` is never stored in the cache.
   */
  set(e, n, i = {}) {
    var p, v, w, R, x;
    if (n === void 0)
      return this.delete(e), this;
    const { ttl: r = this.ttl, start: s, noDisposeOnSet: o = this.noDisposeOnSet, sizeCalculation: a = this.sizeCalculation, status: u } = i;
    let { noUpdateTTL: c = this.noUpdateTTL } = i;
    const f = l(this, ji).call(this, e, n, i.size || 0, a);
    if (this.maxEntrySize && f > this.maxEntrySize)
      return u && (u.set = "miss", u.maxEntrySizeExceeded = !0), k(this, V, un).call(this, e, "set"), this;
    let g = l(this, Ie) === 0 ? void 0 : l(this, Te).get(e);
    if (g === void 0)
      g = l(this, Ie) === 0 ? l(this, Re) : l(this, It).length !== 0 ? l(this, It).pop() : l(this, Ie) === l(this, vt) ? k(this, V, br).call(this, !1) : l(this, Ie), l(this, de)[g] = e, l(this, ee)[g] = n, l(this, Te).set(e, g), l(this, Qe)[l(this, Re)] = g, l(this, st)[g] = l(this, Re), $(this, Re, g), Sn(this, Ie)._++, l(this, ei).call(this, g, f, u), u && (u.set = "add"), c = !1;
    else {
      k(this, V, Ni).call(this, g);
      const y = l(this, ee)[g];
      if (n !== y) {
        if (l(this, gn) && k(this, V, ce).call(this, y)) {
          y.__abortController.abort(new Error("replaced"));
          const { __staleWhileFetching: S } = y;
          S !== void 0 && !o && (l(this, At) && ((p = l(this, Tt)) == null || p.call(this, S, e, "set")), l(this, We) && ((v = l(this, Le)) == null || v.push([S, e, "set"])));
        } else o || (l(this, At) && ((w = l(this, Tt)) == null || w.call(this, y, e, "set")), l(this, We) && ((R = l(this, Le)) == null || R.push([y, e, "set"])));
        if (l(this, Rn).call(this, g), l(this, ei).call(this, g, f, u), l(this, ee)[g] = n, u) {
          u.set = "replace";
          const S = y && k(this, V, ce).call(this, y) ? y.__staleWhileFetching : y;
          S !== void 0 && (u.oldValue = S);
        }
      } else u && (u.set = "update");
    }
    if (r !== 0 && !l(this, ot) && k(this, V, Fs).call(this), l(this, ot) && (c || l(this, $i).call(this, g, r, s), u && l(this, en).call(this, u, g)), !o && l(this, We) && l(this, Le)) {
      const y = l(this, Le);
      let S;
      for (; S = y == null ? void 0 : y.shift(); )
        (x = l(this, St)) == null || x.call(this, ...S);
    }
    return this;
  }
  /**
   * Evict the least recently used item, returning its value or
   * `undefined` if cache is empty.
   */
  pop() {
    var e;
    try {
      for (; l(this, Ie); ) {
        const n = l(this, ee)[l(this, Ge)];
        if (k(this, V, br).call(this, !0), k(this, V, ce).call(this, n)) {
          if (n.__staleWhileFetching)
            return n.__staleWhileFetching;
        } else if (n !== void 0)
          return n;
      }
    } finally {
      if (l(this, We) && l(this, Le)) {
        const n = l(this, Le);
        let i;
        for (; i = n == null ? void 0 : n.shift(); )
          (e = l(this, St)) == null || e.call(this, ...i);
      }
    }
  }
  /**
   * Check if a key is in the cache, without updating the recency of use.
   * Will return false if the item is stale, even though it is technically
   * in the cache.
   *
   * Check if a key is in the cache, without updating the recency of
   * use. Age is updated if {@link LRUCache.OptionsBase.updateAgeOnHas} is set
   * to `true` in either the options or the constructor.
   *
   * Will return `false` if the item is stale, even though it is technically in
   * the cache. The difference can be determined (if it matters) by using a
   * `status` argument, and inspecting the `has` field.
   *
   * Will not update item age unless
   * {@link LRUCache.OptionsBase.updateAgeOnHas} is set.
   */
  has(e, n = {}) {
    const { updateAgeOnHas: i = this.updateAgeOnHas, status: r } = n, s = l(this, Te).get(e);
    if (s !== void 0) {
      const o = l(this, ee)[s];
      if (k(this, V, ce).call(this, o) && o.__staleWhileFetching === void 0)
        return !1;
      if (l(this, at).call(this, s))
        r && (r.has = "stale", l(this, en).call(this, r, s));
      else return i && l(this, Fn).call(this, s), r && (r.has = "hit", l(this, en).call(this, r, s)), !0;
    } else r && (r.has = "miss");
    return !1;
  }
  /**
   * Like {@link LRUCache#get} but doesn't update recency or delete stale
   * items.
   *
   * Returns `undefined` if the item is stale, unless
   * {@link LRUCache.OptionsBase.allowStale} is set.
   */
  peek(e, n = {}) {
    const { allowStale: i = this.allowStale } = n, r = l(this, Te).get(e);
    if (r === void 0 || !i && l(this, at).call(this, r))
      return;
    const s = l(this, ee)[r];
    return k(this, V, ce).call(this, s) ? s.__staleWhileFetching : s;
  }
  async fetch(e, n = {}) {
    const {
      // get options
      allowStale: i = this.allowStale,
      updateAgeOnGet: r = this.updateAgeOnGet,
      noDeleteOnStaleGet: s = this.noDeleteOnStaleGet,
      // set options
      ttl: o = this.ttl,
      noDisposeOnSet: a = this.noDisposeOnSet,
      size: u = 0,
      sizeCalculation: c = this.sizeCalculation,
      noUpdateTTL: f = this.noUpdateTTL,
      // fetch exclusive options
      noDeleteOnFetchRejection: g = this.noDeleteOnFetchRejection,
      allowStaleOnFetchRejection: p = this.allowStaleOnFetchRejection,
      ignoreFetchAbort: v = this.ignoreFetchAbort,
      allowStaleOnFetchAbort: w = this.allowStaleOnFetchAbort,
      context: R,
      forceRefresh: x = !1,
      status: y,
      signal: S
    } = n;
    if (!l(this, gn))
      return y && (y.fetch = "get"), this.get(e, {
        allowStale: i,
        updateAgeOnGet: r,
        noDeleteOnStaleGet: s,
        status: y
      });
    const A = {
      allowStale: i,
      updateAgeOnGet: r,
      noDeleteOnStaleGet: s,
      ttl: o,
      noDisposeOnSet: a,
      size: u,
      sizeCalculation: c,
      noUpdateTTL: f,
      noDeleteOnFetchRejection: g,
      allowStaleOnFetchRejection: p,
      allowStaleOnFetchAbort: w,
      ignoreFetchAbort: v,
      status: y,
      signal: S
    };
    let O = l(this, Te).get(e);
    if (O === void 0) {
      y && (y.fetch = "miss");
      const C = k(this, V, wr).call(this, e, O, A, R);
      return C.__returned = C;
    } else {
      const C = l(this, ee)[O];
      if (k(this, V, ce).call(this, C)) {
        const d = i && C.__staleWhileFetching !== void 0;
        return y && (y.fetch = "inflight", d && (y.returnedStale = !0)), d ? C.__staleWhileFetching : C.__returned = C;
      }
      const T = l(this, at).call(this, O);
      if (!x && !T)
        return y && (y.fetch = "hit"), k(this, V, Ni).call(this, O), r && l(this, Fn).call(this, O), y && l(this, en).call(this, y, O), C;
      const _ = k(this, V, wr).call(this, e, O, A, R), b = _.__staleWhileFetching !== void 0 && i;
      return y && (y.fetch = T ? "stale" : "refresh", b && T && (y.returnedStale = !0)), b ? _.__staleWhileFetching : _.__returned = _;
    }
  }
  async forceFetch(e, n = {}) {
    const i = await this.fetch(e, n);
    if (i === void 0)
      throw new Error("fetch() returned undefined");
    return i;
  }
  memo(e, n = {}) {
    const i = l(this, Zn);
    if (!i)
      throw new Error("no memoMethod provided to constructor");
    const { context: r, forceRefresh: s, ...o } = n, a = this.get(e, o);
    if (!s && a !== void 0)
      return a;
    const u = i(e, a, {
      options: o,
      context: r
    });
    return this.set(e, u, o), u;
  }
  /**
   * Return a value from the cache. Will update the recency of the cache
   * entry found.
   *
   * If the key is not found, get() will return `undefined`.
   */
  get(e, n = {}) {
    const { allowStale: i = this.allowStale, updateAgeOnGet: r = this.updateAgeOnGet, noDeleteOnStaleGet: s = this.noDeleteOnStaleGet, status: o } = n, a = l(this, Te).get(e);
    if (a !== void 0) {
      const u = l(this, ee)[a], c = k(this, V, ce).call(this, u);
      return o && l(this, en).call(this, o, a), l(this, at).call(this, a) ? (o && (o.get = "stale"), c ? (o && i && u.__staleWhileFetching !== void 0 && (o.returnedStale = !0), i ? u.__staleWhileFetching : void 0) : (s || k(this, V, un).call(this, e, "expire"), o && i && (o.returnedStale = !0), i ? u : void 0)) : (o && (o.get = "hit"), c ? u.__staleWhileFetching : (k(this, V, Ni).call(this, a), r && l(this, Fn).call(this, a), u));
    } else o && (o.get = "miss");
  }
  /**
   * Deletes a key out of the cache.
   *
   * Returns true if the key was deleted, false otherwise.
   */
  delete(e) {
    return k(this, V, un).call(this, e, "delete");
  }
  /**
   * Clear the cache entirely, throwing away all values.
   */
  clear() {
    return k(this, V, Cs).call(this, "delete");
  }
}, vt = new WeakMap(), rt = new WeakMap(), Tt = new WeakMap(), St = new WeakMap(), Xn = new WeakMap(), Zn = new WeakMap(), Ie = new WeakMap(), _t = new WeakMap(), Te = new WeakMap(), de = new WeakMap(), ee = new WeakMap(), Qe = new WeakMap(), st = new WeakMap(), Ge = new WeakMap(), Re = new WeakMap(), It = new WeakMap(), Le = new WeakMap(), Ot = new WeakMap(), Nt = new WeakMap(), ot = new WeakMap(), At = new WeakMap(), gn = new WeakMap(), We = new WeakMap(), V = new WeakSet(), Fs = function() {
  const e = new yr(l(this, vt)), n = new yr(l(this, vt));
  $(this, ot, e), $(this, Nt, n), $(this, $i, (s, o, a = Gn.now()) => {
    if (n[s] = o !== 0 ? a : 0, e[s] = o, o !== 0 && this.ttlAutopurge) {
      const u = setTimeout(() => {
        l(this, at).call(this, s) && k(this, V, un).call(this, l(this, de)[s], "expire");
      }, o + 1);
      u.unref && u.unref();
    }
  }), $(this, Fn, (s) => {
    n[s] = e[s] !== 0 ? Gn.now() : 0;
  }), $(this, en, (s, o) => {
    if (e[o]) {
      const a = e[o], u = n[o];
      if (!a || !u)
        return;
      s.ttl = a, s.start = u, s.now = i || r();
      const c = s.now - u;
      s.remainingTTL = a - c;
    }
  });
  let i = 0;
  const r = () => {
    const s = Gn.now();
    if (this.ttlResolution > 0) {
      i = s;
      const o = setTimeout(() => i = 0, this.ttlResolution);
      o.unref && o.unref();
    }
    return s;
  };
  this.getRemainingTTL = (s) => {
    const o = l(this, Te).get(s);
    if (o === void 0)
      return 0;
    const a = e[o], u = n[o];
    if (!a || !u)
      return 1 / 0;
    const c = (i || r()) - u;
    return a - c;
  }, $(this, at, (s) => {
    const o = n[s], a = e[s];
    return !!a && !!o && (i || r()) - o > a;
  });
}, Fn = new WeakMap(), en = new WeakMap(), $i = new WeakMap(), at = new WeakMap(), wl = function() {
  const e = new yr(l(this, vt));
  $(this, _t, 0), $(this, Ot, e), $(this, Rn, (n) => {
    $(this, _t, l(this, _t) - e[n]), e[n] = 0;
  }), $(this, ji, (n, i, r, s) => {
    if (k(this, V, ce).call(this, i))
      return 0;
    if (!sn(r))
      if (s) {
        if (typeof s != "function")
          throw new TypeError("sizeCalculation must be a function");
        if (r = s(i, n), !sn(r))
          throw new TypeError("sizeCalculation return invalid (expect positive integer)");
      } else
        throw new TypeError("invalid size value (must be positive integer). When maxSize or maxEntrySize is used, sizeCalculation or size must be set.");
    return r;
  }), $(this, ei, (n, i, r) => {
    if (e[n] = i, l(this, rt)) {
      const s = l(this, rt) - e[n];
      for (; l(this, _t) > s; )
        k(this, V, br).call(this, !0);
    }
    $(this, _t, l(this, _t) + e[n]), r && (r.entrySize = i, r.totalCalculatedSize = l(this, _t));
  });
}, Rn = new WeakMap(), ei = new WeakMap(), ji = new WeakMap(), on = function* ({ allowStale: e = this.allowStale } = {}) {
  if (l(this, Ie))
    for (let n = l(this, Re); !(!k(this, V, Rs).call(this, n) || ((e || !l(this, at).call(this, n)) && (yield n), n === l(this, Ge))); )
      n = l(this, st)[n];
}, an = function* ({ allowStale: e = this.allowStale } = {}) {
  if (l(this, Ie))
    for (let n = l(this, Ge); !(!k(this, V, Rs).call(this, n) || ((e || !l(this, at).call(this, n)) && (yield n), n === l(this, Re))); )
      n = l(this, Qe)[n];
}, Rs = function(e) {
  return e !== void 0 && l(this, Te).get(l(this, de)[e]) === e;
}, br = function(e) {
  var s, o;
  const n = l(this, Ge), i = l(this, de)[n], r = l(this, ee)[n];
  return l(this, gn) && k(this, V, ce).call(this, r) ? r.__abortController.abort(new Error("evicted")) : (l(this, At) || l(this, We)) && (l(this, At) && ((s = l(this, Tt)) == null || s.call(this, r, i, "evict")), l(this, We) && ((o = l(this, Le)) == null || o.push([r, i, "evict"]))), l(this, Rn).call(this, n), e && (l(this, de)[n] = void 0, l(this, ee)[n] = void 0, l(this, It).push(n)), l(this, Ie) === 1 ? ($(this, Ge, $(this, Re, 0)), l(this, It).length = 0) : $(this, Ge, l(this, Qe)[n]), l(this, Te).delete(i), Sn(this, Ie)._--, n;
}, wr = function(e, n, i, r) {
  const s = n === void 0 ? void 0 : l(this, ee)[n];
  if (k(this, V, ce).call(this, s))
    return s;
  const o = new Lr(), { signal: a } = i;
  a == null || a.addEventListener("abort", () => o.abort(a.reason), {
    signal: o.signal
  });
  const u = {
    signal: o.signal,
    options: i,
    context: r
  }, c = (R, x = !1) => {
    const { aborted: y } = o.signal, S = i.ignoreFetchAbort && R !== void 0;
    if (i.status && (y && !x ? (i.status.fetchAborted = !0, i.status.fetchError = o.signal.reason, S && (i.status.fetchAbortIgnored = !0)) : i.status.fetchResolved = !0), y && !S && !x)
      return g(o.signal.reason);
    const A = v;
    return l(this, ee)[n] === v && (R === void 0 ? A.__staleWhileFetching ? l(this, ee)[n] = A.__staleWhileFetching : k(this, V, un).call(this, e, "fetch") : (i.status && (i.status.fetchUpdated = !0), this.set(e, R, u.options))), R;
  }, f = (R) => (i.status && (i.status.fetchRejected = !0, i.status.fetchError = R), g(R)), g = (R) => {
    const { aborted: x } = o.signal, y = x && i.allowStaleOnFetchAbort, S = y || i.allowStaleOnFetchRejection, A = S || i.noDeleteOnFetchRejection, O = v;
    if (l(this, ee)[n] === v && (!A || O.__staleWhileFetching === void 0 ? k(this, V, un).call(this, e, "fetch") : y || (l(this, ee)[n] = O.__staleWhileFetching)), S)
      return i.status && O.__staleWhileFetching !== void 0 && (i.status.returnedStale = !0), O.__staleWhileFetching;
    if (O.__returned === O)
      throw R;
  }, p = (R, x) => {
    var S;
    const y = (S = l(this, Xn)) == null ? void 0 : S.call(this, e, s, u);
    y && y instanceof Promise && y.then((A) => R(A === void 0 ? void 0 : A), x), o.signal.addEventListener("abort", () => {
      (!i.ignoreFetchAbort || i.allowStaleOnFetchAbort) && (R(void 0), i.allowStaleOnFetchAbort && (R = (A) => c(A, !0)));
    });
  };
  i.status && (i.status.fetchDispatched = !0);
  const v = new Promise(p).then(c, f), w = Object.assign(v, {
    __abortController: o,
    __staleWhileFetching: s,
    __returned: void 0
  });
  return n === void 0 ? (this.set(e, w, { ...u.options, status: void 0 }), n = l(this, Te).get(e)) : l(this, ee)[n] = w, w;
}, ce = function(e) {
  if (!l(this, gn))
    return !1;
  const n = e;
  return !!n && n instanceof Promise && n.hasOwnProperty("__staleWhileFetching") && n.__abortController instanceof Lr;
}, Ls = function(e, n) {
  l(this, st)[n] = e, l(this, Qe)[e] = n;
}, Ni = function(e) {
  e !== l(this, Re) && (e === l(this, Ge) ? $(this, Ge, l(this, Qe)[e]) : k(this, V, Ls).call(this, l(this, st)[e], l(this, Qe)[e]), k(this, V, Ls).call(this, l(this, Re), e), $(this, Re, e));
}, un = function(e, n) {
  var r, s, o, a;
  let i = !1;
  if (l(this, Ie) !== 0) {
    const u = l(this, Te).get(e);
    if (u !== void 0)
      if (i = !0, l(this, Ie) === 1)
        k(this, V, Cs).call(this, n);
      else {
        l(this, Rn).call(this, u);
        const c = l(this, ee)[u];
        if (k(this, V, ce).call(this, c) ? c.__abortController.abort(new Error("deleted")) : (l(this, At) || l(this, We)) && (l(this, At) && ((r = l(this, Tt)) == null || r.call(this, c, e, n)), l(this, We) && ((s = l(this, Le)) == null || s.push([c, e, n]))), l(this, Te).delete(e), l(this, de)[u] = void 0, l(this, ee)[u] = void 0, u === l(this, Re))
          $(this, Re, l(this, st)[u]);
        else if (u === l(this, Ge))
          $(this, Ge, l(this, Qe)[u]);
        else {
          const f = l(this, st)[u];
          l(this, Qe)[f] = l(this, Qe)[u];
          const g = l(this, Qe)[u];
          l(this, st)[g] = l(this, st)[u];
        }
        Sn(this, Ie)._--, l(this, It).push(u);
      }
  }
  if (l(this, We) && ((o = l(this, Le)) != null && o.length)) {
    const u = l(this, Le);
    let c;
    for (; c = u == null ? void 0 : u.shift(); )
      (a = l(this, St)) == null || a.call(this, ...c);
  }
  return i;
}, Cs = function(e) {
  var n, i, r;
  for (const s of k(this, V, an).call(this, { allowStale: !0 })) {
    const o = l(this, ee)[s];
    if (k(this, V, ce).call(this, o))
      o.__abortController.abort(new Error("deleted"));
    else {
      const a = l(this, de)[s];
      l(this, At) && ((n = l(this, Tt)) == null || n.call(this, o, a, e)), l(this, We) && ((i = l(this, Le)) == null || i.push([o, a, e]));
    }
  }
  if (l(this, Te).clear(), l(this, ee).fill(void 0), l(this, de).fill(void 0), l(this, ot) && l(this, Nt) && (l(this, ot).fill(0), l(this, Nt).fill(0)), l(this, Ot) && l(this, Ot).fill(0), $(this, Ge, 0), $(this, Re, 0), l(this, It).length = 0, $(this, _t, 0), $(this, Ie, 0), l(this, We) && l(this, Le)) {
    const s = l(this, Le);
    let o;
    for (; o = s == null ? void 0 : s.shift(); )
      (r = l(this, St)) == null || r.call(this, ...o);
  }
}, ti);
const Hg = 1024, Yg = 36e5;
function ls({ max: t = Hg, ttl: e = Yg } = {}) {
  return new Wg({ max: t, ttl: e });
}
function Jg({ documentCache: t = ls(), errorCache: e = ls(), validationCache: n = !0 }) {
  const i = ls();
  return {
    onParse({ params: r, setParsedDocument: s }) {
      const o = r.source.toString(), a = t.get(o);
      if (a) {
        s(a);
        return;
      }
      const u = e.get(o);
      if (u)
        throw u;
      return ({ result: c }) => {
        c != null && (c instanceof Error ? e.set(o, c) : t.set(o, c));
      };
    },
    onValidate({
      params: { schema: r, documentAST: s, rules: o },
      setResult: a
      // eslint-disable-next-line @typescript-eslint/ban-types
    }) {
      if (r != null && n !== !1) {
        const u = (o == null ? void 0 : o.map((p) => p.name).join(",")) || "";
        let c = i.get(u);
        c || (c = /* @__PURE__ */ new WeakMap(), i.set(u, c));
        let f = c.get(r);
        f || (f = /* @__PURE__ */ new WeakMap(), c.set(r, f));
        const g = f.get(s);
        if (g) {
          a(g);
          return;
        }
        return ({ result: p }) => {
          p != null && (f == null || f.set(s, p));
        };
      }
    }
  };
}
const Kg = () => !0;
function wi(t) {
  const e = t.match || Kg;
  return {
    onRequestParse({ request: n, setRequestParser: i }) {
      e(n) && i(t.parse);
    }
  };
}
function Xg(t) {
  const e = (t.headers.get("accept") || "*/*").replace(/\s/g, "").toLowerCase().split(","), n = [];
  for (const i of e) {
    const [r, ...s] = i.split(";");
    ((s == null ? void 0 : s.find((a) => a.includes("charset="))) || "charset=utf-8") === "charset=utf-8" && n.push(r);
  }
  return n.reverse();
}
function Zg(t, e) {
  const [n, i] = t.split("/"), [r, s] = e.split("/");
  return (r === "*" || r === n) && (s === "*" || s === i);
}
function uo(t) {
  if (Array.isArray(t))
    return `[${t.map((i) => {
      const r = Fa(i);
      return (i.stringify || JSON.stringify)(r);
    }).join(",")}]`;
  const e = Fa(t);
  return (t.stringify || JSON.stringify)(e);
}
function Fa(t) {
  var e, n;
  if ((e = t.errors) != null && e.length || (n = t.extensions) != null && n.http) {
    const i = { ...t };
    if (i.errors && (i.errors = i.errors.map(El)), i.extensions) {
      const { http: r, ...s } = t.extensions;
      i.extensions = Object.keys(s).length ? s : void 0;
    }
    return i;
  }
  return t;
}
function El(t) {
  if (li(t)) {
    const e = "toJSON" in t && typeof t.toJSON == "function" ? t.toJSON() : Object(t), { http: n, unexpected: i, ...r } = e.extensions || {};
    return X(t.message, {
      nodes: t.nodes,
      source: t.source,
      positions: t.positions,
      path: t.path,
      originalError: El(t.originalError || void 0),
      extensions: Object.keys(r).length ? r : void 0
    });
  }
  return t;
}
function em(t, e) {
  const i = io(t, {
    Connection: "keep-alive",
    "Content-Type": 'multipart/mixed; boundary="-"',
    "Transfer-Encoding": "chunked"
  });
  let r;
  const s = new e.TextEncoder(), o = new e.ReadableStream({
    start(a) {
      if (Qt(t))
        r = t[Symbol.asyncIterator]();
      else {
        let u = !1;
        r = {
          next: () => u ? Promise.resolve({ done: !0, value: null }) : (u = !0, Promise.resolve({ done: !1, value: t }))
        };
      }
      a.enqueue(s.encode(`\r
`)), a.enqueue(s.encode("---"));
    },
    async pull(a) {
      try {
        const { done: u, value: c } = await r.next();
        if (c != null) {
          a.enqueue(s.encode(`\r
`)), a.enqueue(s.encode("Content-Type: application/json; charset=utf-8")), a.enqueue(s.encode(`\r
`));
          const f = uo(c), g = s.encode(f);
          a.enqueue(s.encode("Content-Length: " + g.byteLength)), a.enqueue(s.encode(`\r
`)), a.enqueue(s.encode(`\r
`)), a.enqueue(g), a.enqueue(s.encode(`\r
`)), a.enqueue(s.encode("---"));
        }
        u && (a.enqueue(s.encode(`--\r
`)), a.close());
      } catch (u) {
        a.error(u);
      }
    },
    async cancel(a) {
      var u;
      await ((u = r.return) == null ? void 0 : u.call(r, a));
    }
  });
  return new e.Response(o, i);
}
function tm(t, e, n) {
  if (qr(t))
    return new e.Response(null, {
      status: 406,
      statusText: "Not Acceptable",
      headers: {
        accept: "application/json; charset=utf-8, application/graphql-response+json; charset=utf-8"
      }
    });
  const i = {
    "Content-Type": n + "; charset=utf-8"
  }, r = io(
    t,
    i,
    // prefer 200 only if accepting application/json and all errors are exclusively GraphQL errors
    n === "application/json" && !Array.isArray(t) && Xh(t.errors) && t.errors.some((o) => {
      var a;
      return !((a = o.extensions) != null && a.originalError) || li(o.extensions.originalError);
    })
  ), s = uo(t);
  return new e.Response(s, r);
}
function nm() {
  return function(e, n) {
    var f, g;
    let i = 12e3;
    ((g = (f = globalThis.process) == null ? void 0 : f.env) == null ? void 0 : g.NODE_ENV) === "test" && (i = 300);
    const s = io(e, {
      "Content-Type": "text/event-stream",
      Connection: "keep-alive",
      "Cache-Control": "no-cache",
      "Content-Encoding": "none"
    }, !0);
    let o, a;
    const u = new n.TextEncoder(), c = new n.ReadableStream({
      start(p) {
        if (p.enqueue(u.encode(`:

`)), a = setInterval(() => {
          if (!p.desiredSize) {
            clearInterval(a);
            return;
          }
          p.enqueue(u.encode(`:

`));
        }, i), Qt(e))
          o = e[Symbol.asyncIterator]();
        else {
          let v = !1;
          o = {
            next: () => v ? Promise.resolve({ done: !0, value: null }) : (v = !0, Promise.resolve({ done: !1, value: e }))
          };
        }
      },
      async pull(p) {
        try {
          const v = await o.next();
          if (v.value != null) {
            p.enqueue(u.encode(`event: next
`));
            const w = uo(v.value);
            p.enqueue(u.encode(`data: ${w}

`));
          }
          v.done && (p.enqueue(u.encode(`event: complete
`)), p.enqueue(u.encode(`data:

`)), clearInterval(a), p.close());
        } catch (v) {
          p.error(v);
        }
      },
      async cancel(p) {
        var v;
        clearInterval(a), await ((v = o.return) == null ? void 0 : v.call(o, p));
      }
    });
    return new n.Response(c, s);
  };
}
const im = {
  mediaTypes: ["multipart/mixed"],
  asyncIterables: !0,
  processResult: em
};
function rm() {
  return {
    mediaTypes: ["text/event-stream"],
    asyncIterables: !0,
    processResult: nm()
  };
}
const Ra = {
  mediaTypes: ["application/graphql-response+json", "application/json"],
  asyncIterables: !1,
  processResult: tm
};
function sm() {
  const t = /* @__PURE__ */ new WeakMap(), e = rm(), n = [e, im, Ra], i = [e, Ra];
  return {
    onSubscribe({ args: { contextValue: r } }) {
      r.request && t.set(r.request, !0);
    },
    onResultProcess({ request: r, result: s, acceptableMediaTypes: o, setResultProcessor: a }) {
      const c = t.get(r) ? i : n, f = Xg(r), g = Qt(s);
      for (const p of c)
        for (const v of f)
          if (!(g && !p.asyncIterables))
            for (const w of p.mediaTypes)
              o.push(w), Zg(w, v) && a(p.processResult, w);
    }
  };
}
const om = `<!doctype html><html lang=en><head><meta charset=utf-8><title>Welcome to GraphQL Yoga</title><link rel=icon href=https://raw.githubusercontent.com/dotansimha/graphql-yoga/main/website/public/favicon.ico><style>body,html{padding:0;margin:0;height:100%;font-family:Inter,-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,Oxygen,Ubuntu,Cantarell,'Fira Sans','Droid Sans','Helvetica Neue',sans-serif;color:#fff;background-color:#000}main>section.hero{display:flex;height:90vh;justify-content:center;align-items:center;flex-direction:column}.logo{display:flex;align-items:center}.buttons{margin-top:24px}h1{font-size:80px}h2{color:#888;max-width:50%;margin-top:0;text-align:center}a{color:#fff;text-decoration:none;margin-left:10px;margin-right:10px;font-weight:700;transition:color .3s ease;padding:4px;overflow:visible}a.graphiql:hover{color:rgba(255,0,255,.7)}a.docs:hover{color:rgba(28,200,238,.7)}a.tutorial:hover{color:rgba(125,85,245,.7)}svg{margin-right:24px}.not-what-your-looking-for{margin-top:5vh}.not-what-your-looking-for>*{margin-left:auto;margin-right:auto}.not-what-your-looking-for>p{text-align:center}.not-what-your-looking-for>h2{color:#464646}.not-what-your-looking-for>p{max-width:600px;line-height:1.3em}.not-what-your-looking-for>pre{max-width:300px}</style></head><body id=body><main><section class=hero><div class=logo><div><svg xmlns=http://www.w3.org/2000/svg viewBox="-0.41 0.445 472.812 499.811" height=150><defs><linearGradient id=paint0_linear_1677_11483 x1=16 y1=14 x2=87.2132 y2=44.5982 gradientUnits=userSpaceOnUse gradientTransform="matrix(8.139854, 0, 0, 8.139854, -130.346407, -113.25101)"><stop stop-color=#7433FF /><stop offset=1 stop-color=#FFA3FD /></linearGradient><linearGradient id=paint1_linear_1677_11483 x1=16 y1=14 x2=87.2132 y2=44.5982 gradientUnits=userSpaceOnUse gradientTransform="matrix(8.139854, 0, 0, 8.139854, -130.346407, -113.25101)"><stop stop-color=#7433FF /><stop offset=1 stop-color=#FFA3FD /></linearGradient><linearGradient id=paint2_linear_1677_11483 x1=16 y1=14 x2=87.2132 y2=44.5982 gradientUnits=userSpaceOnUse gradientTransform="matrix(8.139854, 0, 0, 8.139854, -130.346407, -113.25101)"><stop stop-color=#7433FF /><stop offset=1 stop-color=#FFA3FD /></linearGradient><linearGradient id=paint3_linear_1677_11483 x1=16 y1=14 x2=87.2132 y2=44.5982 gradientUnits=userSpaceOnUse><stop stop-color=#7433FF /><stop offset=1 stop-color=#FFA3FD /></linearGradient><linearGradient id=paint4_linear_1677_11483 x1=16 y1=14 x2=87.2132 y2=44.5982 gradientUnits=userSpaceOnUse><stop stop-color=#7433FF /><stop offset=1 stop-color=#FFA3FD /></linearGradient><linearGradient id=paint5_linear_1677_11483 x1=16 y1=14 x2=87.2132 y2=44.5982 gradientUnits=userSpaceOnUse><stop stop-color=#7433FF /><stop offset=1 stop-color=#FFA3FD /></linearGradient><filter id=filter0_f_1677_11483 x=23 y=-25 width=100 height=100 filterUnits=userSpaceOnUse color-interpolation-filters=sRGB><feFlood flood-opacity=0 result=BackgroundImageFix /><feBlend mode=normal in=SourceGraphic in2=BackgroundImageFix result=shape /><feGaussianBlur stdDeviation=12 result=effect1_foregroundBlur_1677_11483 /></filter><filter id=filter1_f_1677_11483 x=-24 y=19 width=100 height=100 filterUnits=userSpaceOnUse color-interpolation-filters=sRGB><feFlood flood-opacity=0 result=BackgroundImageFix /><feBlend mode=normal in=SourceGraphic in2=BackgroundImageFix result=shape /><feGaussianBlur stdDeviation=12 result=effect1_foregroundBlur_1677_11483 /></filter><linearGradient id=paint6_linear_1677_11483 x1=30 y1=28 x2=66.1645 y2=44.4363 gradientUnits=userSpaceOnUse gradientTransform="matrix(8.139854, 0, 0, 8.139854, -130.346407, -113.25101)"><stop stop-color=#7433FF /><stop offset=1 stop-color=#FFA3FD /></linearGradient><filter id=filter2_f_1677_11483 x=-12 y=-44 width=100 height=100 filterUnits=userSpaceOnUse color-interpolation-filters=sRGB><feFlood flood-opacity=0 result=BackgroundImageFix /><feBlend mode=normal in=SourceGraphic in2=BackgroundImageFix result=shape /><feGaussianBlur stdDeviation=12 result=effect1_foregroundBlur_1677_11483 /></filter><filter id=filter3_f_1677_11483 x=13 y=19 width=100 height=100 filterUnits=userSpaceOnUse color-interpolation-filters=sRGB><feFlood flood-opacity=0 result=BackgroundImageFix /><feBlend mode=normal in=SourceGraphic in2=BackgroundImageFix result=shape /><feGaussianBlur stdDeviation=12 result=effect1_foregroundBlur_1677_11483 /></filter></defs><mask id=mask0_1677_11483 style=mask-type:alpha maskUnits=userSpaceOnUse x=16 y=14 width=58 height=62><path d="M21 25.3501C21.7279 25.3501 22.4195 25.5056 23.0433 25.7853L42.1439 14.8C43.0439 14.3 44.1439 14 45.1439 14C46.2439 14 47.2439 14.3 48.1439 14.8L64.5439 24.3C63.3439 25.1 62.4439 26.3 61.8439 27.7L45.9438 18.5C45.6439 18.3 45.344 18.3 45.0441 18.3C44.7441 18.3 44.4439 18.4 44.1439 18.5L25.8225 29.0251C25.9382 29.4471 26 29.8914 26 30.3501C26 33.1115 23.7614 35.3501 21 35.3501C18.2386 35.3501 16 33.1115 16 30.3501C16 27.5887 18.2386 25.3501 21 25.3501Z" fill=url(#paint3_linear_1677_11483) /><path d="M67.2438 35.0329C65.3487 34.3219 64 32.4934 64 30.35C64 27.5886 66.2386 25.35 69 25.35C71.7614 25.35 74 27.5886 74 30.35C74 32.1825 73.0142 33.7848 71.5439 34.6554V55.2C71.5439 57.4 70.3439 59.4 68.5439 60.5L52.1439 69.9C52.1439 68.4 51.6438 66.9 50.7438 65.8L66.3439 56.8C66.9439 56.5 67.2438 55.9 67.2438 55.2V35.0329Z" fill=url(#paint4_linear_1677_11483) /><path d="M49.8439 69.1055C49.9458 69.5034 50 69.9204 50 70.3501C50 73.1115 47.7614 75.3501 45 75.3501C42.5102 75.3501 40.4454 73.5302 40.0633 71.1481L21.8439 60.6C19.9439 59.5 18.8439 57.5 18.8439 55.3V36.8C19.5439 37 20.3439 37.2 21.0439 37.2C21.7439 37.2 22.4439 37.1 23.0439 36.9V55.3C23.0439 56 23.4438 56.6 23.9438 56.9L41.3263 66.9583C42.2398 65.9694 43.5476 65.3501 45 65.3501C47.3291 65.3501 49.2862 66.9426 49.8419 69.0981L49.8436 69.0997L49.8439 69.1055Z" fill=url(#paint5_linear_1677_11483) /></mask><mask id=mask1_1677_11483 style=mask-type:alpha maskUnits=userSpaceOnUse x=30 y=28 width=30 height=30><path fill-rule=evenodd clip-rule=evenodd d="M49.3945 32.3945C49.3945 34.7088 47.5796 38.5469 45 38.5469C42.4271 38.5469 40.6055 34.7112 40.6055 32.3945C40.6055 29.9714 42.5769 28 45 28C47.4231 28 49.3945 29.9714 49.3945 32.3945ZM35.332 49.0433V48.2148C35.332 42.8117 37.8535 41.0004 39.8796 39.545L39.8801 39.5447C40.3928 39.1767 40.8604 38.8404 41.2488 38.4742C42.3293 39.6642 43.626 40.3047 45 40.3047C46.3752 40.3047 47.6725 39.6642 48.7529 38.4754C49.1408 38.841 49.6078 39.1773 50.1199 39.5447L50.1204 39.545C52.1465 41.0004 54.668 42.8117 54.668 48.2148V49.0433L53.8406 49.092C49.9848 49.3185 46.8646 46.9002 45 43.5777C43.1159 46.935 39.9847 49.318 36.1594 49.092L35.332 49.0433ZM58.1463 51.0747L58.1463 51.0746C57.0179 50.891 50.0128 49.7507 45.0007 55.693C40.0116 49.7553 33.1965 50.8592 31.9095 51.0677L31.9095 51.0677C31.7906 51.087 31.7189 51.0986 31.7002 51.0963C31.7005 51.0969 31.7011 51.1045 31.7023 51.1187C31.726 51.4003 31.9682 54.2745 34.0566 56.2422L30 58H60L55.8956 56.2422C57.8537 54.4764 58.1396 52.2685 58.2508 51.4092V51.4091C58.2697 51.2628 58.2836 51.1556 58.2998 51.0963C58.2881 51.0977 58.2356 51.0892 58.1463 51.0747ZM40.4836 50.104C42.3956 49.3212 43.6746 48.1737 45 46.61C46.332 48.1841 47.6159 49.3259 49.5164 50.104C49.5356 50.1425 49.5557 50.1805 49.5756 50.2182C49.5793 50.2253 49.583 50.2323 49.5867 50.2393C48.0911 50.8127 46.4264 51.825 45.0047 53.1444C43.5906 51.8221 41.9673 50.8196 40.4256 50.2153C40.4455 50.1784 40.4648 50.1415 40.4836 50.104Z" fill=black /></mask><path d="M 40.59 93.095 C 46.517 93.095 52.14 94.365 57.22 96.635 L 212.7 7.22 C 220.025 3.149 228.978 0.706 237.12 0.706 C 246.073 0.706 254.213 3.149 261.54 7.22 L 395.032 84.547 C 385.264 91.059 377.939 100.827 373.055 112.224 L 243.631 37.338 C 241.19 35.71 238.747 35.71 236.305 35.71 C 233.863 35.71 231.42 36.523 228.978 37.338 L 79.84 123.009 C 80.786 126.443 81.29 130.058 81.29 133.793 C 81.29 156.269 63.065 174.493 40.59 174.493 C 18.116 174.493 -0.109 156.269 -0.109 133.793 C -0.109 111.32 18.116 93.095 40.59 93.095 Z" fill=url(#paint0_linear_1677_11483) /><path d="M 417.01 171.913 C 401.585 166.126 390.603 151.238 390.603 133.793 C 390.603 111.32 408.83 93.095 431.303 93.095 C 453.777 93.095 472.001 111.32 472.001 133.793 C 472.001 148.706 463.976 161.755 452.011 168.835 L 452.011 336.07 C 452.011 353.977 442.243 370.258 427.591 379.21 L 294.098 455.726 C 294.098 443.516 290.029 431.306 282.703 422.353 L 409.683 349.093 C 414.568 346.651 417.01 341.767 417.01 336.07 L 417.01 171.913 Z" fill=url(#paint1_linear_1677_11483) /><path d="M 275.376 449.253 C 276.206 452.495 276.646 455.889 276.646 459.389 C 276.646 481.863 258.422 500.087 235.947 500.087 C 215.679 500.087 198.87 485.272 195.761 465.883 L 47.46 380.025 C 31.995 371.071 23.041 354.792 23.041 336.884 L 23.041 186.296 C 28.738 187.923 35.25 189.553 40.948 189.553 C 46.646 189.553 52.345 188.738 57.228 187.111 L 57.228 336.884 C 57.228 342.582 60.485 347.465 64.554 349.908 L 206.042 431.777 C 213.481 423.728 224.127 418.689 235.947 418.689 C 254.905 418.689 270.833 431.656 275.36 449.196 L 275.376 449.214 L 275.376 449.253 Z" fill=url(#paint2_linear_1677_11483) /><g mask=url(#mask0_1677_11483) transform="matrix(8.139854, 0, 0, 8.139854, -130.346375, -113.251038)"><g filter=url(#filter0_f_1677_11483)><circle cx=73 cy=25 r=26 fill=#ED2E7E /></g><g filter=url(#filter1_f_1677_11483)><circle cx=26 cy=69 r=26 fill=#1CC8EE /></g></g><path fill-rule=evenodd clip-rule=evenodd d="M 271.713 150.431 C 271.713 169.275 256.948 200.517 235.947 200.517 C 215.003 200.517 200.172 169.292 200.172 150.431 C 200.172 130.708 216.225 114.666 235.947 114.666 C 255.67 114.666 271.713 130.708 271.713 150.431 Z M 157.251 285.952 L 157.251 279.212 C 157.251 235.233 177.771 220.485 194.27 208.641 C 198.447 205.644 202.247 202.901 205.414 199.923 C 214.204 209.608 224.763 214.826 235.947 214.826 C 247.138 214.826 257.697 209.608 266.496 199.931 C 269.653 202.911 273.456 205.644 277.622 208.641 C 294.114 220.485 314.642 235.233 314.642 279.212 L 314.642 285.952 L 307.912 286.351 C 276.525 288.191 251.128 268.509 235.947 241.468 C 220.611 268.795 195.126 288.191 163.981 286.351 L 157.251 285.952 Z M 342.953 302.492 C 333.771 300.994 276.751 291.715 235.955 340.082 C 195.345 291.749 139.865 300.734 129.389 302.436 C 128.428 302.59 127.841 302.688 127.687 302.665 C 127.687 302.673 127.695 302.729 127.702 302.85 C 127.897 305.138 129.867 328.532 146.872 344.55 L 113.849 358.862 L 358.044 358.862 L 324.639 344.55 C 340.576 330.177 342.905 312.202 343.807 305.212 C 343.962 304.022 344.077 303.153 344.206 302.665 C 344.108 302.68 343.686 302.606 342.953 302.492 Z M 199.188 294.59 C 214.751 288.215 225.161 278.879 235.947 266.15 C 246.788 278.96 257.241 288.255 272.707 294.59 C 272.869 294.898 273.031 295.207 273.196 295.518 C 273.219 295.574 273.252 295.631 273.285 295.688 C 261.107 300.361 247.555 308.598 235.989 319.334 C 224.477 308.573 211.258 300.417 198.715 295.493 C 198.87 295.191 199.033 294.891 199.188 294.59 Z" fill=url(#paint6_linear_1677_11483) /><g mask=url(#mask1_1677_11483) transform="matrix(8.139854, 0, 0, 8.139854, -130.346375, -113.251038)"><g filter=url(#filter2_f_1677_11483)><circle cx=38 cy=6 r=26 fill=#ED2E7E /></g><g filter=url(#filter3_f_1677_11483)><circle cx=63 cy=69 r=26 fill=#1CC8EE /></g></g></svg></div><h1>GraphQL Yoga</h1></div><h2>The batteries-included cross-platform GraphQL Server.</h2><div class=buttons><a href=https://www.the-guild.dev/graphql/yoga-server/docs class=docs>Read the Docs</a> <a href=https://www.the-guild.dev/graphql/yoga-server/tutorial/basic class=tutorial>Start the Tutorial </a><a href=__GRAPHIQL_LINK__ class=graphiql>Visit GraphiQL</a></div></section><section class=not-what-your-looking-for><h2>Not the page you are looking for? 👀</h2><p>This page is shown be default whenever a 404 is hit.<br>You can disable this by behavior via the <code>landingPage</code> option.</p><pre>
          <code>
import { createYoga } from 'graphql-yoga';

const yoga = createYoga({
  landingPage: false
})
          </code>
        </pre><p>If you expected this page to be the GraphQL route, you need to configure Yoga. Currently, the GraphQL route is configured to be on <code>__GRAPHIQL_LINK__</code>.</p><pre>
          <code>
import { createYoga } from 'graphql-yoga';

const yoga = createYoga({
  graphqlEndpoint: '__REQUEST_PATH__',
})
          </code>
        </pre></section></main></body></html>`, am = function(e) {
  return new e.fetchAPI.Response(om.replace(/__GRAPHIQL_LINK__/g, e.graphqlEndpoint).replace(/__REQUEST_PATH__/g, e.url.pathname), {
    status: 200,
    statusText: "OK",
    headers: {
      "Content-Type": "text/html"
    }
  });
};
function um(t) {
  let e;
  function n({ URLPattern: r }) {
    return e || (e = new r({
      pathname: t.graphqlEndpoint
    })), e;
  }
  const i = t.landingPageRenderer || am;
  return {
    onRequest({ request: r, fetchAPI: s, endResponse: o, url: a }) {
      var u, c;
      if (!r.url.endsWith(t.graphqlEndpoint) && !r.url.endsWith(`${t.graphqlEndpoint}/`) && a.pathname !== t.graphqlEndpoint && a.pathname !== `${t.graphqlEndpoint}/` && !n(s).test(a)) {
        if (t.showLandingPage === !0 && r.method === "GET" && ((c = (u = r.headers) == null ? void 0 : u.get("accept")) != null && c.includes("text/html"))) {
          const f = i({
            request: r,
            fetchAPI: s,
            url: a,
            graphqlEndpoint: t.graphqlEndpoint,
            get urlPattern() {
              return n(s);
            }
          });
          if (Ae(f))
            return f.then(o);
          o(f);
          return;
        }
        o(new s.Response("", {
          status: 404,
          statusText: "Not Found"
        }));
      }
    }
  };
}
async function La({ request: t, result: e, fetchAPI: n, onResultProcessHooks: i, serverContext: r }) {
  let s;
  const o = [];
  let a = "*/*";
  for (const u of i)
    await u({
      request: t,
      acceptableMediaTypes: o,
      result: e,
      setResult(c) {
        e = c;
      },
      resultProcessor: s,
      setResultProcessor(c, f) {
        s = c, a = f;
      },
      serverContext: r
    });
  return s ? s(e, n, a) : new n.Response(null, {
    status: 406,
    statusText: "Not Acceptable",
    headers: {
      accept: o.join("; charset=utf-8, ")
    }
  });
}
async function lm({ params: t, enveloped: e }) {
  const n = e.parse(t.query), i = e.validate(e.schema, n);
  if (i.length > 0)
    return { errors: i };
  const r = await e.contextFactory(), s = {
    schema: e.schema,
    document: n,
    contextValue: r,
    variableValues: t.variables,
    operationName: t.operationName
  }, o = eo(n, t.operationName);
  return ((o == null ? void 0 : o.operation) === "subscription" ? e.subscribe : e.execute)(s);
}
const cm = (t, e, n = ((r) => (r = ((i) => (i = globalThis.process) == null ? void 0 : i.env)()) == null ? void 0 : r.NODE_ENV)() === "development") => {
  if (li(t)) {
    if (t.originalError) {
      if (t.originalError.name === "GraphQLError")
        return t;
      const s = {
        ...t.extensions,
        unexpected: !0
      };
      return n && (s.originalError = {
        message: t.originalError.message,
        stack: t.originalError.stack
      }), X(e, {
        nodes: t.nodes,
        source: t.source,
        positions: t.positions,
        path: t.path,
        extensions: s
      });
    }
    return t;
  }
  return X(e, {
    extensions: {
      unexpected: !0,
      originalError: n ? t instanceof Error ? {
        message: t.message,
        stack: t.stack
      } : t : void 0
    }
  });
};
class fm {
  constructor(e) {
    /**
     * Instance of envelop
     */
    U(this, "getEnveloped");
    U(this, "logger");
    U(this, "graphqlEndpoint");
    U(this, "fetchAPI");
    U(this, "plugins");
    U(this, "onRequestParseHooks");
    U(this, "onParamsHooks");
    U(this, "onExecutionResultHooks");
    U(this, "onResultProcessHooks");
    U(this, "maskedErrorsOpts");
    U(this, "id");
    U(this, "handle", async (e, n) => {
      let i = new Proxy({}, {
        get: (u, c, f) => (i = new this.fetchAPI.URL(e.url, "http://localhost"), Reflect.get(i, c, i))
      }), r;
      const s = [];
      for (const u of this.onRequestParseHooks) {
        const c = await u({
          request: e,
          url: i,
          requestParser: r,
          serverContext: n,
          setRequestParser(f) {
            r = f;
          }
        });
        (c == null ? void 0 : c.onRequestParseDone) != null && s.push(c.onRequestParseDone);
      }
      if (this.logger.debug("Parsing request to extract GraphQL parameters"), !r)
        return new this.fetchAPI.Response(null, {
          status: 415,
          statusText: "Unsupported Media Type"
        });
      let o = await r(e);
      for (const u of s)
        await u({
          requestParserResult: o,
          setRequestParserResult(c) {
            o = c;
          }
        });
      const a = await (Array.isArray(o) ? Promise.all(o.map((u) => this.getResultForParams({
        params: u,
        request: e,
        batched: !0
      }, n))) : this.getResultForParams({
        params: o,
        request: e,
        batched: !1
      }, n));
      return La({
        request: e,
        result: a,
        fetchAPI: this.fetchAPI,
        onResultProcessHooks: this.onResultProcessHooks,
        serverContext: n
      });
    });
    if (this.id = (e == null ? void 0 : e.id) ?? "yoga", this.fetchAPI = {
      ...dl
    }, e != null && e.fetchAPI)
      for (const u in e.fetchAPI)
        e.fetchAPI[u] && (this.fetchAPI[u] = e.fetchAPI[u]);
    const n = (e == null ? void 0 : e.logging) == null ? !0 : e.logging;
    this.logger = typeof n == "boolean" ? n === !0 ? us() : us("silent") : typeof n == "string" ? us(n) : n;
    const i = typeof (e == null ? void 0 : e.maskedErrors) == "object" && e.maskedErrors.maskError || cm, r = /* @__PURE__ */ new WeakSet();
    this.maskedErrorsOpts = (e == null ? void 0 : e.maskedErrors) === !1 ? null : {
      errorMessage: "Unexpected error.",
      ...typeof (e == null ? void 0 : e.maskedErrors) == "object" ? e.maskedErrors : {},
      maskError: (u, c) => {
        var g;
        if (r.has(u))
          return u;
        const f = i(u, c, (g = this.maskedErrorsOpts) == null ? void 0 : g.isDev);
        return f !== u && this.logger.error(u), r.add(f), f;
      }
    };
    const s = this.maskedErrorsOpts == null ? null : this.maskedErrorsOpts;
    let o = 0;
    e != null && e.batching && (typeof e.batching == "boolean" ? o = 10 : o = e.batching.limit ?? 10), this.graphqlEndpoint = (e == null ? void 0 : e.graphqlEndpoint) || "/graphql";
    const a = this.graphqlEndpoint;
    this.plugins = [
      yc({
        parse: Qc,
        validate: Cd,
        execute: va,
        subscribe: va,
        specifiedRules: ju
      }),
      // Use the schema provided by the user
      !!(e != null && e.schema) && ap(e.schema),
      (e == null ? void 0 : e.context) != null && mc((u) => e != null && e.context ? typeof e.context == "function" ? e.context(u) : e.context : {}),
      // Middlewares before processing the incoming HTTP request
      qg({
        id: this.id,
        logger: this.logger,
        endpoint: e == null ? void 0 : e.healthCheckEndpoint
      }),
      (e == null ? void 0 : e.cors) !== !1 && bg(e == null ? void 0 : e.cors),
      (e == null ? void 0 : e.graphiql) !== !1 && op({
        graphqlEndpoint: a,
        options: e == null ? void 0 : e.graphiql,
        render: e == null ? void 0 : e.renderGraphiQL,
        logger: this.logger
      }),
      // Middlewares before the GraphQL execution
      wi({
        match: Tg,
        parse: Sg
      }),
      wi({
        match: Ag,
        parse: xg
      }),
      (e == null ? void 0 : e.multipart) !== !1 && wi({
        match: Rg,
        parse: Lg
      }),
      wi({
        match: Og,
        parse: Ng
      }),
      wi({
        match: _g,
        parse: Ig
      }),
      // Middlewares after the GraphQL execution
      sm(),
      Eg((u, c, f) => {
        const p = {
          errors: gr(u, this.maskedErrorsOpts, this.logger)
        };
        return La({
          request: c,
          result: p,
          fetchAPI: this.fetchAPI,
          onResultProcessHooks: this.onResultProcessHooks,
          serverContext: f
        });
      }),
      ...(e == null ? void 0 : e.plugins) ?? [],
      // To make sure those are called at the end
      {
        onPluginInit({ addPlugin: u }) {
          (e == null ? void 0 : e.parserAndValidationCache) !== !1 && u(
            // @ts-expect-error Add plugins has context but this hook doesn't care
            Jg(!(e != null && e.parserAndValidationCache) || (e == null ? void 0 : e.parserAndValidationCache) === !0 ? {} : e == null ? void 0 : e.parserAndValidationCache)
          ), u(Vg(o)), u($g(e == null ? void 0 : e.extraParamNames));
          const c = !!((e == null ? void 0 : e.landingPage) ?? !0);
          u(
            // @ts-expect-error Add plugins has context but this hook doesn't care
            um({
              graphqlEndpoint: a,
              showLandingPage: c,
              landingPageRenderer: typeof (e == null ? void 0 : e.landingPage) == "function" ? e.landingPage : void 0
            })
          ), u(Mg()), u(Gg()), s && (u({
            onSubscribe() {
              return {
                onSubscribeError({ error: f }) {
                  if (Zu(f))
                    throw f;
                }
              };
            }
          }), u(gc(s))), u(
            // We handle validation errors at the end
            Ug()
          );
        }
      }
    ], this.getEnveloped = oc({
      plugins: this.plugins
    }), this.plugins = this.getEnveloped._plugins, this.onRequestParseHooks = [], this.onParamsHooks = [], this.onExecutionResultHooks = [], this.onResultProcessHooks = [];
    for (const u of this.plugins)
      u && (u.onYogaInit && u.onYogaInit({
        yoga: this
      }), u.onRequestParse && this.onRequestParseHooks.push(u.onRequestParse), u.onParams && this.onParamsHooks.push(u.onParams), u.onExecutionResult && this.onExecutionResultHooks.push(u.onExecutionResult), u.onResultProcess && this.onResultProcessHooks.push(u.onResultProcess));
  }
  async getResultForParams({ params: e, request: n, batched: i }, r) {
    let s, o = r;
    try {
      for (const a of this.onParamsHooks)
        await a({
          params: e,
          request: n,
          setParams(u) {
            e = u;
          },
          setResult(u) {
            s = u;
          },
          fetchAPI: this.fetchAPI
        });
      if (s == null) {
        const a = r.request === n ? {
          params: e
        } : {
          request: n,
          params: e
        };
        o = Object.assign(i ? Object.create(r) : r, a);
        const u = this.getEnveloped(o);
        this.logger.debug("Processing GraphQL Parameters"), s = await lm({
          params: e,
          enveloped: u
        }), this.logger.debug("Processing GraphQL Parameters done.");
      }
      if (Qt(s)) {
        const a = s[Symbol.asyncIterator]();
        s = Ju(a, (u) => u, (u) => {
          if (u.name === "AbortError")
            throw this.logger.debug("Request aborted"), u;
          return {
            errors: gr(u, this.maskedErrorsOpts, this.logger)
          };
        });
      }
    } catch (a) {
      s = {
        errors: gr(a, this.maskedErrorsOpts, this.logger)
      };
    }
    for (const a of this.onExecutionResultHooks)
      await a({
        result: s,
        setResult(u) {
          s = u;
        },
        request: n,
        context: o
      });
    return s;
  }
}
function dm(t) {
  const e = new fm(t);
  return gg(e, {
    fetchAPI: e.fetchAPI,
    plugins: e.plugins
  });
}
const qn = typeof performance == "object" && performance && typeof performance.now == "function" ? performance : Date, vl = /* @__PURE__ */ new Set(), ks = typeof process == "object" && process ? process : {}, Tl = (t, e, n, i) => {
  typeof ks.emitWarning == "function" ? ks.emitWarning(t, e, n, i) : console.error(`[${n}] ${e}: ${t}`);
};
let Cr = globalThis.AbortController, Ca = globalThis.AbortSignal;
var Ga;
if (typeof Cr > "u") {
  Ca = class {
    constructor() {
      U(this, "onabort");
      U(this, "_onabort", []);
      U(this, "reason");
      U(this, "aborted", !1);
    }
    addEventListener(i, r) {
      this._onabort.push(r);
    }
  }, Cr = class {
    constructor() {
      U(this, "signal", new Ca());
      e();
    }
    abort(i) {
      var r, s;
      if (!this.signal.aborted) {
        this.signal.reason = i, this.signal.aborted = !0;
        for (const o of this.signal._onabort)
          o(i);
        (s = (r = this.signal).onabort) == null || s.call(r, i);
      }
    }
  };
  let t = ((Ga = ks.env) == null ? void 0 : Ga.LRU_CACHE_IGNORE_AC_WARNING) !== "1";
  const e = () => {
    t && (t = !1, Tl("AbortController is not defined. If using lru-cache in node 14, load an AbortController polyfill from the `node-abort-controller` package. A minimal polyfill is provided for use by LRUCache.fetch(), but it should not be relied upon in other contexts (eg, passing it to other APIs that use AbortController/AbortSignal might have undesirable effects). You may disable this with LRU_CACHE_IGNORE_AC_WARNING=1 in the env.", "NO_ABORT_CONTROLLER", "ENOTSUP", e));
  };
}
const hm = (t) => !vl.has(t), ln = (t) => t && t === Math.floor(t) && t > 0 && isFinite(t), Sl = (t) => ln(t) ? t <= Math.pow(2, 8) ? Uint8Array : t <= Math.pow(2, 16) ? Uint16Array : t <= Math.pow(2, 32) ? Uint32Array : t <= Number.MAX_SAFE_INTEGER ? Er : null : null;
class Er extends Array {
  constructor(e) {
    super(e), this.fill(0);
  }
}
var ni;
const Nn = class Nn {
  constructor(e, n) {
    U(this, "heap");
    U(this, "length");
    if (!l(Nn, ni))
      throw new TypeError("instantiate Stack using Stack.create(n)");
    this.heap = new n(e), this.length = 0;
  }
  static create(e) {
    const n = Sl(e);
    if (!n)
      return [];
    $(Nn, ni, !0);
    const i = new Nn(e, n);
    return $(Nn, ni, !1), i;
  }
  push(e) {
    this.heap[this.length++] = e;
  }
  pop() {
    return this.heap[--this.length];
  }
};
ni = new WeakMap(), // private constructor
H(Nn, ni, !1);
let Ds = Nn;
var qa, za, xt, ut, Ft, Rt, ii, ri, Oe, Lt, Se, he, te, He, lt, qe, Ce, Ct, ke, kt, Dt, ct, $t, mn, Ye, B, js, Ln, tn, Pi, ft, _l, Cn, si, Mi, cn, fn, Ps, vr, Tr, fe, Ms, Ai, dn, Us;
const yo = class yo {
  constructor(e) {
    H(this, B);
    // options that cannot be changed without disaster
    H(this, xt);
    H(this, ut);
    H(this, Ft);
    H(this, Rt);
    H(this, ii);
    H(this, ri);
    /**
     * {@link LRUCache.OptionsBase.ttl}
     */
    U(this, "ttl");
    /**
     * {@link LRUCache.OptionsBase.ttlResolution}
     */
    U(this, "ttlResolution");
    /**
     * {@link LRUCache.OptionsBase.ttlAutopurge}
     */
    U(this, "ttlAutopurge");
    /**
     * {@link LRUCache.OptionsBase.updateAgeOnGet}
     */
    U(this, "updateAgeOnGet");
    /**
     * {@link LRUCache.OptionsBase.updateAgeOnHas}
     */
    U(this, "updateAgeOnHas");
    /**
     * {@link LRUCache.OptionsBase.allowStale}
     */
    U(this, "allowStale");
    /**
     * {@link LRUCache.OptionsBase.noDisposeOnSet}
     */
    U(this, "noDisposeOnSet");
    /**
     * {@link LRUCache.OptionsBase.noUpdateTTL}
     */
    U(this, "noUpdateTTL");
    /**
     * {@link LRUCache.OptionsBase.maxEntrySize}
     */
    U(this, "maxEntrySize");
    /**
     * {@link LRUCache.OptionsBase.sizeCalculation}
     */
    U(this, "sizeCalculation");
    /**
     * {@link LRUCache.OptionsBase.noDeleteOnFetchRejection}
     */
    U(this, "noDeleteOnFetchRejection");
    /**
     * {@link LRUCache.OptionsBase.noDeleteOnStaleGet}
     */
    U(this, "noDeleteOnStaleGet");
    /**
     * {@link LRUCache.OptionsBase.allowStaleOnFetchAbort}
     */
    U(this, "allowStaleOnFetchAbort");
    /**
     * {@link LRUCache.OptionsBase.allowStaleOnFetchRejection}
     */
    U(this, "allowStaleOnFetchRejection");
    /**
     * {@link LRUCache.OptionsBase.ignoreFetchAbort}
     */
    U(this, "ignoreFetchAbort");
    // computed properties
    H(this, Oe);
    H(this, Lt);
    H(this, Se);
    H(this, he);
    H(this, te);
    H(this, He);
    H(this, lt);
    H(this, qe);
    H(this, Ce);
    H(this, Ct);
    H(this, ke);
    H(this, kt);
    H(this, Dt);
    H(this, ct);
    H(this, $t);
    H(this, mn);
    H(this, Ye);
    // conditionally set private methods related to TTL
    H(this, Ln, () => {
    });
    H(this, tn, () => {
    });
    H(this, Pi, () => {
    });
    /* c8 ignore stop */
    H(this, ft, () => !1);
    H(this, Cn, (e) => {
    });
    H(this, si, (e, n, i) => {
    });
    H(this, Mi, (e, n, i, r) => {
      if (i || r)
        throw new TypeError("cannot set size without setting maxSize or maxEntrySize on cache");
      return 0;
    });
    /**
     * A String value that is used in the creation of the default string
     * description of an object. Called by the built-in method
     * `Object.prototype.toString`.
     */
    U(this, qa, "LRUCache");
    const { max: n = 0, ttl: i, ttlResolution: r = 1, ttlAutopurge: s, updateAgeOnGet: o, updateAgeOnHas: a, allowStale: u, dispose: c, disposeAfter: f, noDisposeOnSet: g, noUpdateTTL: p, maxSize: v = 0, maxEntrySize: w = 0, sizeCalculation: R, fetchMethod: x, memoMethod: y, noDeleteOnFetchRejection: S, noDeleteOnStaleGet: A, allowStaleOnFetchRejection: O, allowStaleOnFetchAbort: C, ignoreFetchAbort: T } = e;
    if (n !== 0 && !ln(n))
      throw new TypeError("max option must be a nonnegative integer");
    const _ = n ? Sl(n) : Array;
    if (!_)
      throw new Error("invalid max value: " + n);
    if ($(this, xt, n), $(this, ut, v), this.maxEntrySize = w || l(this, ut), this.sizeCalculation = R, this.sizeCalculation) {
      if (!l(this, ut) && !this.maxEntrySize)
        throw new TypeError("cannot set sizeCalculation without setting maxSize or maxEntrySize");
      if (typeof this.sizeCalculation != "function")
        throw new TypeError("sizeCalculation set to non-function");
    }
    if (y !== void 0 && typeof y != "function")
      throw new TypeError("memoMethod must be a function if defined");
    if ($(this, ri, y), x !== void 0 && typeof x != "function")
      throw new TypeError("fetchMethod must be a function if specified");
    if ($(this, ii, x), $(this, mn, !!x), $(this, Se, /* @__PURE__ */ new Map()), $(this, he, new Array(n).fill(void 0)), $(this, te, new Array(n).fill(void 0)), $(this, He, new _(n)), $(this, lt, new _(n)), $(this, qe, 0), $(this, Ce, 0), $(this, Ct, Ds.create(n)), $(this, Oe, 0), $(this, Lt, 0), typeof c == "function" && $(this, Ft, c), typeof f == "function" ? ($(this, Rt, f), $(this, ke, [])) : ($(this, Rt, void 0), $(this, ke, void 0)), $(this, $t, !!l(this, Ft)), $(this, Ye, !!l(this, Rt)), this.noDisposeOnSet = !!g, this.noUpdateTTL = !!p, this.noDeleteOnFetchRejection = !!S, this.allowStaleOnFetchRejection = !!O, this.allowStaleOnFetchAbort = !!C, this.ignoreFetchAbort = !!T, this.maxEntrySize !== 0) {
      if (l(this, ut) !== 0 && !ln(l(this, ut)))
        throw new TypeError("maxSize must be a positive integer if specified");
      if (!ln(this.maxEntrySize))
        throw new TypeError("maxEntrySize must be a positive integer if specified");
      k(this, B, _l).call(this);
    }
    if (this.allowStale = !!u, this.noDeleteOnStaleGet = !!A, this.updateAgeOnGet = !!o, this.updateAgeOnHas = !!a, this.ttlResolution = ln(r) || r === 0 ? r : 1, this.ttlAutopurge = !!s, this.ttl = i || 0, this.ttl) {
      if (!ln(this.ttl))
        throw new TypeError("ttl must be a positive integer if specified");
      k(this, B, js).call(this);
    }
    if (l(this, xt) === 0 && this.ttl === 0 && l(this, ut) === 0)
      throw new TypeError("At least one of max, maxSize, or ttl is required");
    if (!this.ttlAutopurge && !l(this, xt) && !l(this, ut)) {
      const m = "LRU_CACHE_UNBOUNDED";
      hm(m) && (vl.add(m), Tl("TTL caching without ttlAutopurge, max, or maxSize can result in unbounded memory consumption.", "UnboundedCacheWarning", m, yo));
    }
  }
  /**
   * Do not call this method unless you need to inspect the
   * inner workings of the cache.  If anything returned by this
   * object is modified in any way, strange breakage may occur.
   *
   * These fields are private for a reason!
   *
   * @internal
   */
  static unsafeExposeInternals(e) {
    return {
      // properties
      starts: l(e, Dt),
      ttls: l(e, ct),
      sizes: l(e, kt),
      keyMap: l(e, Se),
      keyList: l(e, he),
      valList: l(e, te),
      next: l(e, He),
      prev: l(e, lt),
      get head() {
        return l(e, qe);
      },
      get tail() {
        return l(e, Ce);
      },
      free: l(e, Ct),
      // methods
      isBackgroundFetch: (n) => {
        var i;
        return k(i = e, B, fe).call(i, n);
      },
      backgroundFetch: (n, i, r, s) => {
        var o;
        return k(o = e, B, Tr).call(o, n, i, r, s);
      },
      moveToTail: (n) => {
        var i;
        return k(i = e, B, Ai).call(i, n);
      },
      indexes: (n) => {
        var i;
        return k(i = e, B, cn).call(i, n);
      },
      rindexes: (n) => {
        var i;
        return k(i = e, B, fn).call(i, n);
      },
      isStale: (n) => {
        var i;
        return l(i = e, ft).call(i, n);
      }
    };
  }
  // Protected read-only members
  /**
   * {@link LRUCache.OptionsBase.max} (read-only)
   */
  get max() {
    return l(this, xt);
  }
  /**
   * {@link LRUCache.OptionsBase.maxSize} (read-only)
   */
  get maxSize() {
    return l(this, ut);
  }
  /**
   * The total computed size of items in the cache (read-only)
   */
  get calculatedSize() {
    return l(this, Lt);
  }
  /**
   * The number of items stored in the cache (read-only)
   */
  get size() {
    return l(this, Oe);
  }
  /**
   * {@link LRUCache.OptionsBase.fetchMethod} (read-only)
   */
  get fetchMethod() {
    return l(this, ii);
  }
  get memoMethod() {
    return l(this, ri);
  }
  /**
   * {@link LRUCache.OptionsBase.dispose} (read-only)
   */
  get dispose() {
    return l(this, Ft);
  }
  /**
   * {@link LRUCache.OptionsBase.disposeAfter} (read-only)
   */
  get disposeAfter() {
    return l(this, Rt);
  }
  /**
   * Return the number of ms left in the item's TTL. If item is not in cache,
   * returns `0`. Returns `Infinity` if item is in cache without a defined TTL.
   */
  getRemainingTTL(e) {
    return l(this, Se).has(e) ? 1 / 0 : 0;
  }
  /**
   * Return a generator yielding `[key, value]` pairs,
   * in order from most recently used to least recently used.
   */
  *entries() {
    for (const e of k(this, B, cn).call(this))
      l(this, te)[e] !== void 0 && l(this, he)[e] !== void 0 && !k(this, B, fe).call(this, l(this, te)[e]) && (yield [l(this, he)[e], l(this, te)[e]]);
  }
  /**
   * Inverse order version of {@link LRUCache.entries}
   *
   * Return a generator yielding `[key, value]` pairs,
   * in order from least recently used to most recently used.
   */
  *rentries() {
    for (const e of k(this, B, fn).call(this))
      l(this, te)[e] !== void 0 && l(this, he)[e] !== void 0 && !k(this, B, fe).call(this, l(this, te)[e]) && (yield [l(this, he)[e], l(this, te)[e]]);
  }
  /**
   * Return a generator yielding the keys in the cache,
   * in order from most recently used to least recently used.
   */
  *keys() {
    for (const e of k(this, B, cn).call(this)) {
      const n = l(this, he)[e];
      n !== void 0 && !k(this, B, fe).call(this, l(this, te)[e]) && (yield n);
    }
  }
  /**
   * Inverse order version of {@link LRUCache.keys}
   *
   * Return a generator yielding the keys in the cache,
   * in order from least recently used to most recently used.
   */
  *rkeys() {
    for (const e of k(this, B, fn).call(this)) {
      const n = l(this, he)[e];
      n !== void 0 && !k(this, B, fe).call(this, l(this, te)[e]) && (yield n);
    }
  }
  /**
   * Return a generator yielding the values in the cache,
   * in order from most recently used to least recently used.
   */
  *values() {
    for (const e of k(this, B, cn).call(this))
      l(this, te)[e] !== void 0 && !k(this, B, fe).call(this, l(this, te)[e]) && (yield l(this, te)[e]);
  }
  /**
   * Inverse order version of {@link LRUCache.values}
   *
   * Return a generator yielding the values in the cache,
   * in order from least recently used to most recently used.
   */
  *rvalues() {
    for (const e of k(this, B, fn).call(this))
      l(this, te)[e] !== void 0 && !k(this, B, fe).call(this, l(this, te)[e]) && (yield l(this, te)[e]);
  }
  /**
   * Iterating over the cache itself yields the same results as
   * {@link LRUCache.entries}
   */
  [(za = Symbol.iterator, qa = Symbol.toStringTag, za)]() {
    return this.entries();
  }
  /**
   * Find a value for which the supplied fn method returns a truthy value,
   * similar to `Array.find()`. fn is called as `fn(value, key, cache)`.
   */
  find(e, n = {}) {
    for (const i of k(this, B, cn).call(this)) {
      const r = l(this, te)[i], s = k(this, B, fe).call(this, r) ? r.__staleWhileFetching : r;
      if (s !== void 0 && e(s, l(this, he)[i], this))
        return this.get(l(this, he)[i], n);
    }
  }
  /**
   * Call the supplied function on each item in the cache, in order from most
   * recently used to least recently used.
   *
   * `fn` is called as `fn(value, key, cache)`.
   *
   * If `thisp` is provided, function will be called in the `this`-context of
   * the provided object, or the cache if no `thisp` object is provided.
   *
   * Does not update age or recenty of use, or iterate over stale values.
   */
  forEach(e, n = this) {
    for (const i of k(this, B, cn).call(this)) {
      const r = l(this, te)[i], s = k(this, B, fe).call(this, r) ? r.__staleWhileFetching : r;
      s !== void 0 && e.call(n, s, l(this, he)[i], this);
    }
  }
  /**
   * The same as {@link LRUCache.forEach} but items are iterated over in
   * reverse order.  (ie, less recently used items are iterated over first.)
   */
  rforEach(e, n = this) {
    for (const i of k(this, B, fn).call(this)) {
      const r = l(this, te)[i], s = k(this, B, fe).call(this, r) ? r.__staleWhileFetching : r;
      s !== void 0 && e.call(n, s, l(this, he)[i], this);
    }
  }
  /**
   * Delete any stale entries. Returns true if anything was removed,
   * false otherwise.
   */
  purgeStale() {
    let e = !1;
    for (const n of k(this, B, fn).call(this, { allowStale: !0 }))
      l(this, ft).call(this, n) && (k(this, B, dn).call(this, l(this, he)[n], "expire"), e = !0);
    return e;
  }
  /**
   * Get the extended info about a given entry, to get its value, size, and
   * TTL info simultaneously. Returns `undefined` if the key is not present.
   *
   * Unlike {@link LRUCache#dump}, which is designed to be portable and survive
   * serialization, the `start` value is always the current timestamp, and the
   * `ttl` is a calculated remaining time to live (negative if expired).
   *
   * Always returns stale values, if their info is found in the cache, so be
   * sure to check for expirations (ie, a negative {@link LRUCache.Entry#ttl})
   * if relevant.
   */
  info(e) {
    const n = l(this, Se).get(e);
    if (n === void 0)
      return;
    const i = l(this, te)[n], r = k(this, B, fe).call(this, i) ? i.__staleWhileFetching : i;
    if (r === void 0)
      return;
    const s = { value: r };
    if (l(this, ct) && l(this, Dt)) {
      const o = l(this, ct)[n], a = l(this, Dt)[n];
      if (o && a) {
        const u = o - (qn.now() - a);
        s.ttl = u, s.start = Date.now();
      }
    }
    return l(this, kt) && (s.size = l(this, kt)[n]), s;
  }
  /**
   * Return an array of [key, {@link LRUCache.Entry}] tuples which can be
   * passed to {@link LRLUCache#load}.
   *
   * The `start` fields are calculated relative to a portable `Date.now()`
   * timestamp, even if `performance.now()` is available.
   *
   * Stale entries are always included in the `dump`, even if
   * {@link LRUCache.OptionsBase.allowStale} is false.
   *
   * Note: this returns an actual array, not a generator, so it can be more
   * easily passed around.
   */
  dump() {
    const e = [];
    for (const n of k(this, B, cn).call(this, { allowStale: !0 })) {
      const i = l(this, he)[n], r = l(this, te)[n], s = k(this, B, fe).call(this, r) ? r.__staleWhileFetching : r;
      if (s === void 0 || i === void 0)
        continue;
      const o = { value: s };
      if (l(this, ct) && l(this, Dt)) {
        o.ttl = l(this, ct)[n];
        const a = qn.now() - l(this, Dt)[n];
        o.start = Math.floor(Date.now() - a);
      }
      l(this, kt) && (o.size = l(this, kt)[n]), e.unshift([i, o]);
    }
    return e;
  }
  /**
   * Reset the cache and load in the items in entries in the order listed.
   *
   * The shape of the resulting cache may be different if the same options are
   * not used in both caches.
   *
   * The `start` fields are assumed to be calculated relative to a portable
   * `Date.now()` timestamp, even if `performance.now()` is available.
   */
  load(e) {
    this.clear();
    for (const [n, i] of e) {
      if (i.start) {
        const r = Date.now() - i.start;
        i.start = qn.now() - r;
      }
      this.set(n, i.value, i);
    }
  }
  /**
   * Add a value to the cache.
   *
   * Note: if `undefined` is specified as a value, this is an alias for
   * {@link LRUCache#delete}
   *
   * Fields on the {@link LRUCache.SetOptions} options param will override
   * their corresponding values in the constructor options for the scope
   * of this single `set()` operation.
   *
   * If `start` is provided, then that will set the effective start
   * time for the TTL calculation. Note that this must be a previous
   * value of `performance.now()` if supported, or a previous value of
   * `Date.now()` if not.
   *
   * Options object may also include `size`, which will prevent
   * calling the `sizeCalculation` function and just use the specified
   * number if it is a positive integer, and `noDisposeOnSet` which
   * will prevent calling a `dispose` function in the case of
   * overwrites.
   *
   * If the `size` (or return value of `sizeCalculation`) for a given
   * entry is greater than `maxEntrySize`, then the item will not be
   * added to the cache.
   *
   * Will update the recency of the entry.
   *
   * If the value is `undefined`, then this is an alias for
   * `cache.delete(key)`. `undefined` is never stored in the cache.
   */
  set(e, n, i = {}) {
    var p, v, w, R, x;
    if (n === void 0)
      return this.delete(e), this;
    const { ttl: r = this.ttl, start: s, noDisposeOnSet: o = this.noDisposeOnSet, sizeCalculation: a = this.sizeCalculation, status: u } = i;
    let { noUpdateTTL: c = this.noUpdateTTL } = i;
    const f = l(this, Mi).call(this, e, n, i.size || 0, a);
    if (this.maxEntrySize && f > this.maxEntrySize)
      return u && (u.set = "miss", u.maxEntrySizeExceeded = !0), k(this, B, dn).call(this, e, "set"), this;
    let g = l(this, Oe) === 0 ? void 0 : l(this, Se).get(e);
    if (g === void 0)
      g = l(this, Oe) === 0 ? l(this, Ce) : l(this, Ct).length !== 0 ? l(this, Ct).pop() : l(this, Oe) === l(this, xt) ? k(this, B, vr).call(this, !1) : l(this, Oe), l(this, he)[g] = e, l(this, te)[g] = n, l(this, Se).set(e, g), l(this, He)[l(this, Ce)] = g, l(this, lt)[g] = l(this, Ce), $(this, Ce, g), Sn(this, Oe)._++, l(this, si).call(this, g, f, u), u && (u.set = "add"), c = !1;
    else {
      k(this, B, Ai).call(this, g);
      const y = l(this, te)[g];
      if (n !== y) {
        if (l(this, mn) && k(this, B, fe).call(this, y)) {
          y.__abortController.abort(new Error("replaced"));
          const { __staleWhileFetching: S } = y;
          S !== void 0 && !o && (l(this, $t) && ((p = l(this, Ft)) == null || p.call(this, S, e, "set")), l(this, Ye) && ((v = l(this, ke)) == null || v.push([S, e, "set"])));
        } else o || (l(this, $t) && ((w = l(this, Ft)) == null || w.call(this, y, e, "set")), l(this, Ye) && ((R = l(this, ke)) == null || R.push([y, e, "set"])));
        if (l(this, Cn).call(this, g), l(this, si).call(this, g, f, u), l(this, te)[g] = n, u) {
          u.set = "replace";
          const S = y && k(this, B, fe).call(this, y) ? y.__staleWhileFetching : y;
          S !== void 0 && (u.oldValue = S);
        }
      } else u && (u.set = "update");
    }
    if (r !== 0 && !l(this, ct) && k(this, B, js).call(this), l(this, ct) && (c || l(this, Pi).call(this, g, r, s), u && l(this, tn).call(this, u, g)), !o && l(this, Ye) && l(this, ke)) {
      const y = l(this, ke);
      let S;
      for (; S = y == null ? void 0 : y.shift(); )
        (x = l(this, Rt)) == null || x.call(this, ...S);
    }
    return this;
  }
  /**
   * Evict the least recently used item, returning its value or
   * `undefined` if cache is empty.
   */
  pop() {
    var e;
    try {
      for (; l(this, Oe); ) {
        const n = l(this, te)[l(this, qe)];
        if (k(this, B, vr).call(this, !0), k(this, B, fe).call(this, n)) {
          if (n.__staleWhileFetching)
            return n.__staleWhileFetching;
        } else if (n !== void 0)
          return n;
      }
    } finally {
      if (l(this, Ye) && l(this, ke)) {
        const n = l(this, ke);
        let i;
        for (; i = n == null ? void 0 : n.shift(); )
          (e = l(this, Rt)) == null || e.call(this, ...i);
      }
    }
  }
  /**
   * Check if a key is in the cache, without updating the recency of use.
   * Will return false if the item is stale, even though it is technically
   * in the cache.
   *
   * Check if a key is in the cache, without updating the recency of
   * use. Age is updated if {@link LRUCache.OptionsBase.updateAgeOnHas} is set
   * to `true` in either the options or the constructor.
   *
   * Will return `false` if the item is stale, even though it is technically in
   * the cache. The difference can be determined (if it matters) by using a
   * `status` argument, and inspecting the `has` field.
   *
   * Will not update item age unless
   * {@link LRUCache.OptionsBase.updateAgeOnHas} is set.
   */
  has(e, n = {}) {
    const { updateAgeOnHas: i = this.updateAgeOnHas, status: r } = n, s = l(this, Se).get(e);
    if (s !== void 0) {
      const o = l(this, te)[s];
      if (k(this, B, fe).call(this, o) && o.__staleWhileFetching === void 0)
        return !1;
      if (l(this, ft).call(this, s))
        r && (r.has = "stale", l(this, tn).call(this, r, s));
      else return i && l(this, Ln).call(this, s), r && (r.has = "hit", l(this, tn).call(this, r, s)), !0;
    } else r && (r.has = "miss");
    return !1;
  }
  /**
   * Like {@link LRUCache#get} but doesn't update recency or delete stale
   * items.
   *
   * Returns `undefined` if the item is stale, unless
   * {@link LRUCache.OptionsBase.allowStale} is set.
   */
  peek(e, n = {}) {
    const { allowStale: i = this.allowStale } = n, r = l(this, Se).get(e);
    if (r === void 0 || !i && l(this, ft).call(this, r))
      return;
    const s = l(this, te)[r];
    return k(this, B, fe).call(this, s) ? s.__staleWhileFetching : s;
  }
  async fetch(e, n = {}) {
    const {
      // get options
      allowStale: i = this.allowStale,
      updateAgeOnGet: r = this.updateAgeOnGet,
      noDeleteOnStaleGet: s = this.noDeleteOnStaleGet,
      // set options
      ttl: o = this.ttl,
      noDisposeOnSet: a = this.noDisposeOnSet,
      size: u = 0,
      sizeCalculation: c = this.sizeCalculation,
      noUpdateTTL: f = this.noUpdateTTL,
      // fetch exclusive options
      noDeleteOnFetchRejection: g = this.noDeleteOnFetchRejection,
      allowStaleOnFetchRejection: p = this.allowStaleOnFetchRejection,
      ignoreFetchAbort: v = this.ignoreFetchAbort,
      allowStaleOnFetchAbort: w = this.allowStaleOnFetchAbort,
      context: R,
      forceRefresh: x = !1,
      status: y,
      signal: S
    } = n;
    if (!l(this, mn))
      return y && (y.fetch = "get"), this.get(e, {
        allowStale: i,
        updateAgeOnGet: r,
        noDeleteOnStaleGet: s,
        status: y
      });
    const A = {
      allowStale: i,
      updateAgeOnGet: r,
      noDeleteOnStaleGet: s,
      ttl: o,
      noDisposeOnSet: a,
      size: u,
      sizeCalculation: c,
      noUpdateTTL: f,
      noDeleteOnFetchRejection: g,
      allowStaleOnFetchRejection: p,
      allowStaleOnFetchAbort: w,
      ignoreFetchAbort: v,
      status: y,
      signal: S
    };
    let O = l(this, Se).get(e);
    if (O === void 0) {
      y && (y.fetch = "miss");
      const C = k(this, B, Tr).call(this, e, O, A, R);
      return C.__returned = C;
    } else {
      const C = l(this, te)[O];
      if (k(this, B, fe).call(this, C)) {
        const d = i && C.__staleWhileFetching !== void 0;
        return y && (y.fetch = "inflight", d && (y.returnedStale = !0)), d ? C.__staleWhileFetching : C.__returned = C;
      }
      const T = l(this, ft).call(this, O);
      if (!x && !T)
        return y && (y.fetch = "hit"), k(this, B, Ai).call(this, O), r && l(this, Ln).call(this, O), y && l(this, tn).call(this, y, O), C;
      const _ = k(this, B, Tr).call(this, e, O, A, R), b = _.__staleWhileFetching !== void 0 && i;
      return y && (y.fetch = T ? "stale" : "refresh", b && T && (y.returnedStale = !0)), b ? _.__staleWhileFetching : _.__returned = _;
    }
  }
  async forceFetch(e, n = {}) {
    const i = await this.fetch(e, n);
    if (i === void 0)
      throw new Error("fetch() returned undefined");
    return i;
  }
  memo(e, n = {}) {
    const i = l(this, ri);
    if (!i)
      throw new Error("no memoMethod provided to constructor");
    const { context: r, forceRefresh: s, ...o } = n, a = this.get(e, o);
    if (!s && a !== void 0)
      return a;
    const u = i(e, a, {
      options: o,
      context: r
    });
    return this.set(e, u, o), u;
  }
  /**
   * Return a value from the cache. Will update the recency of the cache
   * entry found.
   *
   * If the key is not found, get() will return `undefined`.
   */
  get(e, n = {}) {
    const { allowStale: i = this.allowStale, updateAgeOnGet: r = this.updateAgeOnGet, noDeleteOnStaleGet: s = this.noDeleteOnStaleGet, status: o } = n, a = l(this, Se).get(e);
    if (a !== void 0) {
      const u = l(this, te)[a], c = k(this, B, fe).call(this, u);
      return o && l(this, tn).call(this, o, a), l(this, ft).call(this, a) ? (o && (o.get = "stale"), c ? (o && i && u.__staleWhileFetching !== void 0 && (o.returnedStale = !0), i ? u.__staleWhileFetching : void 0) : (s || k(this, B, dn).call(this, e, "expire"), o && i && (o.returnedStale = !0), i ? u : void 0)) : (o && (o.get = "hit"), c ? u.__staleWhileFetching : (k(this, B, Ai).call(this, a), r && l(this, Ln).call(this, a), u));
    } else o && (o.get = "miss");
  }
  /**
   * Deletes a key out of the cache.
   *
   * Returns true if the key was deleted, false otherwise.
   */
  delete(e) {
    return k(this, B, dn).call(this, e, "delete");
  }
  /**
   * Clear the cache entirely, throwing away all values.
   */
  clear() {
    return k(this, B, Us).call(this, "delete");
  }
};
xt = new WeakMap(), ut = new WeakMap(), Ft = new WeakMap(), Rt = new WeakMap(), ii = new WeakMap(), ri = new WeakMap(), Oe = new WeakMap(), Lt = new WeakMap(), Se = new WeakMap(), he = new WeakMap(), te = new WeakMap(), He = new WeakMap(), lt = new WeakMap(), qe = new WeakMap(), Ce = new WeakMap(), Ct = new WeakMap(), ke = new WeakMap(), kt = new WeakMap(), Dt = new WeakMap(), ct = new WeakMap(), $t = new WeakMap(), mn = new WeakMap(), Ye = new WeakMap(), B = new WeakSet(), js = function() {
  const e = new Er(l(this, xt)), n = new Er(l(this, xt));
  $(this, ct, e), $(this, Dt, n), $(this, Pi, (s, o, a = qn.now()) => {
    if (n[s] = o !== 0 ? a : 0, e[s] = o, o !== 0 && this.ttlAutopurge) {
      const u = setTimeout(() => {
        l(this, ft).call(this, s) && k(this, B, dn).call(this, l(this, he)[s], "expire");
      }, o + 1);
      u.unref && u.unref();
    }
  }), $(this, Ln, (s) => {
    n[s] = e[s] !== 0 ? qn.now() : 0;
  }), $(this, tn, (s, o) => {
    if (e[o]) {
      const a = e[o], u = n[o];
      if (!a || !u)
        return;
      s.ttl = a, s.start = u, s.now = i || r();
      const c = s.now - u;
      s.remainingTTL = a - c;
    }
  });
  let i = 0;
  const r = () => {
    const s = qn.now();
    if (this.ttlResolution > 0) {
      i = s;
      const o = setTimeout(() => i = 0, this.ttlResolution);
      o.unref && o.unref();
    }
    return s;
  };
  this.getRemainingTTL = (s) => {
    const o = l(this, Se).get(s);
    if (o === void 0)
      return 0;
    const a = e[o], u = n[o];
    if (!a || !u)
      return 1 / 0;
    const c = (i || r()) - u;
    return a - c;
  }, $(this, ft, (s) => {
    const o = n[s], a = e[s];
    return !!a && !!o && (i || r()) - o > a;
  });
}, Ln = new WeakMap(), tn = new WeakMap(), Pi = new WeakMap(), ft = new WeakMap(), _l = function() {
  const e = new Er(l(this, xt));
  $(this, Lt, 0), $(this, kt, e), $(this, Cn, (n) => {
    $(this, Lt, l(this, Lt) - e[n]), e[n] = 0;
  }), $(this, Mi, (n, i, r, s) => {
    if (k(this, B, fe).call(this, i))
      return 0;
    if (!ln(r))
      if (s) {
        if (typeof s != "function")
          throw new TypeError("sizeCalculation must be a function");
        if (r = s(i, n), !ln(r))
          throw new TypeError("sizeCalculation return invalid (expect positive integer)");
      } else
        throw new TypeError("invalid size value (must be positive integer). When maxSize or maxEntrySize is used, sizeCalculation or size must be set.");
    return r;
  }), $(this, si, (n, i, r) => {
    if (e[n] = i, l(this, ut)) {
      const s = l(this, ut) - e[n];
      for (; l(this, Lt) > s; )
        k(this, B, vr).call(this, !0);
    }
    $(this, Lt, l(this, Lt) + e[n]), r && (r.entrySize = i, r.totalCalculatedSize = l(this, Lt));
  });
}, Cn = new WeakMap(), si = new WeakMap(), Mi = new WeakMap(), cn = function* ({ allowStale: e = this.allowStale } = {}) {
  if (l(this, Oe))
    for (let n = l(this, Ce); !(!k(this, B, Ps).call(this, n) || ((e || !l(this, ft).call(this, n)) && (yield n), n === l(this, qe))); )
      n = l(this, lt)[n];
}, fn = function* ({ allowStale: e = this.allowStale } = {}) {
  if (l(this, Oe))
    for (let n = l(this, qe); !(!k(this, B, Ps).call(this, n) || ((e || !l(this, ft).call(this, n)) && (yield n), n === l(this, Ce))); )
      n = l(this, He)[n];
}, Ps = function(e) {
  return e !== void 0 && l(this, Se).get(l(this, he)[e]) === e;
}, vr = function(e) {
  var s, o;
  const n = l(this, qe), i = l(this, he)[n], r = l(this, te)[n];
  return l(this, mn) && k(this, B, fe).call(this, r) ? r.__abortController.abort(new Error("evicted")) : (l(this, $t) || l(this, Ye)) && (l(this, $t) && ((s = l(this, Ft)) == null || s.call(this, r, i, "evict")), l(this, Ye) && ((o = l(this, ke)) == null || o.push([r, i, "evict"]))), l(this, Cn).call(this, n), e && (l(this, he)[n] = void 0, l(this, te)[n] = void 0, l(this, Ct).push(n)), l(this, Oe) === 1 ? ($(this, qe, $(this, Ce, 0)), l(this, Ct).length = 0) : $(this, qe, l(this, He)[n]), l(this, Se).delete(i), Sn(this, Oe)._--, n;
}, Tr = function(e, n, i, r) {
  const s = n === void 0 ? void 0 : l(this, te)[n];
  if (k(this, B, fe).call(this, s))
    return s;
  const o = new Cr(), { signal: a } = i;
  a == null || a.addEventListener("abort", () => o.abort(a.reason), {
    signal: o.signal
  });
  const u = {
    signal: o.signal,
    options: i,
    context: r
  }, c = (R, x = !1) => {
    const { aborted: y } = o.signal, S = i.ignoreFetchAbort && R !== void 0;
    if (i.status && (y && !x ? (i.status.fetchAborted = !0, i.status.fetchError = o.signal.reason, S && (i.status.fetchAbortIgnored = !0)) : i.status.fetchResolved = !0), y && !S && !x)
      return g(o.signal.reason);
    const A = v;
    return l(this, te)[n] === v && (R === void 0 ? A.__staleWhileFetching ? l(this, te)[n] = A.__staleWhileFetching : k(this, B, dn).call(this, e, "fetch") : (i.status && (i.status.fetchUpdated = !0), this.set(e, R, u.options))), R;
  }, f = (R) => (i.status && (i.status.fetchRejected = !0, i.status.fetchError = R), g(R)), g = (R) => {
    const { aborted: x } = o.signal, y = x && i.allowStaleOnFetchAbort, S = y || i.allowStaleOnFetchRejection, A = S || i.noDeleteOnFetchRejection, O = v;
    if (l(this, te)[n] === v && (!A || O.__staleWhileFetching === void 0 ? k(this, B, dn).call(this, e, "fetch") : y || (l(this, te)[n] = O.__staleWhileFetching)), S)
      return i.status && O.__staleWhileFetching !== void 0 && (i.status.returnedStale = !0), O.__staleWhileFetching;
    if (O.__returned === O)
      throw R;
  }, p = (R, x) => {
    var S;
    const y = (S = l(this, ii)) == null ? void 0 : S.call(this, e, s, u);
    y && y instanceof Promise && y.then((A) => R(A === void 0 ? void 0 : A), x), o.signal.addEventListener("abort", () => {
      (!i.ignoreFetchAbort || i.allowStaleOnFetchAbort) && (R(void 0), i.allowStaleOnFetchAbort && (R = (A) => c(A, !0)));
    });
  };
  i.status && (i.status.fetchDispatched = !0);
  const v = new Promise(p).then(c, f), w = Object.assign(v, {
    __abortController: o,
    __staleWhileFetching: s,
    __returned: void 0
  });
  return n === void 0 ? (this.set(e, w, { ...u.options, status: void 0 }), n = l(this, Se).get(e)) : l(this, te)[n] = w, w;
}, fe = function(e) {
  if (!l(this, mn))
    return !1;
  const n = e;
  return !!n && n instanceof Promise && n.hasOwnProperty("__staleWhileFetching") && n.__abortController instanceof Cr;
}, Ms = function(e, n) {
  l(this, lt)[n] = e, l(this, He)[e] = n;
}, Ai = function(e) {
  e !== l(this, Ce) && (e === l(this, qe) ? $(this, qe, l(this, He)[e]) : k(this, B, Ms).call(this, l(this, lt)[e], l(this, He)[e]), k(this, B, Ms).call(this, l(this, Ce), e), $(this, Ce, e));
}, dn = function(e, n) {
  var r, s, o, a;
  let i = !1;
  if (l(this, Oe) !== 0) {
    const u = l(this, Se).get(e);
    if (u !== void 0)
      if (i = !0, l(this, Oe) === 1)
        k(this, B, Us).call(this, n);
      else {
        l(this, Cn).call(this, u);
        const c = l(this, te)[u];
        if (k(this, B, fe).call(this, c) ? c.__abortController.abort(new Error("deleted")) : (l(this, $t) || l(this, Ye)) && (l(this, $t) && ((r = l(this, Ft)) == null || r.call(this, c, e, n)), l(this, Ye) && ((s = l(this, ke)) == null || s.push([c, e, n]))), l(this, Se).delete(e), l(this, he)[u] = void 0, l(this, te)[u] = void 0, u === l(this, Ce))
          $(this, Ce, l(this, lt)[u]);
        else if (u === l(this, qe))
          $(this, qe, l(this, He)[u]);
        else {
          const f = l(this, lt)[u];
          l(this, He)[f] = l(this, He)[u];
          const g = l(this, He)[u];
          l(this, lt)[g] = l(this, lt)[u];
        }
        Sn(this, Oe)._--, l(this, Ct).push(u);
      }
  }
  if (l(this, Ye) && ((o = l(this, ke)) != null && o.length)) {
    const u = l(this, ke);
    let c;
    for (; c = u == null ? void 0 : u.shift(); )
      (a = l(this, Rt)) == null || a.call(this, ...c);
  }
  return i;
}, Us = function(e) {
  var n, i, r;
  for (const s of k(this, B, fn).call(this, { allowStale: !0 })) {
    const o = l(this, te)[s];
    if (k(this, B, fe).call(this, o))
      o.__abortController.abort(new Error("deleted"));
    else {
      const a = l(this, he)[s];
      l(this, $t) && ((n = l(this, Ft)) == null || n.call(this, o, a, e)), l(this, Ye) && ((i = l(this, ke)) == null || i.push([o, a, e]));
    }
  }
  if (l(this, Se).clear(), l(this, te).fill(void 0), l(this, he).fill(void 0), l(this, ct) && l(this, Dt) && (l(this, ct).fill(0), l(this, Dt).fill(0)), l(this, kt) && l(this, kt).fill(0), $(this, qe, 0), $(this, Ce, 0), l(this, Ct).length = 0, $(this, Lt, 0), $(this, Oe, 0), l(this, Ye) && l(this, ke)) {
    const s = l(this, ke);
    let o;
    for (; o = s == null ? void 0 : s.shift(); )
      (r = l(this, Rt)) == null || r.call(this, ...o);
  }
};
let $s = yo;
function fr(t) {
  throw new Error('Could not dynamically require "' + t + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}
var Il = { exports: {} };
(function(t, e) {
  (function(n) {
    t.exports = n();
  })(function() {
    return function n(i, r, s) {
      function o(c, f) {
        if (!r[c]) {
          if (!i[c]) {
            var g = typeof fr == "function" && fr;
            if (!f && g) return g(c, !0);
            if (a) return a(c, !0);
            throw new Error("Cannot find module '" + c + "'");
          }
          f = r[c] = { exports: {} }, i[c][0].call(f.exports, function(p) {
            var v = i[c][1][p];
            return o(v || p);
          }, f, f.exports, n, i, r, s);
        }
        return r[c].exports;
      }
      for (var a = typeof fr == "function" && fr, u = 0; u < s.length; u++) o(s[u]);
      return o;
    }({ 1: [function(n, i, r) {
      (function(s, o, a, u, c, f, g, p, v) {
        var w = n("crypto");
        function R(T, _) {
          _ = S(T, _);
          var m;
          return (m = _.algorithm !== "passthrough" ? w.createHash(_.algorithm) : new C()).write === void 0 && (m.write = m.update, m.end = m.update), O(_, m).dispatch(T), m.update || m.end(""), m.digest ? m.digest(_.encoding === "buffer" ? void 0 : _.encoding) : (T = m.read(), _.encoding !== "buffer" ? T.toString(_.encoding) : T);
        }
        (r = i.exports = R).sha1 = function(T) {
          return R(T);
        }, r.keys = function(T) {
          return R(T, { excludeValues: !0, algorithm: "sha1", encoding: "hex" });
        }, r.MD5 = function(T) {
          return R(T, { algorithm: "md5", encoding: "hex" });
        }, r.keysMD5 = function(T) {
          return R(T, { algorithm: "md5", encoding: "hex", excludeValues: !0 });
        };
        var x = w.getHashes ? w.getHashes().slice() : ["sha1", "md5"], y = (x.push("passthrough"), ["buffer", "hex", "binary", "base64"]);
        function S(T, _) {
          var m = {};
          if (m.algorithm = (_ = _ || {}).algorithm || "sha1", m.encoding = _.encoding || "hex", m.excludeValues = !!_.excludeValues, m.algorithm = m.algorithm.toLowerCase(), m.encoding = m.encoding.toLowerCase(), m.ignoreUnknown = _.ignoreUnknown === !0, m.respectType = _.respectType !== !1, m.respectFunctionNames = _.respectFunctionNames !== !1, m.respectFunctionProperties = _.respectFunctionProperties !== !1, m.unorderedArrays = _.unorderedArrays === !0, m.unorderedSets = _.unorderedSets !== !1, m.unorderedObjects = _.unorderedObjects !== !1, m.replacer = _.replacer || void 0, m.excludeKeys = _.excludeKeys || void 0, T === void 0) throw new Error("Object argument required.");
          for (var b = 0; b < x.length; ++b) x[b].toLowerCase() === m.algorithm.toLowerCase() && (m.algorithm = x[b]);
          if (x.indexOf(m.algorithm) === -1) throw new Error('Algorithm "' + m.algorithm + '"  not supported. supported values: ' + x.join(", "));
          if (y.indexOf(m.encoding) === -1 && m.algorithm !== "passthrough") throw new Error('Encoding "' + m.encoding + '"  not supported. supported values: ' + y.join(", "));
          return m;
        }
        function A(T) {
          if (typeof T == "function") return /^function\s+\w*\s*\(\s*\)\s*{\s+\[native code\]\s+}$/i.exec(Function.prototype.toString.call(T)) != null;
        }
        function O(T, _, m) {
          m = m || [];
          function b(d) {
            return _.update ? _.update(d, "utf8") : _.write(d, "utf8");
          }
          return { dispatch: function(d) {
            return this["_" + ((d = T.replacer ? T.replacer(d) : d) === null ? "null" : typeof d)](d);
          }, _object: function(d) {
            var N, L = Object.prototype.toString.call(d), J = /\[object (.*)\]/i.exec(L);
            if (J = (J = J ? J[1] : "unknown:[" + L + "]").toLowerCase(), 0 <= (L = m.indexOf(d))) return this.dispatch("[CIRCULAR:" + L + "]");
            if (m.push(d), a !== void 0 && a.isBuffer && a.isBuffer(d)) return b("buffer:"), b(d);
            if (J === "object" || J === "function" || J === "asyncfunction") return L = Object.keys(d), T.unorderedObjects && (L = L.sort()), T.respectType === !1 || A(d) || L.splice(0, 0, "prototype", "__proto__", "constructor"), T.excludeKeys && (L = L.filter(function(q) {
              return !T.excludeKeys(q);
            })), b("object:" + L.length + ":"), N = this, L.forEach(function(q) {
              N.dispatch(q), b(":"), T.excludeValues || N.dispatch(d[q]), b(",");
            });
            if (!this["_" + J]) {
              if (T.ignoreUnknown) return b("[" + J + "]");
              throw new Error('Unknown object type "' + J + '"');
            }
            this["_" + J](d);
          }, _array: function(d, q) {
            q = q !== void 0 ? q : T.unorderedArrays !== !1;
            var L = this;
            if (b("array:" + d.length + ":"), !q || d.length <= 1) return d.forEach(function(Z) {
              return L.dispatch(Z);
            });
            var J = [], q = d.map(function(Z) {
              var W = new C(), ge = m.slice();
              return O(T, W, ge).dispatch(Z), J = J.concat(ge.slice(m.length)), W.read().toString();
            });
            return m = m.concat(J), q.sort(), this._array(q, !1);
          }, _date: function(d) {
            return b("date:" + d.toJSON());
          }, _symbol: function(d) {
            return b("symbol:" + d.toString());
          }, _error: function(d) {
            return b("error:" + d.toString());
          }, _boolean: function(d) {
            return b("bool:" + d.toString());
          }, _string: function(d) {
            b("string:" + d.length + ":"), b(d.toString());
          }, _function: function(d) {
            b("fn:"), A(d) ? this.dispatch("[native]") : this.dispatch(d.toString()), T.respectFunctionNames !== !1 && this.dispatch("function-name:" + String(d.name)), T.respectFunctionProperties && this._object(d);
          }, _number: function(d) {
            return b("number:" + d.toString());
          }, _xml: function(d) {
            return b("xml:" + d.toString());
          }, _null: function() {
            return b("Null");
          }, _undefined: function() {
            return b("Undefined");
          }, _regexp: function(d) {
            return b("regex:" + d.toString());
          }, _uint8array: function(d) {
            return b("uint8array:"), this.dispatch(Array.prototype.slice.call(d));
          }, _uint8clampedarray: function(d) {
            return b("uint8clampedarray:"), this.dispatch(Array.prototype.slice.call(d));
          }, _int8array: function(d) {
            return b("int8array:"), this.dispatch(Array.prototype.slice.call(d));
          }, _uint16array: function(d) {
            return b("uint16array:"), this.dispatch(Array.prototype.slice.call(d));
          }, _int16array: function(d) {
            return b("int16array:"), this.dispatch(Array.prototype.slice.call(d));
          }, _uint32array: function(d) {
            return b("uint32array:"), this.dispatch(Array.prototype.slice.call(d));
          }, _int32array: function(d) {
            return b("int32array:"), this.dispatch(Array.prototype.slice.call(d));
          }, _float32array: function(d) {
            return b("float32array:"), this.dispatch(Array.prototype.slice.call(d));
          }, _float64array: function(d) {
            return b("float64array:"), this.dispatch(Array.prototype.slice.call(d));
          }, _arraybuffer: function(d) {
            return b("arraybuffer:"), this.dispatch(new Uint8Array(d));
          }, _url: function(d) {
            return b("url:" + d.toString());
          }, _map: function(d) {
            return b("map:"), d = Array.from(d), this._array(d, T.unorderedSets !== !1);
          }, _set: function(d) {
            return b("set:"), d = Array.from(d), this._array(d, T.unorderedSets !== !1);
          }, _file: function(d) {
            return b("file:"), this.dispatch([d.name, d.size, d.type, d.lastModfied]);
          }, _blob: function() {
            if (T.ignoreUnknown) return b("[blob]");
            throw Error(`Hashing Blob objects is currently not supported
(see https://github.com/puleos/object-hash/issues/26)
Use "options.replacer" or "options.ignoreUnknown"
`);
          }, _domwindow: function() {
            return b("domwindow");
          }, _bigint: function(d) {
            return b("bigint:" + d.toString());
          }, _process: function() {
            return b("process");
          }, _timer: function() {
            return b("timer");
          }, _pipe: function() {
            return b("pipe");
          }, _tcp: function() {
            return b("tcp");
          }, _udp: function() {
            return b("udp");
          }, _tty: function() {
            return b("tty");
          }, _statwatcher: function() {
            return b("statwatcher");
          }, _securecontext: function() {
            return b("securecontext");
          }, _connection: function() {
            return b("connection");
          }, _zlib: function() {
            return b("zlib");
          }, _context: function() {
            return b("context");
          }, _nodescript: function() {
            return b("nodescript");
          }, _httpparser: function() {
            return b("httpparser");
          }, _dataview: function() {
            return b("dataview");
          }, _signal: function() {
            return b("signal");
          }, _fsevent: function() {
            return b("fsevent");
          }, _tlswrap: function() {
            return b("tlswrap");
          } };
        }
        function C() {
          return { buf: "", write: function(T) {
            this.buf += T;
          }, end: function(T) {
            this.buf += T;
          }, read: function() {
            return this.buf;
          } };
        }
        r.writeToStream = function(T, _, m) {
          return m === void 0 && (m = _, _ = {}), O(_ = S(T, _), m).dispatch(T);
        };
      }).call(this, n("lYpoI2"), typeof self < "u" ? self : typeof window < "u" ? window : {}, n("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/fake_9a5aa49d.js", "/");
    }, { buffer: 3, crypto: 5, lYpoI2: 11 }], 2: [function(n, i, r) {
      (function(s, o, a, u, c, f, g, p, v) {
        (function(w) {
          var R = typeof Uint8Array < "u" ? Uint8Array : Array, x = 43, y = 47, S = 48, A = 97, O = 65, C = 45, T = 95;
          function _(m) {
            return m = m.charCodeAt(0), m === x || m === C ? 62 : m === y || m === T ? 63 : m < S ? -1 : m < S + 10 ? m - S + 26 + 26 : m < O + 26 ? m - O : m < A + 26 ? m - A + 26 : void 0;
          }
          w.toByteArray = function(m) {
            var b, d;
            if (0 < m.length % 4) throw new Error("Invalid string. Length must be a multiple of 4");
            var N = m.length, N = m.charAt(N - 2) === "=" ? 2 : m.charAt(N - 1) === "=" ? 1 : 0, L = new R(3 * m.length / 4 - N), J = 0 < N ? m.length - 4 : m.length, q = 0;
            function Z(W) {
              L[q++] = W;
            }
            for (b = 0; b < J; b += 4, 0) Z((16711680 & (d = _(m.charAt(b)) << 18 | _(m.charAt(b + 1)) << 12 | _(m.charAt(b + 2)) << 6 | _(m.charAt(b + 3)))) >> 16), Z((65280 & d) >> 8), Z(255 & d);
            return N == 2 ? Z(255 & (d = _(m.charAt(b)) << 2 | _(m.charAt(b + 1)) >> 4)) : N == 1 && (Z((d = _(m.charAt(b)) << 10 | _(m.charAt(b + 1)) << 4 | _(m.charAt(b + 2)) >> 2) >> 8 & 255), Z(255 & d)), L;
          }, w.fromByteArray = function(m) {
            var b, d, N, L, J = m.length % 3, q = "";
            function Z(W) {
              return "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(W);
            }
            for (b = 0, N = m.length - J; b < N; b += 3) d = (m[b] << 16) + (m[b + 1] << 8) + m[b + 2], q += Z((L = d) >> 18 & 63) + Z(L >> 12 & 63) + Z(L >> 6 & 63) + Z(63 & L);
            switch (J) {
              case 1:
                q = (q += Z((d = m[m.length - 1]) >> 2)) + Z(d << 4 & 63) + "==";
                break;
              case 2:
                q = (q = (q += Z((d = (m[m.length - 2] << 8) + m[m.length - 1]) >> 10)) + Z(d >> 4 & 63)) + Z(d << 2 & 63) + "=";
            }
            return q;
          };
        })(r === void 0 ? this.base64js = {} : r);
      }).call(this, n("lYpoI2"), typeof self < "u" ? self : typeof window < "u" ? window : {}, n("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/base64-js/lib/b64.js", "/node_modules/gulp-browserify/node_modules/base64-js/lib");
    }, { buffer: 3, lYpoI2: 11 }], 3: [function(n, i, r) {
      (function(s, o, x, u, c, f, g, p, v) {
        var w = n("base64-js"), R = n("ieee754");
        function x(h, E, F) {
          if (!(this instanceof x)) return new x(h, E, F);
          var M, P, Q, oe, ye = typeof h;
          if (E === "base64" && ye == "string") for (h = (oe = h).trim ? oe.trim() : oe.replace(/^\s+|\s+$/g, ""); h.length % 4 != 0; ) h += "=";
          if (ye == "number") M = Be(h);
          else if (ye == "string") M = x.byteLength(h, E);
          else {
            if (ye != "object") throw new Error("First argument needs to be a number, array or string.");
            M = Be(h.length);
          }
          if (x._useTypedArrays ? P = x._augment(new Uint8Array(M)) : ((P = this).length = M, P._isBuffer = !0), x._useTypedArrays && typeof h.byteLength == "number") P._set(h);
          else if (me(oe = h) || x.isBuffer(oe) || oe && typeof oe == "object" && typeof oe.length == "number") for (Q = 0; Q < M; Q++) x.isBuffer(h) ? P[Q] = h.readUInt8(Q) : P[Q] = h[Q];
          else if (ye == "string") P.write(h, 0, E);
          else if (ye == "number" && !x._useTypedArrays && !F) for (Q = 0; Q < M; Q++) P[Q] = 0;
          return P;
        }
        function y(h, E, F, M) {
          return x._charsWritten = Hi(function(P) {
            for (var Q = [], oe = 0; oe < P.length; oe++) Q.push(255 & P.charCodeAt(oe));
            return Q;
          }(E), h, F, M);
        }
        function S(h, E, F, M) {
          return x._charsWritten = Hi(function(P) {
            for (var Q, oe, ye = [], xe = 0; xe < P.length; xe++) oe = P.charCodeAt(xe), Q = oe >> 8, oe = oe % 256, ye.push(oe), ye.push(Q);
            return ye;
          }(E), h, F, M);
        }
        function A(h, E, F) {
          var M = "";
          F = Math.min(h.length, F);
          for (var P = E; P < F; P++) M += String.fromCharCode(h[P]);
          return M;
        }
        function O(h, E, F, Q) {
          Q || (z(typeof F == "boolean", "missing or invalid endian"), z(E != null, "missing offset"), z(E + 1 < h.length, "Trying to read beyond buffer length"));
          var P, Q = h.length;
          if (!(Q <= E)) return F ? (P = h[E], E + 1 < Q && (P |= h[E + 1] << 8)) : (P = h[E] << 8, E + 1 < Q && (P |= h[E + 1])), P;
        }
        function C(h, E, F, Q) {
          Q || (z(typeof F == "boolean", "missing or invalid endian"), z(E != null, "missing offset"), z(E + 3 < h.length, "Trying to read beyond buffer length"));
          var P, Q = h.length;
          if (!(Q <= E)) return F ? (E + 2 < Q && (P = h[E + 2] << 16), E + 1 < Q && (P |= h[E + 1] << 8), P |= h[E], E + 3 < Q && (P += h[E + 3] << 24 >>> 0)) : (E + 1 < Q && (P = h[E + 1] << 16), E + 2 < Q && (P |= h[E + 2] << 8), E + 3 < Q && (P |= h[E + 3]), P += h[E] << 24 >>> 0), P;
        }
        function T(h, E, F, M) {
          if (M || (z(typeof F == "boolean", "missing or invalid endian"), z(E != null, "missing offset"), z(E + 1 < h.length, "Trying to read beyond buffer length")), !(h.length <= E)) return M = O(h, E, F, !0), 32768 & M ? -1 * (65535 - M + 1) : M;
        }
        function _(h, E, F, M) {
          if (M || (z(typeof F == "boolean", "missing or invalid endian"), z(E != null, "missing offset"), z(E + 3 < h.length, "Trying to read beyond buffer length")), !(h.length <= E)) return M = C(h, E, F, !0), 2147483648 & M ? -1 * (4294967295 - M + 1) : M;
        }
        function m(h, E, F, M) {
          return M || (z(typeof F == "boolean", "missing or invalid endian"), z(E + 3 < h.length, "Trying to read beyond buffer length")), R.read(h, E, F, 23, 4);
        }
        function b(h, E, F, M) {
          return M || (z(typeof F == "boolean", "missing or invalid endian"), z(E + 7 < h.length, "Trying to read beyond buffer length")), R.read(h, E, F, 52, 8);
        }
        function d(h, E, F, M, P) {
          if (P || (z(E != null, "missing value"), z(typeof M == "boolean", "missing or invalid endian"), z(F != null, "missing offset"), z(F + 1 < h.length, "trying to write beyond buffer length"), Yr(E, 65535)), P = h.length, !(P <= F)) for (var Q = 0, oe = Math.min(P - F, 2); Q < oe; Q++) h[F + Q] = (E & 255 << 8 * (M ? Q : 1 - Q)) >>> 8 * (M ? Q : 1 - Q);
        }
        function N(h, E, F, M, P) {
          if (P || (z(E != null, "missing value"), z(typeof M == "boolean", "missing or invalid endian"), z(F != null, "missing offset"), z(F + 3 < h.length, "trying to write beyond buffer length"), Yr(E, 4294967295)), P = h.length, !(P <= F)) for (var Q = 0, oe = Math.min(P - F, 4); Q < oe; Q++) h[F + Q] = E >>> 8 * (M ? Q : 3 - Q) & 255;
        }
        function L(h, E, F, M, P) {
          P || (z(E != null, "missing value"), z(typeof M == "boolean", "missing or invalid endian"), z(F != null, "missing offset"), z(F + 1 < h.length, "Trying to write beyond buffer length"), Jr(E, 32767, -32768)), h.length <= F || d(h, 0 <= E ? E : 65535 + E + 1, F, M, P);
        }
        function J(h, E, F, M, P) {
          P || (z(E != null, "missing value"), z(typeof M == "boolean", "missing or invalid endian"), z(F != null, "missing offset"), z(F + 3 < h.length, "Trying to write beyond buffer length"), Jr(E, 2147483647, -2147483648)), h.length <= F || N(h, 0 <= E ? E : 4294967295 + E + 1, F, M, P);
        }
        function q(h, E, F, M, P) {
          P || (z(E != null, "missing value"), z(typeof M == "boolean", "missing or invalid endian"), z(F != null, "missing offset"), z(F + 3 < h.length, "Trying to write beyond buffer length"), Eo(E, 34028234663852886e22, -34028234663852886e22)), h.length <= F || R.write(h, E, F, M, 23, 4);
        }
        function Z(h, E, F, M, P) {
          P || (z(E != null, "missing value"), z(typeof M == "boolean", "missing or invalid endian"), z(F != null, "missing offset"), z(F + 7 < h.length, "Trying to write beyond buffer length"), Eo(E, 17976931348623157e292, -17976931348623157e292)), h.length <= F || R.write(h, E, F, M, 52, 8);
        }
        r.Buffer = x, r.SlowBuffer = x, r.INSPECT_MAX_BYTES = 50, x.poolSize = 8192, x._useTypedArrays = function() {
          try {
            var h = new ArrayBuffer(0), E = new Uint8Array(h);
            return E.foo = function() {
              return 42;
            }, E.foo() === 42 && typeof E.subarray == "function";
          } catch {
            return !1;
          }
        }(), x.isEncoding = function(h) {
          switch (String(h).toLowerCase()) {
            case "hex":
            case "utf8":
            case "utf-8":
            case "ascii":
            case "binary":
            case "base64":
            case "raw":
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return !0;
            default:
              return !1;
          }
        }, x.isBuffer = function(h) {
          return !(h == null || !h._isBuffer);
        }, x.byteLength = function(h, E) {
          var F;
          switch (h += "", E || "utf8") {
            case "hex":
              F = h.length / 2;
              break;
            case "utf8":
            case "utf-8":
              F = Kt(h).length;
              break;
            case "ascii":
            case "binary":
            case "raw":
              F = h.length;
              break;
            case "base64":
              F = bo(h).length;
              break;
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              F = 2 * h.length;
              break;
            default:
              throw new Error("Unknown encoding");
          }
          return F;
        }, x.concat = function(h, E) {
          if (z(me(h), `Usage: Buffer.concat(list, [totalLength])
list should be an Array.`), h.length === 0) return new x(0);
          if (h.length === 1) return h[0];
          if (typeof E != "number") for (P = E = 0; P < h.length; P++) E += h[P].length;
          for (var F = new x(E), M = 0, P = 0; P < h.length; P++) {
            var Q = h[P];
            Q.copy(F, M), M += Q.length;
          }
          return F;
        }, x.prototype.write = function(h, E, F, M) {
          isFinite(E) ? isFinite(F) || (M = F, F = void 0) : (xe = M, M = E, E = F, F = xe), E = Number(E) || 0;
          var P, Q, oe, ye, xe = this.length - E;
          switch ((!F || xe < (F = Number(F))) && (F = xe), M = String(M || "utf8").toLowerCase()) {
            case "hex":
              P = function(bt, Ke, Xe, Fe) {
                Xe = Number(Xe) || 0;
                var ve = bt.length - Xe;
                (!Fe || ve < (Fe = Number(Fe))) && (Fe = ve), z((ve = Ke.length) % 2 == 0, "Invalid hex string"), ve / 2 < Fe && (Fe = ve / 2);
                for (var Mn = 0; Mn < Fe; Mn++) {
                  var vo = parseInt(Ke.substr(2 * Mn, 2), 16);
                  z(!isNaN(vo), "Invalid hex string"), bt[Xe + Mn] = vo;
                }
                return x._charsWritten = 2 * Mn, Mn;
              }(this, h, E, F);
              break;
            case "utf8":
            case "utf-8":
              Q = this, oe = E, ye = F, P = x._charsWritten = Hi(Kt(h), Q, oe, ye);
              break;
            case "ascii":
            case "binary":
              P = y(this, h, E, F);
              break;
            case "base64":
              Q = this, oe = E, ye = F, P = x._charsWritten = Hi(bo(h), Q, oe, ye);
              break;
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              P = S(this, h, E, F);
              break;
            default:
              throw new Error("Unknown encoding");
          }
          return P;
        }, x.prototype.toString = function(h, E, F) {
          var M, P, Q, oe, ye = this;
          if (h = String(h || "utf8").toLowerCase(), E = Number(E) || 0, (F = F !== void 0 ? Number(F) : ye.length) === E) return "";
          switch (h) {
            case "hex":
              M = function(xe, bt, Ke) {
                var Xe = xe.length;
                (!bt || bt < 0) && (bt = 0), (!Ke || Ke < 0 || Xe < Ke) && (Ke = Xe);
                for (var Fe = "", ve = bt; ve < Ke; ve++) Fe += le(xe[ve]);
                return Fe;
              }(ye, E, F);
              break;
            case "utf8":
            case "utf-8":
              M = function(xe, bt, Ke) {
                var Xe = "", Fe = "";
                Ke = Math.min(xe.length, Ke);
                for (var ve = bt; ve < Ke; ve++) xe[ve] <= 127 ? (Xe += wo(Fe) + String.fromCharCode(xe[ve]), Fe = "") : Fe += "%" + xe[ve].toString(16);
                return Xe + wo(Fe);
              }(ye, E, F);
              break;
            case "ascii":
            case "binary":
              M = A(ye, E, F);
              break;
            case "base64":
              P = ye, oe = F, M = (Q = E) === 0 && oe === P.length ? w.fromByteArray(P) : w.fromByteArray(P.slice(Q, oe));
              break;
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              M = function(xe, bt, Ke) {
                for (var Xe = xe.slice(bt, Ke), Fe = "", ve = 0; ve < Xe.length; ve += 2) Fe += String.fromCharCode(Xe[ve] + 256 * Xe[ve + 1]);
                return Fe;
              }(ye, E, F);
              break;
            default:
              throw new Error("Unknown encoding");
          }
          return M;
        }, x.prototype.toJSON = function() {
          return { type: "Buffer", data: Array.prototype.slice.call(this._arr || this, 0) };
        }, x.prototype.copy = function(h, E, F, M) {
          if (E = E || 0, (M = M || M === 0 ? M : this.length) !== (F = F || 0) && h.length !== 0 && this.length !== 0) {
            z(F <= M, "sourceEnd < sourceStart"), z(0 <= E && E < h.length, "targetStart out of bounds"), z(0 <= F && F < this.length, "sourceStart out of bounds"), z(0 <= M && M <= this.length, "sourceEnd out of bounds"), M > this.length && (M = this.length);
            var P = (M = h.length - E < M - F ? h.length - E + F : M) - F;
            if (P < 100 || !x._useTypedArrays) for (var Q = 0; Q < P; Q++) h[Q + E] = this[Q + F];
            else h._set(this.subarray(F, F + P), E);
          }
        }, x.prototype.slice = function(h, E) {
          var F = this.length;
          if (h = ge(h, F, 0), E = ge(E, F, F), x._useTypedArrays) return x._augment(this.subarray(h, E));
          for (var M = E - h, P = new x(M, void 0, !0), Q = 0; Q < M; Q++) P[Q] = this[Q + h];
          return P;
        }, x.prototype.get = function(h) {
          return console.log(".get() is deprecated. Access using array indexes instead."), this.readUInt8(h);
        }, x.prototype.set = function(h, E) {
          return console.log(".set() is deprecated. Access using array indexes instead."), this.writeUInt8(h, E);
        }, x.prototype.readUInt8 = function(h, E) {
          if (E || (z(h != null, "missing offset"), z(h < this.length, "Trying to read beyond buffer length")), !(h >= this.length)) return this[h];
        }, x.prototype.readUInt16LE = function(h, E) {
          return O(this, h, !0, E);
        }, x.prototype.readUInt16BE = function(h, E) {
          return O(this, h, !1, E);
        }, x.prototype.readUInt32LE = function(h, E) {
          return C(this, h, !0, E);
        }, x.prototype.readUInt32BE = function(h, E) {
          return C(this, h, !1, E);
        }, x.prototype.readInt8 = function(h, E) {
          if (E || (z(h != null, "missing offset"), z(h < this.length, "Trying to read beyond buffer length")), !(h >= this.length)) return 128 & this[h] ? -1 * (255 - this[h] + 1) : this[h];
        }, x.prototype.readInt16LE = function(h, E) {
          return T(this, h, !0, E);
        }, x.prototype.readInt16BE = function(h, E) {
          return T(this, h, !1, E);
        }, x.prototype.readInt32LE = function(h, E) {
          return _(this, h, !0, E);
        }, x.prototype.readInt32BE = function(h, E) {
          return _(this, h, !1, E);
        }, x.prototype.readFloatLE = function(h, E) {
          return m(this, h, !0, E);
        }, x.prototype.readFloatBE = function(h, E) {
          return m(this, h, !1, E);
        }, x.prototype.readDoubleLE = function(h, E) {
          return b(this, h, !0, E);
        }, x.prototype.readDoubleBE = function(h, E) {
          return b(this, h, !1, E);
        }, x.prototype.writeUInt8 = function(h, E, F) {
          F || (z(h != null, "missing value"), z(E != null, "missing offset"), z(E < this.length, "trying to write beyond buffer length"), Yr(h, 255)), E >= this.length || (this[E] = h);
        }, x.prototype.writeUInt16LE = function(h, E, F) {
          d(this, h, E, !0, F);
        }, x.prototype.writeUInt16BE = function(h, E, F) {
          d(this, h, E, !1, F);
        }, x.prototype.writeUInt32LE = function(h, E, F) {
          N(this, h, E, !0, F);
        }, x.prototype.writeUInt32BE = function(h, E, F) {
          N(this, h, E, !1, F);
        }, x.prototype.writeInt8 = function(h, E, F) {
          F || (z(h != null, "missing value"), z(E != null, "missing offset"), z(E < this.length, "Trying to write beyond buffer length"), Jr(h, 127, -128)), E >= this.length || (0 <= h ? this.writeUInt8(h, E, F) : this.writeUInt8(255 + h + 1, E, F));
        }, x.prototype.writeInt16LE = function(h, E, F) {
          L(this, h, E, !0, F);
        }, x.prototype.writeInt16BE = function(h, E, F) {
          L(this, h, E, !1, F);
        }, x.prototype.writeInt32LE = function(h, E, F) {
          J(this, h, E, !0, F);
        }, x.prototype.writeInt32BE = function(h, E, F) {
          J(this, h, E, !1, F);
        }, x.prototype.writeFloatLE = function(h, E, F) {
          q(this, h, E, !0, F);
        }, x.prototype.writeFloatBE = function(h, E, F) {
          q(this, h, E, !1, F);
        }, x.prototype.writeDoubleLE = function(h, E, F) {
          Z(this, h, E, !0, F);
        }, x.prototype.writeDoubleBE = function(h, E, F) {
          Z(this, h, E, !1, F);
        }, x.prototype.fill = function(h, E, F) {
          if (E = E || 0, F = F || this.length, z(typeof (h = typeof (h = h || 0) == "string" ? h.charCodeAt(0) : h) == "number" && !isNaN(h), "value is not a number"), z(E <= F, "end < start"), F !== E && this.length !== 0) {
            z(0 <= E && E < this.length, "start out of bounds"), z(0 <= F && F <= this.length, "end out of bounds");
            for (var M = E; M < F; M++) this[M] = h;
          }
        }, x.prototype.inspect = function() {
          for (var h = [], E = this.length, F = 0; F < E; F++) if (h[F] = le(this[F]), F === r.INSPECT_MAX_BYTES) {
            h[F + 1] = "...";
            break;
          }
          return "<Buffer " + h.join(" ") + ">";
        }, x.prototype.toArrayBuffer = function() {
          if (typeof Uint8Array > "u") throw new Error("Buffer.toArrayBuffer not supported in this browser");
          if (x._useTypedArrays) return new x(this).buffer;
          for (var h = new Uint8Array(this.length), E = 0, F = h.length; E < F; E += 1) h[E] = this[E];
          return h.buffer;
        };
        var W = x.prototype;
        function ge(h, E, F) {
          return typeof h != "number" ? F : E <= (h = ~~h) ? E : 0 <= h || 0 <= (h += E) ? h : 0;
        }
        function Be(h) {
          return (h = ~~Math.ceil(+h)) < 0 ? 0 : h;
        }
        function me(h) {
          return (Array.isArray || function(E) {
            return Object.prototype.toString.call(E) === "[object Array]";
          })(h);
        }
        function le(h) {
          return h < 16 ? "0" + h.toString(16) : h.toString(16);
        }
        function Kt(h) {
          for (var E = [], F = 0; F < h.length; F++) {
            var M = h.charCodeAt(F);
            if (M <= 127) E.push(h.charCodeAt(F));
            else for (var P = F, Q = (55296 <= M && M <= 57343 && F++, encodeURIComponent(h.slice(P, F + 1)).substr(1).split("%")), oe = 0; oe < Q.length; oe++) E.push(parseInt(Q[oe], 16));
          }
          return E;
        }
        function bo(h) {
          return w.toByteArray(h);
        }
        function Hi(h, E, F, M) {
          for (var P = 0; P < M && !(P + F >= E.length || P >= h.length); P++) E[P + F] = h[P];
          return P;
        }
        function wo(h) {
          try {
            return decodeURIComponent(h);
          } catch {
            return "�";
          }
        }
        function Yr(h, E) {
          z(typeof h == "number", "cannot write a non-number as a number"), z(0 <= h, "specified a negative value for writing an unsigned value"), z(h <= E, "value is larger than maximum value for type"), z(Math.floor(h) === h, "value has a fractional component");
        }
        function Jr(h, E, F) {
          z(typeof h == "number", "cannot write a non-number as a number"), z(h <= E, "value larger than maximum allowed value"), z(F <= h, "value smaller than minimum allowed value"), z(Math.floor(h) === h, "value has a fractional component");
        }
        function Eo(h, E, F) {
          z(typeof h == "number", "cannot write a non-number as a number"), z(h <= E, "value larger than maximum allowed value"), z(F <= h, "value smaller than minimum allowed value");
        }
        function z(h, E) {
          if (!h) throw new Error(E || "Failed assertion");
        }
        x._augment = function(h) {
          return h._isBuffer = !0, h._get = h.get, h._set = h.set, h.get = W.get, h.set = W.set, h.write = W.write, h.toString = W.toString, h.toLocaleString = W.toString, h.toJSON = W.toJSON, h.copy = W.copy, h.slice = W.slice, h.readUInt8 = W.readUInt8, h.readUInt16LE = W.readUInt16LE, h.readUInt16BE = W.readUInt16BE, h.readUInt32LE = W.readUInt32LE, h.readUInt32BE = W.readUInt32BE, h.readInt8 = W.readInt8, h.readInt16LE = W.readInt16LE, h.readInt16BE = W.readInt16BE, h.readInt32LE = W.readInt32LE, h.readInt32BE = W.readInt32BE, h.readFloatLE = W.readFloatLE, h.readFloatBE = W.readFloatBE, h.readDoubleLE = W.readDoubleLE, h.readDoubleBE = W.readDoubleBE, h.writeUInt8 = W.writeUInt8, h.writeUInt16LE = W.writeUInt16LE, h.writeUInt16BE = W.writeUInt16BE, h.writeUInt32LE = W.writeUInt32LE, h.writeUInt32BE = W.writeUInt32BE, h.writeInt8 = W.writeInt8, h.writeInt16LE = W.writeInt16LE, h.writeInt16BE = W.writeInt16BE, h.writeInt32LE = W.writeInt32LE, h.writeInt32BE = W.writeInt32BE, h.writeFloatLE = W.writeFloatLE, h.writeFloatBE = W.writeFloatBE, h.writeDoubleLE = W.writeDoubleLE, h.writeDoubleBE = W.writeDoubleBE, h.fill = W.fill, h.inspect = W.inspect, h.toArrayBuffer = W.toArrayBuffer, h;
        };
      }).call(this, n("lYpoI2"), typeof self < "u" ? self : typeof window < "u" ? window : {}, n("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/buffer/index.js", "/node_modules/gulp-browserify/node_modules/buffer");
    }, { "base64-js": 2, buffer: 3, ieee754: 10, lYpoI2: 11 }], 4: [function(n, i, r) {
      (function(s, o, w, u, c, f, g, p, v) {
        var w = n("buffer").Buffer, R = 4, x = new w(R);
        x.fill(0), i.exports = { hash: function(y, S, A, O) {
          for (var C = S(function(d, N) {
            d.length % R != 0 && (L = d.length + (R - d.length % R), d = w.concat([d, x], L));
            for (var L, J = [], q = N ? d.readInt32BE : d.readInt32LE, Z = 0; Z < d.length; Z += R) J.push(q.call(d, Z));
            return J;
          }(y = w.isBuffer(y) ? y : new w(y), O), 8 * y.length), S = O, T = new w(A), _ = S ? T.writeInt32BE : T.writeInt32LE, m = 0; m < C.length; m++) _.call(T, C[m], 4 * m, !0);
          return T;
        } };
      }).call(this, n("lYpoI2"), typeof self < "u" ? self : typeof window < "u" ? window : {}, n("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/crypto-browserify/helpers.js", "/node_modules/gulp-browserify/node_modules/crypto-browserify");
    }, { buffer: 3, lYpoI2: 11 }], 5: [function(n, i, r) {
      (function(s, o, w, u, c, f, g, p, v) {
        var w = n("buffer").Buffer, R = n("./sha"), x = n("./sha256"), y = n("./rng"), S = { sha1: R, sha256: x, md5: n("./md5") }, A = 64, O = new w(A);
        function C(d, N) {
          var L = S[d = d || "sha1"], J = [];
          return L || T("algorithm:", d, "is not yet supported"), { update: function(q) {
            return w.isBuffer(q) || (q = new w(q)), J.push(q), q.length, this;
          }, digest: function(q) {
            var Z = w.concat(J), Z = N ? function(W, ge, Be) {
              w.isBuffer(ge) || (ge = new w(ge)), w.isBuffer(Be) || (Be = new w(Be)), ge.length > A ? ge = W(ge) : ge.length < A && (ge = w.concat([ge, O], A));
              for (var me = new w(A), le = new w(A), Kt = 0; Kt < A; Kt++) me[Kt] = 54 ^ ge[Kt], le[Kt] = 92 ^ ge[Kt];
              return Be = W(w.concat([me, Be])), W(w.concat([le, Be]));
            }(L, N, Z) : L(Z);
            return J = null, q ? Z.toString(q) : Z;
          } };
        }
        function T() {
          var d = [].slice.call(arguments).join(" ");
          throw new Error([d, "we accept pull requests", "http://github.com/dominictarr/crypto-browserify"].join(`
`));
        }
        O.fill(0), r.createHash = function(d) {
          return C(d);
        }, r.createHmac = C, r.randomBytes = function(d, N) {
          if (!N || !N.call) return new w(y(d));
          try {
            N.call(this, void 0, new w(y(d)));
          } catch (L) {
            N(L);
          }
        };
        var _, m = ["createCredentials", "createCipher", "createCipheriv", "createDecipher", "createDecipheriv", "createSign", "createVerify", "createDiffieHellman", "pbkdf2"], b = function(d) {
          r[d] = function() {
            T("sorry,", d, "is not implemented yet");
          };
        };
        for (_ in m) b(m[_]);
      }).call(this, n("lYpoI2"), typeof self < "u" ? self : typeof window < "u" ? window : {}, n("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/crypto-browserify/index.js", "/node_modules/gulp-browserify/node_modules/crypto-browserify");
    }, { "./md5": 6, "./rng": 7, "./sha": 8, "./sha256": 9, buffer: 3, lYpoI2: 11 }], 6: [function(n, i, r) {
      (function(s, o, a, u, c, f, g, p, v) {
        var w = n("./helpers");
        function R(T, _) {
          T[_ >> 5] |= 128 << _ % 32, T[14 + (_ + 64 >>> 9 << 4)] = _;
          for (var m = 1732584193, b = -271733879, d = -1732584194, N = 271733878, L = 0; L < T.length; L += 16) {
            var J = m, q = b, Z = d, W = N, m = y(m, b, d, N, T[L + 0], 7, -680876936), N = y(N, m, b, d, T[L + 1], 12, -389564586), d = y(d, N, m, b, T[L + 2], 17, 606105819), b = y(b, d, N, m, T[L + 3], 22, -1044525330);
            m = y(m, b, d, N, T[L + 4], 7, -176418897), N = y(N, m, b, d, T[L + 5], 12, 1200080426), d = y(d, N, m, b, T[L + 6], 17, -1473231341), b = y(b, d, N, m, T[L + 7], 22, -45705983), m = y(m, b, d, N, T[L + 8], 7, 1770035416), N = y(N, m, b, d, T[L + 9], 12, -1958414417), d = y(d, N, m, b, T[L + 10], 17, -42063), b = y(b, d, N, m, T[L + 11], 22, -1990404162), m = y(m, b, d, N, T[L + 12], 7, 1804603682), N = y(N, m, b, d, T[L + 13], 12, -40341101), d = y(d, N, m, b, T[L + 14], 17, -1502002290), m = S(m, b = y(b, d, N, m, T[L + 15], 22, 1236535329), d, N, T[L + 1], 5, -165796510), N = S(N, m, b, d, T[L + 6], 9, -1069501632), d = S(d, N, m, b, T[L + 11], 14, 643717713), b = S(b, d, N, m, T[L + 0], 20, -373897302), m = S(m, b, d, N, T[L + 5], 5, -701558691), N = S(N, m, b, d, T[L + 10], 9, 38016083), d = S(d, N, m, b, T[L + 15], 14, -660478335), b = S(b, d, N, m, T[L + 4], 20, -405537848), m = S(m, b, d, N, T[L + 9], 5, 568446438), N = S(N, m, b, d, T[L + 14], 9, -1019803690), d = S(d, N, m, b, T[L + 3], 14, -187363961), b = S(b, d, N, m, T[L + 8], 20, 1163531501), m = S(m, b, d, N, T[L + 13], 5, -1444681467), N = S(N, m, b, d, T[L + 2], 9, -51403784), d = S(d, N, m, b, T[L + 7], 14, 1735328473), m = A(m, b = S(b, d, N, m, T[L + 12], 20, -1926607734), d, N, T[L + 5], 4, -378558), N = A(N, m, b, d, T[L + 8], 11, -2022574463), d = A(d, N, m, b, T[L + 11], 16, 1839030562), b = A(b, d, N, m, T[L + 14], 23, -35309556), m = A(m, b, d, N, T[L + 1], 4, -1530992060), N = A(N, m, b, d, T[L + 4], 11, 1272893353), d = A(d, N, m, b, T[L + 7], 16, -155497632), b = A(b, d, N, m, T[L + 10], 23, -1094730640), m = A(m, b, d, N, T[L + 13], 4, 681279174), N = A(N, m, b, d, T[L + 0], 11, -358537222), d = A(d, N, m, b, T[L + 3], 16, -722521979), b = A(b, d, N, m, T[L + 6], 23, 76029189), m = A(m, b, d, N, T[L + 9], 4, -640364487), N = A(N, m, b, d, T[L + 12], 11, -421815835), d = A(d, N, m, b, T[L + 15], 16, 530742520), m = O(m, b = A(b, d, N, m, T[L + 2], 23, -995338651), d, N, T[L + 0], 6, -198630844), N = O(N, m, b, d, T[L + 7], 10, 1126891415), d = O(d, N, m, b, T[L + 14], 15, -1416354905), b = O(b, d, N, m, T[L + 5], 21, -57434055), m = O(m, b, d, N, T[L + 12], 6, 1700485571), N = O(N, m, b, d, T[L + 3], 10, -1894986606), d = O(d, N, m, b, T[L + 10], 15, -1051523), b = O(b, d, N, m, T[L + 1], 21, -2054922799), m = O(m, b, d, N, T[L + 8], 6, 1873313359), N = O(N, m, b, d, T[L + 15], 10, -30611744), d = O(d, N, m, b, T[L + 6], 15, -1560198380), b = O(b, d, N, m, T[L + 13], 21, 1309151649), m = O(m, b, d, N, T[L + 4], 6, -145523070), N = O(N, m, b, d, T[L + 11], 10, -1120210379), d = O(d, N, m, b, T[L + 2], 15, 718787259), b = O(b, d, N, m, T[L + 9], 21, -343485551), m = C(m, J), b = C(b, q), d = C(d, Z), N = C(N, W);
          }
          return Array(m, b, d, N);
        }
        function x(T, _, m, b, d, N) {
          return C((_ = C(C(_, T), C(b, N))) << d | _ >>> 32 - d, m);
        }
        function y(T, _, m, b, d, N, L) {
          return x(_ & m | ~_ & b, T, _, d, N, L);
        }
        function S(T, _, m, b, d, N, L) {
          return x(_ & b | m & ~b, T, _, d, N, L);
        }
        function A(T, _, m, b, d, N, L) {
          return x(_ ^ m ^ b, T, _, d, N, L);
        }
        function O(T, _, m, b, d, N, L) {
          return x(m ^ (_ | ~b), T, _, d, N, L);
        }
        function C(T, _) {
          var m = (65535 & T) + (65535 & _);
          return (T >> 16) + (_ >> 16) + (m >> 16) << 16 | 65535 & m;
        }
        i.exports = function(T) {
          return w.hash(T, R, 16);
        };
      }).call(this, n("lYpoI2"), typeof self < "u" ? self : typeof window < "u" ? window : {}, n("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/crypto-browserify/md5.js", "/node_modules/gulp-browserify/node_modules/crypto-browserify");
    }, { "./helpers": 4, buffer: 3, lYpoI2: 11 }], 7: [function(n, i, r) {
      (function(s, o, a, u, c, f, g, p, v) {
        i.exports = function(w) {
          for (var R, x = new Array(w), y = 0; y < w; y++) !(3 & y) && (R = 4294967296 * Math.random()), x[y] = R >>> ((3 & y) << 3) & 255;
          return x;
        };
      }).call(this, n("lYpoI2"), typeof self < "u" ? self : typeof window < "u" ? window : {}, n("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/crypto-browserify/rng.js", "/node_modules/gulp-browserify/node_modules/crypto-browserify");
    }, { buffer: 3, lYpoI2: 11 }], 8: [function(n, i, r) {
      (function(s, o, a, u, c, f, g, p, v) {
        var w = n("./helpers");
        function R(S, A) {
          S[A >> 5] |= 128 << 24 - A % 32, S[15 + (A + 64 >> 9 << 4)] = A;
          for (var O, C, T, _ = Array(80), m = 1732584193, b = -271733879, d = -1732584194, N = 271733878, L = -1009589776, J = 0; J < S.length; J += 16) {
            for (var q = m, Z = b, W = d, ge = N, Be = L, me = 0; me < 80; me++) {
              _[me] = me < 16 ? S[J + me] : y(_[me - 3] ^ _[me - 8] ^ _[me - 14] ^ _[me - 16], 1);
              var le = x(x(y(m, 5), (le = b, C = d, T = N, (O = me) < 20 ? le & C | ~le & T : !(O < 40) && O < 60 ? le & C | le & T | C & T : le ^ C ^ T)), x(x(L, _[me]), (O = me) < 20 ? 1518500249 : O < 40 ? 1859775393 : O < 60 ? -1894007588 : -899497514)), L = N, N = d, d = y(b, 30), b = m, m = le;
            }
            m = x(m, q), b = x(b, Z), d = x(d, W), N = x(N, ge), L = x(L, Be);
          }
          return Array(m, b, d, N, L);
        }
        function x(S, A) {
          var O = (65535 & S) + (65535 & A);
          return (S >> 16) + (A >> 16) + (O >> 16) << 16 | 65535 & O;
        }
        function y(S, A) {
          return S << A | S >>> 32 - A;
        }
        i.exports = function(S) {
          return w.hash(S, R, 20, !0);
        };
      }).call(this, n("lYpoI2"), typeof self < "u" ? self : typeof window < "u" ? window : {}, n("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/crypto-browserify/sha.js", "/node_modules/gulp-browserify/node_modules/crypto-browserify");
    }, { "./helpers": 4, buffer: 3, lYpoI2: 11 }], 9: [function(n, i, r) {
      (function(s, o, a, u, c, f, g, p, v) {
        function w(A, O) {
          var C = (65535 & A) + (65535 & O);
          return (A >> 16) + (O >> 16) + (C >> 16) << 16 | 65535 & C;
        }
        function R(A, O) {
          var C, T = new Array(1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298), _ = new Array(1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225), m = new Array(64);
          A[O >> 5] |= 128 << 24 - O % 32, A[15 + (O + 64 >> 9 << 4)] = O;
          for (var b, d, N = 0; N < A.length; N += 16) {
            for (var L = _[0], J = _[1], q = _[2], Z = _[3], W = _[4], ge = _[5], Be = _[6], me = _[7], le = 0; le < 64; le++) m[le] = le < 16 ? A[le + N] : w(w(w((d = m[le - 2], y(d, 17) ^ y(d, 19) ^ S(d, 10)), m[le - 7]), (d = m[le - 15], y(d, 7) ^ y(d, 18) ^ S(d, 3))), m[le - 16]), C = w(w(w(w(me, y(d = W, 6) ^ y(d, 11) ^ y(d, 25)), W & ge ^ ~W & Be), T[le]), m[le]), b = w(y(b = L, 2) ^ y(b, 13) ^ y(b, 22), L & J ^ L & q ^ J & q), me = Be, Be = ge, ge = W, W = w(Z, C), Z = q, q = J, J = L, L = w(C, b);
            _[0] = w(L, _[0]), _[1] = w(J, _[1]), _[2] = w(q, _[2]), _[3] = w(Z, _[3]), _[4] = w(W, _[4]), _[5] = w(ge, _[5]), _[6] = w(Be, _[6]), _[7] = w(me, _[7]);
          }
          return _;
        }
        var x = n("./helpers"), y = function(A, O) {
          return A >>> O | A << 32 - O;
        }, S = function(A, O) {
          return A >>> O;
        };
        i.exports = function(A) {
          return x.hash(A, R, 32, !0);
        };
      }).call(this, n("lYpoI2"), typeof self < "u" ? self : typeof window < "u" ? window : {}, n("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/crypto-browserify/sha256.js", "/node_modules/gulp-browserify/node_modules/crypto-browserify");
    }, { "./helpers": 4, buffer: 3, lYpoI2: 11 }], 10: [function(n, i, r) {
      (function(s, o, a, u, c, f, g, p, v) {
        r.read = function(w, R, x, y, N) {
          var A, O, C = 8 * N - y - 1, T = (1 << C) - 1, _ = T >> 1, m = -7, b = x ? N - 1 : 0, d = x ? -1 : 1, N = w[R + b];
          for (b += d, A = N & (1 << -m) - 1, N >>= -m, m += C; 0 < m; A = 256 * A + w[R + b], b += d, m -= 8) ;
          for (O = A & (1 << -m) - 1, A >>= -m, m += y; 0 < m; O = 256 * O + w[R + b], b += d, m -= 8) ;
          if (A === 0) A = 1 - _;
          else {
            if (A === T) return O ? NaN : 1 / 0 * (N ? -1 : 1);
            O += Math.pow(2, y), A -= _;
          }
          return (N ? -1 : 1) * O * Math.pow(2, A - y);
        }, r.write = function(w, R, x, y, S, L) {
          var O, C, T = 8 * L - S - 1, _ = (1 << T) - 1, m = _ >> 1, b = S === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, d = y ? 0 : L - 1, N = y ? 1 : -1, L = R < 0 || R === 0 && 1 / R < 0 ? 1 : 0;
          for (R = Math.abs(R), isNaN(R) || R === 1 / 0 ? (C = isNaN(R) ? 1 : 0, O = _) : (O = Math.floor(Math.log(R) / Math.LN2), R * (y = Math.pow(2, -O)) < 1 && (O--, y *= 2), 2 <= (R += 1 <= O + m ? b / y : b * Math.pow(2, 1 - m)) * y && (O++, y /= 2), _ <= O + m ? (C = 0, O = _) : 1 <= O + m ? (C = (R * y - 1) * Math.pow(2, S), O += m) : (C = R * Math.pow(2, m - 1) * Math.pow(2, S), O = 0)); 8 <= S; w[x + d] = 255 & C, d += N, C /= 256, S -= 8) ;
          for (O = O << S | C, T += S; 0 < T; w[x + d] = 255 & O, d += N, O /= 256, T -= 8) ;
          w[x + d - N] |= 128 * L;
        };
      }).call(this, n("lYpoI2"), typeof self < "u" ? self : typeof window < "u" ? window : {}, n("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/ieee754/index.js", "/node_modules/gulp-browserify/node_modules/ieee754");
    }, { buffer: 3, lYpoI2: 11 }], 11: [function(n, i, r) {
      (function(s, o, a, u, c, f, g, p, v) {
        var w, R, x;
        function y() {
        }
        (s = i.exports = {}).nextTick = (R = typeof window < "u" && window.setImmediate, x = typeof window < "u" && window.postMessage && window.addEventListener, R ? function(S) {
          return window.setImmediate(S);
        } : x ? (w = [], window.addEventListener("message", function(S) {
          var A = S.source;
          A !== window && A !== null || S.data !== "process-tick" || (S.stopPropagation(), 0 < w.length && w.shift()());
        }, !0), function(S) {
          w.push(S), window.postMessage("process-tick", "*");
        }) : function(S) {
          setTimeout(S, 0);
        }), s.title = "browser", s.browser = !0, s.env = {}, s.argv = [], s.on = y, s.addListener = y, s.once = y, s.off = y, s.removeListener = y, s.removeAllListeners = y, s.emit = y, s.binding = function(S) {
          throw new Error("process.binding is not supported");
        }, s.cwd = function() {
          return "/";
        }, s.chdir = function(S) {
          throw new Error("process.chdir is not supported");
        };
      }).call(this, n("lYpoI2"), typeof self < "u" ? self : typeof window < "u" ? window : {}, n("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/process/browser.js", "/node_modules/gulp-browserify/node_modules/process");
    }, { buffer: 3, lYpoI2: 11 }] }, {}, [1])(1);
  });
})(Il);
var pm = Il.exports;
const gm = /* @__PURE__ */ jl(pm);
var On = {}, Tn = {}, lo = {};
Object.defineProperty(lo, "__esModule", {
  value: !0
});
lo.isObjectLike = mm;
function mm(t) {
  return typeof t == "object" && t !== null;
}
var Qr = {}, co = {};
Object.defineProperty(co, "__esModule", {
  value: !0
});
co.invariant = ym;
function ym(t, e) {
  if (!!!t)
    throw new Error(
      e ?? "Unexpected invariant triggered."
    );
}
Object.defineProperty(Qr, "__esModule", {
  value: !0
});
Qr.getLocation = Em;
var bm = co;
const wm = /\r\n|[\n\r]/g;
function Em(t, e) {
  let n = 0, i = 1;
  for (const r of t.body.matchAll(wm)) {
    if (typeof r.index == "number" || (0, bm.invariant)(!1), r.index >= e)
      break;
    n = r.index + r[0].length, i += 1;
  }
  return {
    line: i,
    column: e + 1 - n
  };
}
var Wr = {};
Object.defineProperty(Wr, "__esModule", {
  value: !0
});
Wr.printLocation = Tm;
Wr.printSourceLocation = Ol;
var vm = Qr;
function Tm(t) {
  return Ol(
    t.source,
    (0, vm.getLocation)(t.source, t.start)
  );
}
function Ol(t, e) {
  const n = t.locationOffset.column - 1, i = "".padStart(n) + t.body, r = e.line - 1, s = t.locationOffset.line - 1, o = e.line + s, a = e.line === 1 ? n : 0, u = e.column + a, c = `${t.name}:${o}:${u}
`, f = i.split(/\r\n|[\n\r]/g), g = f[r];
  if (g.length > 120) {
    const p = Math.floor(u / 80), v = u % 80, w = [];
    for (let R = 0; R < g.length; R += 80)
      w.push(g.slice(R, R + 80));
    return c + ka([
      [`${o} |`, w[0]],
      ...w.slice(1, p + 1).map((R) => ["|", R]),
      ["|", "^".padStart(v)],
      ["|", w[p + 1]]
    ]);
  }
  return c + ka([
    // Lines specified like this: ["prefix", "string"],
    [`${o - 1} |`, f[r - 1]],
    [`${o} |`, g],
    ["|", "^".padStart(u)],
    [`${o + 1} |`, f[r + 1]]
  ]);
}
function ka(t) {
  const e = t.filter(([i, r]) => r !== void 0), n = Math.max(...e.map(([i]) => i.length));
  return e.map(([i, r]) => i.padStart(n) + (r ? " " + r : "")).join(`
`);
}
Object.defineProperty(Tn, "__esModule", {
  value: !0
});
Tn.GraphQLError = void 0;
Tn.formatError = Om;
Tn.printError = Im;
var Sm = lo, Da = Qr, $a = Wr;
function _m(t) {
  const e = t[0];
  return e == null || "kind" in e || "length" in e ? {
    nodes: e,
    source: t[1],
    positions: t[2],
    path: t[3],
    originalError: t[4],
    extensions: t[5]
  } : e;
}
class fo extends Error {
  /**
   * An array of `{ line, column }` locations within the source GraphQL document
   * which correspond to this error.
   *
   * Errors during validation often contain multiple locations, for example to
   * point out two things with the same name. Errors during execution include a
   * single location, the field which produced the error.
   *
   * Enumerable, and appears in the result of JSON.stringify().
   */
  /**
   * An array describing the JSON-path into the execution response which
   * corresponds to this error. Only included for errors during execution.
   *
   * Enumerable, and appears in the result of JSON.stringify().
   */
  /**
   * An array of GraphQL AST Nodes corresponding to this error.
   */
  /**
   * The source GraphQL document for the first location of this error.
   *
   * Note that if this Error represents more than one node, the source may not
   * represent nodes after the first node.
   */
  /**
   * An array of character offsets within the source GraphQL document
   * which correspond to this error.
   */
  /**
   * The original error thrown from a field resolver during execution.
   */
  /**
   * Extension fields to add to the formatted error.
   */
  /**
   * @deprecated Please use the `GraphQLErrorOptions` constructor overload instead.
   */
  constructor(e, ...n) {
    var i, r, s;
    const { nodes: o, source: a, positions: u, path: c, originalError: f, extensions: g } = _m(n);
    super(e), this.name = "GraphQLError", this.path = c ?? void 0, this.originalError = f ?? void 0, this.nodes = ja(
      Array.isArray(o) ? o : o ? [o] : void 0
    );
    const p = ja(
      (i = this.nodes) === null || i === void 0 ? void 0 : i.map((w) => w.loc).filter((w) => w != null)
    );
    this.source = a ?? (p == null || (r = p[0]) === null || r === void 0 ? void 0 : r.source), this.positions = u ?? (p == null ? void 0 : p.map((w) => w.start)), this.locations = u && a ? u.map((w) => (0, Da.getLocation)(a, w)) : p == null ? void 0 : p.map(
      (w) => (0, Da.getLocation)(w.source, w.start)
    );
    const v = (0, Sm.isObjectLike)(
      f == null ? void 0 : f.extensions
    ) ? f == null ? void 0 : f.extensions : void 0;
    this.extensions = (s = g ?? v) !== null && s !== void 0 ? s : /* @__PURE__ */ Object.create(null), Object.defineProperties(this, {
      message: {
        writable: !0,
        enumerable: !0
      },
      name: {
        enumerable: !1
      },
      nodes: {
        enumerable: !1
      },
      source: {
        enumerable: !1
      },
      positions: {
        enumerable: !1
      },
      originalError: {
        enumerable: !1
      }
    }), f != null && f.stack ? Object.defineProperty(this, "stack", {
      value: f.stack,
      writable: !0,
      configurable: !0
    }) : Error.captureStackTrace ? Error.captureStackTrace(this, fo) : Object.defineProperty(this, "stack", {
      value: Error().stack,
      writable: !0,
      configurable: !0
    });
  }
  get [Symbol.toStringTag]() {
    return "GraphQLError";
  }
  toString() {
    let e = this.message;
    if (this.nodes)
      for (const n of this.nodes)
        n.loc && (e += `

` + (0, $a.printLocation)(n.loc));
    else if (this.source && this.locations)
      for (const n of this.locations)
        e += `

` + (0, $a.printSourceLocation)(this.source, n);
    return e;
  }
  toJSON() {
    const e = {
      message: this.message
    };
    return this.locations != null && (e.locations = this.locations), this.path != null && (e.path = this.path), this.extensions != null && Object.keys(this.extensions).length > 0 && (e.extensions = this.extensions), e;
  }
}
Tn.GraphQLError = fo;
function ja(t) {
  return t === void 0 || t.length === 0 ? void 0 : t;
}
function Im(t) {
  return t.toString();
}
function Om(t) {
  return t.toJSON();
}
var ho = {};
Object.defineProperty(ho, "__esModule", {
  value: !0
});
ho.syntaxError = Am;
var Nm = Tn;
function Am(t, e, n) {
  return new Nm.GraphQLError(`Syntax Error: ${n}`, {
    source: t,
    positions: [e]
  });
}
var po = {}, go = {}, mo = {};
Object.defineProperty(mo, "__esModule", {
  value: !0
});
mo.inspect = Fm;
const xm = 10, Nl = 2;
function Fm(t) {
  return Hr(t, []);
}
function Hr(t, e) {
  switch (typeof t) {
    case "string":
      return JSON.stringify(t);
    case "function":
      return t.name ? `[function ${t.name}]` : "[function]";
    case "object":
      return Rm(t, e);
    default:
      return String(t);
  }
}
function Rm(t, e) {
  if (t === null)
    return "null";
  if (e.includes(t))
    return "[Circular]";
  const n = [...e, t];
  if (Lm(t)) {
    const i = t.toJSON();
    if (i !== t)
      return typeof i == "string" ? i : Hr(i, n);
  } else if (Array.isArray(t))
    return km(t, n);
  return Cm(t, n);
}
function Lm(t) {
  return typeof t.toJSON == "function";
}
function Cm(t, e) {
  const n = Object.entries(t);
  return n.length === 0 ? "{}" : e.length > Nl ? "[" + Dm(t) + "]" : "{ " + n.map(
    ([r, s]) => r + ": " + Hr(s, e)
  ).join(", ") + " }";
}
function km(t, e) {
  if (t.length === 0)
    return "[]";
  if (e.length > Nl)
    return "[Array]";
  const n = Math.min(xm, t.length), i = t.length - n, r = [];
  for (let s = 0; s < n; ++s)
    r.push(Hr(t[s], e));
  return i === 1 ? r.push("... 1 more item") : i > 1 && r.push(`... ${i} more items`), "[" + r.join(", ") + "]";
}
function Dm(t) {
  const e = Object.prototype.toString.call(t).replace(/^\[object /, "").replace(/]$/, "");
  if (e === "Object" && typeof t.constructor == "function") {
    const n = t.constructor.name;
    if (typeof n == "string" && n !== "")
      return n;
  }
  return e;
}
Object.defineProperty(go, "__esModule", {
  value: !0
});
go.toError = jm;
var $m = mo;
function jm(t) {
  return t instanceof Error ? t : new Pm(t);
}
class Pm extends Error {
  constructor(e) {
    super("Unexpected error value: " + (0, $m.inspect)(e)), this.name = "NonErrorThrown", this.thrownValue = e;
  }
}
Object.defineProperty(po, "__esModule", {
  value: !0
});
po.locatedError = Vm;
var Mm = go, Um = Tn;
function Vm(t, e, n) {
  var i;
  const r = (0, Mm.toError)(t);
  return Bm(r) ? r : new Um.GraphQLError(r.message, {
    nodes: (i = r.nodes) !== null && i !== void 0 ? i : e,
    source: r.source,
    positions: r.positions,
    path: n,
    originalError: r
  });
}
function Bm(t) {
  return Array.isArray(t.path);
}
(function(t) {
  Object.defineProperty(t, "__esModule", {
    value: !0
  }), Object.defineProperty(t, "GraphQLError", {
    enumerable: !0,
    get: function() {
      return e.GraphQLError;
    }
  }), Object.defineProperty(t, "formatError", {
    enumerable: !0,
    get: function() {
      return e.formatError;
    }
  }), Object.defineProperty(t, "locatedError", {
    enumerable: !0,
    get: function() {
      return i.locatedError;
    }
  }), Object.defineProperty(t, "printError", {
    enumerable: !0,
    get: function() {
      return e.printError;
    }
  }), Object.defineProperty(t, "syntaxError", {
    enumerable: !0,
    get: function() {
      return n.syntaxError;
    }
  });
  var e = Tn, n = ho, i = po;
})(On);
var Al = {};
(function(t) {
  t.__esModule = !0, t.OpenAPIV2 = t.OpenAPIV3 = void 0, function(e) {
    (function(n) {
      n.GET = "get", n.PUT = "put", n.POST = "post", n.DELETE = "delete", n.OPTIONS = "options", n.HEAD = "head", n.PATCH = "patch", n.TRACE = "trace";
    })(e.HttpMethods || (e.HttpMethods = {}));
  }(t.OpenAPIV3 || (t.OpenAPIV3 = {})), function(e) {
    (function(n) {
      n.GET = "get", n.PUT = "put", n.POST = "post", n.DELETE = "delete", n.OPTIONS = "options", n.HEAD = "head", n.PATCH = "patch";
    })(e.HttpMethods || (e.HttpMethods = {}));
  }(t.OpenAPIV2 || (t.OpenAPIV2 = {}));
})(Al);
const cs = /* @__PURE__ */ new Map(), Gm = (t, e) => {
  cs.has(t) || cs.set(t, /* @__PURE__ */ new Map());
  const n = cs.get(t);
  if (n.has(e))
    return n.get(e);
  const i = e.split("/").slice(1);
  let r = t;
  for (const s of i)
    (!r || typeof r != "object") && (r = null), r = r[s] ?? null;
  return n.set(e, r), r;
}, fs = /* @__PURE__ */ new Map(), qm = (t) => t !== null && typeof t == "object", zm = async (t, e = []) => {
  if (fs.has(t))
    return fs.get(t);
  const n = structuredClone(t), i = /* @__PURE__ */ new Set(), r = async (o, a) => {
    if (qm(o)) {
      if (i.has(o))
        return o;
      if (i.add(o), Array.isArray(o))
        for (let u = 0; u < o.length; u++)
          o[u] = await r(o[u]);
      else {
        if ("$ref" in o && typeof o.$ref == "string") {
          for (const u of e) {
            const c = await u(o.$ref);
            if (c) return c;
          }
          return await Gm(n, o.$ref);
        }
        for (const u in o)
          o[u] = await r(o[u]);
      }
    }
    return o;
  }, s = await r(n);
  return fs.set(t, s), s;
};
function hn(t, e) {
  const n = {};
  for (const [i, r] of Object.entries(t))
    Array.isArray(r) ? n[i] = r.map(
      (s) => typeof s == "object" && s !== null ? hn(s, e) : s
    ) : typeof r == "object" && r !== null ? n[i] = hn(r, e) : n[i] = r;
  return e(n);
}
const Qm = (t) => {
  var e;
  return (e = t.openapi) != null && e.startsWith("3.0") && (t.openapi = "3.1.0"), t = hn(t, (n) => (n.type !== "undefined" && n.nullable === !0 && (n.type = ["null", n.type], delete n.nullable), n)), t = hn(t, (n) => (n.exclusiveMinimum === !0 ? (n.exclusiveMinimum = n.minimum, delete n.minimum) : n.exclusiveMinimum === !1 && delete n.exclusiveMinimum, n.exclusiveMaximum === !0 ? (n.exclusiveMaximum = n.maximum, delete n.maximum) : n.exclusiveMaximum === !1 && delete n.exclusiveMaximum, n)), t = hn(t, (n) => (n.example !== void 0 && (n.examples = {
    default: n.example
  }, delete n.example), n)), t = hn(t, (n) => {
    if (n.type === "object" && n.properties !== void 0)
      for (const [, i] of Object.entries(n.properties)) {
        const r = i ?? {};
        r.type === "string" && r.format === "binary" && (r.contentEncoding = "application/octet-stream", delete r.format);
      }
    return n;
  }), t = hn(t, (n) => {
    if (!(n.type === "string" && n.format === "binary"))
      return n;
  }), t = hn(t, (n) => n.type === "string" && n.format === "base64" ? {
    type: "string",
    contentEncoding: "base64"
  } : n), t;
}, Wm = Object.values(Al.OpenAPIV3.HttpMethods), Hm = async (t) => {
  if (typeof t == "string") {
    if (t.trim().startsWith("{"))
      try {
        return JSON.parse(t);
      } catch (i) {
        throw new On.GraphQLError("Invalid JSON schema", {
          originalError: i
        });
      }
    if (t.includes("://")) {
      let i;
      try {
        i = await fetch(t, {
          cache: "force-cache"
        });
      } catch (s) {
        throw new On.GraphQLError("Failed to fetch schema", {
          originalError: s
        });
      }
      if (!i.ok)
        throw new On.GraphQLError(
          `Failed to fetch schema: ${i.statusText}`
        );
      const r = await i.text();
      try {
        return r.trim().startsWith("{") ? JSON.parse(r) : (await import("./index-CkwDvuPt.js")).parse(r);
      } catch (s) {
        throw new On.GraphQLError("Fetched invalid schema", {
          originalError: s
        });
      }
    }
    const n = (await import("./index-CkwDvuPt.js")).parse(t);
    if (typeof n == "object") return n;
  }
  if (typeof t == "object") return t;
  throw new On.GraphQLError("Unsupported schema input: " + t);
}, Ym = async (t) => {
  const e = await Hm(t);
  if (!e.openapi)
    throw new On.GraphQLError("OpenAPI version is not defined");
  const n = await zm(e);
  return Qm(n);
}, Jm = (t, e, n) => {
  const i = (e.summary ?? "") + (e.operationId ? "-" + e.operationId.slice(0, (e.summary, 1 / 0)) : "");
  return t(
    (n ? n + "-" : "") + (i || `${e.method}-${e.path}`)
  );
}, Km = new $s({
  ttl: 60 * 10 * 1e3,
  ttlAutopurge: !0,
  fetchMethod: (t, e, { context: n }) => Ym(n)
}), Me = new Fh({}), Di = Me.addScalarType("JSON", Rh), Xm = Me.addScalarType("JSONObject", Lh), xl = (t) => {
  const e = t.tags ?? [], n = Object.values(t.paths ?? {}).flatMap((r) => Object.values(r ?? {})).flatMap(
    (r) => typeof r == "object" && "tags" in r ? r.tags ?? [] : []
  ), i = [...new Set(n)].filter(
    (r) => !e.some((s) => s.name === r)
  );
  return [...e, ...i.map((r) => ({ name: r }))];
}, Fl = (t, e) => {
  const n = $l();
  return Object.entries(t ?? {}).flatMap(
    ([i, r]) => Wm.flatMap((s) => {
      if (!(r != null && r[s])) return [];
      const o = r[s], a = r.parameters ?? [], u = o.parameters ?? [], c = [
        ...a.filter(
          // remove path parameters that are already defined in the operation
          (g) => !u.some(
            (p) => p.name === g.name && p.in === g.in
          )
        ),
        ...u
      ], f = {
        summary: o.summary,
        operationId: o.operationId,
        path: i,
        method: s
      };
      return {
        ...o,
        method: s,
        path: i,
        parameters: c,
        tags: o.tags ?? [],
        slug: Jm(n, f, e)
      };
    })
  );
}, Zm = Me.objectRef("SchemaTag").implement({
  fields: (t) => ({
    name: t.exposeString("name", { nullable: !0 }),
    description: t.exposeString("description", { nullable: !0 }),
    operations: t.field({
      type: [Cl],
      resolve: (e, n, i) => {
        const r = xl(i.schema).map((s) => s.name);
        return Fl(i.schema.paths, e.name).filter(
          (s) => e.name ? s.tags.includes(e.name) : s.tags.length === 0 || // If none of the tags are present in the root tags, then show them here
          s.tags.every((o) => !r.includes(o))
        );
      }
    })
  })
}), ey = Me.objectRef("Server").implement({
  fields: (t) => ({
    url: t.exposeString("url"),
    description: t.exposeString("description", { nullable: !0 })
  })
}), ty = Me.objectRef("PathItem").implement({
  fields: (t) => ({
    path: t.exposeString("path"),
    methods: t.exposeStringList("methods")
  })
}), ny = Me.objectRef("TagItem").implement({
  fields: (t) => ({
    name: t.exposeString("name"),
    description: t.exposeString("description", { nullable: !0 })
  })
}), iy = Me.objectRef("EncodingItem").implement({
  fields: (t) => ({
    name: t.exposeString("name"),
    contentType: t.exposeString("contentType", { nullable: !0 }),
    headers: t.expose("headers", { type: Xm, nullable: !0 }),
    style: t.exposeString("style", { nullable: !0 }),
    explode: t.exposeBoolean("explode", { nullable: !0 }),
    allowReserved: t.exposeBoolean("allowReserved", { nullable: !0 })
  })
}), Rl = Me.objectRef("ExampleItem").implement({
  fields: (t) => ({
    name: t.exposeString("name"),
    summary: t.exposeString("summary", { nullable: !0 }),
    description: t.exposeString("description", { nullable: !0 }),
    value: t.exposeString("value", { nullable: !0 }),
    externalValue: t.exposeString("externalValue", { nullable: !0 })
  })
}), ry = Me.enumType("ParameterIn", {
  values: ["query", "header", "path", "cookie"]
}), sy = Me.objectRef("ParameterItem").implement({
  fields: (t) => ({
    name: t.exposeString("name"),
    in: t.field({
      type: ry,
      resolve: (e) => e.in
    }),
    description: t.exposeString("description", { nullable: !0 }),
    required: t.exposeBoolean("required", { nullable: !0 }),
    deprecated: t.exposeBoolean("deprecated", { nullable: !0 }),
    allowEmptyValue: t.exposeBoolean("allowEmptyValue", { nullable: !0 }),
    style: t.exposeString("style", { nullable: !0 }),
    explode: t.exposeBoolean("explode", { nullable: !0 }),
    allowReserved: t.exposeBoolean("allowReserved", { nullable: !0 }),
    examples: t.field({
      type: [Rl],
      resolve: (e) => Object.entries(e.examples ?? {}).map(([n, i]) => ({
        name: n,
        ...typeof i == "string" ? { value: i } : i
      })),
      nullable: !0
    }),
    schema: t.expose("schema", { type: Di, nullable: !0 })
  })
}), Ll = Me.objectRef("MediaTypeObject").implement({
  fields: (t) => ({
    mediaType: t.exposeString("mediaType"),
    schema: t.expose("schema", { type: Di, nullable: !0 }),
    examples: t.expose("examples", { type: [Rl], nullable: !0 }),
    encoding: t.expose("encoding", { type: [iy], nullable: !0 })
  })
}), oy = Me.objectRef("RequestBodyObject").implement({
  fields: (t) => ({
    description: t.exposeString("description", { nullable: !0 }),
    content: t.expose("content", { type: [Ll], nullable: !0 }),
    required: t.exposeBoolean("required", { nullable: !0 })
  })
}), ay = Me.objectRef("ResponseItem").implement({
  fields: (t) => ({
    statusCode: t.exposeString("statusCode"),
    description: t.exposeString("description", { nullable: !0 }),
    content: t.expose("content", { type: [Ll], nullable: !0 }),
    headers: t.expose("headers", { type: Di, nullable: !0 }),
    links: t.expose("links", { type: Di, nullable: !0 })
  })
}), Cl = Me.objectRef("OperationItem").implement({
  fields: (t) => ({
    slug: t.exposeString("slug"),
    path: t.exposeString("path"),
    method: t.exposeString("method"),
    operationId: t.exposeString("operationId", { nullable: !0 }),
    summary: t.exposeString("summary", { nullable: !0 }),
    description: t.exposeString("description", { nullable: !0 }),
    contentTypes: t.stringList({
      resolve: (e) => {
        var n;
        return Object.keys(((n = e.requestBody) == null ? void 0 : n.content) ?? {});
      }
    }),
    parameters: t.expose("parameters", {
      type: [sy],
      nullable: !0
    }),
    requestBody: t.field({
      type: oy,
      resolve: (e) => {
        var n, i, r;
        return {
          description: (n = e.requestBody) == null ? void 0 : n.description,
          required: (i = e.requestBody) == null ? void 0 : i.required,
          content: Object.entries(((r = e.requestBody) == null ? void 0 : r.content) ?? {}).map(
            ([s, o]) => ({
              mediaType: s,
              schema: o.schema,
              examples: Object.entries(o.examples ?? {}).map(
                ([a, u]) => ({ name: a, ...u })
              ),
              encoding: Object.entries(o.encoding ?? {}).map(
                ([a, u]) => ({ name: a, ...u })
              )
            })
          )
        };
      },
      nullable: !0
    }),
    responses: t.field({
      type: [ay],
      resolve: (e) => Object.entries(e.responses ?? {}).map(
        ([n, i]) => ({
          statusCode: n,
          description: i.description,
          content: Object.entries(i.content ?? {}).map(
            ([r, s]) => ({
              mediaType: r,
              schema: s.schema,
              examples: Object.entries(s.examples ?? {}).map(
                ([o, a]) => ({ name: o, ...a })
              )
            })
          ),
          headers: i.headers,
          links: i.links
        })
      )
    }),
    tags: t.field({
      type: [ny],
      resolve: (e, n, i) => {
        var r;
        return (r = e.tags) == null ? void 0 : r.map((s) => {
          var o, a;
          return {
            name: s,
            description: (a = (o = i.schema.tags) == null ? void 0 : o.find((u) => u.name === s)) == null ? void 0 : a.description
          };
        });
      },
      nullable: !0
    }),
    deprecated: t.exposeBoolean("deprecated", { nullable: !0 })
  })
}), uy = Me.objectRef("Schema").implement({
  fields: (t) => ({
    openapi: t.string({ resolve: (e) => e.openapi }),
    url: t.string({ resolve: (e) => {
      var n, i;
      return ((i = (n = e.servers) == null ? void 0 : n.at(0)) == null ? void 0 : i.url) ?? "/";
    } }),
    servers: t.field({
      type: [ey],
      resolve: (e) => e.servers ?? []
    }),
    title: t.string({ resolve: (e) => e.info.title }),
    version: t.string({ resolve: (e) => e.info.version }),
    description: t.string({
      resolve: (e) => e.info.description,
      nullable: !0
    }),
    paths: t.field({
      type: [ty],
      resolve: (e) => Object.entries(e.paths ?? {}).map(([n, i]) => ({
        path: n,
        methods: Object.keys(i)
      }))
    }),
    tags: t.field({
      args: {
        name: t.arg.string()
      },
      type: [Zm],
      resolve: (e, n) => {
        const i = [...xl(e), { name: "" }];
        return n.name ? i.filter((r) => r.name === n.name) : i;
      }
    }),
    operations: t.field({
      type: [Cl],
      args: {
        path: t.arg.string(),
        method: t.arg.string(),
        operationId: t.arg.string(),
        tag: t.arg.string()
      },
      resolve: (e, n) => Fl(e.paths).filter(
        (i) => (!n.operationId || i.operationId === n.operationId) && (!n.path || i.path === n.path) && (!n.method || i.method === n.method) && (!n.tag || i.tags.includes(n.tag))
      )
    })
  })
}), ly = async (t) => {
  const e = gm(t);
  return await Km.forceFetch(e, { context: t });
}, cy = Me.enumType("SchemaType", {
  values: ["url", "file", "raw"]
});
Me.queryType({
  fields: (t) => ({
    // https://tan-cow-main-bce8a06.d2.zuplo.dev/openapi
    schema: t.field({
      type: uy,
      args: {
        type: t.arg({ type: cy, required: !0 }),
        input: t.arg({ type: Di, required: !0 })
      },
      resolve: async (e, n, i) => {
        const r = await ly(n.input);
        return i.schema = r, r;
      }
    })
  })
});
const fy = Me.toSchema(), dy = (t) => dm({ schema: fy, ...t }), hy = () => dy({
  plugins: [
    // eslint-disable-next-line react-hooks/rules-of-hooks
    ac({
      logFn: (t, { args: e }) => {
      }
    })
  ]
}), py = hy(), gy = () => new Qa({
  url: "/__z/graphql",
  // Custom fetch to send the GraphQL request to the worker and convert the response back to a `Response` object
  fetch: async (t, e) => {
    if (!(e != null && e.body)) throw new Error("No body");
    return await py.fetch(
      new Request("http://localhost/__z/graphql", {
        method: "POST",
        body: e.body,
        headers: {
          "Content-Type": "application/json"
        }
      })
    );
  },
  exchanges: [
    Wa,
    Ha({
      onError(t, e) {
        var n;
        console.error(t), console.groupCollapsed("Operation info"), console.log("body", (n = e.query.loc) == null ? void 0 : n.source.body.trim()), console.log("variables", e.variables), console.groupEnd();
      }
    }),
    Ya
  ]
}), my = Jl(), Ay = ({
  useMemoryClient: t
}) => {
  if (t || typeof SharedWorker > "u")
    return gy();
  const e = new SharedWorker(new URL(
    /* @vite-ignore */
    "./assets/worker-Bf8vjASY.js",
    import.meta.url
  ), {
    type: "module"
  });
  e.onerror = (r) => {
    console.error(r);
  }, e.port.start();
  const [n, i] = Xl();
  return e.port.onmessage = (r) => {
    i(r.data.id, r.data.body);
  }, new Qa({
    url: "/__z/graphql",
    // Custom fetch to send the GraphQL request to the worker and convert the response back to a `Response` object
    fetch: async (r, s) => {
      if (!(s != null && s.body)) throw new Error("No body");
      const o = my();
      e.port.postMessage({
        id: o,
        body: s.body
      });
      const a = await n(o);
      return new Response(a, {
        headers: {
          "Content-Type": "application/json"
        }
      });
    },
    exchanges: [
      Wa,
      Ha({
        onError(r, s) {
          var o;
          console.error(r), console.groupCollapsed("Operation info"), console.log("body", (o = s.query.loc) == null ? void 0 : o.source.body.trim()), console.log("variables", s.variables), console.groupEnd();
        }
      }),
      Ya
    ]
  });
};
export {
  Ay as createClient
};
//# sourceMappingURL=zudoku.openapi-worker.js.map
