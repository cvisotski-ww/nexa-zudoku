var r = Object.defineProperty;
var a = (e, s, t) => s in e ? r(e, s, { enumerable: !0, configurable: !0, writable: !0, value: t }) : e[s] = t;
var o = (e, s, t) => a(e, typeof s != "symbol" ? s + "" : s, t);
import { u } from "./state-CsuHT8ZO.js";
import { OpenIDAuthenticationProvider as d } from "./zudoku.auth-openid.js";
class c extends d {
  constructor(t) {
    super({
      ...t,
      type: "openid",
      issuer: `https://${t.domain}`,
      clientId: t.clientId,
      audience: t.audience
    });
    o(this, "onAuthorizationUrl", async (t, { isSignUp: i }) => {
      i && t.searchParams.set("screen_hint", "signup");
    });
    o(this, "signOut", async () => {
      u.setState({
        isAuthenticated: !1,
        isPending: !1,
        profile: void 0
      }), sessionStorage.clear();
      const t = await this.getAuthServer(), i = new URL(
        window.location.origin + this.logoutRedirectUrlPath
      );
      i.pathname = this.logoutRedirectUrlPath;
      let n;
      t.end_session_endpoint ? (n = new URL(t.end_session_endpoint), n.searchParams.set(
        "post_logout_redirect_uri",
        i.toString()
      )) : n = new URL(`${this.issuer}oidc/logout`);
    });
  }
}
const g = (e) => new c(e);
export {
  g as default
};
//# sourceMappingURL=zudoku.auth-auth0.js.map
