import { j as e } from "./jsx-runtime-B6kdoens.js";
import { S as x, R as f } from "./SlotletProvider-RvaeLR6z.js";
import { u as g, a as d, I as j, S as v, b as w, c as b, d as k, e as K, f as m } from "./Input-CHfE_2Qk.js";
import { a as N, L as u, O as I } from "./index-BRCiYFaL.js";
import { u as h, a as E, b as S } from "./ZudokuContext-BEmsYQoq.js";
import { B as l, n as A } from "./index-Do_BBSIs.js";
import { D as C } from "./DeveloperHint-BE9DzNhv.js";
import { RotateCwIcon as P, TrashIcon as D, EyeOffIcon as R, EyeIcon as q, CheckIcon as O, CopyIcon as z } from "lucide-react";
import { useState as p } from "react";
import { a as T } from "./Markdown-CWI6lU11.js";
function c(t, s) {
  if (t)
    return;
  const i = typeof s == "function" ? s() : s;
  throw new F(i ?? "Invariant failed");
}
class F extends Error {
  constructor(s) {
    super(s), this.name = "ZudokuError";
  }
}
const L = ({ service: t }) => {
  const s = h(), i = N(), n = g({
    defaultValues: {
      expiresOn: "30"
    }
  }), o = d({
    mutationFn: ({ description: a, expiresOn: r }) => {
      if (!t.createKey)
        throw new Error("deleteKey not implemented");
      const y = r !== "never" ? V(Number(r)) : void 0;
      return t.createKey(
        { description: a, expiresOn: y },
        s
      );
    },
    onSuccess: () => i("/settings/api-keys/")
  });
  return t.createKey ? /* @__PURE__ */ e.jsxs("div", { className: "max-w-screen-lg pt-[--padding-content-top] pb-[--padding-content-bottom]", children: [
    /* @__PURE__ */ e.jsx("div", { className: "flex justify-between mb-4 border-b pb-1", children: /* @__PURE__ */ e.jsx("h1", { className: "font-medium text-2xl", children: "New API Key" }) }),
    /* @__PURE__ */ e.jsx(
      "form",
      {
        onSubmit: n.handleSubmit((a) => o.mutate(a)),
        children: /* @__PURE__ */ e.jsxs("div", { className: "flex gap-2 flex-col", children: [
          "Note",
          /* @__PURE__ */ e.jsx(j, { ...n.register("description") }),
          "Expiration",
          /* @__PURE__ */ e.jsxs(
            v,
            {
              onValueChange: (a) => n.setValue("expiresOn", a),
              defaultValue: n.getValues("expiresOn"),
              children: [
                /* @__PURE__ */ e.jsx(w, { children: /* @__PURE__ */ e.jsx(b, {}) }),
                /* @__PURE__ */ e.jsx(k, { children: /* @__PURE__ */ e.jsxs(K, { children: [
                  [7, 30, 60, 90].map((a) => /* @__PURE__ */ e.jsxs(m, { value: String(a), children: [
                    a,
                    " days"
                  ] }, a)),
                  /* @__PURE__ */ e.jsx(m, { value: "never", children: "Never" })
                ] }) })
              ]
            }
          ),
          /* @__PURE__ */ e.jsxs("div", { className: "flex gap-2", children: [
            /* @__PURE__ */ e.jsx(l, { children: "Generate Key" }),
            /* @__PURE__ */ e.jsx(l, { variant: "outline", asChild: !0, children: /* @__PURE__ */ e.jsx(u, { to: "/settings/api-keys/", children: "Cancel" }) })
          ] })
        ] })
      }
    )
  ] }) : null;
}, V = (t) => {
  const s = /* @__PURE__ */ new Date();
  return s.setDate(s.getDate() + t), s.toISOString();
}, M = () => {
  const t = A();
  return t.isAuthEnabled && t.isPending ? null : t.isAuthenticated ? /* @__PURE__ */ e.jsx(I, {}) : t.isAuthEnabled ? /* @__PURE__ */ e.jsxs("div", { className: "flex flex-col justify-center gap-2 items-center h-1/2", children: [
    "Please login first to view this page",
    /* @__PURE__ */ e.jsx(l, { onClick: () => t.login(), children: "Login" })
  ] }) : /* @__PURE__ */ e.jsx("div", { className: "flex flex-col justify-center gap-2 items-center h-1/2", children: /* @__PURE__ */ e.jsxs(C, { className: "max-w-[600px]", children: [
    "Authentication needs to be enabled for API keys to work. Enable it in your Zudoku configuration under ",
    /* @__PURE__ */ e.jsx("code", { children: "authentication" }),
    "."
  ] }) });
}, _ = ({ service: t }) => {
  const s = h(), i = E(), { data: n } = S({
    queryFn: () => t.getKeys(s),
    queryKey: ["api-keys"],
    retry: !1
  }), o = d({
    mutationFn: (r) => {
      if (!t.deleteKey)
        throw new Error("deleteKey not implemented");
      return t.deleteKey(r, s);
    },
    onSuccess: () => {
      i.invalidateQueries({ queryKey: ["api-keys"] });
    }
  }), a = d({
    mutationFn: (r) => {
      if (!t.rollKey)
        throw new Error("rollKey not implemented");
      return t.rollKey(r, s);
    },
    onSuccess: () => i.invalidateQueries({ queryKey: ["api-keys"] })
  });
  return /* @__PURE__ */ e.jsxs("div", { className: "max-w-screen-lg h-full pt-[--padding-content-top] pb-[--padding-content-bottom]", children: [
    /* @__PURE__ */ e.jsx(x, { name: "api-keys-list-page" }),
    /* @__PURE__ */ e.jsxs("div", { className: "flex justify-between mb-4 border-b pb-3", children: [
      /* @__PURE__ */ e.jsx("h1", { className: "font-medium text-2xl", children: "API Keys" }),
      t.createKey && /* @__PURE__ */ e.jsx(l, { asChild: !0, children: /* @__PURE__ */ e.jsx(u, { to: "/settings/api-keys/new", children: "Create API Key" }) })
    ] }),
    /* @__PURE__ */ e.jsx(x, { name: "api-keys-list-page-before-keys" }),
    n.length === 0 ? /* @__PURE__ */ e.jsxs("div", { className: "flex flex-col justify-center gap-4 items-center p-8 border rounded bg-muted/30 text-muted-foreground", children: [
      /* @__PURE__ */ e.jsxs("p", { className: "text-center", children: [
        "No API keys created yet.",
        /* @__PURE__ */ e.jsx("br", {}),
        "Get started and create your first key."
      ] }),
      t.createKey && /* @__PURE__ */ e.jsx(l, { asChild: !0, variant: "outline", children: /* @__PURE__ */ e.jsx(u, { to: "/settings/api-keys/new", children: "Create API Key" }) })
    ] }) : /* @__PURE__ */ e.jsx(
      "ul",
      {
        className: T(
          "grid grid-cols-1 rounded border divide-y divide-border",
          "lg:grid-cols-[minmax(250px,min-content)_1fr_min-content]"
        ),
        children: n.map((r) => /* @__PURE__ */ e.jsxs(
          "li",
          {
            className: "p-5 grid grid-cols-subgrid col-span-full gap-2 items-center",
            children: [
              /* @__PURE__ */ e.jsxs("div", { className: "flex flex-col gap-1 text-sm", children: [
                r.description ?? r.id,
                /* @__PURE__ */ e.jsxs("div", { className: "text-muted-foreground text-xs", children: [
                  r.createdOn && /* @__PURE__ */ e.jsxs("div", { children: [
                    "Created on ",
                    new Date(r.createdOn).toLocaleDateString()
                  ] }),
                  r.expiresOn && /* @__PURE__ */ e.jsxs("div", { children: [
                    "Expires on ",
                    new Date(r.expiresOn).toLocaleDateString()
                  ] })
                ] })
              ] }),
              /* @__PURE__ */ e.jsx("div", { className: "items-center flex lg:justify-center", children: /* @__PURE__ */ e.jsx(Q, { apiKey: r.key }) }),
              /* @__PURE__ */ e.jsxs("div", { className: "flex gap-2", children: [
                t.rollKey && /* @__PURE__ */ e.jsx(
                  l,
                  {
                    size: "icon",
                    title: "Roll this key",
                    variant: "ghost",
                    onClick: () => {
                      confirm("Do you want to roll this key?") && a.mutate(r.id);
                    },
                    children: /* @__PURE__ */ e.jsx(P, { size: 16 })
                  }
                ),
                t.deleteKey && /* @__PURE__ */ e.jsx(
                  l,
                  {
                    variant: "ghost",
                    size: "icon",
                    onClick: () => {
                      confirm("Do you want to delete this key?") && o.mutate(r.id);
                    },
                    disabled: o.isPending,
                    children: /* @__PURE__ */ e.jsx(D, { size: 16 })
                  }
                )
              ] })
            ]
          },
          r.id
        ))
      }
    )
  ] });
}, Q = ({ apiKey: t }) => {
  const [s, i] = p(!1), [n, o] = p(!1);
  return /* @__PURE__ */ e.jsxs("div", { className: "flex gap-2 items-center text-sm", children: [
    /* @__PURE__ */ e.jsx("div", { className: "border rounded bg-gray-100 dark:bg-gray-950 p-1 font-mono truncate h-9 items-center flex px-2", children: s ? t : "â€¢".repeat(t.length) }),
    /* @__PURE__ */ e.jsx(
      l,
      {
        variant: "outline",
        onClick: () => i((a) => !a),
        size: "icon",
        children: s ? /* @__PURE__ */ e.jsx(R, { size: 16 }) : /* @__PURE__ */ e.jsx(q, { size: 16 })
      }
    ),
    /* @__PURE__ */ e.jsx(
      l,
      {
        variant: "outline",
        onClick: () => {
          navigator.clipboard.writeText(t).then(() => {
            o(!0), setTimeout(() => o(!1), 2e3);
          });
        },
        size: "icon",
        children: n ? /* @__PURE__ */ e.jsx(O, { size: 16 }) : /* @__PURE__ */ e.jsx(z, { size: 16 })
      }
    )
  ] });
}, Z = "https://zudoku-rewiringamerica-main-ef9c9c0.d2.zuplo.dev", B = (t) => ({
  deleteKey: async (s, i) => {
    const n = new Request(t + `/v1/developer/api-keys/${s}`, {
      method: "DELETE"
    });
    await i.signRequest(n);
    const o = await fetch(n);
    c(o.ok, "Failed to delete API key");
  },
  rollKey: async (s, i) => {
    const n = await fetch(
      await i.signRequest(
        new Request(t + `/v1/developer/api-keys/${s}/key`, {
          method: "DELETE"
        })
      )
    );
    c(n.ok, "Failed to delete API key");
  },
  createKey: async (s, i) => {
    const n = new Request(t + "/v1/developer/api-keys", {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(s)
    });
    await i.signRequest(n);
    const o = await fetch(n);
    c(o.ok, "Failed to create API key");
  },
  getKeys: async (s) => {
    const i = new Request(t + "/v1/developer/api-keys");
    await s.signRequest(i);
    const n = await fetch(i);
    return c(n.ok, "Failed to fetch API keys"), await n.json();
  }
}), se = (t) => {
  const s = "endpoint" in t ? t.endpoint : Z, i = "getKeys" in t ? t : B(s);
  return {
    getProfileMenuItems: () => [
      {
        label: "API Keys",
        path: "/settings/api-keys"
      }
    ],
    getIdentities: async (n) => {
      try {
        return (await i.getKeys(n)).map((a) => ({
          authorizeRequest: (r) => (r.headers.set("Authorization", `Bearer ${a.key}`), r),
          id: a.id,
          label: a.description ?? a.id
        }));
      } catch {
        return [];
      }
    },
    getRoutes: () => [
      {
        element: /* @__PURE__ */ e.jsx(M, {}),
        errorElement: /* @__PURE__ */ e.jsx(f, {}),
        children: [
          {
            path: "/settings/api-keys",
            element: /* @__PURE__ */ e.jsx(_, { service: i })
          },
          {
            path: "/settings/api-keys/new",
            element: /* @__PURE__ */ e.jsx(L, { service: i })
          }
        ]
      }
    ]
  };
};
export {
  se as apiKeyPlugin
};
//# sourceMappingURL=zudoku.plugin-api-keys.js.map
