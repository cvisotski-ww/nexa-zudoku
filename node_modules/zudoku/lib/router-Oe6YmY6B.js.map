{"version":3,"file":"router-Oe6YmY6B.js","sources":["../../../node_modules/.pnpm/@remix-run+router@1.20.0/node_modules/@remix-run/router/dist/router.js"],"sourcesContent":["/**\n * @remix-run/router v1.20.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  let history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta\n        });\n      }\n    },\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nfunction parsePath(path) {\n  let parsedPath = {};\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  let index = getIndex();\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n  function getIndex() {\n    let state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({\n        action,\n        location: history.location,\n        delta\n      });\n    }\n  }\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    let href = typeof to === \"string\" ? to : createPath(to);\n    // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n    href = href.replace(/ $/, \"%20\");\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n  let history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n}\n//#endregion\n\nvar ResultType;\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\nconst immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\nfunction isIndexRoute(route) {\n  return route.index === true;\n}\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  if (manifest === void 0) {\n    manifest = {};\n  }\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, String(index)];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, mapRouteProperties(route), {\n        id\n      });\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {\n        id,\n        children: undefined\n      });\n      manifest[id] = pathOrLayoutRoute;\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);\n      }\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  return matchRoutesImpl(routes, locationArg, basename, false);\n}\nfunction matchRoutesImpl(routes, locationArg, basename, allowPartial) {\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch(branches[i], decoded, allowPartial);\n  }\n  return matches;\n}\nfunction convertRouteMatchToUiMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n      // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n  routes.forEach((route, index) => {\n    var _route$path;\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments;\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = [];\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\")));\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = s => s === \"*\";\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch, pathname, allowPartial) {\n  if (allowPartial === void 0) {\n    allowPartial = false;\n  }\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    let route = meta.route;\n    if (!match && end && allowPartial && !routesMeta[routesMeta.length - 1].route.index) {\n      match = matchPath({\n        path: meta.relativePath,\n        caseSensitive: meta.caseSensitive,\n        end: false\n      }, remainingPathname);\n    }\n    if (!match) {\n      return null;\n    }\n    Object.assign(matchedParams, match.params);\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  let path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  }\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n  const stringify = p => p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n  const segments = path.split(/\\/+/).map((segment, index, array) => {\n    const isLastSegment = index === array.length - 1;\n    // only apply the splat if it's the last segment\n    if (isLastSegment && segment === \"*\") {\n      const star = \"*\";\n      // Apply the splat\n      return stringify(params[star]);\n    }\n    const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n    if (keyMatch) {\n      const [, key, optional] = keyMatch;\n      let param = params[key];\n      invariant(optional === \"?\" || param != null, \"Missing \\\":\" + key + \"\\\" param\");\n      return stringify(param);\n    }\n    // Remove any optional markers from optional static segments\n    return segment.replace(/\\?$/g, \"\");\n  })\n  // Remove empty segments\n  .filter(segment => !!segment);\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  let [matcher, compiledParams] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = compiledParams.reduce((memo, _ref, index) => {\n    let {\n      paramName,\n      isOptional\n    } = _ref;\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n    const value = captureGroups[index];\n    if (isOptional && !value) {\n      memo[paramName] = undefined;\n    } else {\n      memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n    }\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let params = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:([\\w-]+)(\\?)?/g, (_, paramName, isOptional) => {\n    params.push({\n      paramName,\n      isOptional: isOptional != null\n    });\n    return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n  });\n  if (path.endsWith(\"*\")) {\n    params.push({\n      paramName: \"*\"\n    });\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, params];\n}\nfunction decodePath(value) {\n  try {\n    return value.split(\"/\").map(v => decodeURIComponent(v).replace(/\\//g, \"%2F\")).join(\"/\");\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nfunction getResolveToMatches(matches, v7_relativeSplatPath) {\n  let pathMatches = getPathContributingMatches(matches);\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) => idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase);\n  }\n  return pathMatches.map(match => match.pathnameBase);\n}\n/**\n * @private\n */\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n  let to;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from;\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n    // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    }\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  let path = resolvePath(to, from);\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\n/**\n * @private\n */\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\nclass DataWithResponseInit {\n  constructor(data, init) {\n    this.type = \"DataWithResponseInit\";\n    this.data = data;\n    this.init = init || null;\n  }\n}\n/**\n * Create \"responses\" that contain `status`/`headers` without forcing\n * serialization into an actual `Response` - used by Remix single fetch\n */\nfunction data(data, init) {\n  return new DataWithResponseInit(data, typeof init === \"number\" ? {\n    status: init\n  } : init);\n}\nclass AbortedDeferredError extends Error {}\nclass DeferredData {\n  constructor(data, responseInit) {\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\");\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n    this.init = responseInit;\n  }\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, undefined, data), error => this.onSettle(promise, key, error));\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n    this.pendingKeysSet.delete(key);\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\"Deferred data for key \\\"\" + key + \"\\\" resolved/rejected with `undefined`, \" + \"you must resolve/reject with a value or `null`.\");\n      Object.defineProperty(promise, \"_error\", {\n        get: () => undefinedError\n      });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    this.emit(false, key);\n    return data;\n  }\n  emit(aborted, settledKey) {\n    this.subscribers.forEach(subscriber => subscriber(aborted, settledKey));\n  }\n  subscribe(fn) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n  async resolveData(signal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref3) => {\n      let [key, value] = _ref3;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\nconst defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirectDocument = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n/**\n * A redirect response that will perform a `history.replaceState` instead of a\n * `history.pushState` for client-side navigation redirects.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst replace = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Replace\", \"true\");\n  return response;\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nclass ErrorResponseImpl {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\n\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nconst defaultMapRouteProperties = route => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary)\n});\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a router and listen to history POP navigations\n */\nfunction createRouter(init) {\n  const routerWindow = init.window ? init.window : typeof window !== \"undefined\" ? window : undefined;\n  const isBrowser = typeof routerWindow !== \"undefined\" && typeof routerWindow.document !== \"undefined\" && typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let mapRouteProperties;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Routes keyed by ID\n  let manifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);\n  let inFlightDataRoutes;\n  let basename = init.basename || \"/\";\n  let dataStrategyImpl = init.dataStrategy || defaultDataStrategy;\n  let patchRoutesOnNavigationImpl = init.patchRoutesOnNavigation;\n  // Config driven behavior flags\n  let future = _extends({\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false,\n    v7_skipActionErrorRevalidation: false\n  }, init.future);\n  // Cleanup function for history\n  let unlistenHistory = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors = null;\n  if (initialMatches == null && !patchRoutesOnNavigationImpl) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n  // In SPA apps, if the user provided a patchRoutesOnNavigation implementation and\n  // our initial match is a splat route, clear them out so we run through lazy\n  // discovery on hydration in case there's a more accurate lazy route match.\n  // In SSR apps (with `hydrationData`), we expect that the server will send\n  // up the proper matched routes so we don't want to run lazy discovery on\n  // initial hydration and want to hydrate into the splat route.\n  if (initialMatches && !init.hydrationData) {\n    let fogOfWar = checkFogOfWar(initialMatches, dataRoutes, init.history.location.pathname);\n    if (fogOfWar.active) {\n      initialMatches = null;\n    }\n  }\n  let initialized;\n  if (!initialMatches) {\n    initialized = false;\n    initialMatches = [];\n    // If partial hydration and fog of war is enabled, we will be running\n    // `patchRoutesOnNavigation` during hydration so include any partial matches as\n    // the initial matches so we can properly render `HydrateFallback`'s\n    if (future.v7_partialHydration) {\n      let fogOfWar = checkFogOfWar(null, dataRoutes, init.history.location.pathname);\n      if (fogOfWar.active && fogOfWar.matches) {\n        initialMatches = fogOfWar.matches;\n      }\n    }\n  } else if (initialMatches.some(m => m.route.lazy)) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!initialMatches.some(m => m.route.loader)) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    // If errors exist, don't consider routes below the boundary\n    if (errors) {\n      let idx = initialMatches.findIndex(m => errors[m.route.id] !== undefined);\n      initialized = initialMatches.slice(0, idx + 1).every(m => !shouldLoadRouteOnHydration(m.route, loaderData, errors));\n    } else {\n      initialized = initialMatches.every(m => !shouldLoadRouteOnHydration(m.route, loaderData, errors));\n    }\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  };\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction = Action.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController;\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions = new Map();\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener = null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads = new Set();\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map();\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map();\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map();\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map();\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map();\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let unblockBlockerHistoryUpdate = undefined;\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location,\n        delta\n      } = _ref;\n      // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n      if (unblockBlockerHistoryUpdate) {\n        unblockBlockerHistoryUpdate();\n        unblockBlockerHistoryUpdate = undefined;\n        return;\n      }\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      let blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction\n      });\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        let nextHistoryUpdatePromise = new Promise(resolve => {\n          unblockBlockerHistoryUpdate = resolve;\n        });\n        init.history.go(delta * -1);\n        // Put the blocker into a blocked state\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location,\n          proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location\n            });\n            // Re-do the same POP navigation we just blocked, after the url\n            // restoration is also complete.  See:\n            // https://github.com/remix-run/react-router/issues/11613\n            nextHistoryUpdatePromise.then(() => init.history.go(delta));\n          },\n          reset() {\n            let blockers = new Map(state.blockers);\n            blockers.set(blockerKey, IDLE_BLOCKER);\n            updateState({\n              blockers\n            });\n          }\n        });\n        return;\n      }\n      return startNavigation(historyAction, location);\n    });\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () => persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () => routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location, {\n        initialHydration: true\n      });\n    }\n    return router;\n  }\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n  // Subscribe to state updates for the router\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n  // Update our state and notify the calling context of the change\n  function updateState(newState, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state = _extends({}, state, newState);\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers = [];\n    let deletedFetchersKeys = [];\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach(subscriber => subscriber(state, {\n      deletedFetchers: deletedFetchersKeys,\n      viewTransitionOpts: opts.viewTransitionOpts,\n      flushSync: opts.flushSync === true\n    }));\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach(key => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach(key => deleteFetcher(key));\n    }\n  }\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(location, newState, _temp) {\n    var _location$state, _location$state2;\n    let {\n      flushSync\n    } = _temp === void 0 ? {} : _temp;\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n    // Commit any in-flight routes at the end of the HMR revalidation \"navigation\"\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n    if (isUninterruptedRevalidation) ; else if (pendingAction === Action.Pop) ; else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    }\n    let viewTransitionOpts;\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === Action.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location\n      };\n    }\n    updateState(_extends({}, newState, {\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset,\n      blockers\n    }), {\n      viewTransitionOpts,\n      flushSync: flushSync === true\n    });\n    // Reset stateful navigation vars\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n  }\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, future.v7_relativeSplatPath, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = Action.Push;\n    if (userReplace === true) {\n      historyAction = Action.Replace;\n    } else if (userReplace === false) ; else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = Action.Replace;\n    }\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    let flushSync = (opts && opts.flushSync) === true;\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey, IDLE_BLOCKER);\n          updateState({\n            blockers\n          });\n        }\n      });\n      return;\n    }\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.viewTransition,\n      flushSync\n    });\n  }\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    });\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    }\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation,\n      // Proxy through any rending view transition\n      enableViewTransition: pendingViewTransitionEnabled === true\n    });\n  }\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true;\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n    let fogOfWar = checkFogOfWar(matches, routesToUse, location.pathname);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let {\n        error,\n        notFoundMatches,\n        route\n      } = handleNavigational404(location.pathname);\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      }, {\n        flushSync\n      });\n      return;\n    }\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial hydration will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n      completeNavigation(location, {\n        matches\n      }, {\n        flushSync\n      });\n      return;\n    }\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionResult;\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingActionResult = [findNearestBoundary(matches).route.id, {\n        type: ResultType.error,\n        error: opts.pendingError\n      }];\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionResult = await handleAction(request, location, opts.submission, matches, fogOfWar.active, {\n        replace: opts.replace,\n        flushSync\n      });\n      if (actionResult.shortCircuited) {\n        return;\n      }\n      // If we received a 404 from handleAction, it's because we couldn't lazily\n      // discover the destination route so we don't want to call loaders\n      if (actionResult.pendingActionResult) {\n        let [routeId, result] = actionResult.pendingActionResult;\n        if (isErrorResult(result) && isRouteErrorResponse(result.error) && result.error.status === 404) {\n          pendingNavigationController = null;\n          completeNavigation(location, {\n            matches: actionResult.matches,\n            loaderData: {},\n            errors: {\n              [routeId]: result.error\n            }\n          });\n          return;\n        }\n      }\n      matches = actionResult.matches || matches;\n      pendingActionResult = actionResult.pendingActionResult;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n      // No need to do fog of war matching again on loader execution\n      fogOfWar.active = false;\n      // Create a GET request for the loaders\n      request = createClientSideRequest(init.history, request.url, request.signal);\n    }\n    // Call loaders\n    let {\n      shortCircuited,\n      matches: updatedMatches,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, fogOfWar.active, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, opts && opts.initialHydration === true, flushSync, pendingActionResult);\n    if (shortCircuited) {\n      return;\n    }\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches: updatedMatches || matches\n    }, getActionDataForCommit(pendingActionResult), {\n      loaderData,\n      errors\n    }));\n  }\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(request, location, submission, matches, isFogOfWar, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    interruptActiveLoads();\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({\n      navigation\n    }, {\n      flushSync: opts.flushSync === true\n    });\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(matches, location.pathname, request.signal);\n      if (discoverResult.type === \"aborted\") {\n        return {\n          shortCircuited: true\n        };\n      } else if (discoverResult.type === \"error\") {\n        let boundaryId = findNearestBoundary(discoverResult.partialMatches).route.id;\n        return {\n          matches: discoverResult.partialMatches,\n          pendingActionResult: [boundaryId, {\n            type: ResultType.error,\n            error: discoverResult.error\n          }]\n        };\n      } else if (!discoverResult.matches) {\n        let {\n          notFoundMatches,\n          error,\n          route\n        } = handleNavigational404(location.pathname);\n        return {\n          matches: notFoundMatches,\n          pendingActionResult: [route.id, {\n            type: ResultType.error,\n            error\n          }]\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n    // Call our action and get the result\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      let results = await callDataStrategy(\"action\", state, request, [actionMatch], matches, null);\n      result = results[actionMatch.route.id];\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n    if (isRedirectResult(result)) {\n      let replace;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        let location = normalizeRedirectLocation(result.response.headers.get(\"Location\"), new URL(request.url), basename);\n        replace = location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(request, result, true, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      // By default, all submissions to the current location are REPLACE\n      // navigations, but if the action threw an error that'll be rendered in\n      // an errorElement, we fall back to PUSH so that the user can use the\n      // back button to get back to the pre-submission form location to try\n      // again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n      return {\n        matches,\n        pendingActionResult: [boundaryMatch.route.id, result]\n      };\n    }\n    return {\n      matches,\n      pendingActionResult: [actionMatch.route.id, result]\n    };\n  }\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(request, location, matches, isFogOfWar, overrideNavigation, submission, fetcherSubmission, replace, initialHydration, flushSync, pendingActionResult) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation || getLoadingNavigation(location, submission);\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation);\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since it's not a \"navigation\"\n    let shouldUpdateNavigationState = !isUninterruptedRevalidation && (!future.v7_partialHydration || !initialHydration);\n    // When fog of war is enabled, we enter our `loading` state earlier so we\n    // can discover new routes during the `loading` state.  We skip this if\n    // we've already run actions since we would have done our matching already.\n    // If the children() function threw then, we want to proceed with the\n    // partial matches it discovered.\n    if (isFogOfWar) {\n      if (shouldUpdateNavigationState) {\n        let actionData = getUpdatedActionData(pendingActionResult);\n        updateState(_extends({\n          navigation: loadingNavigation\n        }, actionData !== undefined ? {\n          actionData\n        } : {}), {\n          flushSync\n        });\n      }\n      let discoverResult = await discoverRoutes(matches, location.pathname, request.signal);\n      if (discoverResult.type === \"aborted\") {\n        return {\n          shortCircuited: true\n        };\n      } else if (discoverResult.type === \"error\") {\n        let boundaryId = findNearestBoundary(discoverResult.partialMatches).route.id;\n        return {\n          matches: discoverResult.partialMatches,\n          loaderData: {},\n          errors: {\n            [boundaryId]: discoverResult.error\n          }\n        };\n      } else if (!discoverResult.matches) {\n        let {\n          error,\n          notFoundMatches,\n          route\n        } = handleNavigational404(location.pathname);\n        return {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error\n          }\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, future.v7_partialHydration && initialHydration === true, future.v7_skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionResult);\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId));\n    pendingNavigationLoadId = ++incrementingLoadId;\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingActionResult && isErrorResult(pendingActionResult[1]) ? {\n          [pendingActionResult[0]]: pendingActionResult[1].error\n        } : null\n      }, getActionDataForCommit(pendingActionResult), updatedFetchers ? {\n        fetchers: new Map(state.fetchers)\n      } : {}), {\n        flushSync\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    if (shouldUpdateNavigationState) {\n      let updates = {};\n      if (!isFogOfWar) {\n        // Only update navigation/actionNData if we didn't already do it above\n        updates.navigation = loadingNavigation;\n        let actionData = getUpdatedActionData(pendingActionResult);\n        if (actionData !== undefined) {\n          updates.actionData = actionData;\n        }\n      }\n      if (revalidatingFetchers.length > 0) {\n        updates.fetchers = getUpdatedRevalidatingFetchers(revalidatingFetchers);\n      }\n      updateState(updates, {\n        flushSync\n      });\n    }\n    revalidatingFetchers.forEach(rf => {\n      abortFetcher(rf.key);\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(f => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    let {\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state, matches, matchesToLoad, revalidatingFetchers, request);\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    }\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    revalidatingFetchers.forEach(rf => fetchControllers.delete(rf.key));\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, loaderResults, pendingActionResult, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    // Preserve SSR errors during partial hydration\n    if (future.v7_partialHydration && initialHydration && state.errors) {\n      errors = _extends({}, state.errors, errors);\n    }\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n    return _extends({\n      matches,\n      loaderData,\n      errors\n    }, shouldUpdateFetchers ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n  function getUpdatedActionData(pendingActionResult) {\n    if (pendingActionResult && !isErrorResult(pendingActionResult[1])) {\n      // This is cast to `any` currently because `RouteData`uses any and it\n      // would be a breaking change to use any.\n      // TODO: v7 - change `RouteData` to use `unknown` instead of `any`\n      return {\n        [pendingActionResult[0]]: pendingActionResult[1].data\n      };\n    } else if (state.actionData) {\n      if (Object.keys(state.actionData).length === 0) {\n        return null;\n      } else {\n        return state.actionData;\n      }\n    }\n  }\n  function getUpdatedRevalidatingFetchers(revalidatingFetchers) {\n    revalidatingFetchers.forEach(rf => {\n      let fetcher = state.fetchers.get(rf.key);\n      let revalidatingFetcher = getLoadingFetcher(undefined, fetcher ? fetcher.data : undefined);\n      state.fetchers.set(rf.key, revalidatingFetcher);\n    });\n    return new Map(state.fetchers);\n  }\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n    abortFetcher(key);\n    let flushSync = (opts && opts.flushSync) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, future.v7_relativeSplatPath, routeId, opts == null ? void 0 : opts.relative);\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n    let fogOfWar = checkFogOfWar(matches, routesToUse, normalizedPath);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: normalizedPath\n      }), {\n        flushSync\n      });\n      return;\n    }\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);\n    if (error) {\n      setFetcherError(key, routeId, error, {\n        flushSync\n      });\n      return;\n    }\n    let match = getTargetMatch(matches, path);\n    let preventScrollReset = (opts && opts.preventScrollReset) === true;\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, fogOfWar.active, flushSync, preventScrollReset, submission);\n      return;\n    }\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, {\n      routeId,\n      path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, fogOfWar.active, flushSync, preventScrollReset, submission);\n  }\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, isFogOfWar, flushSync, preventScrollReset, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n    function detectAndHandle405Error(m) {\n      if (!m.route.action && !m.route.lazy) {\n        let error = getInternalRouterError(405, {\n          method: submission.formMethod,\n          pathname: path,\n          routeId: routeId\n        });\n        setFetcherError(key, routeId, error, {\n          flushSync\n        });\n        return true;\n      }\n      return false;\n    }\n    if (!isFogOfWar && detectAndHandle405Error(match)) {\n      return;\n    }\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync\n    });\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(requestMatches, path, fetchRequest.signal);\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        setFetcherError(key, routeId, discoverResult.error, {\n          flushSync\n        });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(key, routeId, getInternalRouterError(404, {\n          pathname: path\n        }), {\n          flushSync\n        });\n        return;\n      } else {\n        requestMatches = discoverResult.matches;\n        match = getTargetMatch(requestMatches, path);\n        if (detectAndHandle405Error(match)) {\n          return;\n        }\n      }\n    }\n    // Call the action for the fetcher\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let actionResults = await callDataStrategy(\"action\", state, fetchRequest, [match], requestMatches, key);\n    let actionResult = actionResults[match.route.id];\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n    // When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      }\n      // Let SuccessResult's fall through for revalidation\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(fetchRequest, actionResult, false, {\n            fetcherSubmission: submission,\n            preventScrollReset\n          });\n        }\n      }\n      // Process any non-redirect errors thrown\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, false, future.v7_skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, [match.route.id, actionResult]);\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers.filter(rf => rf.key !== key).forEach(rf => {\n      let staleKey = rf.key;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = getLoadingFetcher(undefined, existingFetcher ? existingFetcher.data : undefined);\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      abortFetcher(staleKey);\n      if (rf.controller) {\n        fetchControllers.set(staleKey, rf.controller);\n      }\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(rf => abortFetcher(rf.key));\n    abortController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    let {\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n    if (abortController.signal.aborted) {\n      return;\n    }\n    abortController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(r => fetchControllers.delete(r.key));\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      return startRedirectNavigation(revalidationRequest, redirect.result, false, {\n        preventScrollReset\n      });\n    }\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      return startRedirectNavigation(revalidationRequest, redirect.result, false, {\n        preventScrollReset\n      });\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n    abortStaleFetchLoads(loadId);\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors),\n        fetchers: new Map(state.fetchers)\n      });\n      isRevalidationRequired = false;\n    }\n  }\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(key, routeId, path, match, matches, isFogOfWar, flushSync, preventScrollReset, submission) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : undefined), {\n      flushSync\n    });\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(matches, path, fetchRequest.signal);\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        setFetcherError(key, routeId, discoverResult.error, {\n          flushSync\n        });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(key, routeId, getInternalRouterError(404, {\n          pathname: path\n        }), {\n          flushSync\n        });\n        return;\n      } else {\n        matches = discoverResult.matches;\n        match = getTargetMatch(matches, path);\n      }\n    }\n    // Call the loader for this fetcher route match\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let results = await callDataStrategy(\"loader\", state, fetchRequest, [match], matches, key);\n    let result = results[match.route.id];\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    }\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n    // We don't want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(fetchRequest, result, false, {\n          preventScrollReset\n        });\n        return;\n      }\n    }\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(request, redirect, isNavigation, _temp2) {\n    let {\n      submission,\n      fetcherSubmission,\n      preventScrollReset,\n      replace\n    } = _temp2 === void 0 ? {} : _temp2;\n    if (redirect.response.headers.has(\"X-Remix-Revalidate\")) {\n      isRevalidationRequired = true;\n    }\n    let location = redirect.response.headers.get(\"Location\");\n    invariant(location, \"Expected a Location header on the redirect Response\");\n    location = normalizeRedirectLocation(location, new URL(request.url), basename);\n    let redirectLocation = createLocation(state.location, location, {\n      _isRedirect: true\n    });\n    if (isBrowser) {\n      let isDocumentReload = false;\n      if (redirect.response.headers.has(\"X-Remix-Reload-Document\")) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(location)) {\n        const url = init.history.createURL(location);\n        isDocumentReload =\n        // Hard reload if it's an absolute URL to a new origin\n        url.origin !== routerWindow.location.origin ||\n        // Hard reload if it's an absolute URL that does not match our basename\n        stripBasename(url.pathname, basename) == null;\n      }\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(location);\n        } else {\n          routerWindow.location.assign(location);\n        }\n        return;\n      }\n    }\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true || redirect.response.headers.has(\"X-Remix-Replace\") ? Action.Replace : Action.Push;\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let {\n      formMethod,\n      formAction,\n      formEncType\n    } = state.navigation;\n    if (!submission && !fetcherSubmission && formMethod && formAction && formEncType) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (redirectPreserveMethodStatusCodes.has(redirect.response.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, activeSubmission, {\n          formAction: location\n        }),\n        // Preserve these flags across redirects\n        preventScrollReset: preventScrollReset || pendingPreventScrollReset,\n        enableViewTransition: isNavigation ? pendingViewTransitionEnabled : undefined\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(redirectLocation, submission);\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve these flags across redirects\n        preventScrollReset: preventScrollReset || pendingPreventScrollReset,\n        enableViewTransition: isNavigation ? pendingViewTransitionEnabled : undefined\n      });\n    }\n  }\n  // Utility wrapper for calling dataStrategy client-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(type, state, request, matchesToLoad, matches, fetcherKey) {\n    let results;\n    let dataResults = {};\n    try {\n      results = await callDataStrategyImpl(dataStrategyImpl, type, state, request, matchesToLoad, matches, fetcherKey, manifest, mapRouteProperties);\n    } catch (e) {\n      // If the outer dataStrategy method throws, just return the error for all\n      // matches - and it'll naturally bubble to the root\n      matchesToLoad.forEach(m => {\n        dataResults[m.route.id] = {\n          type: ResultType.error,\n          error: e\n        };\n      });\n      return dataResults;\n    }\n    for (let [routeId, result] of Object.entries(results)) {\n      if (isRedirectDataStrategyResultResult(result)) {\n        let response = result.result;\n        dataResults[routeId] = {\n          type: ResultType.redirect,\n          response: normalizeRelativeRoutingRedirectResponse(response, request, routeId, matches, basename, future.v7_relativeSplatPath)\n        };\n      } else {\n        dataResults[routeId] = await convertDataStrategyResultToDataResult(result);\n      }\n    }\n    return dataResults;\n  }\n  async function callLoadersAndMaybeResolveData(state, matches, matchesToLoad, fetchersToLoad, request) {\n    let currentMatches = state.matches;\n    // Kick off loaders and fetchers in parallel\n    let loaderResultsPromise = callDataStrategy(\"loader\", state, request, matchesToLoad, matches, null);\n    let fetcherResultsPromise = Promise.all(fetchersToLoad.map(async f => {\n      if (f.matches && f.match && f.controller) {\n        let results = await callDataStrategy(\"loader\", state, createClientSideRequest(init.history, f.path, f.controller.signal), [f.match], f.matches, f.key);\n        let result = results[f.match.route.id];\n        // Fetcher results are keyed by fetcher key from here on out, not routeId\n        return {\n          [f.key]: result\n        };\n      } else {\n        return Promise.resolve({\n          [f.key]: {\n            type: ResultType.error,\n            error: getInternalRouterError(404, {\n              pathname: f.path\n            })\n          }\n        });\n      }\n    }));\n    let loaderResults = await loaderResultsPromise;\n    let fetcherResults = (await fetcherResultsPromise).reduce((acc, r) => Object.assign(acc, r), {});\n    await Promise.all([resolveNavigationDeferredResults(matches, loaderResults, request.signal, currentMatches, state.loaderData), resolveFetcherDeferredResults(matches, fetcherResults, fetchersToLoad)]);\n    return {\n      loaderResults,\n      fetcherResults\n    };\n  }\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.add(key);\n      }\n      abortFetcher(key);\n    });\n  }\n  function updateFetcherState(key, fetcher, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function setFetcherError(key, routeId, error, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function getFetcher(key) {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n  function deleteFetcher(key) {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (fetchControllers.has(key) && !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    cancelledFetcherLoads.delete(key);\n    state.fetchers.delete(key);\n  }\n  function deleteFetcherAndUpdateState(key) {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    if (controller) {\n      controller.abort();\n      fetchControllers.delete(key);\n    }\n  }\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n    return blocker;\n  }\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({\n      blockers\n    });\n  }\n  function shouldBlockNavigation(_ref2) {\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = _ref2;\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({\n      currentLocation,\n      nextLocation,\n      historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n  function handleNavigational404(pathname) {\n    let error = getInternalRouterError(404, {\n      pathname\n    });\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(routesToUse);\n    // Cancel all pending deferred on 404s since we don't keep any routes\n    cancelActiveDeferreds();\n    return {\n      notFoundMatches: matches,\n      route,\n      error\n    };\n  }\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n  function getScrollKey(location, matches) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(location, matches.map(m => convertRouteMatchToUiMatch(m, state.loaderData)));\n      return key || location.key;\n    }\n    return location.key;\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n  function checkFogOfWar(matches, routesToUse, pathname) {\n    if (patchRoutesOnNavigationImpl) {\n      if (!matches) {\n        let fogMatches = matchRoutesImpl(routesToUse, pathname, basename, true);\n        return {\n          active: true,\n          matches: fogMatches || []\n        };\n      } else {\n        if (Object.keys(matches[0].params).length > 0) {\n          // If we matched a dynamic param or a splat, it might only be because\n          // we haven't yet discovered other routes that would match with a\n          // higher score.  Call patchRoutesOnNavigation just to be sure\n          let partialMatches = matchRoutesImpl(routesToUse, pathname, basename, true);\n          return {\n            active: true,\n            matches: partialMatches\n          };\n        }\n      }\n    }\n    return {\n      active: false,\n      matches: null\n    };\n  }\n  async function discoverRoutes(matches, pathname, signal) {\n    if (!patchRoutesOnNavigationImpl) {\n      return {\n        type: \"success\",\n        matches\n      };\n    }\n    let partialMatches = matches;\n    while (true) {\n      let isNonHMR = inFlightDataRoutes == null;\n      let routesToUse = inFlightDataRoutes || dataRoutes;\n      let localManifest = manifest;\n      try {\n        await patchRoutesOnNavigationImpl({\n          path: pathname,\n          matches: partialMatches,\n          patch: (routeId, children) => {\n            if (signal.aborted) return;\n            patchRoutesImpl(routeId, children, routesToUse, localManifest, mapRouteProperties);\n          }\n        });\n      } catch (e) {\n        return {\n          type: \"error\",\n          error: e,\n          partialMatches\n        };\n      } finally {\n        // If we are not in the middle of an HMR revalidation and we changed the\n        // routes, provide a new identity so when we `updateState` at the end of\n        // this navigation/fetch `router.routes` will be a new identity and\n        // trigger a re-run of memoized `router.routes` dependencies.\n        // HMR will already update the identity and reflow when it lands\n        // `inFlightDataRoutes` in `completeNavigation`\n        if (isNonHMR && !signal.aborted) {\n          dataRoutes = [...dataRoutes];\n        }\n      }\n      if (signal.aborted) {\n        return {\n          type: \"aborted\"\n        };\n      }\n      let newMatches = matchRoutes(routesToUse, pathname, basename);\n      if (newMatches) {\n        return {\n          type: \"success\",\n          matches: newMatches\n        };\n      }\n      let newPartialMatches = matchRoutesImpl(routesToUse, pathname, basename, true);\n      // Avoid loops if the second pass results in the same partial matches\n      if (!newPartialMatches || partialMatches.length === newPartialMatches.length && partialMatches.every((m, i) => m.route.id === newPartialMatches[i].route.id)) {\n        return {\n          type: \"success\",\n          matches: null\n        };\n      }\n      partialMatches = newPartialMatches;\n    }\n  }\n  function _internalSetRoutes(newRoutes) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, undefined, manifest);\n  }\n  function patchRoutes(routeId, children) {\n    let isNonHMR = inFlightDataRoutes == null;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    patchRoutesImpl(routeId, children, routesToUse, manifest, mapRouteProperties);\n    // If we are not in the middle of an HMR revalidation and we changed the\n    // routes, provide a new identity and trigger a reflow via `updateState`\n    // to re-run memoized `router.routes` dependencies.\n    // HMR will already update the identity and reflow when it lands\n    // `inFlightDataRoutes` in `completeNavigation`\n    if (isNonHMR) {\n      dataRoutes = [...dataRoutes];\n      updateState({});\n    }\n  }\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    patchRoutes,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes\n  };\n  return router;\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\nconst UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let manifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties;\n  if (opts != null && opts.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts != null && opts.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future = _extends({\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false\n  }, opts ? opts.future : null);\n  let dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, undefined, manifest);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   *\n   * - `opts.requestContext` is an optional server context that will be passed\n   *   to actions/loaders in the `context` parameter\n   * - `opts.skipLoaderErrorBubbling` is an optional parameter that will prevent\n   *   the bubbling of errors which allows single-fetch-type implementations\n   *   where the client will handle the bubbling and we may need to return data\n   *   for the handling route\n   */\n  async function query(request, _temp3) {\n    let {\n      requestContext,\n      skipLoaderErrorBubbling,\n      dataStrategy\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let result = await queryImpl(request, location, matches, requestContext, dataStrategy || null, skipLoaderErrorBubbling === true, null);\n    if (isResponse(result)) {\n      return result;\n    }\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   *\n   * - `opts.routeId` allows you to specify the specific route handler to call.\n   *   If not provided the handler will determine the proper route by matching\n   *   against `request.url`\n   * - `opts.requestContext` is an optional server context that will be passed\n   *    to actions/loaders in the `context` parameter\n   */\n  async function queryRoute(request, _temp4) {\n    let {\n      routeId,\n      requestContext,\n      dataStrategy\n    } = _temp4 === void 0 ? {} : _temp4;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let result = await queryImpl(request, location, matches, requestContext, dataStrategy || null, false, match);\n    if (isResponse(result)) {\n      return result;\n    }\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n    if (result.loaderData) {\n      var _result$activeDeferre;\n      let data = Object.values(result.loaderData)[0];\n      if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n    return undefined;\n  }\n  async function queryImpl(request, location, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch != null);\n        return result;\n      }\n      let result = await loadRouteData(request, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction for a\n      // `queryRoute` call, we throw the `DataStrategyResult` to bail out early\n      // and then return or throw the raw Response here accordingly\n      if (isDataStrategyResult(e) && isResponse(e.result)) {\n        if (e.type === ResultType.error) {\n          throw e.result;\n        }\n        return e.result;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n  async function submit(request, matches, actionMatch, requestContext, dataStrategy, skipLoaderErrorBubbling, isRouteRequest) {\n    let result;\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      let results = await callDataStrategy(\"action\", request, [actionMatch], matches, isRouteRequest, requestContext, dataStrategy);\n      result = results[actionMatch.route.id];\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest, future);\n      }\n    }\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.response.status,\n        headers: {\n          Location: result.response.headers.get(\"Location\")\n        }\n      });\n    }\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    }\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = skipLoaderErrorBubbling ? actionMatch : findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(loaderRequest, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, null, [boundaryMatch.route.id, result]);\n      // action status codes take precedence over loader status codes\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : result.statusCode != null ? result.statusCode : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    }\n    let context = await loadRouteData(loaderRequest, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, null);\n    return _extends({}, context, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      }\n    }, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionHeaders: result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {}\n    });\n  }\n  async function loadRouteData(request, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch, pendingActionResult) {\n    let isRouteRequest = routeMatch != null;\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n    let requestMatches = routeMatch ? [routeMatch] : pendingActionResult && isErrorResult(pendingActionResult[1]) ? getLoaderMatchesUntilBoundary(matches, pendingActionResult[0]) : matches;\n    let matchesToLoad = requestMatches.filter(m => m.route.loader || m.route.lazy);\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionResult && isErrorResult(pendingActionResult[1]) ? {\n          [pendingActionResult[0]]: pendingActionResult[1].error\n        } : null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let results = await callDataStrategy(\"loader\", request, matchesToLoad, matches, isRouteRequest, requestContext, dataStrategy);\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest, future);\n    }\n    // Process and commit output from loaders\n    let activeDeferreds = new Map();\n    let context = processRouteLoaderData(matches, results, pendingActionResult, activeDeferreds, skipLoaderErrorBubbling);\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set(matchesToLoad.map(match => match.route.id));\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches,\n      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n    });\n  }\n  // Utility wrapper for calling dataStrategy server-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(type, request, matchesToLoad, matches, isRouteRequest, requestContext, dataStrategy) {\n    let results = await callDataStrategyImpl(dataStrategy || defaultDataStrategy, type, null, request, matchesToLoad, matches, null, manifest, mapRouteProperties, requestContext);\n    let dataResults = {};\n    await Promise.all(matches.map(async match => {\n      if (!(match.route.id in results)) {\n        return;\n      }\n      let result = results[match.route.id];\n      if (isRedirectDataStrategyResultResult(result)) {\n        let response = result.result;\n        // Throw redirects and let the server handle them with an HTTP redirect\n        throw normalizeRelativeRoutingRedirectResponse(response, request, match.route.id, matches, basename, future.v7_relativeSplatPath);\n      }\n      if (isResponse(result.result) && isRouteRequest) {\n        // For SSR single-route requests, we want to hand Responses back\n        // directly without unwrapping\n        throw result;\n      }\n      dataResults[match.route.id] = await convertDataStrategyResultToDataResult(result);\n    }));\n    return dataResults;\n  }\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n  return newContext;\n}\nfunction throwStaticHandlerAbortedError(request, isRouteRequest, future) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n  let method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(method + \"() call aborted: \" + request.method + \" \" + request.url);\n}\nfunction isSubmissionNavigation(opts) {\n  return opts != null && (\"formData\" in opts && opts.formData != null || \"body\" in opts && opts.body !== undefined);\n}\nfunction normalizeTo(location, matches, basename, prependBasename, to, v7_relativeSplatPath, fromRouteId, relative) {\n  let contextualMatches;\n  let activeRouteMatch;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n  // Resolve the relative path\n  let path = resolveTo(to ? to : \".\", getResolveToMatches(contextualMatches, v7_relativeSplatPath), stripBasename(location.pathname, basename) || location.pathname, relative === \"path\");\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n  // Account for `?index` params when routing to the current location\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch) {\n    let nakedIndex = hasNakedIndexQuery(path.search);\n    if (activeRouteMatch.route.index && !nakedIndex) {\n      // Add one when we're targeting an index route\n      path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n    } else if (!activeRouteMatch.route.index && nakedIndex) {\n      // Remove existing ones when we're not\n      let params = new URLSearchParams(path.search);\n      let indexValues = params.getAll(\"index\");\n      params.delete(\"index\");\n      indexValues.filter(v => v).forEach(v => params.append(\"index\", v));\n      let qs = params.toString();\n      path.search = qs ? \"?\" + qs : \"\";\n    }\n  }\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  }\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, {\n      type: \"invalid-body\"\n    })\n  });\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase();\n  let formAction = stripHashFromPath(path);\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      let text = typeof opts.body === \"string\" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ?\n      // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n      Array.from(opts.body.entries()).reduce((acc, _ref3) => {\n        let [name, value] = _ref3;\n        return \"\" + acc + name + \"=\" + value + \"\\n\";\n      }, \"\") : String(opts.body);\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text\n        }\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      try {\n        let json = typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined\n          }\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n  invariant(typeof FormData === \"function\", \"FormData is not available in this environment\");\n  let searchParams;\n  let formData;\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n  let submission = {\n    formMethod,\n    formAction,\n    formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined\n  };\n  if (isMutationMethod(submission.formMethod)) {\n    return {\n      path,\n      submission\n    };\n  }\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n}\n// Filter out all routes at/below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId, includeBoundary) {\n  if (includeBoundary === void 0) {\n    includeBoundary = false;\n  }\n  let index = matches.findIndex(m => m.route.id === boundaryId);\n  if (index >= 0) {\n    return matches.slice(0, includeBoundary ? index + 1 : index);\n  }\n  return matches;\n}\nfunction getMatchesToLoad(history, state, matches, submission, location, initialHydration, skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionResult) {\n  let actionResult = pendingActionResult ? isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : pendingActionResult[1].data : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryMatches = matches;\n  if (initialHydration && state.errors) {\n    // On initial hydration, only consider matches up to _and including_ the boundary.\n    // This is inclusive to handle cases where a server loader ran successfully,\n    // a child server loader bubbled up to this route, but this route has\n    // `clientLoader.hydrate` so we want to still run the `clientLoader` so that\n    // we have a complete version of `loaderData`\n    boundaryMatches = getLoaderMatchesUntilBoundary(matches, Object.keys(state.errors)[0], true);\n  } else if (pendingActionResult && isErrorResult(pendingActionResult[1])) {\n    // If an action threw an error, we call loaders up to, but not including the\n    // boundary\n    boundaryMatches = getLoaderMatchesUntilBoundary(matches, pendingActionResult[0]);\n  }\n  // Don't revalidate loaders by default after action 4xx/5xx responses\n  // when the flag is enabled.  They can still opt-into revalidation via\n  // `shouldRevalidate` via `actionResult`\n  let actionStatus = pendingActionResult ? pendingActionResult[1].statusCode : undefined;\n  let shouldSkipRevalidation = skipActionErrorRevalidation && actionStatus && actionStatus >= 400;\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let {\n      route\n    } = match;\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (route.loader == null) {\n      return false;\n    }\n    if (initialHydration) {\n      return shouldLoadRouteOnHydration(route, state.loaderData, state.errors);\n    }\n    // Always call the loader on new route instances and pending defer cancellations\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(id => id === match.route.id)) {\n      return true;\n    }\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult,\n      actionStatus,\n      defaultShouldRevalidate: shouldSkipRevalidation ? false :\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired || currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search ||\n      // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  });\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial hydration (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (initialHydration || !matches.some(m => m.route.id === f.routeId) || deletedFetchers.has(key)) {\n      return;\n    }\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    }\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.has(key)) {\n      // Always mark for revalidation if the fetcher was cancelled\n      cancelledFetcherLoads.delete(key);\n      shouldRevalidate = true;\n    } else if (fetcher && fetcher.state !== \"idle\" && fetcher.data === undefined) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params\n      }, submission, {\n        actionResult,\n        actionStatus,\n        defaultShouldRevalidate: shouldSkipRevalidation ? false : isRevalidationRequired\n      }));\n    }\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\nfunction shouldLoadRouteOnHydration(route, loaderData, errors) {\n  // We dunno if we have a loader - gotta find out!\n  if (route.lazy) {\n    return true;\n  }\n  // No loader, nothing to initialize\n  if (!route.loader) {\n    return false;\n  }\n  let hasData = loaderData != null && loaderData[route.id] !== undefined;\n  let hasError = errors != null && errors[route.id] !== undefined;\n  // Don't run if we error'd during SSR\n  if (!hasData && hasError) {\n    return false;\n  }\n  // Explicitly opting-in to running on hydration\n  if (typeof route.loader === \"function\" && route.loader.hydrate === true) {\n    return true;\n  }\n  // Otherwise, run if we're not yet initialized with anything\n  return !hasData && !hasError;\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew =\n  // [a] -> [a, b]\n  !currentMatch ||\n  // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id;\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n  return arg.defaultShouldRevalidate;\n}\nfunction patchRoutesImpl(routeId, children, routesToUse, manifest, mapRouteProperties) {\n  var _childrenToPatch;\n  let childrenToPatch;\n  if (routeId) {\n    let route = manifest[routeId];\n    invariant(route, \"No route found to patch children into: routeId = \" + routeId);\n    if (!route.children) {\n      route.children = [];\n    }\n    childrenToPatch = route.children;\n  } else {\n    childrenToPatch = routesToUse;\n  }\n  // Don't patch in routes we already know about so that `patch` is idempotent\n  // to simplify user-land code. This is useful because we re-call the\n  // `patchRoutesOnNavigation` function for matched routes with params.\n  let uniqueChildren = children.filter(newRoute => !childrenToPatch.some(existingRoute => isSameRoute(newRoute, existingRoute)));\n  let newRoutes = convertRoutesToDataRoutes(uniqueChildren, mapRouteProperties, [routeId || \"_\", \"patch\", String(((_childrenToPatch = childrenToPatch) == null ? void 0 : _childrenToPatch.length) || \"0\")], manifest);\n  childrenToPatch.push(...newRoutes);\n}\nfunction isSameRoute(newRoute, existingRoute) {\n  // Most optimal check is by id\n  if (\"id\" in newRoute && \"id\" in existingRoute && newRoute.id === existingRoute.id) {\n    return true;\n  }\n  // Second is by pathing differences\n  if (!(newRoute.index === existingRoute.index && newRoute.path === existingRoute.path && newRoute.caseSensitive === existingRoute.caseSensitive)) {\n    return false;\n  }\n  // Pathless layout routes are trickier since we need to check children.\n  // If they have no children then they're the same as far as we can tell\n  if ((!newRoute.children || newRoute.children.length === 0) && (!existingRoute.children || existingRoute.children.length === 0)) {\n    return true;\n  }\n  // Otherwise, we look to see if every child in the new route is already\n  // represented in the existing route's children\n  return newRoute.children.every((aChild, i) => {\n    var _existingRoute$childr;\n    return (_existingRoute$childr = existingRoute.children) == null ? void 0 : _existingRoute$childr.some(bChild => isSameRoute(aChild, bChild));\n  });\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(route, mapRouteProperties, manifest) {\n  if (!route.lazy) {\n    return;\n  }\n  let lazyRoute = await route.lazy();\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue = routeToUpdate[lazyRouteProperty];\n    let isPropertyStaticallyDefined = staticRouteValue !== undefined &&\n    // This property isn't static since it should always be updated based\n    // on the route updates\n    lazyRouteProperty !== \"hasErrorBoundary\";\n    warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n    }\n  }\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, _extends({}, mapRouteProperties(routeToUpdate), {\n    lazy: undefined\n  }));\n}\n// Default implementation of `dataStrategy` which fetches all loaders in parallel\nasync function defaultDataStrategy(_ref4) {\n  let {\n    matches\n  } = _ref4;\n  let matchesToLoad = matches.filter(m => m.shouldLoad);\n  let results = await Promise.all(matchesToLoad.map(m => m.resolve()));\n  return results.reduce((acc, result, i) => Object.assign(acc, {\n    [matchesToLoad[i].route.id]: result\n  }), {});\n}\nasync function callDataStrategyImpl(dataStrategyImpl, type, state, request, matchesToLoad, matches, fetcherKey, manifest, mapRouteProperties, requestContext) {\n  let loadRouteDefinitionsPromises = matches.map(m => m.route.lazy ? loadLazyRouteModule(m.route, mapRouteProperties, manifest) : undefined);\n  let dsMatches = matches.map((match, i) => {\n    let loadRoutePromise = loadRouteDefinitionsPromises[i];\n    let shouldLoad = matchesToLoad.some(m => m.route.id === match.route.id);\n    // `resolve` encapsulates route.lazy(), executing the loader/action,\n    // and mapping return values/thrown errors to a `DataStrategyResult`.  Users\n    // can pass a callback to take fine-grained control over the execution\n    // of the loader/action\n    let resolve = async handlerOverride => {\n      if (handlerOverride && request.method === \"GET\" && (match.route.lazy || match.route.loader)) {\n        shouldLoad = true;\n      }\n      return shouldLoad ? callLoaderOrAction(type, request, match, loadRoutePromise, handlerOverride, requestContext) : Promise.resolve({\n        type: ResultType.data,\n        result: undefined\n      });\n    };\n    return _extends({}, match, {\n      shouldLoad,\n      resolve\n    });\n  });\n  // Send all matches here to allow for a middleware-type implementation.\n  // handler will be a no-op for unneeded routes and we filter those results\n  // back out below.\n  let results = await dataStrategyImpl({\n    matches: dsMatches,\n    request,\n    params: matches[0].params,\n    fetcherKey,\n    context: requestContext\n  });\n  // Wait for all routes to load here but 'swallow the error since we want\n  // it to bubble up from the `await loadRoutePromise` in `callLoaderOrAction` -\n  // called from `match.resolve()`\n  try {\n    await Promise.all(loadRouteDefinitionsPromises);\n  } catch (e) {\n    // No-op\n  }\n  return results;\n}\n// Default logic for calling a loader/action is the user has no specified a dataStrategy\nasync function callLoaderOrAction(type, request, match, loadRoutePromise, handlerOverride, staticContext) {\n  let result;\n  let onReject;\n  let runHandler = handler => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject;\n    // This will never resolve so safe to type it as Promise<DataStrategyResult> to\n    // satisfy the function return value\n    let abortPromise = new Promise((_, r) => reject = r);\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    let actualHandler = ctx => {\n      if (typeof handler !== \"function\") {\n        return Promise.reject(new Error(\"You cannot call the handler for a route which defines a boolean \" + (\"\\\"\" + type + \"\\\" [routeId: \" + match.route.id + \"]\")));\n      }\n      return handler({\n        request,\n        params: match.params,\n        context: staticContext\n      }, ...(ctx !== undefined ? [ctx] : []));\n    };\n    let handlerPromise = (async () => {\n      try {\n        let val = await (handlerOverride ? handlerOverride(ctx => actualHandler(ctx)) : actualHandler());\n        return {\n          type: \"data\",\n          result: val\n        };\n      } catch (e) {\n        return {\n          type: \"error\",\n          result: e\n        };\n      }\n    })();\n    return Promise.race([handlerPromise, abortPromise]);\n  };\n  try {\n    let handler = match.route[type];\n    // If we have a route.lazy promise, await that first\n    if (loadRoutePromise) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let [value] = await Promise.all([\n        // If the handler throws, don't let it immediately bubble out,\n        // since we need to let the lazy() execution finish so we know if this\n        // route has a boundary that can handle the error\n        runHandler(handler).catch(e => {\n          handlerError = e;\n        }), loadRoutePromise]);\n        if (handlerError !== undefined) {\n          throw handlerError;\n        }\n        result = value;\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadRoutePromise;\n        handler = match.route[type];\n        if (handler) {\n          // Handler still runs even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return {\n            type: ResultType.data,\n            result: undefined\n          };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n    invariant(result.result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    // We should already be catching and converting normal handler executions to\n    // DataStrategyResults and returning them, so anything that throws here is an\n    // unexpected error we still need to wrap\n    return {\n      type: ResultType.error,\n      result: e\n    };\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n  return result;\n}\nasync function convertDataStrategyResultToDataResult(dataStrategyResult) {\n  let {\n    result,\n    type\n  } = dataStrategyResult;\n  if (isResponse(result)) {\n    let data;\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n    if (type === ResultType.error) {\n      return {\n        type: ResultType.error,\n        error: new ErrorResponseImpl(result.status, result.statusText, data),\n        statusCode: result.status,\n        headers: result.headers\n      };\n    }\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n  if (type === ResultType.error) {\n    if (isDataWithResponseInit(result)) {\n      var _result$init2;\n      if (result.data instanceof Error) {\n        var _result$init;\n        return {\n          type: ResultType.error,\n          error: result.data,\n          statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status\n        };\n      }\n      // Convert thrown data() to ErrorResponse instances\n      result = new ErrorResponseImpl(((_result$init2 = result.init) == null ? void 0 : _result$init2.status) || 500, undefined, result.data);\n    }\n    return {\n      type: ResultType.error,\n      error: result,\n      statusCode: isRouteErrorResponse(result) ? result.status : undefined\n    };\n  }\n  if (isDeferredData(result)) {\n    var _result$init3, _result$init4;\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: (_result$init3 = result.init) == null ? void 0 : _result$init3.status,\n      headers: ((_result$init4 = result.init) == null ? void 0 : _result$init4.headers) && new Headers(result.init.headers)\n    };\n  }\n  if (isDataWithResponseInit(result)) {\n    var _result$init5, _result$init6;\n    return {\n      type: ResultType.data,\n      data: result.data,\n      statusCode: (_result$init5 = result.init) == null ? void 0 : _result$init5.status,\n      headers: (_result$init6 = result.init) != null && _result$init6.headers ? new Headers(result.init.headers) : undefined\n    };\n  }\n  return {\n    type: ResultType.data,\n    data: result\n  };\n}\n// Support relative routing in internal redirects\nfunction normalizeRelativeRoutingRedirectResponse(response, request, routeId, matches, basename, v7_relativeSplatPath) {\n  let location = response.headers.get(\"Location\");\n  invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\");\n  if (!ABSOLUTE_URL_REGEX.test(location)) {\n    let trimmedMatches = matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1);\n    location = normalizeTo(new URL(request.url), trimmedMatches, basename, true, location, v7_relativeSplatPath);\n    response.headers.set(\"Location\", location);\n  }\n  return response;\n}\nfunction normalizeRedirectLocation(location, currentUrl, basename) {\n  if (ABSOLUTE_URL_REGEX.test(location)) {\n    // Strip off the protocol+origin for same-origin + same-basename absolute redirects\n    let normalizedLocation = location;\n    let url = normalizedLocation.startsWith(\"//\") ? new URL(currentUrl.protocol + normalizedLocation) : new URL(normalizedLocation);\n    let isSameBasename = stripBasename(url.pathname, basename) != null;\n    if (url.origin === currentUrl.origin && isSameBasename) {\n      return url.pathname + url.search + url.hash;\n    }\n  }\n  return location;\n}\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType\n    } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({\n        \"Content-Type\": formEncType\n      });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (formEncType === \"application/x-www-form-urlencoded\" && submission.formData) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n  return searchParams;\n}\nfunction convertSearchParamsToFormData(searchParams) {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\nfunction processRouteLoaderData(matches, results, pendingActionResult, activeDeferreds, skipLoaderErrorBubbling) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {};\n  let pendingError = pendingActionResult && isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : undefined;\n  // Process loader results into state.loaderData/state.errors\n  matches.forEach(match => {\n    if (!(match.route.id in results)) {\n      return;\n    }\n    let id = match.route.id;\n    let result = results[id];\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n    if (isErrorResult(result)) {\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError !== undefined) {\n        error = pendingError;\n        pendingError = undefined;\n      }\n      errors = errors || {};\n      if (skipLoaderErrorBubbling) {\n        errors[id] = error;\n      } else {\n        // Look upwards from the matched route for the closest ancestor error\n        // boundary, defaulting to the root match.  Prefer higher error values\n        // if lower errors bubble to the same boundary\n        let boundaryMatch = findNearestBoundary(matches, id);\n        if (errors[boundaryMatch.route.id] == null) {\n          errors[boundaryMatch.route.id] = error;\n        }\n      }\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      } else {\n        loaderData[id] = result.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      }\n    }\n  });\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError !== undefined && pendingActionResult) {\n    errors = {\n      [pendingActionResult[0]]: pendingError\n    };\n    loaderData[pendingActionResult[0]] = undefined;\n  }\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, results, pendingActionResult, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, results, pendingActionResult, activeDeferreds, false // This method is only called client side so we always want to bubble\n  );\n  // Process results from our revalidating fetchers\n  revalidatingFetchers.forEach(rf => {\n    let {\n      key,\n      match,\n      controller\n    } = rf;\n    let result = fetcherResults[key];\n    invariant(result, \"Did not find corresponding fetcher result\");\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      return;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  });\n  return {\n    loaderData,\n    errors\n  };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\nfunction getActionDataForCommit(pendingActionResult) {\n  if (!pendingActionResult) {\n    return {};\n  }\n  return isErrorResult(pendingActionResult[1]) ? {\n    // Clear out prior actionData on errors\n    actionData: {}\n  } : {\n    actionData: {\n      [pendingActionResult[0]]: pendingActionResult[1].data\n    }\n  };\n}\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.length === 1 ? routes[0] : routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\nfunction getInternalRouterError(status, _temp5) {\n  let {\n    pathname,\n    routeId,\n    method,\n    type,\n    message\n  } = _temp5 === void 0 ? {} : _temp5;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n  return new ErrorResponseImpl(status || 500, statusText, new Error(errorMessage), true);\n}\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results) {\n  let entries = Object.entries(results);\n  for (let i = entries.length - 1; i >= 0; i--) {\n    let [key, result] = entries[i];\n    if (isRedirectResult(result)) {\n      return {\n        key,\n        result\n      };\n    }\n  }\n}\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\nfunction isHashChangeOnly(a, b) {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\nfunction isDataStrategyResult(result) {\n  return result != null && typeof result === \"object\" && \"type\" in result && \"result\" in result && (result.type === ResultType.data || result.type === ResultType.error);\n}\nfunction isRedirectDataStrategyResultResult(result) {\n  return isResponse(result.result) && redirectStatusCodes.has(result.result.status);\n}\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\nfunction isDataWithResponseInit(value) {\n  return typeof value === \"object\" && value != null && \"type\" in value && \"data\" in value && \"init\" in value && value.type === \"DataWithResponseInit\";\n}\nfunction isDeferredData(value) {\n  let deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\nasync function resolveNavigationDeferredResults(matches, results, signal, currentMatches, currentLoaderData) {\n  let entries = Object.entries(results);\n  for (let index = 0; index < entries.length; index++) {\n    let [routeId, result] = entries[index];\n    let match = matches.find(m => (m == null ? void 0 : m.route.id) === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n    if (isDeferredResult(result) && isRevalidatingLoader) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, false).then(result => {\n        if (result) {\n          results[routeId] = result;\n        }\n      });\n    }\n  }\n}\nasync function resolveFetcherDeferredResults(matches, results, revalidatingFetchers) {\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let {\n      key,\n      routeId,\n      controller\n    } = revalidatingFetchers[index];\n    let result = results[key];\n    let match = matches.find(m => (m == null ? void 0 : m.route.id) === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n    if (isDeferredResult(result)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      invariant(controller, \"Expected an AbortController for revalidating fetcher deferred result\");\n      await resolveDeferredData(result, controller.signal, true).then(result => {\n        if (result) {\n          results[key] = result;\n        }\n      });\n    }\n  }\n}\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n}\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\nfunction getSubmissionFromNavigation(navigation) {\n  let {\n    formMethod,\n    formAction,\n    formEncType,\n    text,\n    formData,\n    json\n  } = navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined\n    };\n  }\n}\nfunction getLoadingNavigation(location, submission) {\n  if (submission) {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text\n    };\n    return navigation;\n  } else {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined\n    };\n    return navigation;\n  }\n}\nfunction getSubmittingNavigation(location, submission) {\n  let navigation = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text\n  };\n  return navigation;\n}\nfunction getLoadingFetcher(submission, data) {\n  if (submission) {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data\n    };\n    return fetcher;\n  } else {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data\n    };\n    return fetcher;\n  }\n}\nfunction getSubmittingFetcher(submission, existingFetcher) {\n  let fetcher = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined\n  };\n  return fetcher;\n}\nfunction getDoneFetcher(data) {\n  let fetcher = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data\n  };\n  return fetcher;\n}\nfunction restoreAppliedTransitions(_window, transitions) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(TRANSITIONS_STORAGE_KEY);\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\nfunction persistAppliedTransitions(_window, transitions) {\n  if (transitions.size > 0) {\n    let json = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(TRANSITIONS_STORAGE_KEY, JSON.stringify(json));\n    } catch (error) {\n      warning(false, \"Failed to save applied view transitions in sessionStorage (\" + error + \").\");\n    }\n  }\n}\n//#endregion\n\nexport { AbortedDeferredError, Action, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, ErrorResponseImpl as UNSAFE_ErrorResponseImpl, convertRouteMatchToUiMatch as UNSAFE_convertRouteMatchToUiMatch, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, decodePath as UNSAFE_decodePath, getResolveToMatches as UNSAFE_getResolveToMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, data, defer, generatePath, getStaticContextFromError, getToPathname, isDataWithResponseInit, isDeferredData, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, redirectDocument, replace, resolvePath, resolveTo, stripBasename };\n//# sourceMappingURL=router.js.map\n"],"names":["_extends","target","i","source","key","Action","PopStateEventType","createMemoryHistory","options","initialEntries","initialIndex","v5Compat","entries","entry","index","createMemoryLocation","clampIndex","action","listener","n","getCurrentLocation","to","state","location","createLocation","warning","createHref","createPath","path","parsePath","nextLocation","delta","nextIndex","fn","createBrowserHistory","createBrowserLocation","window","globalHistory","pathname","search","hash","createBrowserHref","getUrlBasedHistory","createHashHistory","createHashLocation","createHashHref","base","href","url","hashIndex","validateHashLocation","invariant","value","message","cond","createKey","getHistoryState","current","_ref","parsedPath","searchIndex","getLocation","validateLocation","getIndex","handlePop","history","push","historyState","error","replace","createURL","ResultType","immutableRouteKeys","isIndexRoute","route","convertRoutesToDataRoutes","routes","mapRouteProperties","parentPath","manifest","treePath","id","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","matchRoutesImpl","allowPartial","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","decoded","decodePath","matchRouteBranch","convertRouteMatchToUiMatch","match","loaderData","params","parentsMeta","flattenRoute","relativePath","meta","joinPaths","routesMeta","computeScore","_route$path","exploded","explodeOptionalSegments","segments","first","rest","isOptional","required","restExploded","result","subpath","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","score","segment","branch","matchedParams","matchedPathname","end","remainingPathname","matchPath","normalizePathname","generatePath","originalPath","prefix","stringify","p","array","keyMatch","optional","param","pattern","matcher","compiledParams","compilePath","pathnameBase","captureGroups","memo","paramName","splatValue","caseSensitive","regexpSource","_","v","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","getInvalidPathError","char","field","dest","getPathContributingMatches","getResolveToMatches","v7_relativeSplatPath","pathMatches","idx","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","data","init","responseInit","headers","DataWithResponseInit","AbortedDeferredError","DeferredData","reject","r","onAbort","acc","_ref2","promise","undefinedError","aborted","settledKey","subscriber","k","signal","resolve","_ref3","unwrapTrackedPromise","isTrackedPromise","defer","redirect","redirectDocument","response","ErrorResponseImpl","status","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","IDLE_FETCHER","IDLE_BLOCKER","ABSOLUTE_URL_REGEX","defaultMapRouteProperties","TRANSITIONS_STORAGE_KEY","createRouter","routerWindow","isBrowser","isServer","detectErrorBoundary","dataRoutes","inFlightDataRoutes","dataStrategyImpl","defaultDataStrategy","patchRoutesOnNavigationImpl","future","unlistenHistory","subscribers","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","checkFogOfWar","initialized","m","errors","shouldLoadRouteOnHydration","fogOfWar","router","pendingAction","pendingPreventScrollReset","pendingNavigationController","pendingViewTransitionEnabled","appliedViewTransitions","removePageHideEventListener","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeFetchers","deletedFetchers","activeDeferreds","blockerFunctions","unblockBlockerHistoryUpdate","initialize","historyAction","blockerKey","shouldBlockNavigation","nextHistoryUpdatePromise","updateBlocker","blockers","updateState","startNavigation","restoreAppliedTransitions","_saveAppliedTransitions","persistAppliedTransitions","dispose","deleteFetcher","deleteBlocker","subscribe","newState","opts","completedFetchers","deletedFetchersKeys","fetcher","completeNavigation","_temp","_location$state","_location$state2","flushSync","isActionReload","isMutationMethod","actionData","mergeLoaderData","preventScrollReset","viewTransitionOpts","priorPaths","toPaths","getSavedScrollPosition","navigate","normalizedPath","normalizeTo","submission","normalizeNavigateOptions","currentLocation","userReplace","revalidate","interruptActiveLoads","saveScrollPosition","routesToUse","loadingNavigation","notFoundMatches","handleNavigational404","isHashChangeOnly","request","createClientSideRequest","pendingActionResult","findNearestBoundary","actionResult","handleAction","routeId","isErrorResult","getLoadingNavigation","shortCircuited","updatedMatches","handleLoaders","getActionDataForCommit","isFogOfWar","navigation","getSubmittingNavigation","discoverResult","discoverRoutes","boundaryId","actionMatch","getTargetMatch","callDataStrategy","isRedirectResult","normalizeRedirectLocation","startRedirectNavigation","isDeferredResult","boundaryMatch","overrideNavigation","fetcherSubmission","initialHydration","activeSubmission","getSubmissionFromNavigation","shouldUpdateNavigationState","getUpdatedActionData","matchesToLoad","revalidatingFetchers","getMatchesToLoad","cancelActiveDeferreds","updatedFetchers","markFetchRedirectsDone","updates","getUpdatedRevalidatingFetchers","rf","abortFetcher","abortPendingFetchRevalidations","f","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","findRedirect","processLoaderData","deferredData","didAbortFetchLoads","abortStaleFetchLoads","shouldUpdateFetchers","revalidatingFetcher","getLoadingFetcher","fetch","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","detectAndHandle405Error","existingFetcher","updateFetcherState","getSubmittingFetcher","abortController","fetchRequest","originatingLoadId","getDoneFetcher","revalidationRequest","loadId","loadFetcher","staleKey","doneFetcher","resolveDeferredData","isNavigation","_temp2","redirectLocation","isDocumentReload","redirectHistoryAction","formMethod","formAction","formEncType","type","fetcherKey","results","dataResults","callDataStrategyImpl","e","isRedirectDataStrategyResultResult","normalizeRelativeRoutingRedirectResponse","convertDataStrategyResultToDataResult","fetchersToLoad","currentMatches","loaderResultsPromise","fetcherResultsPromise","resolveNavigationDeferredResults","resolveFetcherDeferredResults","getFetcher","deleteFetcherAndUpdateState","count","controller","markFetchersDone","keys","doneKeys","landedId","yeetedKeys","getBlocker","blocker","newBlocker","blockerFunction","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","getScrollKey","partialMatches","isNonHMR","localManifest","children","patchRoutesImpl","newMatches","newPartialMatches","_internalSetRoutes","newRoutes","patchRoutes","UNSAFE_DEFERRED_SYMBOL","createStaticHandler","query","_temp3","requestContext","skipLoaderErrorBubbling","dataStrategy","method","isValidMethod","methodNotAllowedMatches","queryImpl","isResponse","queryRoute","_temp4","_result$activeDeferre","routeMatch","submit","loadRouteData","isDataStrategyResult","isRedirectResponse","isRouteRequest","throwStaticHandlerAbortedError","loaderRequest","context","getLoaderMatchesUntilBoundary","processRouteLoaderData","executedLoaders","getStaticContextFromError","isSubmissionNavigation","prependBasename","fromRouteId","relative","contextualMatches","activeRouteMatch","nakedIndex","hasNakedIndexQuery","indexValues","qs","normalizeFormMethod","isFetcher","getInvalidBodyError","rawFormMethod","stripHashFromPath","text","name","searchParams","formData","convertFormDataToSearchParams","convertSearchParamsToFormData","includeBoundary","skipActionErrorRevalidation","currentUrl","nextUrl","boundaryMatches","actionStatus","shouldSkipRevalidation","navigationMatches","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","isNewRouteInstance","fetcherMatches","fetcherMatch","shouldRevalidate","hasData","hasError","currentLoaderData","currentMatch","isNew","isMissingData","currentPath","loaderMatch","arg","routeChoice","_childrenToPatch","childrenToPatch","uniqueChildren","newRoute","existingRoute","isSameRoute","aChild","_existingRoute$childr","bChild","loadLazyRouteModule","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","isPropertyStaticallyDefined","_ref4","loadRouteDefinitionsPromises","dsMatches","loadRoutePromise","shouldLoad","handlerOverride","callLoaderOrAction","staticContext","onReject","runHandler","handler","abortPromise","actualHandler","ctx","handlerPromise","handlerError","dataStrategyResult","contentType","isDataWithResponseInit","_result$init2","_result$init","isDeferredData","_result$init3","_result$init4","_result$init5","_result$init6","trimmedMatches","normalizedLocation","isSameBasename","statusCode","foundError","loaderHeaders","pendingError","newLoaderData","mergedLoaderData","_temp5","errorMessage","deferred","isRevalidatingLoader","unwrap","_window","transitions","sessionPositions"],"mappings":"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","x_google_ignoreList":[0]}