{"version":3,"file":"zudoku.auth-auth0.js","sources":["../src/lib/authentication/providers/auth0.tsx"],"sourcesContent":["import { Auth0AuthenticationConfig } from \"../../../config/config.js\";\nimport { AuthenticationProviderInitializer } from \"../authentication.js\";\nimport { useAuthState } from \"../state.js\";\nimport { OpenIDAuthenticationProvider } from \"./openid.js\";\n\nclass Auth0AuthenticationProvider extends OpenIDAuthenticationProvider {\n  constructor(config: Auth0AuthenticationConfig) {\n    super({\n      ...config,\n      type: \"openid\",\n      issuer: `https://${config.domain}`,\n      clientId: config.clientId,\n      audience: config.audience,\n    });\n  }\n\n  onAuthorizationUrl = async (\n    url: URL,\n    { isSignUp }: { isSignUp: boolean },\n  ) => {\n    if (isSignUp) {\n      url.searchParams.set(\"screen_hint\", \"signup\");\n    }\n  };\n\n  signOut = async (): Promise<void> => {\n    useAuthState.setState({\n      isAuthenticated: false,\n      isPending: false,\n      profile: undefined,\n    });\n    sessionStorage.clear();\n    const as = await this.getAuthServer();\n\n    const redirectUrl = new URL(\n      window.location.origin + this.logoutRedirectUrlPath,\n    );\n    redirectUrl.pathname = this.logoutRedirectUrlPath;\n\n    // SEE: https://auth0.com/docs/authenticate/login/logout/log-users-out-of-auth0\n    // For Auth0 tenants created on or after 14 November 2023, RP-Initiated\n    // Logout End Session Endpoint Discovery is enabled by default.\n    // Otherwise we fallback to the old non-compliant logout\n\n    let logoutUrl: URL;\n    // The endSessionEndpoint is set, the IdP supports some form of logout,\n    // so we use the IdP logout. Otherwise, just redirect the user to home\n    if (as.end_session_endpoint) {\n      logoutUrl = new URL(as.end_session_endpoint);\n      // TODO: get id_token and set hint\n      // const { id_token } = session;\n      // if (id_token) {\n      //   logoutUrl.searchParams.set(\"id_token_hint\", id_token);\n      // }\n      logoutUrl.searchParams.set(\n        \"post_logout_redirect_uri\",\n        redirectUrl.toString(),\n      );\n    } else {\n      logoutUrl = new URL(`${this.issuer}oidc/logout`);\n    }\n  };\n}\n\nconst auth0Auth: AuthenticationProviderInitializer<\n  Auth0AuthenticationConfig\n> = (options) => new Auth0AuthenticationProvider(options);\n\nexport default auth0Auth;\n"],"names":["Auth0AuthenticationProvider","OpenIDAuthenticationProvider","config","__publicField","url","isSignUp","useAuthState","as","redirectUrl","logoutUrl","auth0Auth","options"],"mappings":";;;;;AAKA,MAAMA,UAAoCC,EAA6B;AAAA,EACrE,YAAYC,GAAmC;AACvC,UAAA;AAAA,MACJ,GAAGA;AAAA,MACH,MAAM;AAAA,MACN,QAAQ,WAAWA,EAAO,MAAM;AAAA,MAChC,UAAUA,EAAO;AAAA,MACjB,UAAUA,EAAO;AAAA,IAAA,CAClB;AAGH,IAAAC,EAAA,4BAAqB,OACnBC,GACA,EAAE,UAAAC,QACC;AACH,MAAIA,KACED,EAAA,aAAa,IAAI,eAAe,QAAQ;AAAA,IAC9C;AAGF,IAAAD,EAAA,iBAAU,YAA2B;AACnC,MAAAG,EAAa,SAAS;AAAA,QACpB,iBAAiB;AAAA,QACjB,WAAW;AAAA,QACX,SAAS;AAAA,MAAA,CACV,GACD,eAAe,MAAM;AACf,YAAAC,IAAK,MAAM,KAAK,iBAEhBC,IAAc,IAAI;AAAA,QACtB,OAAO,SAAS,SAAS,KAAK;AAAA,MAAA;AAEhC,MAAAA,EAAY,WAAW,KAAK;AAOxB,UAAAC;AAGJ,MAAIF,EAAG,wBACOE,IAAA,IAAI,IAAIF,EAAG,oBAAoB,GAM3CE,EAAU,aAAa;AAAA,QACrB;AAAA,QACAD,EAAY,SAAS;AAAA,MAAA,KAGvBC,IAAY,IAAI,IAAI,GAAG,KAAK,MAAM,aAAa;AAAA,IACjD;AAAA,EA9CF;AAgDF;AAEA,MAAMC,IAEF,CAACC,MAAY,IAAIX,EAA4BW,CAAO;"}