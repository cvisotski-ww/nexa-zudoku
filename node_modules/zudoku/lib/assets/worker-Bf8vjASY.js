var wl = Object.defineProperty;
var yo = (t) => {
  throw TypeError(t);
};
var Tl = (t, e, n) => e in t ? wl(t, e, { enumerable: !0, configurable: !0, writable: !0, value: n }) : t[e] = n;
var U = (t, e, n) => Tl(t, typeof e != "symbol" ? e + "" : e, n), Wr = (t, e, n) => e.has(t) || yo("Cannot " + n);
var l = (t, e, n) => (Wr(t, e, "read from private field"), n ? n.call(t) : e.get(t)), Y = (t, e, n) => e.has(t) ? yo("Cannot add the same private member more than once") : e instanceof WeakSet ? e.add(t) : e.set(t, n), $ = (t, e, n, i) => (Wr(t, e, "write to private field"), i ? i.call(t, n) : e.set(t, n), n), k = (t, e, n) => (Wr(t, e, "access private method"), n);
var Tn = (t, e, n, i) => ({
  set _(r) {
    $(t, e, r, n);
  },
  get _() {
    return l(t, e, i);
  }
});
function Sl(t, e) {
  return e.forEach(function(n) {
    n && typeof n != "string" && !Array.isArray(n) && Object.keys(n).forEach(function(i) {
      if (i !== "default" && !(i in t)) {
        var r = Object.getOwnPropertyDescriptor(n, i);
        Object.defineProperty(t, i, r.get ? r : {
          enumerable: !0,
          get: function() {
            return n[i];
          }
        });
      }
    });
  }), Object.freeze(t);
}
const _l = /* @__PURE__ */ new WeakMap(), Yr = Symbol("ENVELOP_IS_INTROSPECTION");
function Il(t) {
  return (typeof t == "string" ? t : t.body).indexOf("__schema") !== -1;
}
function Ol(t) {
  return t.length === 1 ? t[0] : {
    schema: t[0],
    document: t[1],
    rootValue: t[2],
    contextValue: t[3],
    variableValues: t[4],
    operationName: t[5],
    fieldResolver: t[6],
    subscribeFieldResolver: t[7]
  };
}
const bo = (t) => (...e) => t(Ol(e));
function Eo(t, e) {
  const n = t[Symbol.asyncIterator]();
  async function i(s) {
    var o;
    if (s.done)
      return s;
    try {
      return { value: await e(s.value), done: !1 };
    } catch (a) {
      try {
        await ((o = n.return) == null ? void 0 : o.call(n));
      } catch {
      }
      throw a;
    }
  }
  const r = {
    [Symbol.asyncIterator]() {
      return r;
    },
    async next() {
      return await i(await n.next());
    },
    async return() {
      var o;
      const s = (o = n.return) == null ? void 0 : o.call(n);
      return s ? await i(await s) : { value: void 0, done: !0 };
    },
    async throw(s) {
      var a;
      const o = (a = n.throw) == null ? void 0 : a.call(n);
      if (o)
        return await i(await o);
      throw s;
    }
  };
  return r;
}
function Nl(t) {
  return t.length === 1 ? t[0] : {
    schema: t[0],
    document: t[1],
    rootValue: t[2],
    contextValue: t[3],
    variableValues: t[4],
    operationName: t[5],
    fieldResolver: t[6],
    typeResolver: t[7]
  };
}
const vo = (t) => (...e) => t(Nl(e));
function zt(t) {
  return typeof t == "object" && t != null && typeof t[Symbol.asyncIterator] == "function";
}
function wo(t, e) {
  if (zt(t.result))
    return { onNext: e };
  e({
    args: t.args,
    result: t.result,
    setResult: t.setResult
  });
}
function To(t, e) {
  const n = t[Symbol.asyncIterator]();
  let i = !1;
  const r = {
    [Symbol.asyncIterator]() {
      return r;
    },
    async next() {
      const s = await n.next();
      return s.done && i === !1 && (i = !0, e()), s;
    },
    async return() {
      var o;
      const s = (o = n.return) == null ? void 0 : o.call(n);
      return i === !1 && (i = !0, e()), s ? await s : { done: !0, value: void 0 };
    },
    async throw(s) {
      var a;
      const o = (a = n.throw) == null ? void 0 : a.call(n);
      if (o)
        return await o;
      throw s;
    }
  };
  return r;
}
function Al(t, e) {
  const n = t[Symbol.asyncIterator](), i = {
    [Symbol.asyncIterator]() {
      return i;
    },
    async next() {
      try {
        return await n.next();
      } catch (r) {
        return e(r), { done: !0, value: void 0 };
      }
    },
    async return() {
      var s;
      const r = (s = n.return) == null ? void 0 : s.call(n);
      return r ? await r : { done: !0, value: void 0 };
    },
    async throw(r) {
      var o;
      const s = (o = n.throw) == null ? void 0 : o.call(n);
      if (s)
        return await s;
      throw r;
    }
  };
  return i;
}
function zi(t) {
  throw Error(`No \`${t}\` function found! Register it using "useEngine" plugin.`);
}
function xl({ plugins: t }) {
  let e = null, n = !1;
  const i = () => zi("parse"), r = () => zi("validate"), s = () => zi("execute"), o = () => zi("subscribe"), a = (S, A = -1) => {
    if (e = S, n)
      for (const [O, C] of t.entries())
        O !== A && C.onSchemaChange && C.onSchemaChange({
          schema: e,
          replaceSchema: (T) => {
            a(T, O);
          }
        });
  }, u = [];
  for (let S = 0; S < t.length; S++) {
    const A = t[S], O = [];
    A.onPluginInit && A.onPluginInit({
      plugins: t,
      addPlugin: (C) => {
        O.push(C);
      },
      setSchema: (C) => a(C, S),
      registerContextErrorHandler: (C) => u.push(C)
    }), O.length && t.splice(S + 1, 0, ...O);
  }
  const c = {
    init: [],
    parse: [],
    validate: [],
    subscribe: [],
    execute: [],
    context: []
  };
  for (const { onContextBuilding: S, onExecute: A, onParse: O, onSubscribe: C, onValidate: T, onEnveloped: _ } of t)
    _ && c.init.push(_), S && c.context.push(S), A && c.execute.push(A), O && c.parse.push(O), C && c.subscribe.push(C), T && c.validate.push(T);
  const f = (S) => {
    for (const [A, O] of c.init.entries())
      O({
        context: S,
        extendContext: (C) => {
          S && Object.assign(S, C);
        },
        setSchema: (C) => a(C, A)
      });
  }, g = c.parse.length ? (S) => (A, O) => {
    let C = null, T = i;
    const _ = S, m = [];
    for (const b of c.parse) {
      const d = b({
        context: _,
        extendContext: (N) => {
          Object.assign(_, N);
        },
        params: { source: A, options: O },
        parseFn: T,
        setParseFn: (N) => {
          T = N;
        },
        setParsedDocument: (N) => {
          C = N;
        }
      });
      d && m.push(d);
    }
    if (C === null)
      try {
        C = T(A, O);
      } catch (b) {
        C = b;
      }
    for (const b of m)
      b({
        context: _,
        extendContext: (d) => {
          Object.assign(_, d);
        },
        replaceParseResult: (d) => {
          C = d;
        },
        result: C
      });
    if (C === null)
      throw new Error("Failed to parse document.");
    if (C instanceof Error)
      throw C;
    return _l.set(C, A.toString()), C;
  } : () => i, p = c.validate.length ? (S) => (A, O, C, T, _) => {
    let m = C ? [...C] : void 0, b = r, d = null;
    const N = S, L = [];
    for (const q of c.validate) {
      const Z = q({
        context: N,
        extendContext: (W) => {
          Object.assign(N, W);
        },
        params: {
          schema: A,
          documentAST: O,
          rules: m,
          typeInfo: T,
          options: _
        },
        validateFn: b,
        addValidationRule: (W) => {
          m || (m = []), m.push(W);
        },
        setValidationFn: (W) => {
          b = W;
        },
        setResult: (W) => {
          d = W;
        }
      });
      Z && L.push(Z);
    }
    if (d || (d = b(A, O, m, T, _)), !d)
      return;
    const J = d.length === 0;
    for (const q of L)
      q({
        valid: J,
        result: d,
        context: N,
        extendContext: (Z) => {
          Object.assign(N, Z);
        },
        setResult: (Z) => {
          d = Z;
        }
      });
    return d;
  } : () => r, w = c.context.length ? (S) => async (A) => {
    const O = [], C = S;
    A && Object.assign(C, A);
    try {
      let T = !1;
      for (const _ of c.context) {
        const m = await _({
          context: C,
          extendContext: (b) => {
            Object.assign(C, b);
          },
          breakContextBuilding: () => {
            T = !0;
          }
        });
        if (typeof m == "function" && O.push(m), T === !0)
          break;
      }
      for (const _ of O)
        _({
          context: C,
          extendContext: (m) => {
            Object.assign(C, m);
          }
        });
      return C;
    } catch (T) {
      let _ = T;
      for (const m of u)
        m({
          context: C,
          error: _,
          setError: (b) => {
            _ = b;
          }
        });
      throw _;
    }
  } : (S) => (A) => (A && Object.assign(S, A), S), E = c.subscribe.length, R = bo(E ? async (S) => {
    let A = o;
    const O = [], C = [], T = S.contextValue || {};
    let _;
    for (const d of c.subscribe) {
      const N = await d({
        subscribeFn: A,
        setSubscribeFn: (L) => {
          A = L;
        },
        extendContext: (L) => {
          Object.assign(T, L);
        },
        args: S,
        setResultAndStopExecution: (L) => {
          _ = L;
        }
      });
      if (N && (N.onSubscribeResult && O.push(N.onSubscribeResult), N.onSubscribeError && C.push(N.onSubscribeError)), _ !== void 0)
        break;
    }
    if (_ === void 0 && (_ = await A({
      ...S,
      contextValue: T
      // Casted for GraphQL.js 15 compatibility
      // Can be removed once we drop support for GraphQL.js 15
    })), !_)
      return;
    const m = [], b = [];
    for (const d of O) {
      const N = d({
        args: S,
        result: _,
        setResult: (L) => {
          _ = L;
        }
      });
      N && (N.onNext && m.push(N.onNext), N.onEnd && b.push(N.onEnd));
    }
    return m.length && zt(_) && (_ = Eo(_, async (d) => {
      for (const N of m)
        await N({
          args: S,
          result: d,
          setResult: (L) => d = L
        });
      return d;
    })), b.length && zt(_) && (_ = To(_, () => {
      for (const d of b)
        d();
    })), C.length && zt(_) && (_ = Al(_, (d) => {
      let N = d;
      for (const L of C)
        L({
          error: N,
          setError: (J) => {
            N = J;
          }
        });
      throw N;
    })), _;
  } : o), x = c.execute.length, y = vo(x ? async (S) => {
    let A = s, O;
    const C = [], T = S.contextValue || {};
    for (const b of c.execute) {
      const d = await b({
        executeFn: A,
        setExecuteFn: (N) => {
          A = N;
        },
        setResultAndStopExecution: (N) => {
          O = N;
        },
        extendContext: (N) => {
          if (typeof N == "object")
            Object.assign(T, N);
          else
            throw new Error(`Invalid context extension provided! Expected "object", got: "${JSON.stringify(N)}" (${typeof N})`);
        },
        args: S
      });
      if (d != null && d.onExecuteDone && C.push(d.onExecuteDone), O !== void 0)
        break;
    }
    O === void 0 && (O = await A({
      ...S,
      contextValue: T
    }));
    const _ = [], m = [];
    for (const b of C) {
      const d = await b({
        args: S,
        result: O,
        setResult: (N) => {
          O = N;
        }
      });
      d && (d.onNext && _.push(d.onNext), d.onEnd && m.push(d.onEnd));
    }
    return _.length && zt(O) && (O = Eo(O, async (b) => {
      for (const d of _)
        await d({
          args: S,
          result: b,
          setResult: (N) => {
            b = N;
          }
        });
      return b;
    })), m.length && zt(O) && (O = To(O, () => {
      for (const b of m)
        b();
    })), O;
  } : s);
  if (n = !0, e)
    for (const [S, A] of t.entries())
      A.onSchemaChange && A.onSchemaChange({
        schema: e,
        replaceSchema: (O) => a(O, S)
      });
  return {
    getCurrentSchema() {
      return e;
    },
    init: f,
    parse: g,
    validate: p,
    execute: y,
    subscribe: R,
    contextFactory: w
  };
}
function Fl(t) {
  return t != null;
}
function Rl(t) {
  const e = t.plugins.filter(Fl), n = xl({
    plugins: e
  }), i = (r = {}) => {
    const s = n;
    return s.init(r), {
      parse: s.parse(r),
      validate: s.validate(r),
      contextFactory: s.contextFactory(r),
      execute: s.execute,
      subscribe: s.subscribe,
      schema: s.getCurrentSchema()
    };
  };
  return i._plugins = e, i;
}
const So = {
  logFn: console.log
}, Ll = (t = So) => {
  const e = {
    DEFAULT_OPTIONS: So,
    ...t
  };
  return {
    onParse({ extendContext: n, params: i }) {
      e.skipIntrospection && Il(i.source) && n({
        [Yr]: !0
      });
    },
    onExecute({ args: n }) {
      if (!n.contextValue[Yr])
        return e.logFn("execute-start", { args: n }), {
          onExecuteDone: ({ result: i }) => {
            e.logFn("execute-end", { args: n, result: i });
          }
        };
    },
    onSubscribe({ args: n }) {
      if (!n.contextValue[Yr])
        return e.logFn("subscribe-start", { args: n }), {
          onSubscribeResult: ({ result: i }) => {
            e.logFn("subscribe-end", { args: n, result: i });
          }
        };
    }
  };
}, Cl = "Unexpected error.";
function kl(t) {
  return t instanceof Error && t.name === "GraphQLError";
}
function Pa(t) {
  return kl(t) ? t.originalError != null ? Pa(t.originalError) : !0 : !1;
}
function Dl(t, e, n) {
  const i = new Error(t);
  if (i.name = "GraphQLError", n) {
    const r = e instanceof Error ? { message: e.message, stack: e.stack } : { message: String(e) };
    Object.defineProperty(i, "extensions", {
      get() {
        return r;
      }
    });
  }
  return Object.defineProperty(i, "toJSON", {
    value() {
      return {
        message: i.message,
        extensions: i.extensions
      };
    }
  }), i;
}
const $l = (t) => (e, n) => Pa(e) ? e : Dl(n, e, t);
var xa, Fa;
const Pl = ((Fa = (xa = globalThis.process) == null ? void 0 : xa.env) == null ? void 0 : Fa.NODE_ENV) === "development", jl = $l(Pl), Ml = (t, e) => ({ result: n, setResult: i }) => {
  n.errors != null && i({ ...n, errors: n.errors.map((r) => t(r, e)) });
};
function Ul(t) {
  const e = (t == null ? void 0 : t.maskError) ?? jl, n = (t == null ? void 0 : t.errorMessage) || Cl, i = Ml(e, n);
  return {
    onPluginInit(r) {
      r.registerContextErrorHandler(({ error: s, setError: o }) => {
        o(e(s, n));
      });
    },
    onExecute() {
      return {
        onExecuteDone(r) {
          return wo(r, i);
        }
      };
    },
    onSubscribe() {
      return {
        onSubscribeResult(r) {
          return wo(r, i);
        },
        onSubscribeError({ error: r, setError: s }) {
          s(e(r, n));
        }
      };
    }
  };
}
const Vl = (t) => ({
  async onContextBuilding({ context: e, extendContext: n }) {
    n(await t(e));
  }
}), Bl = (t) => ({
  onExecute: ({ setExecuteFn: e }) => {
    t.execute && e(t.execute);
  },
  onParse: ({ setParseFn: e }) => {
    t.parse && e(t.parse);
  },
  onValidate: ({ setValidationFn: e, addValidationRule: n }) => {
    var i;
    t.validate && e(t.validate), (i = t.specifiedRules) == null || i.map(n);
  },
  onSubscribe: ({ setSubscribeFn: e }) => {
    t.subscribe && e(t.subscribe);
  }
}), ja = Object.freeze({
  major: 16,
  minor: 9,
  patch: 0,
  preReleaseTag: null
});
function ae(t, e) {
  if (!!!t)
    throw new Error(e);
}
function Gl(t) {
  return typeof (t == null ? void 0 : t.then) == "function";
}
function Ht(t) {
  return typeof t == "object" && t !== null;
}
function Yt(t, e) {
  if (!!!t)
    throw new Error(
      e ?? "Unexpected invariant triggered."
    );
}
const ql = /\r\n|[\n\r]/g;
function as(t, e) {
  let n = 0, i = 1;
  for (const r of t.body.matchAll(ql)) {
    if (typeof r.index == "number" || Yt(!1), r.index >= e)
      break;
    n = r.index + r[0].length, i += 1;
  }
  return {
    line: i,
    column: e + 1 - n
  };
}
function zl(t) {
  return Ma(
    t.source,
    as(t.source, t.start)
  );
}
function Ma(t, e) {
  const n = t.locationOffset.column - 1, i = "".padStart(n) + t.body, r = e.line - 1, s = t.locationOffset.line - 1, o = e.line + s, a = e.line === 1 ? n : 0, u = e.column + a, c = `${t.name}:${o}:${u}
`, f = i.split(/\r\n|[\n\r]/g), g = f[r];
  if (g.length > 120) {
    const p = Math.floor(u / 80), w = u % 80, E = [];
    for (let R = 0; R < g.length; R += 80)
      E.push(g.slice(R, R + 80));
    return c + _o([
      [`${o} |`, E[0]],
      ...E.slice(1, p + 1).map((R) => ["|", R]),
      ["|", "^".padStart(w)],
      ["|", E[p + 1]]
    ]);
  }
  return c + _o([
    // Lines specified like this: ["prefix", "string"],
    [`${o - 1} |`, f[r - 1]],
    [`${o} |`, g],
    ["|", "^".padStart(u)],
    [`${o + 1} |`, f[r + 1]]
  ]);
}
function _o(t) {
  const e = t.filter(([i, r]) => r !== void 0), n = Math.max(...e.map(([i]) => i.length));
  return e.map(([i, r]) => i.padStart(n) + (r ? " " + r : "")).join(`
`);
}
function Ql(t) {
  const e = t[0];
  return e == null || "kind" in e || "length" in e ? {
    nodes: e,
    source: t[1],
    positions: t[2],
    path: t[3],
    originalError: t[4],
    extensions: t[5]
  } : e;
}
let P = class Ua extends Error {
  /**
   * An array of `{ line, column }` locations within the source GraphQL document
   * which correspond to this error.
   *
   * Errors during validation often contain multiple locations, for example to
   * point out two things with the same name. Errors during execution include a
   * single location, the field which produced the error.
   *
   * Enumerable, and appears in the result of JSON.stringify().
   */
  /**
   * An array describing the JSON-path into the execution response which
   * corresponds to this error. Only included for errors during execution.
   *
   * Enumerable, and appears in the result of JSON.stringify().
   */
  /**
   * An array of GraphQL AST Nodes corresponding to this error.
   */
  /**
   * The source GraphQL document for the first location of this error.
   *
   * Note that if this Error represents more than one node, the source may not
   * represent nodes after the first node.
   */
  /**
   * An array of character offsets within the source GraphQL document
   * which correspond to this error.
   */
  /**
   * The original error thrown from a field resolver during execution.
   */
  /**
   * Extension fields to add to the formatted error.
   */
  /**
   * @deprecated Please use the `GraphQLErrorOptions` constructor overload instead.
   */
  constructor(e, ...n) {
    var i, r, s;
    const { nodes: o, source: a, positions: u, path: c, originalError: f, extensions: g } = Ql(n);
    super(e), this.name = "GraphQLError", this.path = c ?? void 0, this.originalError = f ?? void 0, this.nodes = Io(
      Array.isArray(o) ? o : o ? [o] : void 0
    );
    const p = Io(
      (i = this.nodes) === null || i === void 0 ? void 0 : i.map((E) => E.loc).filter((E) => E != null)
    );
    this.source = a ?? (p == null || (r = p[0]) === null || r === void 0 ? void 0 : r.source), this.positions = u ?? (p == null ? void 0 : p.map((E) => E.start)), this.locations = u && a ? u.map((E) => as(a, E)) : p == null ? void 0 : p.map((E) => as(E.source, E.start));
    const w = Ht(
      f == null ? void 0 : f.extensions
    ) ? f == null ? void 0 : f.extensions : void 0;
    this.extensions = (s = g ?? w) !== null && s !== void 0 ? s : /* @__PURE__ */ Object.create(null), Object.defineProperties(this, {
      message: {
        writable: !0,
        enumerable: !0
      },
      name: {
        enumerable: !1
      },
      nodes: {
        enumerable: !1
      },
      source: {
        enumerable: !1
      },
      positions: {
        enumerable: !1
      },
      originalError: {
        enumerable: !1
      }
    }), f != null && f.stack ? Object.defineProperty(this, "stack", {
      value: f.stack,
      writable: !0,
      configurable: !0
    }) : Error.captureStackTrace ? Error.captureStackTrace(this, Ua) : Object.defineProperty(this, "stack", {
      value: Error().stack,
      writable: !0,
      configurable: !0
    });
  }
  get [Symbol.toStringTag]() {
    return "GraphQLError";
  }
  toString() {
    let e = this.message;
    if (this.nodes)
      for (const n of this.nodes)
        n.loc && (e += `

` + zl(n.loc));
    else if (this.source && this.locations)
      for (const n of this.locations)
        e += `

` + Ma(this.source, n);
    return e;
  }
  toJSON() {
    const e = {
      message: this.message
    };
    return this.locations != null && (e.locations = this.locations), this.path != null && (e.path = this.path), this.extensions != null && Object.keys(this.extensions).length > 0 && (e.extensions = this.extensions), e;
  }
};
function Io(t) {
  return t === void 0 || t.length === 0 ? void 0 : t;
}
function $e(t, e, n) {
  return new P(`Syntax Error: ${n}`, {
    source: t,
    positions: [e]
  });
}
class Wl {
  /**
   * The character offset at which this Node begins.
   */
  /**
   * The character offset at which this Node ends.
   */
  /**
   * The Token at which this Node begins.
   */
  /**
   * The Token at which this Node ends.
   */
  /**
   * The Source document the AST represents.
   */
  constructor(e, n, i) {
    this.start = e.start, this.end = n.end, this.startToken = e, this.endToken = n, this.source = i;
  }
  get [Symbol.toStringTag]() {
    return "Location";
  }
  toJSON() {
    return {
      start: this.start,
      end: this.end
    };
  }
}
class Va {
  /**
   * The kind of Token.
   */
  /**
   * The character offset at which this Node begins.
   */
  /**
   * The character offset at which this Node ends.
   */
  /**
   * The 1-indexed line number on which this Token appears.
   */
  /**
   * The 1-indexed column number at which this Token begins.
   */
  /**
   * For non-punctuation tokens, represents the interpreted value of the token.
   *
   * Note: is undefined for punctuation tokens, but typed as string for
   * convenience in the parser.
   */
  /**
   * Tokens exist as nodes in a double-linked-list amongst all tokens
   * including ignored tokens. <SOF> is always the first node and <EOF>
   * the last.
   */
  constructor(e, n, i, r, s, o) {
    this.kind = e, this.start = n, this.end = i, this.line = r, this.column = s, this.value = o, this.prev = null, this.next = null;
  }
  get [Symbol.toStringTag]() {
    return "Token";
  }
  toJSON() {
    return {
      kind: this.kind,
      value: this.value,
      line: this.line,
      column: this.column
    };
  }
}
const Ba = {
  Name: [],
  Document: ["definitions"],
  OperationDefinition: [
    "name",
    "variableDefinitions",
    "directives",
    "selectionSet"
  ],
  VariableDefinition: ["variable", "type", "defaultValue", "directives"],
  Variable: ["name"],
  SelectionSet: ["selections"],
  Field: ["alias", "name", "arguments", "directives", "selectionSet"],
  Argument: ["name", "value"],
  FragmentSpread: ["name", "directives"],
  InlineFragment: ["typeCondition", "directives", "selectionSet"],
  FragmentDefinition: [
    "name",
    // Note: fragment variable definitions are deprecated and will removed in v17.0.0
    "variableDefinitions",
    "typeCondition",
    "directives",
    "selectionSet"
  ],
  IntValue: [],
  FloatValue: [],
  StringValue: [],
  BooleanValue: [],
  NullValue: [],
  EnumValue: [],
  ListValue: ["values"],
  ObjectValue: ["fields"],
  ObjectField: ["name", "value"],
  Directive: ["name", "arguments"],
  NamedType: ["name"],
  ListType: ["type"],
  NonNullType: ["type"],
  SchemaDefinition: ["description", "directives", "operationTypes"],
  OperationTypeDefinition: ["type"],
  ScalarTypeDefinition: ["description", "name", "directives"],
  ObjectTypeDefinition: [
    "description",
    "name",
    "interfaces",
    "directives",
    "fields"
  ],
  FieldDefinition: ["description", "name", "arguments", "type", "directives"],
  InputValueDefinition: [
    "description",
    "name",
    "type",
    "defaultValue",
    "directives"
  ],
  InterfaceTypeDefinition: [
    "description",
    "name",
    "interfaces",
    "directives",
    "fields"
  ],
  UnionTypeDefinition: ["description", "name", "directives", "types"],
  EnumTypeDefinition: ["description", "name", "directives", "values"],
  EnumValueDefinition: ["description", "name", "directives"],
  InputObjectTypeDefinition: ["description", "name", "directives", "fields"],
  DirectiveDefinition: ["description", "name", "arguments", "locations"],
  SchemaExtension: ["directives", "operationTypes"],
  ScalarTypeExtension: ["name", "directives"],
  ObjectTypeExtension: ["name", "interfaces", "directives", "fields"],
  InterfaceTypeExtension: ["name", "interfaces", "directives", "fields"],
  UnionTypeExtension: ["name", "directives", "types"],
  EnumTypeExtension: ["name", "directives", "values"],
  InputObjectTypeExtension: ["name", "directives", "fields"]
}, Yl = new Set(Object.keys(Ba));
function us(t) {
  const e = t == null ? void 0 : t.kind;
  return typeof e == "string" && Yl.has(e);
}
var Je;
(function(t) {
  t.QUERY = "query", t.MUTATION = "mutation", t.SUBSCRIPTION = "subscription";
})(Je || (Je = {}));
var K;
(function(t) {
  t.QUERY = "QUERY", t.MUTATION = "MUTATION", t.SUBSCRIPTION = "SUBSCRIPTION", t.FIELD = "FIELD", t.FRAGMENT_DEFINITION = "FRAGMENT_DEFINITION", t.FRAGMENT_SPREAD = "FRAGMENT_SPREAD", t.INLINE_FRAGMENT = "INLINE_FRAGMENT", t.VARIABLE_DEFINITION = "VARIABLE_DEFINITION", t.SCHEMA = "SCHEMA", t.SCALAR = "SCALAR", t.OBJECT = "OBJECT", t.FIELD_DEFINITION = "FIELD_DEFINITION", t.ARGUMENT_DEFINITION = "ARGUMENT_DEFINITION", t.INTERFACE = "INTERFACE", t.UNION = "UNION", t.ENUM = "ENUM", t.ENUM_VALUE = "ENUM_VALUE", t.INPUT_OBJECT = "INPUT_OBJECT", t.INPUT_FIELD_DEFINITION = "INPUT_FIELD_DEFINITION";
})(K || (K = {}));
var I;
(function(t) {
  t.NAME = "Name", t.DOCUMENT = "Document", t.OPERATION_DEFINITION = "OperationDefinition", t.VARIABLE_DEFINITION = "VariableDefinition", t.SELECTION_SET = "SelectionSet", t.FIELD = "Field", t.ARGUMENT = "Argument", t.FRAGMENT_SPREAD = "FragmentSpread", t.INLINE_FRAGMENT = "InlineFragment", t.FRAGMENT_DEFINITION = "FragmentDefinition", t.VARIABLE = "Variable", t.INT = "IntValue", t.FLOAT = "FloatValue", t.STRING = "StringValue", t.BOOLEAN = "BooleanValue", t.NULL = "NullValue", t.ENUM = "EnumValue", t.LIST = "ListValue", t.OBJECT = "ObjectValue", t.OBJECT_FIELD = "ObjectField", t.DIRECTIVE = "Directive", t.NAMED_TYPE = "NamedType", t.LIST_TYPE = "ListType", t.NON_NULL_TYPE = "NonNullType", t.SCHEMA_DEFINITION = "SchemaDefinition", t.OPERATION_TYPE_DEFINITION = "OperationTypeDefinition", t.SCALAR_TYPE_DEFINITION = "ScalarTypeDefinition", t.OBJECT_TYPE_DEFINITION = "ObjectTypeDefinition", t.FIELD_DEFINITION = "FieldDefinition", t.INPUT_VALUE_DEFINITION = "InputValueDefinition", t.INTERFACE_TYPE_DEFINITION = "InterfaceTypeDefinition", t.UNION_TYPE_DEFINITION = "UnionTypeDefinition", t.ENUM_TYPE_DEFINITION = "EnumTypeDefinition", t.ENUM_VALUE_DEFINITION = "EnumValueDefinition", t.INPUT_OBJECT_TYPE_DEFINITION = "InputObjectTypeDefinition", t.DIRECTIVE_DEFINITION = "DirectiveDefinition", t.SCHEMA_EXTENSION = "SchemaExtension", t.SCALAR_TYPE_EXTENSION = "ScalarTypeExtension", t.OBJECT_TYPE_EXTENSION = "ObjectTypeExtension", t.INTERFACE_TYPE_EXTENSION = "InterfaceTypeExtension", t.UNION_TYPE_EXTENSION = "UnionTypeExtension", t.ENUM_TYPE_EXTENSION = "EnumTypeExtension", t.INPUT_OBJECT_TYPE_EXTENSION = "InputObjectTypeExtension";
})(I || (I = {}));
function ls(t) {
  return t === 9 || t === 32;
}
function xi(t) {
  return t >= 48 && t <= 57;
}
function Ga(t) {
  return t >= 97 && t <= 122 || // A-Z
  t >= 65 && t <= 90;
}
function $s(t) {
  return Ga(t) || t === 95;
}
function qa(t) {
  return Ga(t) || xi(t) || t === 95;
}
function Hl(t) {
  var e;
  let n = Number.MAX_SAFE_INTEGER, i = null, r = -1;
  for (let o = 0; o < t.length; ++o) {
    var s;
    const a = t[o], u = Jl(a);
    u !== a.length && (i = (s = i) !== null && s !== void 0 ? s : o, r = o, o !== 0 && u < n && (n = u));
  }
  return t.map((o, a) => a === 0 ? o : o.slice(n)).slice(
    (e = i) !== null && e !== void 0 ? e : 0,
    r + 1
  );
}
function Jl(t) {
  let e = 0;
  for (; e < t.length && ls(t.charCodeAt(e)); )
    ++e;
  return e;
}
function Kl(t, e) {
  const n = t.replace(/"""/g, '\\"""'), i = n.split(/\r\n|[\n\r]/g), r = i.length === 1, s = i.length > 1 && i.slice(1).every((w) => w.length === 0 || ls(w.charCodeAt(0))), o = n.endsWith('\\"""'), a = t.endsWith('"') && !o, u = t.endsWith("\\"), c = a || u, f = (
    // add leading and trailing new lines only if it improves readability
    !r || t.length > 70 || c || s || o
  );
  let g = "";
  const p = r && ls(t.charCodeAt(0));
  return (f && !p || s) && (g += `
`), g += n, (f || c) && (g += `
`), '"""' + g + '"""';
}
var D;
(function(t) {
  t.SOF = "<SOF>", t.EOF = "<EOF>", t.BANG = "!", t.DOLLAR = "$", t.AMP = "&", t.PAREN_L = "(", t.PAREN_R = ")", t.SPREAD = "...", t.COLON = ":", t.EQUALS = "=", t.AT = "@", t.BRACKET_L = "[", t.BRACKET_R = "]", t.BRACE_L = "{", t.PIPE = "|", t.BRACE_R = "}", t.NAME = "Name", t.INT = "Int", t.FLOAT = "Float", t.STRING = "String", t.BLOCK_STRING = "BlockString", t.COMMENT = "Comment";
})(D || (D = {}));
class Xl {
  /**
   * The previously focused non-ignored token.
   */
  /**
   * The currently focused non-ignored token.
   */
  /**
   * The (1-indexed) line containing the current token.
   */
  /**
   * The character offset at which the current line begins.
   */
  constructor(e) {
    const n = new Va(D.SOF, 0, 0, 0, 0);
    this.source = e, this.lastToken = n, this.token = n, this.line = 1, this.lineStart = 0;
  }
  get [Symbol.toStringTag]() {
    return "Lexer";
  }
  /**
   * Advances the token stream to the next non-ignored token.
   */
  advance() {
    return this.lastToken = this.token, this.token = this.lookahead();
  }
  /**
   * Looks ahead and returns the next non-ignored token, but does not change
   * the state of Lexer.
   */
  lookahead() {
    let e = this.token;
    if (e.kind !== D.EOF)
      do
        if (e.next)
          e = e.next;
        else {
          const n = ec(this, e.end);
          e.next = n, n.prev = e, e = n;
        }
      while (e.kind === D.COMMENT);
    return e;
  }
}
function Zl(t) {
  return t === D.BANG || t === D.DOLLAR || t === D.AMP || t === D.PAREN_L || t === D.PAREN_R || t === D.SPREAD || t === D.COLON || t === D.EQUALS || t === D.AT || t === D.BRACKET_L || t === D.BRACKET_R || t === D.BRACE_L || t === D.PIPE || t === D.BRACE_R;
}
function ai(t) {
  return t >= 0 && t <= 55295 || t >= 57344 && t <= 1114111;
}
function Fr(t, e) {
  return za(t.charCodeAt(e)) && Qa(t.charCodeAt(e + 1));
}
function za(t) {
  return t >= 55296 && t <= 56319;
}
function Qa(t) {
  return t >= 56320 && t <= 57343;
}
function Ln(t, e) {
  const n = t.source.body.codePointAt(e);
  if (n === void 0)
    return D.EOF;
  if (n >= 32 && n <= 126) {
    const i = String.fromCodePoint(n);
    return i === '"' ? `'"'` : `"${i}"`;
  }
  return "U+" + n.toString(16).toUpperCase().padStart(4, "0");
}
function _e(t, e, n, i, r) {
  const s = t.line, o = 1 + n - t.lineStart;
  return new Va(e, n, i, s, o, r);
}
function ec(t, e) {
  const n = t.source.body, i = n.length;
  let r = e;
  for (; r < i; ) {
    const s = n.charCodeAt(r);
    switch (s) {
      case 65279:
      case 9:
      case 32:
      case 44:
        ++r;
        continue;
      case 10:
        ++r, ++t.line, t.lineStart = r;
        continue;
      case 13:
        n.charCodeAt(r + 1) === 10 ? r += 2 : ++r, ++t.line, t.lineStart = r;
        continue;
      case 35:
        return tc(t, r);
      case 33:
        return _e(t, D.BANG, r, r + 1);
      case 36:
        return _e(t, D.DOLLAR, r, r + 1);
      case 38:
        return _e(t, D.AMP, r, r + 1);
      case 40:
        return _e(t, D.PAREN_L, r, r + 1);
      case 41:
        return _e(t, D.PAREN_R, r, r + 1);
      case 46:
        if (n.charCodeAt(r + 1) === 46 && n.charCodeAt(r + 2) === 46)
          return _e(t, D.SPREAD, r, r + 3);
        break;
      case 58:
        return _e(t, D.COLON, r, r + 1);
      case 61:
        return _e(t, D.EQUALS, r, r + 1);
      case 64:
        return _e(t, D.AT, r, r + 1);
      case 91:
        return _e(t, D.BRACKET_L, r, r + 1);
      case 93:
        return _e(t, D.BRACKET_R, r, r + 1);
      case 123:
        return _e(t, D.BRACE_L, r, r + 1);
      case 124:
        return _e(t, D.PIPE, r, r + 1);
      case 125:
        return _e(t, D.BRACE_R, r, r + 1);
      case 34:
        return n.charCodeAt(r + 1) === 34 && n.charCodeAt(r + 2) === 34 ? ac(t, r) : ic(t, r);
    }
    if (xi(s) || s === 45)
      return nc(t, r, s);
    if ($s(s))
      return uc(t, r);
    throw $e(
      t.source,
      r,
      s === 39 ? `Unexpected single quote character ('), did you mean to use a double quote (")?` : ai(s) || Fr(n, r) ? `Unexpected character: ${Ln(t, r)}.` : `Invalid character: ${Ln(t, r)}.`
    );
  }
  return _e(t, D.EOF, i, i);
}
function tc(t, e) {
  const n = t.source.body, i = n.length;
  let r = e + 1;
  for (; r < i; ) {
    const s = n.charCodeAt(r);
    if (s === 10 || s === 13)
      break;
    if (ai(s))
      ++r;
    else if (Fr(n, r))
      r += 2;
    else
      break;
  }
  return _e(
    t,
    D.COMMENT,
    e,
    r,
    n.slice(e + 1, r)
  );
}
function nc(t, e, n) {
  const i = t.source.body;
  let r = e, s = n, o = !1;
  if (s === 45 && (s = i.charCodeAt(++r)), s === 48) {
    if (s = i.charCodeAt(++r), xi(s))
      throw $e(
        t.source,
        r,
        `Invalid number, unexpected digit after 0: ${Ln(
          t,
          r
        )}.`
      );
  } else
    r = Hr(t, r, s), s = i.charCodeAt(r);
  if (s === 46 && (o = !0, s = i.charCodeAt(++r), r = Hr(t, r, s), s = i.charCodeAt(r)), (s === 69 || s === 101) && (o = !0, s = i.charCodeAt(++r), (s === 43 || s === 45) && (s = i.charCodeAt(++r)), r = Hr(t, r, s), s = i.charCodeAt(r)), s === 46 || $s(s))
    throw $e(
      t.source,
      r,
      `Invalid number, expected digit but got: ${Ln(
        t,
        r
      )}.`
    );
  return _e(
    t,
    o ? D.FLOAT : D.INT,
    e,
    r,
    i.slice(e, r)
  );
}
function Hr(t, e, n) {
  if (!xi(n))
    throw $e(
      t.source,
      e,
      `Invalid number, expected digit but got: ${Ln(
        t,
        e
      )}.`
    );
  const i = t.source.body;
  let r = e + 1;
  for (; xi(i.charCodeAt(r)); )
    ++r;
  return r;
}
function ic(t, e) {
  const n = t.source.body, i = n.length;
  let r = e + 1, s = r, o = "";
  for (; r < i; ) {
    const a = n.charCodeAt(r);
    if (a === 34)
      return o += n.slice(s, r), _e(t, D.STRING, e, r + 1, o);
    if (a === 92) {
      o += n.slice(s, r);
      const u = n.charCodeAt(r + 1) === 117 ? n.charCodeAt(r + 2) === 123 ? rc(t, r) : sc(t, r) : oc(t, r);
      o += u.value, r += u.size, s = r;
      continue;
    }
    if (a === 10 || a === 13)
      break;
    if (ai(a))
      ++r;
    else if (Fr(n, r))
      r += 2;
    else
      throw $e(
        t.source,
        r,
        `Invalid character within String: ${Ln(
          t,
          r
        )}.`
      );
  }
  throw $e(t.source, r, "Unterminated string.");
}
function rc(t, e) {
  const n = t.source.body;
  let i = 0, r = 3;
  for (; r < 12; ) {
    const s = n.charCodeAt(e + r++);
    if (s === 125) {
      if (r < 5 || !ai(i))
        break;
      return {
        value: String.fromCodePoint(i),
        size: r
      };
    }
    if (i = i << 4 | yi(s), i < 0)
      break;
  }
  throw $e(
    t.source,
    e,
    `Invalid Unicode escape sequence: "${n.slice(
      e,
      e + r
    )}".`
  );
}
function sc(t, e) {
  const n = t.source.body, i = Oo(n, e + 2);
  if (ai(i))
    return {
      value: String.fromCodePoint(i),
      size: 6
    };
  if (za(i) && n.charCodeAt(e + 6) === 92 && n.charCodeAt(e + 7) === 117) {
    const r = Oo(n, e + 8);
    if (Qa(r))
      return {
        value: String.fromCodePoint(i, r),
        size: 12
      };
  }
  throw $e(
    t.source,
    e,
    `Invalid Unicode escape sequence: "${n.slice(e, e + 6)}".`
  );
}
function Oo(t, e) {
  return yi(t.charCodeAt(e)) << 12 | yi(t.charCodeAt(e + 1)) << 8 | yi(t.charCodeAt(e + 2)) << 4 | yi(t.charCodeAt(e + 3));
}
function yi(t) {
  return t >= 48 && t <= 57 ? t - 48 : t >= 65 && t <= 70 ? t - 55 : t >= 97 && t <= 102 ? t - 87 : -1;
}
function oc(t, e) {
  const n = t.source.body;
  switch (n.charCodeAt(e + 1)) {
    case 34:
      return {
        value: '"',
        size: 2
      };
    case 92:
      return {
        value: "\\",
        size: 2
      };
    case 47:
      return {
        value: "/",
        size: 2
      };
    case 98:
      return {
        value: "\b",
        size: 2
      };
    case 102:
      return {
        value: "\f",
        size: 2
      };
    case 110:
      return {
        value: `
`,
        size: 2
      };
    case 114:
      return {
        value: "\r",
        size: 2
      };
    case 116:
      return {
        value: "	",
        size: 2
      };
  }
  throw $e(
    t.source,
    e,
    `Invalid character escape sequence: "${n.slice(
      e,
      e + 2
    )}".`
  );
}
function ac(t, e) {
  const n = t.source.body, i = n.length;
  let r = t.lineStart, s = e + 3, o = s, a = "";
  const u = [];
  for (; s < i; ) {
    const c = n.charCodeAt(s);
    if (c === 34 && n.charCodeAt(s + 1) === 34 && n.charCodeAt(s + 2) === 34) {
      a += n.slice(o, s), u.push(a);
      const f = _e(
        t,
        D.BLOCK_STRING,
        e,
        s + 3,
        // Return a string of the lines joined with U+000A.
        Hl(u).join(`
`)
      );
      return t.line += u.length - 1, t.lineStart = r, f;
    }
    if (c === 92 && n.charCodeAt(s + 1) === 34 && n.charCodeAt(s + 2) === 34 && n.charCodeAt(s + 3) === 34) {
      a += n.slice(o, s), o = s + 1, s += 4;
      continue;
    }
    if (c === 10 || c === 13) {
      a += n.slice(o, s), u.push(a), c === 13 && n.charCodeAt(s + 1) === 10 ? s += 2 : ++s, a = "", o = s, r = s;
      continue;
    }
    if (ai(c))
      ++s;
    else if (Fr(n, s))
      s += 2;
    else
      throw $e(
        t.source,
        s,
        `Invalid character within String: ${Ln(
          t,
          s
        )}.`
      );
  }
  throw $e(t.source, s, "Unterminated string.");
}
function uc(t, e) {
  const n = t.source.body, i = n.length;
  let r = e + 1;
  for (; r < i; ) {
    const s = n.charCodeAt(r);
    if (qa(s))
      ++r;
    else
      break;
  }
  return _e(
    t,
    D.NAME,
    e,
    r,
    n.slice(e, r)
  );
}
const lc = 10, Wa = 2;
function G(t) {
  return Rr(t, []);
}
function Rr(t, e) {
  switch (typeof t) {
    case "string":
      return JSON.stringify(t);
    case "function":
      return t.name ? `[function ${t.name}]` : "[function]";
    case "object":
      return cc(t, e);
    default:
      return String(t);
  }
}
function cc(t, e) {
  if (t === null)
    return "null";
  if (e.includes(t))
    return "[Circular]";
  const n = [...e, t];
  if (fc(t)) {
    const i = t.toJSON();
    if (i !== t)
      return typeof i == "string" ? i : Rr(i, n);
  } else if (Array.isArray(t))
    return hc(t, n);
  return dc(t, n);
}
function fc(t) {
  return typeof t.toJSON == "function";
}
function dc(t, e) {
  const n = Object.entries(t);
  return n.length === 0 ? "{}" : e.length > Wa ? "[" + pc(t) + "]" : "{ " + n.map(
    ([r, s]) => r + ": " + Rr(s, e)
  ).join(", ") + " }";
}
function hc(t, e) {
  if (t.length === 0)
    return "[]";
  if (e.length > Wa)
    return "[Array]";
  const n = Math.min(lc, t.length), i = t.length - n, r = [];
  for (let s = 0; s < n; ++s)
    r.push(Rr(t[s], e));
  return i === 1 ? r.push("... 1 more item") : i > 1 && r.push(`... ${i} more items`), "[" + r.join(", ") + "]";
}
function pc(t) {
  const e = Object.prototype.toString.call(t).replace(/^\[object /, "").replace(/]$/, "");
  if (e === "Object" && typeof t.constructor == "function") {
    const n = t.constructor.name;
    if (typeof n == "string" && n !== "")
      return n;
  }
  return e;
}
const gc = globalThis.process && // eslint-disable-next-line no-undef
process.env.NODE_ENV === "production", Gt = (
  /* c8 ignore next 6 */
  // FIXME: https://github.com/graphql/graphql-js/issues/2317
  gc ? function(e, n) {
    return e instanceof n;
  } : function(e, n) {
    if (e instanceof n)
      return !0;
    if (typeof e == "object" && e !== null) {
      var i;
      const r = n.prototype[Symbol.toStringTag], s = (
        // We still need to support constructor's name to detect conflicts with older versions of this library.
        Symbol.toStringTag in e ? e[Symbol.toStringTag] : (i = e.constructor) === null || i === void 0 ? void 0 : i.name
      );
      if (r === s) {
        const o = G(e);
        throw new Error(`Cannot use ${r} "${o}" from another module or realm.

Ensure that there is only one instance of "graphql" in the node_modules
directory. If different versions of "graphql" are the dependencies of other
relied on modules, use "resolutions" to ensure only one version is installed.

https://yarnpkg.com/en/docs/selective-version-resolutions

Duplicate "graphql" modules cannot be used at the same time since different
versions may have different capabilities and behavior. The data from one
version used in the function from another could produce confusing and
spurious results.`);
      }
    }
    return !1;
  }
);
class Ya {
  constructor(e, n = "GraphQL request", i = {
    line: 1,
    column: 1
  }) {
    typeof e == "string" || ae(!1, `Body must be a string. Received: ${G(e)}.`), this.body = e, this.name = n, this.locationOffset = i, this.locationOffset.line > 0 || ae(
      !1,
      "line in locationOffset is 1-indexed and must be positive."
    ), this.locationOffset.column > 0 || ae(
      !1,
      "column in locationOffset is 1-indexed and must be positive."
    );
  }
  get [Symbol.toStringTag]() {
    return "Source";
  }
}
function mc(t) {
  return Gt(t, Ya);
}
function yc(t, e) {
  return new bc(t, e).parseDocument();
}
class bc {
  constructor(e, n = {}) {
    const i = mc(e) ? e : new Ya(e);
    this._lexer = new Xl(i), this._options = n, this._tokenCounter = 0;
  }
  /**
   * Converts a name lex token into a name parse node.
   */
  parseName() {
    const e = this.expectToken(D.NAME);
    return this.node(e, {
      kind: I.NAME,
      value: e.value
    });
  }
  // Implements the parsing rules in the Document section.
  /**
   * Document : Definition+
   */
  parseDocument() {
    return this.node(this._lexer.token, {
      kind: I.DOCUMENT,
      definitions: this.many(
        D.SOF,
        this.parseDefinition,
        D.EOF
      )
    });
  }
  /**
   * Definition :
   *   - ExecutableDefinition
   *   - TypeSystemDefinition
   *   - TypeSystemExtension
   *
   * ExecutableDefinition :
   *   - OperationDefinition
   *   - FragmentDefinition
   *
   * TypeSystemDefinition :
   *   - SchemaDefinition
   *   - TypeDefinition
   *   - DirectiveDefinition
   *
   * TypeDefinition :
   *   - ScalarTypeDefinition
   *   - ObjectTypeDefinition
   *   - InterfaceTypeDefinition
   *   - UnionTypeDefinition
   *   - EnumTypeDefinition
   *   - InputObjectTypeDefinition
   */
  parseDefinition() {
    if (this.peek(D.BRACE_L))
      return this.parseOperationDefinition();
    const e = this.peekDescription(), n = e ? this._lexer.lookahead() : this._lexer.token;
    if (n.kind === D.NAME) {
      switch (n.value) {
        case "schema":
          return this.parseSchemaDefinition();
        case "scalar":
          return this.parseScalarTypeDefinition();
        case "type":
          return this.parseObjectTypeDefinition();
        case "interface":
          return this.parseInterfaceTypeDefinition();
        case "union":
          return this.parseUnionTypeDefinition();
        case "enum":
          return this.parseEnumTypeDefinition();
        case "input":
          return this.parseInputObjectTypeDefinition();
        case "directive":
          return this.parseDirectiveDefinition();
      }
      if (e)
        throw $e(
          this._lexer.source,
          this._lexer.token.start,
          "Unexpected description, descriptions are supported only on type definitions."
        );
      switch (n.value) {
        case "query":
        case "mutation":
        case "subscription":
          return this.parseOperationDefinition();
        case "fragment":
          return this.parseFragmentDefinition();
        case "extend":
          return this.parseTypeSystemExtension();
      }
    }
    throw this.unexpected(n);
  }
  // Implements the parsing rules in the Operations section.
  /**
   * OperationDefinition :
   *  - SelectionSet
   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet
   */
  parseOperationDefinition() {
    const e = this._lexer.token;
    if (this.peek(D.BRACE_L))
      return this.node(e, {
        kind: I.OPERATION_DEFINITION,
        operation: Je.QUERY,
        name: void 0,
        variableDefinitions: [],
        directives: [],
        selectionSet: this.parseSelectionSet()
      });
    const n = this.parseOperationType();
    let i;
    return this.peek(D.NAME) && (i = this.parseName()), this.node(e, {
      kind: I.OPERATION_DEFINITION,
      operation: n,
      name: i,
      variableDefinitions: this.parseVariableDefinitions(),
      directives: this.parseDirectives(!1),
      selectionSet: this.parseSelectionSet()
    });
  }
  /**
   * OperationType : one of query mutation subscription
   */
  parseOperationType() {
    const e = this.expectToken(D.NAME);
    switch (e.value) {
      case "query":
        return Je.QUERY;
      case "mutation":
        return Je.MUTATION;
      case "subscription":
        return Je.SUBSCRIPTION;
    }
    throw this.unexpected(e);
  }
  /**
   * VariableDefinitions : ( VariableDefinition+ )
   */
  parseVariableDefinitions() {
    return this.optionalMany(
      D.PAREN_L,
      this.parseVariableDefinition,
      D.PAREN_R
    );
  }
  /**
   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?
   */
  parseVariableDefinition() {
    return this.node(this._lexer.token, {
      kind: I.VARIABLE_DEFINITION,
      variable: this.parseVariable(),
      type: (this.expectToken(D.COLON), this.parseTypeReference()),
      defaultValue: this.expectOptionalToken(D.EQUALS) ? this.parseConstValueLiteral() : void 0,
      directives: this.parseConstDirectives()
    });
  }
  /**
   * Variable : $ Name
   */
  parseVariable() {
    const e = this._lexer.token;
    return this.expectToken(D.DOLLAR), this.node(e, {
      kind: I.VARIABLE,
      name: this.parseName()
    });
  }
  /**
   * ```
   * SelectionSet : { Selection+ }
   * ```
   */
  parseSelectionSet() {
    return this.node(this._lexer.token, {
      kind: I.SELECTION_SET,
      selections: this.many(
        D.BRACE_L,
        this.parseSelection,
        D.BRACE_R
      )
    });
  }
  /**
   * Selection :
   *   - Field
   *   - FragmentSpread
   *   - InlineFragment
   */
  parseSelection() {
    return this.peek(D.SPREAD) ? this.parseFragment() : this.parseField();
  }
  /**
   * Field : Alias? Name Arguments? Directives? SelectionSet?
   *
   * Alias : Name :
   */
  parseField() {
    const e = this._lexer.token, n = this.parseName();
    let i, r;
    return this.expectOptionalToken(D.COLON) ? (i = n, r = this.parseName()) : r = n, this.node(e, {
      kind: I.FIELD,
      alias: i,
      name: r,
      arguments: this.parseArguments(!1),
      directives: this.parseDirectives(!1),
      selectionSet: this.peek(D.BRACE_L) ? this.parseSelectionSet() : void 0
    });
  }
  /**
   * Arguments[Const] : ( Argument[?Const]+ )
   */
  parseArguments(e) {
    const n = e ? this.parseConstArgument : this.parseArgument;
    return this.optionalMany(D.PAREN_L, n, D.PAREN_R);
  }
  /**
   * Argument[Const] : Name : Value[?Const]
   */
  parseArgument(e = !1) {
    const n = this._lexer.token, i = this.parseName();
    return this.expectToken(D.COLON), this.node(n, {
      kind: I.ARGUMENT,
      name: i,
      value: this.parseValueLiteral(e)
    });
  }
  parseConstArgument() {
    return this.parseArgument(!0);
  }
  // Implements the parsing rules in the Fragments section.
  /**
   * Corresponds to both FragmentSpread and InlineFragment in the spec.
   *
   * FragmentSpread : ... FragmentName Directives?
   *
   * InlineFragment : ... TypeCondition? Directives? SelectionSet
   */
  parseFragment() {
    const e = this._lexer.token;
    this.expectToken(D.SPREAD);
    const n = this.expectOptionalKeyword("on");
    return !n && this.peek(D.NAME) ? this.node(e, {
      kind: I.FRAGMENT_SPREAD,
      name: this.parseFragmentName(),
      directives: this.parseDirectives(!1)
    }) : this.node(e, {
      kind: I.INLINE_FRAGMENT,
      typeCondition: n ? this.parseNamedType() : void 0,
      directives: this.parseDirectives(!1),
      selectionSet: this.parseSelectionSet()
    });
  }
  /**
   * FragmentDefinition :
   *   - fragment FragmentName on TypeCondition Directives? SelectionSet
   *
   * TypeCondition : NamedType
   */
  parseFragmentDefinition() {
    const e = this._lexer.token;
    return this.expectKeyword("fragment"), this._options.allowLegacyFragmentVariables === !0 ? this.node(e, {
      kind: I.FRAGMENT_DEFINITION,
      name: this.parseFragmentName(),
      variableDefinitions: this.parseVariableDefinitions(),
      typeCondition: (this.expectKeyword("on"), this.parseNamedType()),
      directives: this.parseDirectives(!1),
      selectionSet: this.parseSelectionSet()
    }) : this.node(e, {
      kind: I.FRAGMENT_DEFINITION,
      name: this.parseFragmentName(),
      typeCondition: (this.expectKeyword("on"), this.parseNamedType()),
      directives: this.parseDirectives(!1),
      selectionSet: this.parseSelectionSet()
    });
  }
  /**
   * FragmentName : Name but not `on`
   */
  parseFragmentName() {
    if (this._lexer.token.value === "on")
      throw this.unexpected();
    return this.parseName();
  }
  // Implements the parsing rules in the Values section.
  /**
   * Value[Const] :
   *   - [~Const] Variable
   *   - IntValue
   *   - FloatValue
   *   - StringValue
   *   - BooleanValue
   *   - NullValue
   *   - EnumValue
   *   - ListValue[?Const]
   *   - ObjectValue[?Const]
   *
   * BooleanValue : one of `true` `false`
   *
   * NullValue : `null`
   *
   * EnumValue : Name but not `true`, `false` or `null`
   */
  parseValueLiteral(e) {
    const n = this._lexer.token;
    switch (n.kind) {
      case D.BRACKET_L:
        return this.parseList(e);
      case D.BRACE_L:
        return this.parseObject(e);
      case D.INT:
        return this.advanceLexer(), this.node(n, {
          kind: I.INT,
          value: n.value
        });
      case D.FLOAT:
        return this.advanceLexer(), this.node(n, {
          kind: I.FLOAT,
          value: n.value
        });
      case D.STRING:
      case D.BLOCK_STRING:
        return this.parseStringLiteral();
      case D.NAME:
        switch (this.advanceLexer(), n.value) {
          case "true":
            return this.node(n, {
              kind: I.BOOLEAN,
              value: !0
            });
          case "false":
            return this.node(n, {
              kind: I.BOOLEAN,
              value: !1
            });
          case "null":
            return this.node(n, {
              kind: I.NULL
            });
          default:
            return this.node(n, {
              kind: I.ENUM,
              value: n.value
            });
        }
      case D.DOLLAR:
        if (e)
          if (this.expectToken(D.DOLLAR), this._lexer.token.kind === D.NAME) {
            const i = this._lexer.token.value;
            throw $e(
              this._lexer.source,
              n.start,
              `Unexpected variable "$${i}" in constant value.`
            );
          } else
            throw this.unexpected(n);
        return this.parseVariable();
      default:
        throw this.unexpected();
    }
  }
  parseConstValueLiteral() {
    return this.parseValueLiteral(!0);
  }
  parseStringLiteral() {
    const e = this._lexer.token;
    return this.advanceLexer(), this.node(e, {
      kind: I.STRING,
      value: e.value,
      block: e.kind === D.BLOCK_STRING
    });
  }
  /**
   * ListValue[Const] :
   *   - [ ]
   *   - [ Value[?Const]+ ]
   */
  parseList(e) {
    const n = () => this.parseValueLiteral(e);
    return this.node(this._lexer.token, {
      kind: I.LIST,
      values: this.any(D.BRACKET_L, n, D.BRACKET_R)
    });
  }
  /**
   * ```
   * ObjectValue[Const] :
   *   - { }
   *   - { ObjectField[?Const]+ }
   * ```
   */
  parseObject(e) {
    const n = () => this.parseObjectField(e);
    return this.node(this._lexer.token, {
      kind: I.OBJECT,
      fields: this.any(D.BRACE_L, n, D.BRACE_R)
    });
  }
  /**
   * ObjectField[Const] : Name : Value[?Const]
   */
  parseObjectField(e) {
    const n = this._lexer.token, i = this.parseName();
    return this.expectToken(D.COLON), this.node(n, {
      kind: I.OBJECT_FIELD,
      name: i,
      value: this.parseValueLiteral(e)
    });
  }
  // Implements the parsing rules in the Directives section.
  /**
   * Directives[Const] : Directive[?Const]+
   */
  parseDirectives(e) {
    const n = [];
    for (; this.peek(D.AT); )
      n.push(this.parseDirective(e));
    return n;
  }
  parseConstDirectives() {
    return this.parseDirectives(!0);
  }
  /**
   * ```
   * Directive[Const] : @ Name Arguments[?Const]?
   * ```
   */
  parseDirective(e) {
    const n = this._lexer.token;
    return this.expectToken(D.AT), this.node(n, {
      kind: I.DIRECTIVE,
      name: this.parseName(),
      arguments: this.parseArguments(e)
    });
  }
  // Implements the parsing rules in the Types section.
  /**
   * Type :
   *   - NamedType
   *   - ListType
   *   - NonNullType
   */
  parseTypeReference() {
    const e = this._lexer.token;
    let n;
    if (this.expectOptionalToken(D.BRACKET_L)) {
      const i = this.parseTypeReference();
      this.expectToken(D.BRACKET_R), n = this.node(e, {
        kind: I.LIST_TYPE,
        type: i
      });
    } else
      n = this.parseNamedType();
    return this.expectOptionalToken(D.BANG) ? this.node(e, {
      kind: I.NON_NULL_TYPE,
      type: n
    }) : n;
  }
  /**
   * NamedType : Name
   */
  parseNamedType() {
    return this.node(this._lexer.token, {
      kind: I.NAMED_TYPE,
      name: this.parseName()
    });
  }
  // Implements the parsing rules in the Type Definition section.
  peekDescription() {
    return this.peek(D.STRING) || this.peek(D.BLOCK_STRING);
  }
  /**
   * Description : StringValue
   */
  parseDescription() {
    if (this.peekDescription())
      return this.parseStringLiteral();
  }
  /**
   * ```
   * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }
   * ```
   */
  parseSchemaDefinition() {
    const e = this._lexer.token, n = this.parseDescription();
    this.expectKeyword("schema");
    const i = this.parseConstDirectives(), r = this.many(
      D.BRACE_L,
      this.parseOperationTypeDefinition,
      D.BRACE_R
    );
    return this.node(e, {
      kind: I.SCHEMA_DEFINITION,
      description: n,
      directives: i,
      operationTypes: r
    });
  }
  /**
   * OperationTypeDefinition : OperationType : NamedType
   */
  parseOperationTypeDefinition() {
    const e = this._lexer.token, n = this.parseOperationType();
    this.expectToken(D.COLON);
    const i = this.parseNamedType();
    return this.node(e, {
      kind: I.OPERATION_TYPE_DEFINITION,
      operation: n,
      type: i
    });
  }
  /**
   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?
   */
  parseScalarTypeDefinition() {
    const e = this._lexer.token, n = this.parseDescription();
    this.expectKeyword("scalar");
    const i = this.parseName(), r = this.parseConstDirectives();
    return this.node(e, {
      kind: I.SCALAR_TYPE_DEFINITION,
      description: n,
      name: i,
      directives: r
    });
  }
  /**
   * ObjectTypeDefinition :
   *   Description?
   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?
   */
  parseObjectTypeDefinition() {
    const e = this._lexer.token, n = this.parseDescription();
    this.expectKeyword("type");
    const i = this.parseName(), r = this.parseImplementsInterfaces(), s = this.parseConstDirectives(), o = this.parseFieldsDefinition();
    return this.node(e, {
      kind: I.OBJECT_TYPE_DEFINITION,
      description: n,
      name: i,
      interfaces: r,
      directives: s,
      fields: o
    });
  }
  /**
   * ImplementsInterfaces :
   *   - implements `&`? NamedType
   *   - ImplementsInterfaces & NamedType
   */
  parseImplementsInterfaces() {
    return this.expectOptionalKeyword("implements") ? this.delimitedMany(D.AMP, this.parseNamedType) : [];
  }
  /**
   * ```
   * FieldsDefinition : { FieldDefinition+ }
   * ```
   */
  parseFieldsDefinition() {
    return this.optionalMany(
      D.BRACE_L,
      this.parseFieldDefinition,
      D.BRACE_R
    );
  }
  /**
   * FieldDefinition :
   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?
   */
  parseFieldDefinition() {
    const e = this._lexer.token, n = this.parseDescription(), i = this.parseName(), r = this.parseArgumentDefs();
    this.expectToken(D.COLON);
    const s = this.parseTypeReference(), o = this.parseConstDirectives();
    return this.node(e, {
      kind: I.FIELD_DEFINITION,
      description: n,
      name: i,
      arguments: r,
      type: s,
      directives: o
    });
  }
  /**
   * ArgumentsDefinition : ( InputValueDefinition+ )
   */
  parseArgumentDefs() {
    return this.optionalMany(
      D.PAREN_L,
      this.parseInputValueDef,
      D.PAREN_R
    );
  }
  /**
   * InputValueDefinition :
   *   - Description? Name : Type DefaultValue? Directives[Const]?
   */
  parseInputValueDef() {
    const e = this._lexer.token, n = this.parseDescription(), i = this.parseName();
    this.expectToken(D.COLON);
    const r = this.parseTypeReference();
    let s;
    this.expectOptionalToken(D.EQUALS) && (s = this.parseConstValueLiteral());
    const o = this.parseConstDirectives();
    return this.node(e, {
      kind: I.INPUT_VALUE_DEFINITION,
      description: n,
      name: i,
      type: r,
      defaultValue: s,
      directives: o
    });
  }
  /**
   * InterfaceTypeDefinition :
   *   - Description? interface Name Directives[Const]? FieldsDefinition?
   */
  parseInterfaceTypeDefinition() {
    const e = this._lexer.token, n = this.parseDescription();
    this.expectKeyword("interface");
    const i = this.parseName(), r = this.parseImplementsInterfaces(), s = this.parseConstDirectives(), o = this.parseFieldsDefinition();
    return this.node(e, {
      kind: I.INTERFACE_TYPE_DEFINITION,
      description: n,
      name: i,
      interfaces: r,
      directives: s,
      fields: o
    });
  }
  /**
   * UnionTypeDefinition :
   *   - Description? union Name Directives[Const]? UnionMemberTypes?
   */
  parseUnionTypeDefinition() {
    const e = this._lexer.token, n = this.parseDescription();
    this.expectKeyword("union");
    const i = this.parseName(), r = this.parseConstDirectives(), s = this.parseUnionMemberTypes();
    return this.node(e, {
      kind: I.UNION_TYPE_DEFINITION,
      description: n,
      name: i,
      directives: r,
      types: s
    });
  }
  /**
   * UnionMemberTypes :
   *   - = `|`? NamedType
   *   - UnionMemberTypes | NamedType
   */
  parseUnionMemberTypes() {
    return this.expectOptionalToken(D.EQUALS) ? this.delimitedMany(D.PIPE, this.parseNamedType) : [];
  }
  /**
   * EnumTypeDefinition :
   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?
   */
  parseEnumTypeDefinition() {
    const e = this._lexer.token, n = this.parseDescription();
    this.expectKeyword("enum");
    const i = this.parseName(), r = this.parseConstDirectives(), s = this.parseEnumValuesDefinition();
    return this.node(e, {
      kind: I.ENUM_TYPE_DEFINITION,
      description: n,
      name: i,
      directives: r,
      values: s
    });
  }
  /**
   * ```
   * EnumValuesDefinition : { EnumValueDefinition+ }
   * ```
   */
  parseEnumValuesDefinition() {
    return this.optionalMany(
      D.BRACE_L,
      this.parseEnumValueDefinition,
      D.BRACE_R
    );
  }
  /**
   * EnumValueDefinition : Description? EnumValue Directives[Const]?
   */
  parseEnumValueDefinition() {
    const e = this._lexer.token, n = this.parseDescription(), i = this.parseEnumValueName(), r = this.parseConstDirectives();
    return this.node(e, {
      kind: I.ENUM_VALUE_DEFINITION,
      description: n,
      name: i,
      directives: r
    });
  }
  /**
   * EnumValue : Name but not `true`, `false` or `null`
   */
  parseEnumValueName() {
    if (this._lexer.token.value === "true" || this._lexer.token.value === "false" || this._lexer.token.value === "null")
      throw $e(
        this._lexer.source,
        this._lexer.token.start,
        `${Qi(
          this._lexer.token
        )} is reserved and cannot be used for an enum value.`
      );
    return this.parseName();
  }
  /**
   * InputObjectTypeDefinition :
   *   - Description? input Name Directives[Const]? InputFieldsDefinition?
   */
  parseInputObjectTypeDefinition() {
    const e = this._lexer.token, n = this.parseDescription();
    this.expectKeyword("input");
    const i = this.parseName(), r = this.parseConstDirectives(), s = this.parseInputFieldsDefinition();
    return this.node(e, {
      kind: I.INPUT_OBJECT_TYPE_DEFINITION,
      description: n,
      name: i,
      directives: r,
      fields: s
    });
  }
  /**
   * ```
   * InputFieldsDefinition : { InputValueDefinition+ }
   * ```
   */
  parseInputFieldsDefinition() {
    return this.optionalMany(
      D.BRACE_L,
      this.parseInputValueDef,
      D.BRACE_R
    );
  }
  /**
   * TypeSystemExtension :
   *   - SchemaExtension
   *   - TypeExtension
   *
   * TypeExtension :
   *   - ScalarTypeExtension
   *   - ObjectTypeExtension
   *   - InterfaceTypeExtension
   *   - UnionTypeExtension
   *   - EnumTypeExtension
   *   - InputObjectTypeDefinition
   */
  parseTypeSystemExtension() {
    const e = this._lexer.lookahead();
    if (e.kind === D.NAME)
      switch (e.value) {
        case "schema":
          return this.parseSchemaExtension();
        case "scalar":
          return this.parseScalarTypeExtension();
        case "type":
          return this.parseObjectTypeExtension();
        case "interface":
          return this.parseInterfaceTypeExtension();
        case "union":
          return this.parseUnionTypeExtension();
        case "enum":
          return this.parseEnumTypeExtension();
        case "input":
          return this.parseInputObjectTypeExtension();
      }
    throw this.unexpected(e);
  }
  /**
   * ```
   * SchemaExtension :
   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }
   *  - extend schema Directives[Const]
   * ```
   */
  parseSchemaExtension() {
    const e = this._lexer.token;
    this.expectKeyword("extend"), this.expectKeyword("schema");
    const n = this.parseConstDirectives(), i = this.optionalMany(
      D.BRACE_L,
      this.parseOperationTypeDefinition,
      D.BRACE_R
    );
    if (n.length === 0 && i.length === 0)
      throw this.unexpected();
    return this.node(e, {
      kind: I.SCHEMA_EXTENSION,
      directives: n,
      operationTypes: i
    });
  }
  /**
   * ScalarTypeExtension :
   *   - extend scalar Name Directives[Const]
   */
  parseScalarTypeExtension() {
    const e = this._lexer.token;
    this.expectKeyword("extend"), this.expectKeyword("scalar");
    const n = this.parseName(), i = this.parseConstDirectives();
    if (i.length === 0)
      throw this.unexpected();
    return this.node(e, {
      kind: I.SCALAR_TYPE_EXTENSION,
      name: n,
      directives: i
    });
  }
  /**
   * ObjectTypeExtension :
   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition
   *  - extend type Name ImplementsInterfaces? Directives[Const]
   *  - extend type Name ImplementsInterfaces
   */
  parseObjectTypeExtension() {
    const e = this._lexer.token;
    this.expectKeyword("extend"), this.expectKeyword("type");
    const n = this.parseName(), i = this.parseImplementsInterfaces(), r = this.parseConstDirectives(), s = this.parseFieldsDefinition();
    if (i.length === 0 && r.length === 0 && s.length === 0)
      throw this.unexpected();
    return this.node(e, {
      kind: I.OBJECT_TYPE_EXTENSION,
      name: n,
      interfaces: i,
      directives: r,
      fields: s
    });
  }
  /**
   * InterfaceTypeExtension :
   *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition
   *  - extend interface Name ImplementsInterfaces? Directives[Const]
   *  - extend interface Name ImplementsInterfaces
   */
  parseInterfaceTypeExtension() {
    const e = this._lexer.token;
    this.expectKeyword("extend"), this.expectKeyword("interface");
    const n = this.parseName(), i = this.parseImplementsInterfaces(), r = this.parseConstDirectives(), s = this.parseFieldsDefinition();
    if (i.length === 0 && r.length === 0 && s.length === 0)
      throw this.unexpected();
    return this.node(e, {
      kind: I.INTERFACE_TYPE_EXTENSION,
      name: n,
      interfaces: i,
      directives: r,
      fields: s
    });
  }
  /**
   * UnionTypeExtension :
   *   - extend union Name Directives[Const]? UnionMemberTypes
   *   - extend union Name Directives[Const]
   */
  parseUnionTypeExtension() {
    const e = this._lexer.token;
    this.expectKeyword("extend"), this.expectKeyword("union");
    const n = this.parseName(), i = this.parseConstDirectives(), r = this.parseUnionMemberTypes();
    if (i.length === 0 && r.length === 0)
      throw this.unexpected();
    return this.node(e, {
      kind: I.UNION_TYPE_EXTENSION,
      name: n,
      directives: i,
      types: r
    });
  }
  /**
   * EnumTypeExtension :
   *   - extend enum Name Directives[Const]? EnumValuesDefinition
   *   - extend enum Name Directives[Const]
   */
  parseEnumTypeExtension() {
    const e = this._lexer.token;
    this.expectKeyword("extend"), this.expectKeyword("enum");
    const n = this.parseName(), i = this.parseConstDirectives(), r = this.parseEnumValuesDefinition();
    if (i.length === 0 && r.length === 0)
      throw this.unexpected();
    return this.node(e, {
      kind: I.ENUM_TYPE_EXTENSION,
      name: n,
      directives: i,
      values: r
    });
  }
  /**
   * InputObjectTypeExtension :
   *   - extend input Name Directives[Const]? InputFieldsDefinition
   *   - extend input Name Directives[Const]
   */
  parseInputObjectTypeExtension() {
    const e = this._lexer.token;
    this.expectKeyword("extend"), this.expectKeyword("input");
    const n = this.parseName(), i = this.parseConstDirectives(), r = this.parseInputFieldsDefinition();
    if (i.length === 0 && r.length === 0)
      throw this.unexpected();
    return this.node(e, {
      kind: I.INPUT_OBJECT_TYPE_EXTENSION,
      name: n,
      directives: i,
      fields: r
    });
  }
  /**
   * ```
   * DirectiveDefinition :
   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations
   * ```
   */
  parseDirectiveDefinition() {
    const e = this._lexer.token, n = this.parseDescription();
    this.expectKeyword("directive"), this.expectToken(D.AT);
    const i = this.parseName(), r = this.parseArgumentDefs(), s = this.expectOptionalKeyword("repeatable");
    this.expectKeyword("on");
    const o = this.parseDirectiveLocations();
    return this.node(e, {
      kind: I.DIRECTIVE_DEFINITION,
      description: n,
      name: i,
      arguments: r,
      repeatable: s,
      locations: o
    });
  }
  /**
   * DirectiveLocations :
   *   - `|`? DirectiveLocation
   *   - DirectiveLocations | DirectiveLocation
   */
  parseDirectiveLocations() {
    return this.delimitedMany(D.PIPE, this.parseDirectiveLocation);
  }
  /*
   * DirectiveLocation :
   *   - ExecutableDirectiveLocation
   *   - TypeSystemDirectiveLocation
   *
   * ExecutableDirectiveLocation : one of
   *   `QUERY`
   *   `MUTATION`
   *   `SUBSCRIPTION`
   *   `FIELD`
   *   `FRAGMENT_DEFINITION`
   *   `FRAGMENT_SPREAD`
   *   `INLINE_FRAGMENT`
   *
   * TypeSystemDirectiveLocation : one of
   *   `SCHEMA`
   *   `SCALAR`
   *   `OBJECT`
   *   `FIELD_DEFINITION`
   *   `ARGUMENT_DEFINITION`
   *   `INTERFACE`
   *   `UNION`
   *   `ENUM`
   *   `ENUM_VALUE`
   *   `INPUT_OBJECT`
   *   `INPUT_FIELD_DEFINITION`
   */
  parseDirectiveLocation() {
    const e = this._lexer.token, n = this.parseName();
    if (Object.prototype.hasOwnProperty.call(K, n.value))
      return n;
    throw this.unexpected(e);
  }
  // Core parsing utility functions
  /**
   * Returns a node that, if configured to do so, sets a "loc" field as a
   * location object, used to identify the place in the source that created a
   * given parsed object.
   */
  node(e, n) {
    return this._options.noLocation !== !0 && (n.loc = new Wl(
      e,
      this._lexer.lastToken,
      this._lexer.source
    )), n;
  }
  /**
   * Determines if the next token is of a given kind
   */
  peek(e) {
    return this._lexer.token.kind === e;
  }
  /**
   * If the next token is of the given kind, return that token after advancing the lexer.
   * Otherwise, do not change the parser state and throw an error.
   */
  expectToken(e) {
    const n = this._lexer.token;
    if (n.kind === e)
      return this.advanceLexer(), n;
    throw $e(
      this._lexer.source,
      n.start,
      `Expected ${Ha(e)}, found ${Qi(n)}.`
    );
  }
  /**
   * If the next token is of the given kind, return "true" after advancing the lexer.
   * Otherwise, do not change the parser state and return "false".
   */
  expectOptionalToken(e) {
    return this._lexer.token.kind === e ? (this.advanceLexer(), !0) : !1;
  }
  /**
   * If the next token is a given keyword, advance the lexer.
   * Otherwise, do not change the parser state and throw an error.
   */
  expectKeyword(e) {
    const n = this._lexer.token;
    if (n.kind === D.NAME && n.value === e)
      this.advanceLexer();
    else
      throw $e(
        this._lexer.source,
        n.start,
        `Expected "${e}", found ${Qi(n)}.`
      );
  }
  /**
   * If the next token is a given keyword, return "true" after advancing the lexer.
   * Otherwise, do not change the parser state and return "false".
   */
  expectOptionalKeyword(e) {
    const n = this._lexer.token;
    return n.kind === D.NAME && n.value === e ? (this.advanceLexer(), !0) : !1;
  }
  /**
   * Helper function for creating an error when an unexpected lexed token is encountered.
   */
  unexpected(e) {
    const n = e ?? this._lexer.token;
    return $e(
      this._lexer.source,
      n.start,
      `Unexpected ${Qi(n)}.`
    );
  }
  /**
   * Returns a possibly empty list of parse nodes, determined by the parseFn.
   * This list begins with a lex token of openKind and ends with a lex token of closeKind.
   * Advances the parser to the next lex token after the closing token.
   */
  any(e, n, i) {
    this.expectToken(e);
    const r = [];
    for (; !this.expectOptionalToken(i); )
      r.push(n.call(this));
    return r;
  }
  /**
   * Returns a list of parse nodes, determined by the parseFn.
   * It can be empty only if open token is missing otherwise it will always return non-empty list
   * that begins with a lex token of openKind and ends with a lex token of closeKind.
   * Advances the parser to the next lex token after the closing token.
   */
  optionalMany(e, n, i) {
    if (this.expectOptionalToken(e)) {
      const r = [];
      do
        r.push(n.call(this));
      while (!this.expectOptionalToken(i));
      return r;
    }
    return [];
  }
  /**
   * Returns a non-empty list of parse nodes, determined by the parseFn.
   * This list begins with a lex token of openKind and ends with a lex token of closeKind.
   * Advances the parser to the next lex token after the closing token.
   */
  many(e, n, i) {
    this.expectToken(e);
    const r = [];
    do
      r.push(n.call(this));
    while (!this.expectOptionalToken(i));
    return r;
  }
  /**
   * Returns a non-empty list of parse nodes, determined by the parseFn.
   * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.
   * Advances the parser to the next lex token after last item in the list.
   */
  delimitedMany(e, n) {
    this.expectOptionalToken(e);
    const i = [];
    do
      i.push(n.call(this));
    while (this.expectOptionalToken(e));
    return i;
  }
  advanceLexer() {
    const { maxTokens: e } = this._options, n = this._lexer.advance();
    if (e !== void 0 && n.kind !== D.EOF && (++this._tokenCounter, this._tokenCounter > e))
      throw $e(
        this._lexer.source,
        n.start,
        `Document contains more that ${e} tokens. Parsing aborted.`
      );
  }
}
function Qi(t) {
  const e = t.value;
  return Ha(t.kind) + (e != null ? ` "${e}"` : "");
}
function Ha(t) {
  return Zl(t) ? `"${t}"` : t;
}
const Ec = 5;
function mn(t, e) {
  const [n, i] = e ? [t, e] : [void 0, t];
  let r = " Did you mean ";
  n && (r += n + " ");
  const s = i.map((u) => `"${u}"`);
  switch (s.length) {
    case 0:
      return "";
    case 1:
      return r + s[0] + "?";
    case 2:
      return r + s[0] + " or " + s[1] + "?";
  }
  const o = s.slice(0, Ec), a = o.pop();
  return r + o.join(", ") + ", or " + a + "?";
}
function No(t) {
  return t;
}
function ii(t, e) {
  const n = /* @__PURE__ */ Object.create(null);
  for (const i of t)
    n[e(i)] = i;
  return n;
}
function Lr(t, e, n) {
  const i = /* @__PURE__ */ Object.create(null);
  for (const r of t)
    i[e(r)] = n(r);
  return i;
}
function Cr(t, e) {
  const n = /* @__PURE__ */ Object.create(null);
  for (const i of Object.keys(t))
    n[i] = e(t[i], i);
  return n;
}
function $i(t, e) {
  let n = 0, i = 0;
  for (; n < t.length && i < e.length; ) {
    let r = t.charCodeAt(n), s = e.charCodeAt(i);
    if (Wi(r) && Wi(s)) {
      let o = 0;
      do
        ++n, o = o * 10 + r - cs, r = t.charCodeAt(n);
      while (Wi(r) && o > 0);
      let a = 0;
      do
        ++i, a = a * 10 + s - cs, s = e.charCodeAt(i);
      while (Wi(s) && a > 0);
      if (o < a)
        return -1;
      if (o > a)
        return 1;
    } else {
      if (r < s)
        return -1;
      if (r > s)
        return 1;
      ++n, ++i;
    }
  }
  return t.length - e.length;
}
const cs = 48, vc = 57;
function Wi(t) {
  return !isNaN(t) && cs <= t && t <= vc;
}
function kn(t, e) {
  const n = /* @__PURE__ */ Object.create(null), i = new wc(t), r = Math.floor(t.length * 0.4) + 1;
  for (const s of e) {
    const o = i.measure(s, r);
    o !== void 0 && (n[s] = o);
  }
  return Object.keys(n).sort((s, o) => {
    const a = n[s] - n[o];
    return a !== 0 ? a : $i(s, o);
  });
}
class wc {
  constructor(e) {
    this._input = e, this._inputLowerCase = e.toLowerCase(), this._inputArray = Ao(this._inputLowerCase), this._rows = [
      new Array(e.length + 1).fill(0),
      new Array(e.length + 1).fill(0),
      new Array(e.length + 1).fill(0)
    ];
  }
  measure(e, n) {
    if (this._input === e)
      return 0;
    const i = e.toLowerCase();
    if (this._inputLowerCase === i)
      return 1;
    let r = Ao(i), s = this._inputArray;
    if (r.length < s.length) {
      const f = r;
      r = s, s = f;
    }
    const o = r.length, a = s.length;
    if (o - a > n)
      return;
    const u = this._rows;
    for (let f = 0; f <= a; f++)
      u[0][f] = f;
    for (let f = 1; f <= o; f++) {
      const g = u[(f - 1) % 3], p = u[f % 3];
      let w = p[0] = f;
      for (let E = 1; E <= a; E++) {
        const R = r[f - 1] === s[E - 1] ? 0 : 1;
        let x = Math.min(
          g[E] + 1,
          // delete
          p[E - 1] + 1,
          // insert
          g[E - 1] + R
          // substitute
        );
        if (f > 1 && E > 1 && r[f - 1] === s[E - 2] && r[f - 2] === s[E - 1]) {
          const y = u[(f - 2) % 3][E - 2];
          x = Math.min(x, y + 1);
        }
        x < w && (w = x), p[E] = x;
      }
      if (w > n)
        return;
    }
    const c = u[o % 3][a];
    return c <= n ? c : void 0;
  }
}
function Ao(t) {
  const e = t.length, n = new Array(e);
  for (let i = 0; i < e; ++i)
    n[i] = t.charCodeAt(i);
  return n;
}
function mt(t) {
  if (t == null)
    return /* @__PURE__ */ Object.create(null);
  if (Object.getPrototypeOf(t) === null)
    return t;
  const e = /* @__PURE__ */ Object.create(null);
  for (const [n, i] of Object.entries(t))
    e[n] = i;
  return e;
}
function Tc(t) {
  return `"${t.replace(Sc, _c)}"`;
}
const Sc = /[\x00-\x1f\x22\x5c\x7f-\x9f]/g;
function _c(t) {
  return Ic[t.charCodeAt(0)];
}
const Ic = [
  "\\u0000",
  "\\u0001",
  "\\u0002",
  "\\u0003",
  "\\u0004",
  "\\u0005",
  "\\u0006",
  "\\u0007",
  "\\b",
  "\\t",
  "\\n",
  "\\u000B",
  "\\f",
  "\\r",
  "\\u000E",
  "\\u000F",
  "\\u0010",
  "\\u0011",
  "\\u0012",
  "\\u0013",
  "\\u0014",
  "\\u0015",
  "\\u0016",
  "\\u0017",
  "\\u0018",
  "\\u0019",
  "\\u001A",
  "\\u001B",
  "\\u001C",
  "\\u001D",
  "\\u001E",
  "\\u001F",
  "",
  "",
  '\\"',
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  // 2F
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  // 3F
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  // 4F
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "\\\\",
  "",
  "",
  "",
  // 5F
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  // 6F
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "\\u007F",
  "\\u0080",
  "\\u0081",
  "\\u0082",
  "\\u0083",
  "\\u0084",
  "\\u0085",
  "\\u0086",
  "\\u0087",
  "\\u0088",
  "\\u0089",
  "\\u008A",
  "\\u008B",
  "\\u008C",
  "\\u008D",
  "\\u008E",
  "\\u008F",
  "\\u0090",
  "\\u0091",
  "\\u0092",
  "\\u0093",
  "\\u0094",
  "\\u0095",
  "\\u0096",
  "\\u0097",
  "\\u0098",
  "\\u0099",
  "\\u009A",
  "\\u009B",
  "\\u009C",
  "\\u009D",
  "\\u009E",
  "\\u009F"
], bi = Object.freeze({});
function Ps(t, e, n = Ba) {
  const i = /* @__PURE__ */ new Map();
  for (const y of Object.values(I))
    i.set(y, Er(e, y));
  let r, s = Array.isArray(t), o = [t], a = -1, u = [], c = t, f, g;
  const p = [], w = [];
  do {
    a++;
    const y = a === o.length, S = y && u.length !== 0;
    if (y) {
      if (f = w.length === 0 ? void 0 : p[p.length - 1], c = g, g = w.pop(), S)
        if (s) {
          c = c.slice();
          let O = 0;
          for (const [C, T] of u) {
            const _ = C - O;
            T === null ? (c.splice(_, 1), O++) : c[_] = T;
          }
        } else {
          c = Object.defineProperties(
            {},
            Object.getOwnPropertyDescriptors(c)
          );
          for (const [O, C] of u)
            c[O] = C;
        }
      a = r.index, o = r.keys, u = r.edits, s = r.inArray, r = r.prev;
    } else if (g) {
      if (f = s ? a : o[a], c = g[f], c == null)
        continue;
      p.push(f);
    }
    let A;
    if (!Array.isArray(c)) {
      var E, R;
      us(c) || ae(!1, `Invalid AST Node: ${G(c)}.`);
      const O = y ? (E = i.get(c.kind)) === null || E === void 0 ? void 0 : E.leave : (R = i.get(c.kind)) === null || R === void 0 ? void 0 : R.enter;
      if (A = O == null ? void 0 : O.call(e, c, f, g, p, w), A === bi)
        break;
      if (A === !1) {
        if (!y) {
          p.pop();
          continue;
        }
      } else if (A !== void 0 && (u.push([f, A]), !y))
        if (us(A))
          c = A;
        else {
          p.pop();
          continue;
        }
    }
    if (A === void 0 && S && u.push([f, c]), y)
      p.pop();
    else {
      var x;
      r = {
        inArray: s,
        index: a,
        keys: o,
        edits: u,
        prev: r
      }, s = Array.isArray(c), o = s ? c : (x = n[c.kind]) !== null && x !== void 0 ? x : [], a = -1, u = [], g && w.push(g), g = c;
    }
  } while (r !== void 0);
  return u.length !== 0 ? u[u.length - 1][1] : t;
}
function Oc(t) {
  const e = new Array(t.length).fill(null), n = /* @__PURE__ */ Object.create(null);
  for (const i of Object.values(I)) {
    let r = !1;
    const s = new Array(t.length).fill(void 0), o = new Array(t.length).fill(void 0);
    for (let u = 0; u < t.length; ++u) {
      const { enter: c, leave: f } = Er(t[u], i);
      r || (r = c != null || f != null), s[u] = c, o[u] = f;
    }
    if (!r)
      continue;
    const a = {
      enter(...u) {
        const c = u[0];
        for (let g = 0; g < t.length; g++)
          if (e[g] === null) {
            var f;
            const p = (f = s[g]) === null || f === void 0 ? void 0 : f.apply(t[g], u);
            if (p === !1)
              e[g] = c;
            else if (p === bi)
              e[g] = bi;
            else if (p !== void 0)
              return p;
          }
      },
      leave(...u) {
        const c = u[0];
        for (let g = 0; g < t.length; g++)
          if (e[g] === null) {
            var f;
            const p = (f = o[g]) === null || f === void 0 ? void 0 : f.apply(t[g], u);
            if (p === bi)
              e[g] = bi;
            else if (p !== void 0 && p !== !1)
              return p;
          } else e[g] === c && (e[g] = null);
      }
    };
    n[i] = a;
  }
  return n;
}
function Er(t, e) {
  const n = t[e];
  return typeof n == "object" ? n : typeof n == "function" ? {
    enter: n,
    leave: void 0
  } : {
    enter: t.enter,
    leave: t.leave
  };
}
function be(t) {
  return Ps(t, Ac);
}
const Nc = 80, Ac = {
  Name: {
    leave: (t) => t.value
  },
  Variable: {
    leave: (t) => "$" + t.name
  },
  // Document
  Document: {
    leave: (t) => H(t.definitions, `

`)
  },
  OperationDefinition: {
    leave(t) {
      const e = se("(", H(t.variableDefinitions, ", "), ")"), n = H(
        [
          t.operation,
          H([t.name, e]),
          H(t.directives, " ")
        ],
        " "
      );
      return (n === "query" ? "" : n + " ") + t.selectionSet;
    }
  },
  VariableDefinition: {
    leave: ({ variable: t, type: e, defaultValue: n, directives: i }) => t + ": " + e + se(" = ", n) + se(" ", H(i, " "))
  },
  SelectionSet: {
    leave: ({ selections: t }) => bt(t)
  },
  Field: {
    leave({ alias: t, name: e, arguments: n, directives: i, selectionSet: r }) {
      const s = se("", t, ": ") + e;
      let o = s + se("(", H(n, ", "), ")");
      return o.length > Nc && (o = s + se(`(
`, ur(H(n, `
`)), `
)`)), H([o, H(i, " "), r], " ");
    }
  },
  Argument: {
    leave: ({ name: t, value: e }) => t + ": " + e
  },
  // Fragments
  FragmentSpread: {
    leave: ({ name: t, directives: e }) => "..." + t + se(" ", H(e, " "))
  },
  InlineFragment: {
    leave: ({ typeCondition: t, directives: e, selectionSet: n }) => H(
      [
        "...",
        se("on ", t),
        H(e, " "),
        n
      ],
      " "
    )
  },
  FragmentDefinition: {
    leave: ({ name: t, typeCondition: e, variableDefinitions: n, directives: i, selectionSet: r }) => (
      // or removed in the future.
      `fragment ${t}${se("(", H(n, ", "), ")")} on ${e} ${se("", H(i, " "), " ")}` + r
    )
  },
  // Value
  IntValue: {
    leave: ({ value: t }) => t
  },
  FloatValue: {
    leave: ({ value: t }) => t
  },
  StringValue: {
    leave: ({ value: t, block: e }) => e ? Kl(t) : Tc(t)
  },
  BooleanValue: {
    leave: ({ value: t }) => t ? "true" : "false"
  },
  NullValue: {
    leave: () => "null"
  },
  EnumValue: {
    leave: ({ value: t }) => t
  },
  ListValue: {
    leave: ({ values: t }) => "[" + H(t, ", ") + "]"
  },
  ObjectValue: {
    leave: ({ fields: t }) => "{" + H(t, ", ") + "}"
  },
  ObjectField: {
    leave: ({ name: t, value: e }) => t + ": " + e
  },
  // Directive
  Directive: {
    leave: ({ name: t, arguments: e }) => "@" + t + se("(", H(e, ", "), ")")
  },
  // Type
  NamedType: {
    leave: ({ name: t }) => t
  },
  ListType: {
    leave: ({ type: t }) => "[" + t + "]"
  },
  NonNullType: {
    leave: ({ type: t }) => t + "!"
  },
  // Type System Definitions
  SchemaDefinition: {
    leave: ({ description: t, directives: e, operationTypes: n }) => se("", t, `
`) + H(["schema", H(e, " "), bt(n)], " ")
  },
  OperationTypeDefinition: {
    leave: ({ operation: t, type: e }) => t + ": " + e
  },
  ScalarTypeDefinition: {
    leave: ({ description: t, name: e, directives: n }) => se("", t, `
`) + H(["scalar", e, H(n, " ")], " ")
  },
  ObjectTypeDefinition: {
    leave: ({ description: t, name: e, interfaces: n, directives: i, fields: r }) => se("", t, `
`) + H(
      [
        "type",
        e,
        se("implements ", H(n, " & ")),
        H(i, " "),
        bt(r)
      ],
      " "
    )
  },
  FieldDefinition: {
    leave: ({ description: t, name: e, arguments: n, type: i, directives: r }) => se("", t, `
`) + e + (xo(n) ? se(`(
`, ur(H(n, `
`)), `
)`) : se("(", H(n, ", "), ")")) + ": " + i + se(" ", H(r, " "))
  },
  InputValueDefinition: {
    leave: ({ description: t, name: e, type: n, defaultValue: i, directives: r }) => se("", t, `
`) + H(
      [e + ": " + n, se("= ", i), H(r, " ")],
      " "
    )
  },
  InterfaceTypeDefinition: {
    leave: ({ description: t, name: e, interfaces: n, directives: i, fields: r }) => se("", t, `
`) + H(
      [
        "interface",
        e,
        se("implements ", H(n, " & ")),
        H(i, " "),
        bt(r)
      ],
      " "
    )
  },
  UnionTypeDefinition: {
    leave: ({ description: t, name: e, directives: n, types: i }) => se("", t, `
`) + H(
      ["union", e, H(n, " "), se("= ", H(i, " | "))],
      " "
    )
  },
  EnumTypeDefinition: {
    leave: ({ description: t, name: e, directives: n, values: i }) => se("", t, `
`) + H(["enum", e, H(n, " "), bt(i)], " ")
  },
  EnumValueDefinition: {
    leave: ({ description: t, name: e, directives: n }) => se("", t, `
`) + H([e, H(n, " ")], " ")
  },
  InputObjectTypeDefinition: {
    leave: ({ description: t, name: e, directives: n, fields: i }) => se("", t, `
`) + H(["input", e, H(n, " "), bt(i)], " ")
  },
  DirectiveDefinition: {
    leave: ({ description: t, name: e, arguments: n, repeatable: i, locations: r }) => se("", t, `
`) + "directive @" + e + (xo(n) ? se(`(
`, ur(H(n, `
`)), `
)`) : se("(", H(n, ", "), ")")) + (i ? " repeatable" : "") + " on " + H(r, " | ")
  },
  SchemaExtension: {
    leave: ({ directives: t, operationTypes: e }) => H(
      ["extend schema", H(t, " "), bt(e)],
      " "
    )
  },
  ScalarTypeExtension: {
    leave: ({ name: t, directives: e }) => H(["extend scalar", t, H(e, " ")], " ")
  },
  ObjectTypeExtension: {
    leave: ({ name: t, interfaces: e, directives: n, fields: i }) => H(
      [
        "extend type",
        t,
        se("implements ", H(e, " & ")),
        H(n, " "),
        bt(i)
      ],
      " "
    )
  },
  InterfaceTypeExtension: {
    leave: ({ name: t, interfaces: e, directives: n, fields: i }) => H(
      [
        "extend interface",
        t,
        se("implements ", H(e, " & ")),
        H(n, " "),
        bt(i)
      ],
      " "
    )
  },
  UnionTypeExtension: {
    leave: ({ name: t, directives: e, types: n }) => H(
      [
        "extend union",
        t,
        H(e, " "),
        se("= ", H(n, " | "))
      ],
      " "
    )
  },
  EnumTypeExtension: {
    leave: ({ name: t, directives: e, values: n }) => H(["extend enum", t, H(e, " "), bt(n)], " ")
  },
  InputObjectTypeExtension: {
    leave: ({ name: t, directives: e, fields: n }) => H(["extend input", t, H(e, " "), bt(n)], " ")
  }
};
function H(t, e = "") {
  var n;
  return (n = t == null ? void 0 : t.filter((i) => i).join(e)) !== null && n !== void 0 ? n : "";
}
function bt(t) {
  return se(`{
`, ur(H(t, `
`)), `
}`);
}
function se(t, e, n = "") {
  return e != null && e !== "" ? t + e + n : "";
}
function ur(t) {
  return se("  ", t.replace(/\n/g, `
  `));
}
function xo(t) {
  var e;
  return (e = t == null ? void 0 : t.some((n) => n.includes(`
`))) !== null && e !== void 0 ? e : !1;
}
function fs(t, e) {
  switch (t.kind) {
    case I.NULL:
      return null;
    case I.INT:
      return parseInt(t.value, 10);
    case I.FLOAT:
      return parseFloat(t.value);
    case I.STRING:
    case I.ENUM:
    case I.BOOLEAN:
      return t.value;
    case I.LIST:
      return t.values.map(
        (n) => fs(n, e)
      );
    case I.OBJECT:
      return Lr(
        t.fields,
        (n) => n.name.value,
        (n) => fs(n.value, e)
      );
    case I.VARIABLE:
      return e == null ? void 0 : e[t.name.value];
  }
}
function qt(t) {
  if (t != null || ae(!1, "Must provide name."), typeof t == "string" || ae(!1, "Expected name to be a string."), t.length === 0)
    throw new P("Expected name to be a non-empty string.");
  for (let e = 1; e < t.length; ++e)
    if (!qa(t.charCodeAt(e)))
      throw new P(
        `Names must only contain [_a-zA-Z0-9] but "${t}" does not.`
      );
  if (!$s(t.charCodeAt(0)))
    throw new P(
      `Names must start with [_a-zA-Z] but "${t}" does not.`
    );
  return t;
}
function xc(t) {
  if (t === "true" || t === "false" || t === "null")
    throw new P(`Enum values cannot be named: ${t}`);
  return qt(t);
}
function js(t) {
  return Dn(t) || pe(t) || ve(t) || Vt(t) || Bt(t) || ze(t) || je(t) || re(t);
}
function Dn(t) {
  return Gt(t, Ut);
}
function pe(t) {
  return Gt(t, et);
}
function ve(t) {
  return Gt(t, _n);
}
function Vt(t) {
  return Gt(t, Gn);
}
function Bt(t) {
  return Gt(t, ri);
}
function ze(t) {
  return Gt(t, Ni);
}
function je(t) {
  return Gt(t, Ue);
}
function re(t) {
  return Gt(t, ne);
}
function Pt(t) {
  return Dn(t) || Bt(t) || ze(t) || Ms(t) && Pt(t.ofType);
}
function Oi(t) {
  return Dn(t) || pe(t) || ve(t) || Vt(t) || Bt(t) || Ms(t) && Oi(t.ofType);
}
function yn(t) {
  return Dn(t) || Bt(t);
}
function bn(t) {
  return pe(t) || ve(t) || Vt(t);
}
function tn(t) {
  return ve(t) || Vt(t);
}
class Ue {
  constructor(e) {
    js(e) || ae(!1, `Expected ${G(e)} to be a GraphQL type.`), this.ofType = e;
  }
  get [Symbol.toStringTag]() {
    return "GraphQLList";
  }
  toString() {
    return "[" + String(this.ofType) + "]";
  }
  toJSON() {
    return this.toString();
  }
}
class ne {
  constructor(e) {
    Fc(e) || ae(
      !1,
      `Expected ${G(e)} to be a GraphQL nullable type.`
    ), this.ofType = e;
  }
  get [Symbol.toStringTag]() {
    return "GraphQLNonNull";
  }
  toString() {
    return String(this.ofType) + "!";
  }
  toJSON() {
    return this.toString();
  }
}
function Ms(t) {
  return je(t) || re(t);
}
function Fc(t) {
  return js(t) && !re(t);
}
function Ja(t) {
  if (t)
    return re(t) ? t.ofType : t;
}
function Rc(t) {
  return Dn(t) || pe(t) || ve(t) || Vt(t) || Bt(t) || ze(t);
}
function jt(t) {
  if (t) {
    let e = t;
    for (; Ms(e); )
      e = e.ofType;
    return e;
  }
}
function Ka(t) {
  return typeof t == "function" ? t() : t;
}
function Xa(t) {
  return typeof t == "function" ? t() : t;
}
class Ut {
  constructor(e) {
    var n, i, r, s;
    const o = (n = e.parseValue) !== null && n !== void 0 ? n : No;
    this.name = qt(e.name), this.description = e.description, this.specifiedByURL = e.specifiedByURL, this.serialize = (i = e.serialize) !== null && i !== void 0 ? i : No, this.parseValue = o, this.parseLiteral = (r = e.parseLiteral) !== null && r !== void 0 ? r : (a, u) => o(fs(a, u)), this.extensions = mt(e.extensions), this.astNode = e.astNode, this.extensionASTNodes = (s = e.extensionASTNodes) !== null && s !== void 0 ? s : [], e.specifiedByURL == null || typeof e.specifiedByURL == "string" || ae(
      !1,
      `${this.name} must provide "specifiedByURL" as a string, but got: ${G(e.specifiedByURL)}.`
    ), e.serialize == null || typeof e.serialize == "function" || ae(
      !1,
      `${this.name} must provide "serialize" function. If this custom Scalar is also used as an input type, ensure "parseValue" and "parseLiteral" functions are also provided.`
    ), e.parseLiteral && (typeof e.parseValue == "function" && typeof e.parseLiteral == "function" || ae(
      !1,
      `${this.name} must provide both "parseValue" and "parseLiteral" functions.`
    ));
  }
  get [Symbol.toStringTag]() {
    return "GraphQLScalarType";
  }
  toConfig() {
    return {
      name: this.name,
      description: this.description,
      specifiedByURL: this.specifiedByURL,
      serialize: this.serialize,
      parseValue: this.parseValue,
      parseLiteral: this.parseLiteral,
      extensions: this.extensions,
      astNode: this.astNode,
      extensionASTNodes: this.extensionASTNodes
    };
  }
  toString() {
    return this.name;
  }
  toJSON() {
    return this.toString();
  }
}
class et {
  constructor(e) {
    var n;
    this.name = qt(e.name), this.description = e.description, this.isTypeOf = e.isTypeOf, this.extensions = mt(e.extensions), this.astNode = e.astNode, this.extensionASTNodes = (n = e.extensionASTNodes) !== null && n !== void 0 ? n : [], this._fields = () => eu(e), this._interfaces = () => Za(e), e.isTypeOf == null || typeof e.isTypeOf == "function" || ae(
      !1,
      `${this.name} must provide "isTypeOf" as a function, but got: ${G(e.isTypeOf)}.`
    );
  }
  get [Symbol.toStringTag]() {
    return "GraphQLObjectType";
  }
  getFields() {
    return typeof this._fields == "function" && (this._fields = this._fields()), this._fields;
  }
  getInterfaces() {
    return typeof this._interfaces == "function" && (this._interfaces = this._interfaces()), this._interfaces;
  }
  toConfig() {
    return {
      name: this.name,
      description: this.description,
      interfaces: this.getInterfaces(),
      fields: nu(this.getFields()),
      isTypeOf: this.isTypeOf,
      extensions: this.extensions,
      astNode: this.astNode,
      extensionASTNodes: this.extensionASTNodes
    };
  }
  toString() {
    return this.name;
  }
  toJSON() {
    return this.toString();
  }
}
function Za(t) {
  var e;
  const n = Ka(
    (e = t.interfaces) !== null && e !== void 0 ? e : []
  );
  return Array.isArray(n) || ae(
    !1,
    `${t.name} interfaces must be an Array or a function which returns an Array.`
  ), n;
}
function eu(t) {
  const e = Xa(t.fields);
  return Qn(e) || ae(
    !1,
    `${t.name} fields must be an object with field names as keys or a function which returns such an object.`
  ), Cr(e, (n, i) => {
    var r;
    Qn(n) || ae(
      !1,
      `${t.name}.${i} field config must be an object.`
    ), n.resolve == null || typeof n.resolve == "function" || ae(
      !1,
      `${t.name}.${i} field resolver must be a function if provided, but got: ${G(n.resolve)}.`
    );
    const s = (r = n.args) !== null && r !== void 0 ? r : {};
    return Qn(s) || ae(
      !1,
      `${t.name}.${i} args must be an object with argument names as keys.`
    ), {
      name: qt(i),
      description: n.description,
      type: n.type,
      args: tu(s),
      resolve: n.resolve,
      subscribe: n.subscribe,
      deprecationReason: n.deprecationReason,
      extensions: mt(n.extensions),
      astNode: n.astNode
    };
  });
}
function tu(t) {
  return Object.entries(t).map(([e, n]) => ({
    name: qt(e),
    description: n.description,
    type: n.type,
    defaultValue: n.defaultValue,
    deprecationReason: n.deprecationReason,
    extensions: mt(n.extensions),
    astNode: n.astNode
  }));
}
function Qn(t) {
  return Ht(t) && !Array.isArray(t);
}
function nu(t) {
  return Cr(t, (e) => ({
    description: e.description,
    type: e.type,
    args: iu(e.args),
    resolve: e.resolve,
    subscribe: e.subscribe,
    deprecationReason: e.deprecationReason,
    extensions: e.extensions,
    astNode: e.astNode
  }));
}
function iu(t) {
  return Lr(
    t,
    (e) => e.name,
    (e) => ({
      description: e.description,
      type: e.type,
      defaultValue: e.defaultValue,
      deprecationReason: e.deprecationReason,
      extensions: e.extensions,
      astNode: e.astNode
    })
  );
}
function Pi(t) {
  return re(t.type) && t.defaultValue === void 0;
}
class _n {
  constructor(e) {
    var n;
    this.name = qt(e.name), this.description = e.description, this.resolveType = e.resolveType, this.extensions = mt(e.extensions), this.astNode = e.astNode, this.extensionASTNodes = (n = e.extensionASTNodes) !== null && n !== void 0 ? n : [], this._fields = eu.bind(void 0, e), this._interfaces = Za.bind(void 0, e), e.resolveType == null || typeof e.resolveType == "function" || ae(
      !1,
      `${this.name} must provide "resolveType" as a function, but got: ${G(e.resolveType)}.`
    );
  }
  get [Symbol.toStringTag]() {
    return "GraphQLInterfaceType";
  }
  getFields() {
    return typeof this._fields == "function" && (this._fields = this._fields()), this._fields;
  }
  getInterfaces() {
    return typeof this._interfaces == "function" && (this._interfaces = this._interfaces()), this._interfaces;
  }
  toConfig() {
    return {
      name: this.name,
      description: this.description,
      interfaces: this.getInterfaces(),
      fields: nu(this.getFields()),
      resolveType: this.resolveType,
      extensions: this.extensions,
      astNode: this.astNode,
      extensionASTNodes: this.extensionASTNodes
    };
  }
  toString() {
    return this.name;
  }
  toJSON() {
    return this.toString();
  }
}
class Gn {
  constructor(e) {
    var n;
    this.name = qt(e.name), this.description = e.description, this.resolveType = e.resolveType, this.extensions = mt(e.extensions), this.astNode = e.astNode, this.extensionASTNodes = (n = e.extensionASTNodes) !== null && n !== void 0 ? n : [], this._types = Lc.bind(void 0, e), e.resolveType == null || typeof e.resolveType == "function" || ae(
      !1,
      `${this.name} must provide "resolveType" as a function, but got: ${G(e.resolveType)}.`
    );
  }
  get [Symbol.toStringTag]() {
    return "GraphQLUnionType";
  }
  getTypes() {
    return typeof this._types == "function" && (this._types = this._types()), this._types;
  }
  toConfig() {
    return {
      name: this.name,
      description: this.description,
      types: this.getTypes(),
      resolveType: this.resolveType,
      extensions: this.extensions,
      astNode: this.astNode,
      extensionASTNodes: this.extensionASTNodes
    };
  }
  toString() {
    return this.name;
  }
  toJSON() {
    return this.toString();
  }
}
function Lc(t) {
  const e = Ka(t.types);
  return Array.isArray(e) || ae(
    !1,
    `Must provide Array of types or a function which returns such an array for Union ${t.name}.`
  ), e;
}
class ri {
  /* <T> */
  constructor(e) {
    var n;
    this.name = qt(e.name), this.description = e.description, this.extensions = mt(e.extensions), this.astNode = e.astNode, this.extensionASTNodes = (n = e.extensionASTNodes) !== null && n !== void 0 ? n : [], this._values = typeof e.values == "function" ? e.values : Fo(this.name, e.values), this._valueLookup = null, this._nameLookup = null;
  }
  get [Symbol.toStringTag]() {
    return "GraphQLEnumType";
  }
  getValues() {
    return typeof this._values == "function" && (this._values = Fo(this.name, this._values())), this._values;
  }
  getValue(e) {
    return this._nameLookup === null && (this._nameLookup = ii(this.getValues(), (n) => n.name)), this._nameLookup[e];
  }
  serialize(e) {
    this._valueLookup === null && (this._valueLookup = new Map(
      this.getValues().map((i) => [i.value, i])
    ));
    const n = this._valueLookup.get(e);
    if (n === void 0)
      throw new P(
        `Enum "${this.name}" cannot represent value: ${G(e)}`
      );
    return n.name;
  }
  parseValue(e) {
    if (typeof e != "string") {
      const i = G(e);
      throw new P(
        `Enum "${this.name}" cannot represent non-string value: ${i}.` + Yi(this, i)
      );
    }
    const n = this.getValue(e);
    if (n == null)
      throw new P(
        `Value "${e}" does not exist in "${this.name}" enum.` + Yi(this, e)
      );
    return n.value;
  }
  parseLiteral(e, n) {
    if (e.kind !== I.ENUM) {
      const r = be(e);
      throw new P(
        `Enum "${this.name}" cannot represent non-enum value: ${r}.` + Yi(this, r),
        {
          nodes: e
        }
      );
    }
    const i = this.getValue(e.value);
    if (i == null) {
      const r = be(e);
      throw new P(
        `Value "${r}" does not exist in "${this.name}" enum.` + Yi(this, r),
        {
          nodes: e
        }
      );
    }
    return i.value;
  }
  toConfig() {
    const e = Lr(
      this.getValues(),
      (n) => n.name,
      (n) => ({
        description: n.description,
        value: n.value,
        deprecationReason: n.deprecationReason,
        extensions: n.extensions,
        astNode: n.astNode
      })
    );
    return {
      name: this.name,
      description: this.description,
      values: e,
      extensions: this.extensions,
      astNode: this.astNode,
      extensionASTNodes: this.extensionASTNodes
    };
  }
  toString() {
    return this.name;
  }
  toJSON() {
    return this.toString();
  }
}
function Yi(t, e) {
  const n = t.getValues().map((r) => r.name), i = kn(e, n);
  return mn("the enum value", i);
}
function Fo(t, e) {
  return Qn(e) || ae(
    !1,
    `${t} values must be an object with value names as keys.`
  ), Object.entries(e).map(([n, i]) => (Qn(i) || ae(
    !1,
    `${t}.${n} must refer to an object with a "value" key representing an internal value but got: ${G(i)}.`
  ), {
    name: xc(n),
    description: i.description,
    value: i.value !== void 0 ? i.value : n,
    deprecationReason: i.deprecationReason,
    extensions: mt(i.extensions),
    astNode: i.astNode
  }));
}
class Ni {
  constructor(e) {
    var n, i;
    this.name = qt(e.name), this.description = e.description, this.extensions = mt(e.extensions), this.astNode = e.astNode, this.extensionASTNodes = (n = e.extensionASTNodes) !== null && n !== void 0 ? n : [], this.isOneOf = (i = e.isOneOf) !== null && i !== void 0 ? i : !1, this._fields = Cc.bind(void 0, e);
  }
  get [Symbol.toStringTag]() {
    return "GraphQLInputObjectType";
  }
  getFields() {
    return typeof this._fields == "function" && (this._fields = this._fields()), this._fields;
  }
  toConfig() {
    const e = Cr(this.getFields(), (n) => ({
      description: n.description,
      type: n.type,
      defaultValue: n.defaultValue,
      deprecationReason: n.deprecationReason,
      extensions: n.extensions,
      astNode: n.astNode
    }));
    return {
      name: this.name,
      description: this.description,
      fields: e,
      extensions: this.extensions,
      astNode: this.astNode,
      extensionASTNodes: this.extensionASTNodes,
      isOneOf: this.isOneOf
    };
  }
  toString() {
    return this.name;
  }
  toJSON() {
    return this.toString();
  }
}
function Cc(t) {
  const e = Xa(t.fields);
  return Qn(e) || ae(
    !1,
    `${t.name} fields must be an object with field names as keys or a function which returns such an object.`
  ), Cr(e, (n, i) => (!("resolve" in n) || ae(
    !1,
    `${t.name}.${i} field has a resolve property, but Input Types cannot define resolvers.`
  ), {
    name: qt(i),
    description: n.description,
    type: n.type,
    defaultValue: n.defaultValue,
    deprecationReason: n.deprecationReason,
    extensions: mt(n.extensions),
    astNode: n.astNode
  }));
}
function ru(t) {
  return re(t.type) && t.defaultValue === void 0;
}
function ds(t, e) {
  return t === e ? !0 : re(t) && re(e) || je(t) && je(e) ? ds(t.ofType, e.ofType) : !1;
}
function Wn(t, e, n) {
  return e === n ? !0 : re(n) ? re(e) ? Wn(t, e.ofType, n.ofType) : !1 : re(e) ? Wn(t, e.ofType, n) : je(n) ? je(e) ? Wn(t, e.ofType, n.ofType) : !1 : je(e) ? !1 : tn(n) && (ve(e) || pe(e)) && t.isSubType(n, e);
}
function Ro(t, e, n) {
  return e === n ? !0 : tn(e) ? tn(n) ? t.getPossibleTypes(e).some((i) => t.isSubType(n, i)) : t.isSubType(e, n) : tn(n) ? t.isSubType(n, e) : !1;
}
const Jr = 2147483647, Kr = -2147483648, ji = new Ut({
  name: "Int",
  description: "The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.",
  serialize(t) {
    const e = Ui(t);
    if (typeof e == "boolean")
      return e ? 1 : 0;
    let n = e;
    if (typeof e == "string" && e !== "" && (n = Number(e)), typeof n != "number" || !Number.isInteger(n))
      throw new P(
        `Int cannot represent non-integer value: ${G(e)}`
      );
    if (n > Jr || n < Kr)
      throw new P(
        "Int cannot represent non 32-bit signed integer value: " + G(e)
      );
    return n;
  },
  parseValue(t) {
    if (typeof t != "number" || !Number.isInteger(t))
      throw new P(
        `Int cannot represent non-integer value: ${G(t)}`
      );
    if (t > Jr || t < Kr)
      throw new P(
        `Int cannot represent non 32-bit signed integer value: ${t}`
      );
    return t;
  },
  parseLiteral(t) {
    if (t.kind !== I.INT)
      throw new P(
        `Int cannot represent non-integer value: ${be(t)}`,
        {
          nodes: t
        }
      );
    const e = parseInt(t.value, 10);
    if (e > Jr || e < Kr)
      throw new P(
        `Int cannot represent non 32-bit signed integer value: ${t.value}`,
        {
          nodes: t
        }
      );
    return e;
  }
}), kr = new Ut({
  name: "Float",
  description: "The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).",
  serialize(t) {
    const e = Ui(t);
    if (typeof e == "boolean")
      return e ? 1 : 0;
    let n = e;
    if (typeof e == "string" && e !== "" && (n = Number(e)), typeof n != "number" || !Number.isFinite(n))
      throw new P(
        `Float cannot represent non numeric value: ${G(e)}`
      );
    return n;
  },
  parseValue(t) {
    if (typeof t != "number" || !Number.isFinite(t))
      throw new P(
        `Float cannot represent non numeric value: ${G(t)}`
      );
    return t;
  },
  parseLiteral(t) {
    if (t.kind !== I.FLOAT && t.kind !== I.INT)
      throw new P(
        `Float cannot represent non numeric value: ${be(t)}`,
        t
      );
    return parseFloat(t.value);
  }
}), ue = new Ut({
  name: "String",
  description: "The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.",
  serialize(t) {
    const e = Ui(t);
    if (typeof e == "string")
      return e;
    if (typeof e == "boolean")
      return e ? "true" : "false";
    if (typeof e == "number" && Number.isFinite(e))
      return e.toString();
    throw new P(
      `String cannot represent value: ${G(t)}`
    );
  },
  parseValue(t) {
    if (typeof t != "string")
      throw new P(
        `String cannot represent a non string value: ${G(t)}`
      );
    return t;
  },
  parseLiteral(t) {
    if (t.kind !== I.STRING)
      throw new P(
        `String cannot represent a non string value: ${be(t)}`,
        {
          nodes: t
        }
      );
    return t.value;
  }
}), Pe = new Ut({
  name: "Boolean",
  description: "The `Boolean` scalar type represents `true` or `false`.",
  serialize(t) {
    const e = Ui(t);
    if (typeof e == "boolean")
      return e;
    if (Number.isFinite(e))
      return e !== 0;
    throw new P(
      `Boolean cannot represent a non boolean value: ${G(e)}`
    );
  },
  parseValue(t) {
    if (typeof t != "boolean")
      throw new P(
        `Boolean cannot represent a non boolean value: ${G(t)}`
      );
    return t;
  },
  parseLiteral(t) {
    if (t.kind !== I.BOOLEAN)
      throw new P(
        `Boolean cannot represent a non boolean value: ${be(t)}`,
        {
          nodes: t
        }
      );
    return t.value;
  }
}), Mi = new Ut({
  name: "ID",
  description: 'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.',
  serialize(t) {
    const e = Ui(t);
    if (typeof e == "string")
      return e;
    if (Number.isInteger(e))
      return String(e);
    throw new P(
      `ID cannot represent value: ${G(t)}`
    );
  },
  parseValue(t) {
    if (typeof t == "string")
      return t;
    if (typeof t == "number" && Number.isInteger(t))
      return t.toString();
    throw new P(`ID cannot represent value: ${G(t)}`);
  },
  parseLiteral(t) {
    if (t.kind !== I.STRING && t.kind !== I.INT)
      throw new P(
        "ID cannot represent a non-string and non-integer value: " + be(t),
        {
          nodes: t
        }
      );
    return t.value;
  }
}), kc = Object.freeze([
  ue,
  ji,
  kr,
  Pe,
  Mi
]);
function Ui(t) {
  if (Ht(t)) {
    if (typeof t.valueOf == "function") {
      const e = t.valueOf();
      if (!Ht(e))
        return e;
    }
    if (typeof t.toJSON == "function")
      return t.toJSON();
  }
  return t;
}
function su(t) {
  return Gt(t, nn);
}
class nn {
  constructor(e) {
    var n, i;
    this.name = qt(e.name), this.description = e.description, this.locations = e.locations, this.isRepeatable = (n = e.isRepeatable) !== null && n !== void 0 ? n : !1, this.extensions = mt(e.extensions), this.astNode = e.astNode, Array.isArray(e.locations) || ae(!1, `@${e.name} locations must be an Array.`);
    const r = (i = e.args) !== null && i !== void 0 ? i : {};
    Ht(r) && !Array.isArray(r) || ae(
      !1,
      `@${e.name} args must be an object with argument names as keys.`
    ), this.args = tu(r);
  }
  get [Symbol.toStringTag]() {
    return "GraphQLDirective";
  }
  toConfig() {
    return {
      name: this.name,
      description: this.description,
      locations: this.locations,
      args: iu(this.args),
      isRepeatable: this.isRepeatable,
      extensions: this.extensions,
      astNode: this.astNode
    };
  }
  toString() {
    return "@" + this.name;
  }
  toJSON() {
    return this.toString();
  }
}
const Us = new nn({
  name: "include",
  description: "Directs the executor to include this field or fragment only when the `if` argument is true.",
  locations: [
    K.FIELD,
    K.FRAGMENT_SPREAD,
    K.INLINE_FRAGMENT
  ],
  args: {
    if: {
      type: new ne(Pe),
      description: "Included when true."
    }
  }
}), Vs = new nn({
  name: "skip",
  description: "Directs the executor to skip this field or fragment when the `if` argument is true.",
  locations: [
    K.FIELD,
    K.FRAGMENT_SPREAD,
    K.INLINE_FRAGMENT
  ],
  args: {
    if: {
      type: new ne(Pe),
      description: "Skipped when true."
    }
  }
}), Dc = "No longer supported", ou = new nn({
  name: "deprecated",
  description: "Marks an element of a GraphQL schema as no longer supported.",
  locations: [
    K.FIELD_DEFINITION,
    K.ARGUMENT_DEFINITION,
    K.INPUT_FIELD_DEFINITION,
    K.ENUM_VALUE
  ],
  args: {
    reason: {
      type: ue,
      description: "Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).",
      defaultValue: Dc
    }
  }
}), $c = new nn({
  name: "specifiedBy",
  description: "Exposes a URL that specifies the behavior of this scalar.",
  locations: [K.SCALAR],
  args: {
    url: {
      type: new ne(ue),
      description: "The URL that specifies the behavior of this scalar."
    }
  }
}), Pc = new nn({
  name: "oneOf",
  description: "Indicates exactly one field must be supplied and this field must not be `null`.",
  locations: [K.INPUT_OBJECT],
  args: {}
}), Vi = Object.freeze([
  Us,
  Vs,
  ou,
  $c,
  Pc
]);
function au(t) {
  return typeof t == "object" && typeof (t == null ? void 0 : t[Symbol.iterator]) == "function";
}
function Ei(t, e) {
  if (re(e)) {
    const n = Ei(t, e.ofType);
    return (n == null ? void 0 : n.kind) === I.NULL ? null : n;
  }
  if (t === null)
    return {
      kind: I.NULL
    };
  if (t === void 0)
    return null;
  if (je(e)) {
    const n = e.ofType;
    if (au(t)) {
      const i = [];
      for (const r of t) {
        const s = Ei(r, n);
        s != null && i.push(s);
      }
      return {
        kind: I.LIST,
        values: i
      };
    }
    return Ei(t, n);
  }
  if (ze(e)) {
    if (!Ht(t))
      return null;
    const n = [];
    for (const i of Object.values(e.getFields())) {
      const r = Ei(t[i.name], i.type);
      r && n.push({
        kind: I.OBJECT_FIELD,
        name: {
          kind: I.NAME,
          value: i.name
        },
        value: r
      });
    }
    return {
      kind: I.OBJECT,
      fields: n
    };
  }
  if (yn(e)) {
    const n = e.serialize(t);
    if (n == null)
      return null;
    if (typeof n == "boolean")
      return {
        kind: I.BOOLEAN,
        value: n
      };
    if (typeof n == "number" && Number.isFinite(n)) {
      const i = String(n);
      return Lo.test(i) ? {
        kind: I.INT,
        value: i
      } : {
        kind: I.FLOAT,
        value: i
      };
    }
    if (typeof n == "string")
      return Bt(e) ? {
        kind: I.ENUM,
        value: n
      } : e === Mi && Lo.test(n) ? {
        kind: I.INT,
        value: n
      } : {
        kind: I.STRING,
        value: n
      };
    throw new TypeError(`Cannot convert value to AST: ${G(n)}.`);
  }
  Yt(!1, "Unexpected input type: " + G(e));
}
const Lo = /^-?(?:0|[1-9][0-9]*)$/, Bs = new et({
  name: "__Schema",
  description: "A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.",
  fields: () => ({
    description: {
      type: ue,
      resolve: (t) => t.description
    },
    types: {
      description: "A list of all types supported by this server.",
      type: new ne(new Ue(new ne(Mt))),
      resolve(t) {
        return Object.values(t.getTypeMap());
      }
    },
    queryType: {
      description: "The type that query operations will be rooted at.",
      type: new ne(Mt),
      resolve: (t) => t.getQueryType()
    },
    mutationType: {
      description: "If this server supports mutation, the type that mutation operations will be rooted at.",
      type: Mt,
      resolve: (t) => t.getMutationType()
    },
    subscriptionType: {
      description: "If this server support subscription, the type that subscription operations will be rooted at.",
      type: Mt,
      resolve: (t) => t.getSubscriptionType()
    },
    directives: {
      description: "A list of all directives supported by this server.",
      type: new ne(
        new Ue(new ne(uu))
      ),
      resolve: (t) => t.getDirectives()
    }
  })
}), uu = new et({
  name: "__Directive",
  description: `A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.

In some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.`,
  fields: () => ({
    name: {
      type: new ne(ue),
      resolve: (t) => t.name
    },
    description: {
      type: ue,
      resolve: (t) => t.description
    },
    isRepeatable: {
      type: new ne(Pe),
      resolve: (t) => t.isRepeatable
    },
    locations: {
      type: new ne(
        new Ue(new ne(lu))
      ),
      resolve: (t) => t.locations
    },
    args: {
      type: new ne(
        new Ue(new ne(Dr))
      ),
      args: {
        includeDeprecated: {
          type: Pe,
          defaultValue: !1
        }
      },
      resolve(t, { includeDeprecated: e }) {
        return e ? t.args : t.args.filter((n) => n.deprecationReason == null);
      }
    }
  })
}), lu = new ri({
  name: "__DirectiveLocation",
  description: "A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.",
  values: {
    QUERY: {
      value: K.QUERY,
      description: "Location adjacent to a query operation."
    },
    MUTATION: {
      value: K.MUTATION,
      description: "Location adjacent to a mutation operation."
    },
    SUBSCRIPTION: {
      value: K.SUBSCRIPTION,
      description: "Location adjacent to a subscription operation."
    },
    FIELD: {
      value: K.FIELD,
      description: "Location adjacent to a field."
    },
    FRAGMENT_DEFINITION: {
      value: K.FRAGMENT_DEFINITION,
      description: "Location adjacent to a fragment definition."
    },
    FRAGMENT_SPREAD: {
      value: K.FRAGMENT_SPREAD,
      description: "Location adjacent to a fragment spread."
    },
    INLINE_FRAGMENT: {
      value: K.INLINE_FRAGMENT,
      description: "Location adjacent to an inline fragment."
    },
    VARIABLE_DEFINITION: {
      value: K.VARIABLE_DEFINITION,
      description: "Location adjacent to a variable definition."
    },
    SCHEMA: {
      value: K.SCHEMA,
      description: "Location adjacent to a schema definition."
    },
    SCALAR: {
      value: K.SCALAR,
      description: "Location adjacent to a scalar definition."
    },
    OBJECT: {
      value: K.OBJECT,
      description: "Location adjacent to an object type definition."
    },
    FIELD_DEFINITION: {
      value: K.FIELD_DEFINITION,
      description: "Location adjacent to a field definition."
    },
    ARGUMENT_DEFINITION: {
      value: K.ARGUMENT_DEFINITION,
      description: "Location adjacent to an argument definition."
    },
    INTERFACE: {
      value: K.INTERFACE,
      description: "Location adjacent to an interface definition."
    },
    UNION: {
      value: K.UNION,
      description: "Location adjacent to a union definition."
    },
    ENUM: {
      value: K.ENUM,
      description: "Location adjacent to an enum definition."
    },
    ENUM_VALUE: {
      value: K.ENUM_VALUE,
      description: "Location adjacent to an enum value definition."
    },
    INPUT_OBJECT: {
      value: K.INPUT_OBJECT,
      description: "Location adjacent to an input object type definition."
    },
    INPUT_FIELD_DEFINITION: {
      value: K.INPUT_FIELD_DEFINITION,
      description: "Location adjacent to an input object field definition."
    }
  }
}), Mt = new et({
  name: "__Type",
  description: "The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.",
  fields: () => ({
    kind: {
      type: new ne(du),
      resolve(t) {
        if (Dn(t))
          return De.SCALAR;
        if (pe(t))
          return De.OBJECT;
        if (ve(t))
          return De.INTERFACE;
        if (Vt(t))
          return De.UNION;
        if (Bt(t))
          return De.ENUM;
        if (ze(t))
          return De.INPUT_OBJECT;
        if (je(t))
          return De.LIST;
        if (re(t))
          return De.NON_NULL;
        Yt(!1, `Unexpected type: "${G(t)}".`);
      }
    },
    name: {
      type: ue,
      resolve: (t) => "name" in t ? t.name : void 0
    },
    description: {
      type: ue,
      resolve: (t) => (
        /* c8 ignore next */
        "description" in t ? t.description : void 0
      )
    },
    specifiedByURL: {
      type: ue,
      resolve: (t) => "specifiedByURL" in t ? t.specifiedByURL : void 0
    },
    fields: {
      type: new Ue(new ne(cu)),
      args: {
        includeDeprecated: {
          type: Pe,
          defaultValue: !1
        }
      },
      resolve(t, { includeDeprecated: e }) {
        if (pe(t) || ve(t)) {
          const n = Object.values(t.getFields());
          return e ? n : n.filter((i) => i.deprecationReason == null);
        }
      }
    },
    interfaces: {
      type: new Ue(new ne(Mt)),
      resolve(t) {
        if (pe(t) || ve(t))
          return t.getInterfaces();
      }
    },
    possibleTypes: {
      type: new Ue(new ne(Mt)),
      resolve(t, e, n, { schema: i }) {
        if (tn(t))
          return i.getPossibleTypes(t);
      }
    },
    enumValues: {
      type: new Ue(new ne(fu)),
      args: {
        includeDeprecated: {
          type: Pe,
          defaultValue: !1
        }
      },
      resolve(t, { includeDeprecated: e }) {
        if (Bt(t)) {
          const n = t.getValues();
          return e ? n : n.filter((i) => i.deprecationReason == null);
        }
      }
    },
    inputFields: {
      type: new Ue(new ne(Dr)),
      args: {
        includeDeprecated: {
          type: Pe,
          defaultValue: !1
        }
      },
      resolve(t, { includeDeprecated: e }) {
        if (ze(t)) {
          const n = Object.values(t.getFields());
          return e ? n : n.filter((i) => i.deprecationReason == null);
        }
      }
    },
    ofType: {
      type: Mt,
      resolve: (t) => "ofType" in t ? t.ofType : void 0
    },
    isOneOf: {
      type: Pe,
      resolve: (t) => {
        if (ze(t))
          return t.isOneOf;
      }
    }
  })
}), cu = new et({
  name: "__Field",
  description: "Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.",
  fields: () => ({
    name: {
      type: new ne(ue),
      resolve: (t) => t.name
    },
    description: {
      type: ue,
      resolve: (t) => t.description
    },
    args: {
      type: new ne(
        new Ue(new ne(Dr))
      ),
      args: {
        includeDeprecated: {
          type: Pe,
          defaultValue: !1
        }
      },
      resolve(t, { includeDeprecated: e }) {
        return e ? t.args : t.args.filter((n) => n.deprecationReason == null);
      }
    },
    type: {
      type: new ne(Mt),
      resolve: (t) => t.type
    },
    isDeprecated: {
      type: new ne(Pe),
      resolve: (t) => t.deprecationReason != null
    },
    deprecationReason: {
      type: ue,
      resolve: (t) => t.deprecationReason
    }
  })
}), Dr = new et({
  name: "__InputValue",
  description: "Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.",
  fields: () => ({
    name: {
      type: new ne(ue),
      resolve: (t) => t.name
    },
    description: {
      type: ue,
      resolve: (t) => t.description
    },
    type: {
      type: new ne(Mt),
      resolve: (t) => t.type
    },
    defaultValue: {
      type: ue,
      description: "A GraphQL-formatted string representing the default value for this input value.",
      resolve(t) {
        const { type: e, defaultValue: n } = t, i = Ei(n, e);
        return i ? be(i) : null;
      }
    },
    isDeprecated: {
      type: new ne(Pe),
      resolve: (t) => t.deprecationReason != null
    },
    deprecationReason: {
      type: ue,
      resolve: (t) => t.deprecationReason
    }
  })
}), fu = new et({
  name: "__EnumValue",
  description: "One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.",
  fields: () => ({
    name: {
      type: new ne(ue),
      resolve: (t) => t.name
    },
    description: {
      type: ue,
      resolve: (t) => t.description
    },
    isDeprecated: {
      type: new ne(Pe),
      resolve: (t) => t.deprecationReason != null
    },
    deprecationReason: {
      type: ue,
      resolve: (t) => t.deprecationReason
    }
  })
});
var De;
(function(t) {
  t.SCALAR = "SCALAR", t.OBJECT = "OBJECT", t.INTERFACE = "INTERFACE", t.UNION = "UNION", t.ENUM = "ENUM", t.INPUT_OBJECT = "INPUT_OBJECT", t.LIST = "LIST", t.NON_NULL = "NON_NULL";
})(De || (De = {}));
const du = new ri({
  name: "__TypeKind",
  description: "An enum describing what kind of type a given `__Type` is.",
  values: {
    SCALAR: {
      value: De.SCALAR,
      description: "Indicates this type is a scalar."
    },
    OBJECT: {
      value: De.OBJECT,
      description: "Indicates this type is an object. `fields` and `interfaces` are valid fields."
    },
    INTERFACE: {
      value: De.INTERFACE,
      description: "Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields."
    },
    UNION: {
      value: De.UNION,
      description: "Indicates this type is a union. `possibleTypes` is a valid field."
    },
    ENUM: {
      value: De.ENUM,
      description: "Indicates this type is an enum. `enumValues` is a valid field."
    },
    INPUT_OBJECT: {
      value: De.INPUT_OBJECT,
      description: "Indicates this type is an input object. `inputFields` is a valid field."
    },
    LIST: {
      value: De.LIST,
      description: "Indicates this type is a list. `ofType` is a valid field."
    },
    NON_NULL: {
      value: De.NON_NULL,
      description: "Indicates this type is a non-null. `ofType` is a valid field."
    }
  }
}), vr = {
  name: "__schema",
  type: new ne(Bs),
  description: "Access the current type schema of this server.",
  args: [],
  resolve: (t, e, n, { schema: i }) => i,
  deprecationReason: void 0,
  extensions: /* @__PURE__ */ Object.create(null),
  astNode: void 0
}, wr = {
  name: "__type",
  type: Mt,
  description: "Request the type information of a single type.",
  args: [
    {
      name: "name",
      description: void 0,
      type: new ne(ue),
      defaultValue: void 0,
      deprecationReason: void 0,
      extensions: /* @__PURE__ */ Object.create(null),
      astNode: void 0
    }
  ],
  resolve: (t, { name: e }, n, { schema: i }) => i.getType(e),
  deprecationReason: void 0,
  extensions: /* @__PURE__ */ Object.create(null),
  astNode: void 0
}, Tr = {
  name: "__typename",
  type: new ne(ue),
  description: "The name of the current Object type at runtime.",
  args: [],
  resolve: (t, e, n, { parentType: i }) => i.name,
  deprecationReason: void 0,
  extensions: /* @__PURE__ */ Object.create(null),
  astNode: void 0
}, hu = Object.freeze([
  Bs,
  uu,
  lu,
  Mt,
  cu,
  Dr,
  fu,
  du
]);
function pu(t) {
  return hu.some(({ name: e }) => t.name === e);
}
function gu(t) {
  return Gt(t, Gs);
}
function jc(t) {
  if (!gu(t))
    throw new Error(`Expected ${G(t)} to be a GraphQL schema.`);
  return t;
}
class Gs {
  // Used as a cache for validateSchema().
  constructor(e) {
    var n, i;
    this.__validationErrors = e.assumeValid === !0 ? [] : void 0, Ht(e) || ae(!1, "Must provide configuration object."), !e.types || Array.isArray(e.types) || ae(
      !1,
      `"types" must be Array if provided but got: ${G(e.types)}.`
    ), !e.directives || Array.isArray(e.directives) || ae(
      !1,
      `"directives" must be Array if provided but got: ${G(e.directives)}.`
    ), this.description = e.description, this.extensions = mt(e.extensions), this.astNode = e.astNode, this.extensionASTNodes = (n = e.extensionASTNodes) !== null && n !== void 0 ? n : [], this._queryType = e.query, this._mutationType = e.mutation, this._subscriptionType = e.subscription, this._directives = (i = e.directives) !== null && i !== void 0 ? i : Vi;
    const r = new Set(e.types);
    if (e.types != null)
      for (const s of e.types)
        r.delete(s), $t(s, r);
    this._queryType != null && $t(this._queryType, r), this._mutationType != null && $t(this._mutationType, r), this._subscriptionType != null && $t(this._subscriptionType, r);
    for (const s of this._directives)
      if (su(s))
        for (const o of s.args)
          $t(o.type, r);
    $t(Bs, r), this._typeMap = /* @__PURE__ */ Object.create(null), this._subTypeMap = /* @__PURE__ */ Object.create(null), this._implementationsMap = /* @__PURE__ */ Object.create(null);
    for (const s of r) {
      if (s == null)
        continue;
      const o = s.name;
      if (o || ae(
        !1,
        "One of the provided types for building the Schema is missing a name."
      ), this._typeMap[o] !== void 0)
        throw new Error(
          `Schema must contain uniquely named types but contains multiple types named "${o}".`
        );
      if (this._typeMap[o] = s, ve(s)) {
        for (const a of s.getInterfaces())
          if (ve(a)) {
            let u = this._implementationsMap[a.name];
            u === void 0 && (u = this._implementationsMap[a.name] = {
              objects: [],
              interfaces: []
            }), u.interfaces.push(s);
          }
      } else if (pe(s)) {
        for (const a of s.getInterfaces())
          if (ve(a)) {
            let u = this._implementationsMap[a.name];
            u === void 0 && (u = this._implementationsMap[a.name] = {
              objects: [],
              interfaces: []
            }), u.objects.push(s);
          }
      }
    }
  }
  get [Symbol.toStringTag]() {
    return "GraphQLSchema";
  }
  getQueryType() {
    return this._queryType;
  }
  getMutationType() {
    return this._mutationType;
  }
  getSubscriptionType() {
    return this._subscriptionType;
  }
  getRootType(e) {
    switch (e) {
      case Je.QUERY:
        return this.getQueryType();
      case Je.MUTATION:
        return this.getMutationType();
      case Je.SUBSCRIPTION:
        return this.getSubscriptionType();
    }
  }
  getTypeMap() {
    return this._typeMap;
  }
  getType(e) {
    return this.getTypeMap()[e];
  }
  getPossibleTypes(e) {
    return Vt(e) ? e.getTypes() : this.getImplementations(e).objects;
  }
  getImplementations(e) {
    const n = this._implementationsMap[e.name];
    return n ?? {
      objects: [],
      interfaces: []
    };
  }
  isSubType(e, n) {
    let i = this._subTypeMap[e.name];
    if (i === void 0) {
      if (i = /* @__PURE__ */ Object.create(null), Vt(e))
        for (const r of e.getTypes())
          i[r.name] = !0;
      else {
        const r = this.getImplementations(e);
        for (const s of r.objects)
          i[s.name] = !0;
        for (const s of r.interfaces)
          i[s.name] = !0;
      }
      this._subTypeMap[e.name] = i;
    }
    return i[n.name] !== void 0;
  }
  getDirectives() {
    return this._directives;
  }
  getDirective(e) {
    return this.getDirectives().find((n) => n.name === e);
  }
  toConfig() {
    return {
      description: this.description,
      query: this.getQueryType(),
      mutation: this.getMutationType(),
      subscription: this.getSubscriptionType(),
      types: Object.values(this.getTypeMap()),
      directives: this.getDirectives(),
      extensions: this.extensions,
      astNode: this.astNode,
      extensionASTNodes: this.extensionASTNodes,
      assumeValid: this.__validationErrors !== void 0
    };
  }
}
function $t(t, e) {
  const n = jt(t);
  if (!e.has(n)) {
    if (e.add(n), Vt(n))
      for (const i of n.getTypes())
        $t(i, e);
    else if (pe(n) || ve(n)) {
      for (const i of n.getInterfaces())
        $t(i, e);
      for (const i of Object.values(n.getFields())) {
        $t(i.type, e);
        for (const r of i.args)
          $t(r.type, e);
      }
    } else if (ze(n))
      for (const i of Object.values(n.getFields()))
        $t(i.type, e);
  }
  return e;
}
function Mc(t) {
  if (jc(t), t.__validationErrors)
    return t.__validationErrors;
  const e = new Uc(t);
  Vc(e), Bc(e), Gc(e);
  const n = e.getErrors();
  return t.__validationErrors = n, n;
}
function mu(t) {
  const e = Mc(t);
  if (e.length !== 0)
    throw new Error(e.map((n) => n.message).join(`

`));
}
class Uc {
  constructor(e) {
    this._errors = [], this.schema = e;
  }
  reportError(e, n) {
    const i = Array.isArray(n) ? n.filter(Boolean) : n;
    this._errors.push(
      new P(e, {
        nodes: i
      })
    );
  }
  getErrors() {
    return this._errors;
  }
}
function Vc(t) {
  const e = t.schema, n = e.getQueryType();
  if (!n)
    t.reportError("Query root type must be provided.", e.astNode);
  else if (!pe(n)) {
    var i;
    t.reportError(
      `Query root type must be Object type, it cannot be ${G(
        n
      )}.`,
      (i = Xr(
        e,
        Je.QUERY
      )) !== null && i !== void 0 ? i : n.astNode
    );
  }
  const r = e.getMutationType();
  if (r && !pe(r)) {
    var s;
    t.reportError(
      `Mutation root type must be Object type if provided, it cannot be ${G(r)}.`,
      (s = Xr(
        e,
        Je.MUTATION
      )) !== null && s !== void 0 ? s : r.astNode
    );
  }
  const o = e.getSubscriptionType();
  if (o && !pe(o)) {
    var a;
    t.reportError(
      `Subscription root type must be Object type if provided, it cannot be ${G(o)}.`,
      (a = Xr(
        e,
        Je.SUBSCRIPTION
      )) !== null && a !== void 0 ? a : o.astNode
    );
  }
}
function Xr(t, e) {
  var n;
  return (n = [t.astNode, ...t.extensionASTNodes].flatMap(
    // FIXME: https://github.com/graphql/graphql-js/issues/2203
    (i) => {
      var r;
      return (
        /* c8 ignore next */
        (r = i == null ? void 0 : i.operationTypes) !== null && r !== void 0 ? r : []
      );
    }
  ).find((i) => i.operation === e)) === null || n === void 0 ? void 0 : n.type;
}
function Bc(t) {
  for (const n of t.schema.getDirectives()) {
    if (!su(n)) {
      t.reportError(
        `Expected directive but got: ${G(n)}.`,
        n == null ? void 0 : n.astNode
      );
      continue;
    }
    Cn(t, n);
    for (const i of n.args)
      if (Cn(t, i), Pt(i.type) || t.reportError(
        `The type of @${n.name}(${i.name}:) must be Input Type but got: ${G(i.type)}.`,
        i.astNode
      ), Pi(i) && i.deprecationReason != null) {
        var e;
        t.reportError(
          `Required argument @${n.name}(${i.name}:) cannot be deprecated.`,
          [
            qs(i.astNode),
            (e = i.astNode) === null || e === void 0 ? void 0 : e.type
          ]
        );
      }
  }
}
function Cn(t, e) {
  e.name.startsWith("__") && t.reportError(
    `Name "${e.name}" must not begin with "__", which is reserved by GraphQL introspection.`,
    e.astNode
  );
}
function Gc(t) {
  const e = Jc(t), n = t.schema.getTypeMap();
  for (const i of Object.values(n)) {
    if (!Rc(i)) {
      t.reportError(
        `Expected GraphQL named type but got: ${G(i)}.`,
        i.astNode
      );
      continue;
    }
    pu(i) || Cn(t, i), pe(i) || ve(i) ? (Co(t, i), ko(t, i)) : Vt(i) ? Qc(t, i) : Bt(i) ? Wc(t, i) : ze(i) && (Yc(t, i), e(i));
  }
}
function Co(t, e) {
  const n = Object.values(e.getFields());
  n.length === 0 && t.reportError(`Type ${e.name} must define one or more fields.`, [
    e.astNode,
    ...e.extensionASTNodes
  ]);
  for (const o of n) {
    if (Cn(t, o), !Oi(o.type)) {
      var i;
      t.reportError(
        `The type of ${e.name}.${o.name} must be Output Type but got: ${G(o.type)}.`,
        (i = o.astNode) === null || i === void 0 ? void 0 : i.type
      );
    }
    for (const a of o.args) {
      const u = a.name;
      if (Cn(t, a), !Pt(a.type)) {
        var r;
        t.reportError(
          `The type of ${e.name}.${o.name}(${u}:) must be Input Type but got: ${G(a.type)}.`,
          (r = a.astNode) === null || r === void 0 ? void 0 : r.type
        );
      }
      if (Pi(a) && a.deprecationReason != null) {
        var s;
        t.reportError(
          `Required argument ${e.name}.${o.name}(${u}:) cannot be deprecated.`,
          [
            qs(a.astNode),
            (s = a.astNode) === null || s === void 0 ? void 0 : s.type
          ]
        );
      }
    }
  }
}
function ko(t, e) {
  const n = /* @__PURE__ */ Object.create(null);
  for (const i of e.getInterfaces()) {
    if (!ve(i)) {
      t.reportError(
        `Type ${G(e)} must only implement Interface types, it cannot implement ${G(i)}.`,
        Ai(e, i)
      );
      continue;
    }
    if (e === i) {
      t.reportError(
        `Type ${e.name} cannot implement itself because it would create a circular reference.`,
        Ai(e, i)
      );
      continue;
    }
    if (n[i.name]) {
      t.reportError(
        `Type ${e.name} can only implement ${i.name} once.`,
        Ai(e, i)
      );
      continue;
    }
    n[i.name] = !0, zc(t, e, i), qc(t, e, i);
  }
}
function qc(t, e, n) {
  const i = e.getFields();
  for (const u of Object.values(n.getFields())) {
    const c = u.name, f = i[c];
    if (!f) {
      t.reportError(
        `Interface field ${n.name}.${c} expected but ${e.name} does not provide it.`,
        [u.astNode, e.astNode, ...e.extensionASTNodes]
      );
      continue;
    }
    if (!Wn(t.schema, f.type, u.type)) {
      var r, s;
      t.reportError(
        `Interface field ${n.name}.${c} expects type ${G(u.type)} but ${e.name}.${c} is type ${G(f.type)}.`,
        [
          (r = u.astNode) === null || r === void 0 ? void 0 : r.type,
          (s = f.astNode) === null || s === void 0 ? void 0 : s.type
        ]
      );
    }
    for (const g of u.args) {
      const p = g.name, w = f.args.find((E) => E.name === p);
      if (!w) {
        t.reportError(
          `Interface field argument ${n.name}.${c}(${p}:) expected but ${e.name}.${c} does not provide it.`,
          [g.astNode, f.astNode]
        );
        continue;
      }
      if (!ds(g.type, w.type)) {
        var o, a;
        t.reportError(
          `Interface field argument ${n.name}.${c}(${p}:) expects type ${G(g.type)} but ${e.name}.${c}(${p}:) is type ${G(w.type)}.`,
          [
            (o = g.astNode) === null || o === void 0 ? void 0 : o.type,
            (a = w.astNode) === null || a === void 0 ? void 0 : a.type
          ]
        );
      }
    }
    for (const g of f.args) {
      const p = g.name;
      !u.args.find((E) => E.name === p) && Pi(g) && t.reportError(
        `Object field ${e.name}.${c} includes required argument ${p} that is missing from the Interface field ${n.name}.${c}.`,
        [g.astNode, u.astNode]
      );
    }
  }
}
function zc(t, e, n) {
  const i = e.getInterfaces();
  for (const r of n.getInterfaces())
    i.includes(r) || t.reportError(
      r === e ? `Type ${e.name} cannot implement ${n.name} because it would create a circular reference.` : `Type ${e.name} must implement ${r.name} because it is implemented by ${n.name}.`,
      [
        ...Ai(n, r),
        ...Ai(e, n)
      ]
    );
}
function Qc(t, e) {
  const n = e.getTypes();
  n.length === 0 && t.reportError(
    `Union type ${e.name} must define one or more member types.`,
    [e.astNode, ...e.extensionASTNodes]
  );
  const i = /* @__PURE__ */ Object.create(null);
  for (const r of n) {
    if (i[r.name]) {
      t.reportError(
        `Union type ${e.name} can only include type ${r.name} once.`,
        Do(e, r.name)
      );
      continue;
    }
    i[r.name] = !0, pe(r) || t.reportError(
      `Union type ${e.name} can only include Object types, it cannot include ${G(r)}.`,
      Do(e, String(r))
    );
  }
}
function Wc(t, e) {
  const n = e.getValues();
  n.length === 0 && t.reportError(
    `Enum type ${e.name} must define one or more values.`,
    [e.astNode, ...e.extensionASTNodes]
  );
  for (const i of n)
    Cn(t, i);
}
function Yc(t, e) {
  const n = Object.values(e.getFields());
  n.length === 0 && t.reportError(
    `Input Object type ${e.name} must define one or more fields.`,
    [e.astNode, ...e.extensionASTNodes]
  );
  for (const s of n) {
    if (Cn(t, s), !Pt(s.type)) {
      var i;
      t.reportError(
        `The type of ${e.name}.${s.name} must be Input Type but got: ${G(s.type)}.`,
        (i = s.astNode) === null || i === void 0 ? void 0 : i.type
      );
    }
    if (ru(s) && s.deprecationReason != null) {
      var r;
      t.reportError(
        `Required input field ${e.name}.${s.name} cannot be deprecated.`,
        [
          qs(s.astNode),
          (r = s.astNode) === null || r === void 0 ? void 0 : r.type
        ]
      );
    }
    e.isOneOf && Hc(e, s, t);
  }
}
function Hc(t, e, n) {
  if (re(e.type)) {
    var i;
    n.reportError(
      `OneOf input field ${t.name}.${e.name} must be nullable.`,
      (i = e.astNode) === null || i === void 0 ? void 0 : i.type
    );
  }
  e.defaultValue !== void 0 && n.reportError(
    `OneOf input field ${t.name}.${e.name} cannot have a default value.`,
    e.astNode
  );
}
function Jc(t) {
  const e = /* @__PURE__ */ Object.create(null), n = [], i = /* @__PURE__ */ Object.create(null);
  return r;
  function r(s) {
    if (e[s.name])
      return;
    e[s.name] = !0, i[s.name] = n.length;
    const o = Object.values(s.getFields());
    for (const a of o)
      if (re(a.type) && ze(a.type.ofType)) {
        const u = a.type.ofType, c = i[u.name];
        if (n.push(a), c === void 0)
          r(u);
        else {
          const f = n.slice(c), g = f.map((p) => p.name).join(".");
          t.reportError(
            `Cannot reference Input Object "${u.name}" within itself through a series of non-null fields: "${g}".`,
            f.map((p) => p.astNode)
          );
        }
        n.pop();
      }
    i[s.name] = void 0;
  }
}
function Ai(t, e) {
  const { astNode: n, extensionASTNodes: i } = t;
  return (n != null ? [n, ...i] : i).flatMap((s) => {
    var o;
    return (
      /* c8 ignore next */
      (o = s.interfaces) !== null && o !== void 0 ? o : []
    );
  }).filter((s) => s.name.value === e.name);
}
function Do(t, e) {
  const { astNode: n, extensionASTNodes: i } = t;
  return (n != null ? [n, ...i] : i).flatMap((s) => {
    var o;
    return (
      /* c8 ignore next */
      (o = s.types) !== null && o !== void 0 ? o : []
    );
  }).filter((s) => s.name.value === e);
}
function qs(t) {
  var e;
  return t == null || (e = t.directives) === null || e === void 0 ? void 0 : e.find(
    (n) => n.name.value === ou.name
  );
}
function it(t, e) {
  switch (e.kind) {
    case I.LIST_TYPE: {
      const n = it(t, e.type);
      return n && new Ue(n);
    }
    case I.NON_NULL_TYPE: {
      const n = it(t, e.type);
      return n && new ne(n);
    }
    case I.NAMED_TYPE:
      return t.getType(e.name.value);
  }
}
class yu {
  constructor(e, n, i) {
    this._schema = e, this._typeStack = [], this._parentTypeStack = [], this._inputTypeStack = [], this._fieldDefStack = [], this._defaultValueStack = [], this._directive = null, this._argument = null, this._enumValue = null, this._getFieldDef = i ?? Kc, n && (Pt(n) && this._inputTypeStack.push(n), bn(n) && this._parentTypeStack.push(n), Oi(n) && this._typeStack.push(n));
  }
  get [Symbol.toStringTag]() {
    return "TypeInfo";
  }
  getType() {
    if (this._typeStack.length > 0)
      return this._typeStack[this._typeStack.length - 1];
  }
  getParentType() {
    if (this._parentTypeStack.length > 0)
      return this._parentTypeStack[this._parentTypeStack.length - 1];
  }
  getInputType() {
    if (this._inputTypeStack.length > 0)
      return this._inputTypeStack[this._inputTypeStack.length - 1];
  }
  getParentInputType() {
    if (this._inputTypeStack.length > 1)
      return this._inputTypeStack[this._inputTypeStack.length - 2];
  }
  getFieldDef() {
    if (this._fieldDefStack.length > 0)
      return this._fieldDefStack[this._fieldDefStack.length - 1];
  }
  getDefaultValue() {
    if (this._defaultValueStack.length > 0)
      return this._defaultValueStack[this._defaultValueStack.length - 1];
  }
  getDirective() {
    return this._directive;
  }
  getArgument() {
    return this._argument;
  }
  getEnumValue() {
    return this._enumValue;
  }
  enter(e) {
    const n = this._schema;
    switch (e.kind) {
      case I.SELECTION_SET: {
        const r = jt(this.getType());
        this._parentTypeStack.push(
          bn(r) ? r : void 0
        );
        break;
      }
      case I.FIELD: {
        const r = this.getParentType();
        let s, o;
        r && (s = this._getFieldDef(n, r, e), s && (o = s.type)), this._fieldDefStack.push(s), this._typeStack.push(Oi(o) ? o : void 0);
        break;
      }
      case I.DIRECTIVE:
        this._directive = n.getDirective(e.name.value);
        break;
      case I.OPERATION_DEFINITION: {
        const r = n.getRootType(e.operation);
        this._typeStack.push(pe(r) ? r : void 0);
        break;
      }
      case I.INLINE_FRAGMENT:
      case I.FRAGMENT_DEFINITION: {
        const r = e.typeCondition, s = r ? it(n, r) : jt(this.getType());
        this._typeStack.push(Oi(s) ? s : void 0);
        break;
      }
      case I.VARIABLE_DEFINITION: {
        const r = it(n, e.type);
        this._inputTypeStack.push(
          Pt(r) ? r : void 0
        );
        break;
      }
      case I.ARGUMENT: {
        var i;
        let r, s;
        const o = (i = this.getDirective()) !== null && i !== void 0 ? i : this.getFieldDef();
        o && (r = o.args.find(
          (a) => a.name === e.name.value
        ), r && (s = r.type)), this._argument = r, this._defaultValueStack.push(r ? r.defaultValue : void 0), this._inputTypeStack.push(Pt(s) ? s : void 0);
        break;
      }
      case I.LIST: {
        const r = Ja(this.getInputType()), s = je(r) ? r.ofType : r;
        this._defaultValueStack.push(void 0), this._inputTypeStack.push(Pt(s) ? s : void 0);
        break;
      }
      case I.OBJECT_FIELD: {
        const r = jt(this.getInputType());
        let s, o;
        ze(r) && (o = r.getFields()[e.name.value], o && (s = o.type)), this._defaultValueStack.push(
          o ? o.defaultValue : void 0
        ), this._inputTypeStack.push(
          Pt(s) ? s : void 0
        );
        break;
      }
      case I.ENUM: {
        const r = jt(this.getInputType());
        let s;
        Bt(r) && (s = r.getValue(e.value)), this._enumValue = s;
        break;
      }
    }
  }
  leave(e) {
    switch (e.kind) {
      case I.SELECTION_SET:
        this._parentTypeStack.pop();
        break;
      case I.FIELD:
        this._fieldDefStack.pop(), this._typeStack.pop();
        break;
      case I.DIRECTIVE:
        this._directive = null;
        break;
      case I.OPERATION_DEFINITION:
      case I.INLINE_FRAGMENT:
      case I.FRAGMENT_DEFINITION:
        this._typeStack.pop();
        break;
      case I.VARIABLE_DEFINITION:
        this._inputTypeStack.pop();
        break;
      case I.ARGUMENT:
        this._argument = null, this._defaultValueStack.pop(), this._inputTypeStack.pop();
        break;
      case I.LIST:
      case I.OBJECT_FIELD:
        this._defaultValueStack.pop(), this._inputTypeStack.pop();
        break;
      case I.ENUM:
        this._enumValue = null;
        break;
    }
  }
}
function Kc(t, e, n) {
  const i = n.name.value;
  if (i === vr.name && t.getQueryType() === e)
    return vr;
  if (i === wr.name && t.getQueryType() === e)
    return wr;
  if (i === Tr.name && bn(e))
    return Tr;
  if (pe(e) || ve(e))
    return e.getFields()[i];
}
function bu(t, e) {
  return {
    enter(...n) {
      const i = n[0];
      t.enter(i);
      const r = Er(e, i.kind).enter;
      if (r) {
        const s = r.apply(e, n);
        return s !== void 0 && (t.leave(i), us(s) && t.enter(s)), s;
      }
    },
    leave(...n) {
      const i = n[0], r = Er(e, i.kind).leave;
      let s;
      return r && (s = r.apply(e, n)), t.leave(i), s;
    }
  };
}
function Xc(t) {
  return t.kind === I.OPERATION_DEFINITION || t.kind === I.FRAGMENT_DEFINITION;
}
function Zc(t) {
  return t.kind === I.SCHEMA_DEFINITION || zs(t) || t.kind === I.DIRECTIVE_DEFINITION;
}
function zs(t) {
  return t.kind === I.SCALAR_TYPE_DEFINITION || t.kind === I.OBJECT_TYPE_DEFINITION || t.kind === I.INTERFACE_TYPE_DEFINITION || t.kind === I.UNION_TYPE_DEFINITION || t.kind === I.ENUM_TYPE_DEFINITION || t.kind === I.INPUT_OBJECT_TYPE_DEFINITION;
}
function ef(t) {
  return t.kind === I.SCHEMA_EXTENSION || Eu(t);
}
function Eu(t) {
  return t.kind === I.SCALAR_TYPE_EXTENSION || t.kind === I.OBJECT_TYPE_EXTENSION || t.kind === I.INTERFACE_TYPE_EXTENSION || t.kind === I.UNION_TYPE_EXTENSION || t.kind === I.ENUM_TYPE_EXTENSION || t.kind === I.INPUT_OBJECT_TYPE_EXTENSION;
}
function tf(t) {
  return {
    Document(e) {
      for (const n of e.definitions)
        if (!Xc(n)) {
          const i = n.kind === I.SCHEMA_DEFINITION || n.kind === I.SCHEMA_EXTENSION ? "schema" : '"' + n.name.value + '"';
          t.reportError(
            new P(`The ${i} definition is not executable.`, {
              nodes: n
            })
          );
        }
      return !1;
    }
  };
}
function nf(t) {
  return {
    Field(e) {
      const n = t.getParentType();
      if (n && !t.getFieldDef()) {
        const r = t.getSchema(), s = e.name.value;
        let o = mn(
          "to use an inline fragment on",
          rf(r, n, s)
        );
        o === "" && (o = mn(sf(n, s))), t.reportError(
          new P(
            `Cannot query field "${s}" on type "${n.name}".` + o,
            {
              nodes: e
            }
          )
        );
      }
    }
  };
}
function rf(t, e, n) {
  if (!tn(e))
    return [];
  const i = /* @__PURE__ */ new Set(), r = /* @__PURE__ */ Object.create(null);
  for (const o of t.getPossibleTypes(e))
    if (o.getFields()[n]) {
      i.add(o), r[o.name] = 1;
      for (const a of o.getInterfaces()) {
        var s;
        a.getFields()[n] && (i.add(a), r[a.name] = ((s = r[a.name]) !== null && s !== void 0 ? s : 0) + 1);
      }
    }
  return [...i].sort((o, a) => {
    const u = r[a.name] - r[o.name];
    return u !== 0 ? u : ve(o) && t.isSubType(o, a) ? -1 : ve(a) && t.isSubType(a, o) ? 1 : $i(o.name, a.name);
  }).map((o) => o.name);
}
function sf(t, e) {
  if (pe(t) || ve(t)) {
    const n = Object.keys(t.getFields());
    return kn(e, n);
  }
  return [];
}
function of(t) {
  return {
    InlineFragment(e) {
      const n = e.typeCondition;
      if (n) {
        const i = it(t.getSchema(), n);
        if (i && !bn(i)) {
          const r = be(n);
          t.reportError(
            new P(
              `Fragment cannot condition on non composite type "${r}".`,
              {
                nodes: n
              }
            )
          );
        }
      }
    },
    FragmentDefinition(e) {
      const n = it(t.getSchema(), e.typeCondition);
      if (n && !bn(n)) {
        const i = be(e.typeCondition);
        t.reportError(
          new P(
            `Fragment "${e.name.value}" cannot condition on non composite type "${i}".`,
            {
              nodes: e.typeCondition
            }
          )
        );
      }
    }
  };
}
function af(t) {
  return {
    // eslint-disable-next-line new-cap
    ...uf(t),
    Argument(e) {
      const n = t.getArgument(), i = t.getFieldDef(), r = t.getParentType();
      if (!n && i && r) {
        const s = e.name.value, o = i.args.map((u) => u.name), a = kn(s, o);
        t.reportError(
          new P(
            `Unknown argument "${s}" on field "${r.name}.${i.name}".` + mn(a),
            {
              nodes: e
            }
          )
        );
      }
    }
  };
}
function uf(t) {
  const e = /* @__PURE__ */ Object.create(null), n = t.getSchema(), i = n ? n.getDirectives() : Vi;
  for (const o of i)
    e[o.name] = o.args.map((a) => a.name);
  const r = t.getDocument().definitions;
  for (const o of r)
    if (o.kind === I.DIRECTIVE_DEFINITION) {
      var s;
      const a = (s = o.arguments) !== null && s !== void 0 ? s : [];
      e[o.name.value] = a.map((u) => u.name.value);
    }
  return {
    Directive(o) {
      const a = o.name.value, u = e[a];
      if (o.arguments && u)
        for (const c of o.arguments) {
          const f = c.name.value;
          if (!u.includes(f)) {
            const g = kn(f, u);
            t.reportError(
              new P(
                `Unknown argument "${f}" on directive "@${a}".` + mn(g),
                {
                  nodes: c
                }
              )
            );
          }
        }
      return !1;
    }
  };
}
function lf(t) {
  const e = /* @__PURE__ */ Object.create(null), n = t.getSchema(), i = n ? n.getDirectives() : Vi;
  for (const s of i)
    e[s.name] = s.locations;
  const r = t.getDocument().definitions;
  for (const s of r)
    s.kind === I.DIRECTIVE_DEFINITION && (e[s.name.value] = s.locations.map((o) => o.value));
  return {
    Directive(s, o, a, u, c) {
      const f = s.name.value, g = e[f];
      if (!g) {
        t.reportError(
          new P(`Unknown directive "@${f}".`, {
            nodes: s
          })
        );
        return;
      }
      const p = cf(c);
      p && !g.includes(p) && t.reportError(
        new P(
          `Directive "@${f}" may not be used on ${p}.`,
          {
            nodes: s
          }
        )
      );
    }
  };
}
function cf(t) {
  const e = t[t.length - 1];
  switch ("kind" in e || Yt(!1), e.kind) {
    case I.OPERATION_DEFINITION:
      return ff(e.operation);
    case I.FIELD:
      return K.FIELD;
    case I.FRAGMENT_SPREAD:
      return K.FRAGMENT_SPREAD;
    case I.INLINE_FRAGMENT:
      return K.INLINE_FRAGMENT;
    case I.FRAGMENT_DEFINITION:
      return K.FRAGMENT_DEFINITION;
    case I.VARIABLE_DEFINITION:
      return K.VARIABLE_DEFINITION;
    case I.SCHEMA_DEFINITION:
    case I.SCHEMA_EXTENSION:
      return K.SCHEMA;
    case I.SCALAR_TYPE_DEFINITION:
    case I.SCALAR_TYPE_EXTENSION:
      return K.SCALAR;
    case I.OBJECT_TYPE_DEFINITION:
    case I.OBJECT_TYPE_EXTENSION:
      return K.OBJECT;
    case I.FIELD_DEFINITION:
      return K.FIELD_DEFINITION;
    case I.INTERFACE_TYPE_DEFINITION:
    case I.INTERFACE_TYPE_EXTENSION:
      return K.INTERFACE;
    case I.UNION_TYPE_DEFINITION:
    case I.UNION_TYPE_EXTENSION:
      return K.UNION;
    case I.ENUM_TYPE_DEFINITION:
    case I.ENUM_TYPE_EXTENSION:
      return K.ENUM;
    case I.ENUM_VALUE_DEFINITION:
      return K.ENUM_VALUE;
    case I.INPUT_OBJECT_TYPE_DEFINITION:
    case I.INPUT_OBJECT_TYPE_EXTENSION:
      return K.INPUT_OBJECT;
    case I.INPUT_VALUE_DEFINITION: {
      const n = t[t.length - 3];
      return "kind" in n || Yt(!1), n.kind === I.INPUT_OBJECT_TYPE_DEFINITION ? K.INPUT_FIELD_DEFINITION : K.ARGUMENT_DEFINITION;
    }
    default:
      Yt(!1, "Unexpected kind: " + G(e.kind));
  }
}
function ff(t) {
  switch (t) {
    case Je.QUERY:
      return K.QUERY;
    case Je.MUTATION:
      return K.MUTATION;
    case Je.SUBSCRIPTION:
      return K.SUBSCRIPTION;
  }
}
function df(t) {
  return {
    FragmentSpread(e) {
      const n = e.name.value;
      t.getFragment(n) || t.reportError(
        new P(`Unknown fragment "${n}".`, {
          nodes: e.name
        })
      );
    }
  };
}
function hf(t) {
  const e = t.getSchema(), n = e ? e.getTypeMap() : /* @__PURE__ */ Object.create(null), i = /* @__PURE__ */ Object.create(null);
  for (const s of t.getDocument().definitions)
    zs(s) && (i[s.name.value] = !0);
  const r = [
    ...Object.keys(n),
    ...Object.keys(i)
  ];
  return {
    NamedType(s, o, a, u, c) {
      const f = s.name.value;
      if (!n[f] && !i[f]) {
        var g;
        const p = (g = c[2]) !== null && g !== void 0 ? g : a, w = p != null && pf(p);
        if (w && $o.includes(f))
          return;
        const E = kn(
          f,
          w ? $o.concat(r) : r
        );
        t.reportError(
          new P(
            `Unknown type "${f}".` + mn(E),
            {
              nodes: s
            }
          )
        );
      }
    }
  };
}
const $o = [...kc, ...hu].map(
  (t) => t.name
);
function pf(t) {
  return "kind" in t && (Zc(t) || ef(t));
}
function gf(t) {
  let e = 0;
  return {
    Document(n) {
      e = n.definitions.filter(
        (i) => i.kind === I.OPERATION_DEFINITION
      ).length;
    },
    OperationDefinition(n) {
      !n.name && e > 1 && t.reportError(
        new P(
          "This anonymous operation must be the only defined operation.",
          {
            nodes: n
          }
        )
      );
    }
  };
}
const mf = 3;
function yf(t) {
  function e(n, i = /* @__PURE__ */ Object.create(null), r = 0) {
    if (n.kind === I.FRAGMENT_SPREAD) {
      const s = n.name.value;
      if (i[s] === !0)
        return !1;
      const o = t.getFragment(s);
      if (!o)
        return !1;
      try {
        return i[s] = !0, e(o, i, r);
      } finally {
        i[s] = void 0;
      }
    }
    if (n.kind === I.FIELD && // check all introspection lists
    (n.name.value === "fields" || n.name.value === "interfaces" || n.name.value === "possibleTypes" || n.name.value === "inputFields") && (r++, r >= mf))
      return !0;
    if ("selectionSet" in n && n.selectionSet) {
      for (const s of n.selectionSet.selections)
        if (e(s, i, r))
          return !0;
    }
    return !1;
  }
  return {
    Field(n) {
      if ((n.name.value === "__schema" || n.name.value === "__type") && e(n))
        return t.reportError(
          new P("Maximum introspection depth exceeded", {
            nodes: [n]
          })
        ), !1;
    }
  };
}
function bf(t) {
  const e = /* @__PURE__ */ Object.create(null), n = [], i = /* @__PURE__ */ Object.create(null);
  return {
    OperationDefinition: () => !1,
    FragmentDefinition(s) {
      return r(s), !1;
    }
  };
  function r(s) {
    if (e[s.name.value])
      return;
    const o = s.name.value;
    e[o] = !0;
    const a = t.getFragmentSpreads(s.selectionSet);
    if (a.length !== 0) {
      i[o] = n.length;
      for (const u of a) {
        const c = u.name.value, f = i[c];
        if (n.push(u), f === void 0) {
          const g = t.getFragment(c);
          g && r(g);
        } else {
          const g = n.slice(f), p = g.slice(0, -1).map((w) => '"' + w.name.value + '"').join(", ");
          t.reportError(
            new P(
              `Cannot spread fragment "${c}" within itself` + (p !== "" ? ` via ${p}.` : "."),
              {
                nodes: g
              }
            )
          );
        }
        n.pop();
      }
      i[o] = void 0;
    }
  }
}
function Ef(t) {
  let e = /* @__PURE__ */ Object.create(null);
  return {
    OperationDefinition: {
      enter() {
        e = /* @__PURE__ */ Object.create(null);
      },
      leave(n) {
        const i = t.getRecursiveVariableUsages(n);
        for (const { node: r } of i) {
          const s = r.name.value;
          e[s] !== !0 && t.reportError(
            new P(
              n.name ? `Variable "$${s}" is not defined by operation "${n.name.value}".` : `Variable "$${s}" is not defined.`,
              {
                nodes: [r, n]
              }
            )
          );
        }
      }
    },
    VariableDefinition(n) {
      e[n.variable.name.value] = !0;
    }
  };
}
function vf(t) {
  const e = [], n = [];
  return {
    OperationDefinition(i) {
      return e.push(i), !1;
    },
    FragmentDefinition(i) {
      return n.push(i), !1;
    },
    Document: {
      leave() {
        const i = /* @__PURE__ */ Object.create(null);
        for (const r of e)
          for (const s of t.getRecursivelyReferencedFragments(
            r
          ))
            i[s.name.value] = !0;
        for (const r of n) {
          const s = r.name.value;
          i[s] !== !0 && t.reportError(
            new P(`Fragment "${s}" is never used.`, {
              nodes: r
            })
          );
        }
      }
    }
  };
}
function wf(t) {
  let e = [];
  return {
    OperationDefinition: {
      enter() {
        e = [];
      },
      leave(n) {
        const i = /* @__PURE__ */ Object.create(null), r = t.getRecursiveVariableUsages(n);
        for (const { node: s } of r)
          i[s.name.value] = !0;
        for (const s of e) {
          const o = s.variable.name.value;
          i[o] !== !0 && t.reportError(
            new P(
              n.name ? `Variable "$${o}" is never used in operation "${n.name.value}".` : `Variable "$${o}" is never used.`,
              {
                nodes: s
              }
            )
          );
        }
      }
    },
    VariableDefinition(n) {
      e.push(n);
    }
  };
}
function Qs(t) {
  switch (t.kind) {
    case I.OBJECT:
      return { ...t, fields: Tf(t.fields) };
    case I.LIST:
      return { ...t, values: t.values.map(Qs) };
    case I.INT:
    case I.FLOAT:
    case I.STRING:
    case I.BOOLEAN:
    case I.NULL:
    case I.ENUM:
    case I.VARIABLE:
      return t;
  }
}
function Tf(t) {
  return t.map((e) => ({
    ...e,
    value: Qs(e.value)
  })).sort(
    (e, n) => $i(e.name.value, n.name.value)
  );
}
function vu(t) {
  return Array.isArray(t) ? t.map(
    ([e, n]) => `subfields "${e}" conflict because ` + vu(n)
  ).join(" and ") : t;
}
function Sf(t) {
  const e = new xf(), n = /* @__PURE__ */ new Map();
  return {
    SelectionSet(i) {
      const r = _f(
        t,
        n,
        e,
        t.getParentType(),
        i
      );
      for (const [[s, o], a, u] of r) {
        const c = vu(o);
        t.reportError(
          new P(
            `Fields "${s}" conflict because ${c}. Use different aliases on the fields to fetch both if this was intentional.`,
            {
              nodes: a.concat(u)
            }
          )
        );
      }
    }
  };
}
function _f(t, e, n, i, r) {
  const s = [], [o, a] = Ir(
    t,
    e,
    i,
    r
  );
  if (Of(
    t,
    s,
    e,
    n,
    o
  ), a.length !== 0)
    for (let u = 0; u < a.length; u++) {
      Sr(
        t,
        s,
        e,
        n,
        !1,
        o,
        a[u]
      );
      for (let c = u + 1; c < a.length; c++)
        _r(
          t,
          s,
          e,
          n,
          !1,
          a[u],
          a[c]
        );
    }
  return s;
}
function Sr(t, e, n, i, r, s, o) {
  const a = t.getFragment(o);
  if (!a)
    return;
  const [u, c] = ps(
    t,
    n,
    a
  );
  if (s !== u) {
    Ws(
      t,
      e,
      n,
      i,
      r,
      s,
      u
    );
    for (const f of c)
      i.has(
        f,
        o,
        r
      ) || (i.add(
        f,
        o,
        r
      ), Sr(
        t,
        e,
        n,
        i,
        r,
        s,
        f
      ));
  }
}
function _r(t, e, n, i, r, s, o) {
  if (s === o || i.has(
    s,
    o,
    r
  ))
    return;
  i.add(s, o, r);
  const a = t.getFragment(s), u = t.getFragment(o);
  if (!a || !u)
    return;
  const [c, f] = ps(
    t,
    n,
    a
  ), [g, p] = ps(
    t,
    n,
    u
  );
  Ws(
    t,
    e,
    n,
    i,
    r,
    c,
    g
  );
  for (const w of p)
    _r(
      t,
      e,
      n,
      i,
      r,
      s,
      w
    );
  for (const w of f)
    _r(
      t,
      e,
      n,
      i,
      r,
      w,
      o
    );
}
function If(t, e, n, i, r, s, o, a) {
  const u = [], [c, f] = Ir(
    t,
    e,
    r,
    s
  ), [g, p] = Ir(
    t,
    e,
    o,
    a
  );
  Ws(
    t,
    u,
    e,
    n,
    i,
    c,
    g
  );
  for (const w of p)
    Sr(
      t,
      u,
      e,
      n,
      i,
      c,
      w
    );
  for (const w of f)
    Sr(
      t,
      u,
      e,
      n,
      i,
      g,
      w
    );
  for (const w of f)
    for (const E of p)
      _r(
        t,
        u,
        e,
        n,
        i,
        w,
        E
      );
  return u;
}
function Of(t, e, n, i, r) {
  for (const [s, o] of Object.entries(r))
    if (o.length > 1)
      for (let a = 0; a < o.length; a++)
        for (let u = a + 1; u < o.length; u++) {
          const c = wu(
            t,
            n,
            i,
            !1,
            // within one collection is never mutually exclusive
            s,
            o[a],
            o[u]
          );
          c && e.push(c);
        }
}
function Ws(t, e, n, i, r, s, o) {
  for (const [a, u] of Object.entries(s)) {
    const c = o[a];
    if (c)
      for (const f of u)
        for (const g of c) {
          const p = wu(
            t,
            n,
            i,
            r,
            a,
            f,
            g
          );
          p && e.push(p);
        }
  }
}
function wu(t, e, n, i, r, s, o) {
  const [a, u, c] = s, [f, g, p] = o, w = i || a !== f && pe(a) && pe(f);
  if (!w) {
    const S = u.name.value, A = g.name.value;
    if (S !== A)
      return [
        [r, `"${S}" and "${A}" are different fields`],
        [u],
        [g]
      ];
    if (!Nf(u, g))
      return [
        [r, "they have differing arguments"],
        [u],
        [g]
      ];
  }
  const E = c == null ? void 0 : c.type, R = p == null ? void 0 : p.type;
  if (E && R && hs(E, R))
    return [
      [
        r,
        `they return conflicting types "${G(E)}" and "${G(
          R
        )}"`
      ],
      [u],
      [g]
    ];
  const x = u.selectionSet, y = g.selectionSet;
  if (x && y) {
    const S = If(
      t,
      e,
      n,
      w,
      jt(E),
      x,
      jt(R),
      y
    );
    return Af(S, r, u, g);
  }
}
function Nf(t, e) {
  const n = t.arguments, i = e.arguments;
  if (n === void 0 || n.length === 0)
    return i === void 0 || i.length === 0;
  if (i === void 0 || i.length === 0 || n.length !== i.length)
    return !1;
  const r = new Map(i.map(({ name: s, value: o }) => [s.value, o]));
  return n.every((s) => {
    const o = s.value, a = r.get(s.name.value);
    return a === void 0 ? !1 : Po(o) === Po(a);
  });
}
function Po(t) {
  return be(Qs(t));
}
function hs(t, e) {
  return je(t) ? je(e) ? hs(t.ofType, e.ofType) : !0 : je(e) ? !0 : re(t) ? re(e) ? hs(t.ofType, e.ofType) : !0 : re(e) ? !0 : yn(t) || yn(e) ? t !== e : !1;
}
function Ir(t, e, n, i) {
  const r = e.get(i);
  if (r)
    return r;
  const s = /* @__PURE__ */ Object.create(null), o = /* @__PURE__ */ Object.create(null);
  Tu(
    t,
    n,
    i,
    s,
    o
  );
  const a = [s, Object.keys(o)];
  return e.set(i, a), a;
}
function ps(t, e, n) {
  const i = e.get(n.selectionSet);
  if (i)
    return i;
  const r = it(t.getSchema(), n.typeCondition);
  return Ir(
    t,
    e,
    r,
    n.selectionSet
  );
}
function Tu(t, e, n, i, r) {
  for (const s of n.selections)
    switch (s.kind) {
      case I.FIELD: {
        const o = s.name.value;
        let a;
        (pe(e) || ve(e)) && (a = e.getFields()[o]);
        const u = s.alias ? s.alias.value : o;
        i[u] || (i[u] = []), i[u].push([e, s, a]);
        break;
      }
      case I.FRAGMENT_SPREAD:
        r[s.name.value] = !0;
        break;
      case I.INLINE_FRAGMENT: {
        const o = s.typeCondition, a = o ? it(t.getSchema(), o) : e;
        Tu(
          t,
          a,
          s.selectionSet,
          i,
          r
        );
        break;
      }
    }
}
function Af(t, e, n, i) {
  if (t.length > 0)
    return [
      [e, t.map(([r]) => r)],
      [n, ...t.map(([, r]) => r).flat()],
      [i, ...t.map(([, , r]) => r).flat()]
    ];
}
class xf {
  constructor() {
    this._data = /* @__PURE__ */ new Map();
  }
  has(e, n, i) {
    var r;
    const [s, o] = e < n ? [e, n] : [n, e], a = (r = this._data.get(s)) === null || r === void 0 ? void 0 : r.get(o);
    return a === void 0 ? !1 : i ? !0 : i === a;
  }
  add(e, n, i) {
    const [r, s] = e < n ? [e, n] : [n, e], o = this._data.get(r);
    o === void 0 ? this._data.set(r, /* @__PURE__ */ new Map([[s, i]])) : o.set(s, i);
  }
}
function Ff(t) {
  return {
    InlineFragment(e) {
      const n = t.getType(), i = t.getParentType();
      if (bn(n) && bn(i) && !Ro(t.getSchema(), n, i)) {
        const r = G(i), s = G(n);
        t.reportError(
          new P(
            `Fragment cannot be spread here as objects of type "${r}" can never be of type "${s}".`,
            {
              nodes: e
            }
          )
        );
      }
    },
    FragmentSpread(e) {
      const n = e.name.value, i = Rf(t, n), r = t.getParentType();
      if (i && r && !Ro(t.getSchema(), i, r)) {
        const s = G(r), o = G(i);
        t.reportError(
          new P(
            `Fragment "${n}" cannot be spread here as objects of type "${s}" can never be of type "${o}".`,
            {
              nodes: e
            }
          )
        );
      }
    }
  };
}
function Rf(t, e) {
  const n = t.getFragment(e);
  if (n) {
    const i = it(t.getSchema(), n.typeCondition);
    if (bn(i))
      return i;
  }
}
function Lf(t) {
  return {
    // eslint-disable-next-line new-cap
    ...Cf(t),
    Field: {
      // Validate on leave to allow for deeper errors to appear first.
      leave(e) {
        var n;
        const i = t.getFieldDef();
        if (!i)
          return !1;
        const r = new Set(
          // FIXME: https://github.com/graphql/graphql-js/issues/2203
          /* c8 ignore next */
          (n = e.arguments) === null || n === void 0 ? void 0 : n.map((s) => s.name.value)
        );
        for (const s of i.args)
          if (!r.has(s.name) && Pi(s)) {
            const o = G(s.type);
            t.reportError(
              new P(
                `Field "${i.name}" argument "${s.name}" of type "${o}" is required, but it was not provided.`,
                {
                  nodes: e
                }
              )
            );
          }
      }
    }
  };
}
function Cf(t) {
  var e;
  const n = /* @__PURE__ */ Object.create(null), i = t.getSchema(), r = (e = i == null ? void 0 : i.getDirectives()) !== null && e !== void 0 ? e : Vi;
  for (const a of r)
    n[a.name] = ii(
      a.args.filter(Pi),
      (u) => u.name
    );
  const s = t.getDocument().definitions;
  for (const a of s)
    if (a.kind === I.DIRECTIVE_DEFINITION) {
      var o;
      const u = (o = a.arguments) !== null && o !== void 0 ? o : [];
      n[a.name.value] = ii(
        u.filter(kf),
        (c) => c.name.value
      );
    }
  return {
    Directive: {
      // Validate on leave to allow for deeper errors to appear first.
      leave(a) {
        const u = a.name.value, c = n[u];
        if (c) {
          var f;
          const g = (f = a.arguments) !== null && f !== void 0 ? f : [], p = new Set(g.map((w) => w.name.value));
          for (const [w, E] of Object.entries(c))
            if (!p.has(w)) {
              const R = js(E.type) ? G(E.type) : be(E.type);
              t.reportError(
                new P(
                  `Directive "@${u}" argument "${w}" of type "${R}" is required, but it was not provided.`,
                  {
                    nodes: a
                  }
                )
              );
            }
        }
      }
    }
  };
}
function kf(t) {
  return t.type.kind === I.NON_NULL_TYPE && t.defaultValue == null;
}
function Df(t) {
  return {
    Field(e) {
      const n = t.getType(), i = e.selectionSet;
      if (n) {
        if (yn(jt(n))) {
          if (i) {
            const r = e.name.value, s = G(n);
            t.reportError(
              new P(
                `Field "${r}" must not have a selection since type "${s}" has no subfields.`,
                {
                  nodes: i
                }
              )
            );
          }
        } else if (!i) {
          const r = e.name.value, s = G(n);
          t.reportError(
            new P(
              `Field "${r}" of type "${s}" must have a selection of subfields. Did you mean "${r} { ... }"?`,
              {
                nodes: e
              }
            )
          );
        }
      }
    }
  };
}
function $f(t) {
  return t.map(
    (e) => typeof e == "number" ? "[" + e.toString() + "]" : "." + e
  ).join("");
}
function jo(t, e, n) {
  return {
    prev: t,
    key: e,
    typename: n
  };
}
function Kt(t) {
  const e = [];
  let n = t;
  for (; n; )
    e.push(n.key), n = n.prev;
  return e.reverse();
}
function Pf(t, e, n = jf) {
  return vi(t, e, n, void 0);
}
function jf(t, e, n) {
  let i = "Invalid value " + G(e);
  throw t.length > 0 && (i += ` at "value${$f(t)}"`), n.message = i + ": " + n.message, n;
}
function vi(t, e, n, i) {
  if (re(e)) {
    if (t != null)
      return vi(t, e.ofType, n, i);
    n(
      Kt(i),
      t,
      new P(
        `Expected non-nullable type "${G(e)}" not to be null.`
      )
    );
    return;
  }
  if (t == null)
    return null;
  if (je(e)) {
    const r = e.ofType;
    return au(t) ? Array.from(t, (s, o) => {
      const a = jo(i, o, void 0);
      return vi(s, r, n, a);
    }) : [vi(t, r, n, i)];
  }
  if (ze(e)) {
    if (!Ht(t)) {
      n(
        Kt(i),
        t,
        new P(`Expected type "${e.name}" to be an object.`)
      );
      return;
    }
    const r = {}, s = e.getFields();
    for (const o of Object.values(s)) {
      const a = t[o.name];
      if (a === void 0) {
        if (o.defaultValue !== void 0)
          r[o.name] = o.defaultValue;
        else if (re(o.type)) {
          const u = G(o.type);
          n(
            Kt(i),
            t,
            new P(
              `Field "${o.name}" of required type "${u}" was not provided.`
            )
          );
        }
        continue;
      }
      r[o.name] = vi(
        a,
        o.type,
        n,
        jo(i, o.name, e.name)
      );
    }
    for (const o of Object.keys(t))
      if (!s[o]) {
        const a = kn(
          o,
          Object.keys(e.getFields())
        );
        n(
          Kt(i),
          t,
          new P(
            `Field "${o}" is not defined by type "${e.name}".` + mn(a)
          )
        );
      }
    if (e.isOneOf) {
      const o = Object.keys(r);
      o.length !== 1 && n(
        Kt(i),
        t,
        new P(
          `Exactly one key must be specified for OneOf type "${e.name}".`
        )
      );
      const a = o[0], u = r[a];
      u === null && n(
        Kt(i).concat(a),
        u,
        new P(`Field "${a}" must be non-null.`)
      );
    }
    return r;
  }
  if (yn(e)) {
    let r;
    try {
      r = e.parseValue(t);
    } catch (s) {
      s instanceof P ? n(Kt(i), t, s) : n(
        Kt(i),
        t,
        new P(`Expected type "${e.name}". ` + s.message, {
          originalError: s
        })
      );
      return;
    }
    return r === void 0 && n(
      Kt(i),
      t,
      new P(`Expected type "${e.name}".`)
    ), r;
  }
  Yt(!1, "Unexpected input type: " + G(e));
}
function Nn(t, e, n) {
  if (t) {
    if (t.kind === I.VARIABLE) {
      const i = t.name.value;
      if (n == null || n[i] === void 0)
        return;
      const r = n[i];
      return r === null && re(e) ? void 0 : r;
    }
    if (re(e))
      return t.kind === I.NULL ? void 0 : Nn(t, e.ofType, n);
    if (t.kind === I.NULL)
      return null;
    if (je(e)) {
      const i = e.ofType;
      if (t.kind === I.LIST) {
        const s = [];
        for (const o of t.values)
          if (Mo(o, n)) {
            if (re(i))
              return;
            s.push(null);
          } else {
            const a = Nn(o, i, n);
            if (a === void 0)
              return;
            s.push(a);
          }
        return s;
      }
      const r = Nn(t, i, n);
      return r === void 0 ? void 0 : [r];
    }
    if (ze(e)) {
      if (t.kind !== I.OBJECT)
        return;
      const i = /* @__PURE__ */ Object.create(null), r = ii(t.fields, (s) => s.name.value);
      for (const s of Object.values(e.getFields())) {
        const o = r[s.name];
        if (!o || Mo(o.value, n)) {
          if (s.defaultValue !== void 0)
            i[s.name] = s.defaultValue;
          else if (re(s.type))
            return;
          continue;
        }
        const a = Nn(o.value, s.type, n);
        if (a === void 0)
          return;
        i[s.name] = a;
      }
      if (e.isOneOf) {
        const s = Object.keys(i);
        if (s.length !== 1 || i[s[0]] === null)
          return;
      }
      return i;
    }
    if (yn(e)) {
      let i;
      try {
        i = e.parseLiteral(t, n);
      } catch {
        return;
      }
      return i === void 0 ? void 0 : i;
    }
    Yt(!1, "Unexpected input type: " + G(e));
  }
}
function Mo(t, e) {
  return t.kind === I.VARIABLE && (e == null || e[t.name.value] === void 0);
}
function Mf(t, e, n) {
  var i;
  const r = {}, s = (i = e.arguments) !== null && i !== void 0 ? i : [], o = ii(s, (a) => a.name.value);
  for (const a of t.args) {
    const u = a.name, c = a.type, f = o[u];
    if (!f) {
      if (a.defaultValue !== void 0)
        r[u] = a.defaultValue;
      else if (re(c))
        throw new P(
          `Argument "${u}" of required type "${G(c)}" was not provided.`,
          {
            nodes: e
          }
        );
      continue;
    }
    const g = f.value;
    let p = g.kind === I.NULL;
    if (g.kind === I.VARIABLE) {
      const E = g.name.value;
      if (n == null || !Uf(n, E)) {
        if (a.defaultValue !== void 0)
          r[u] = a.defaultValue;
        else if (re(c))
          throw new P(
            `Argument "${u}" of required type "${G(c)}" was provided the variable "$${E}" which was not provided a runtime value.`,
            {
              nodes: g
            }
          );
        continue;
      }
      p = n[E] == null;
    }
    if (p && re(c))
      throw new P(
        `Argument "${u}" of non-null type "${G(c)}" must not be null.`,
        {
          nodes: g
        }
      );
    const w = Nn(g, c, n);
    if (w === void 0)
      throw new P(
        `Argument "${u}" has invalid value ${be(g)}.`,
        {
          nodes: g
        }
      );
    r[u] = w;
  }
  return r;
}
function si(t, e, n) {
  var i;
  const r = (i = e.directives) === null || i === void 0 ? void 0 : i.find(
    (s) => s.name.value === t.name
  );
  if (r)
    return Mf(t, r, n);
}
function Uf(t, e) {
  return Object.prototype.hasOwnProperty.call(t, e);
}
function Vf(t, e, n, i, r) {
  const s = /* @__PURE__ */ new Map();
  return gs(
    t,
    e,
    n,
    i,
    r,
    s,
    /* @__PURE__ */ new Set()
  ), s;
}
function gs(t, e, n, i, r, s, o) {
  for (const a of r.selections)
    switch (a.kind) {
      case I.FIELD: {
        if (!Zr(n, a))
          continue;
        const u = Bf(a), c = s.get(u);
        c !== void 0 ? c.push(a) : s.set(u, [a]);
        break;
      }
      case I.INLINE_FRAGMENT: {
        if (!Zr(n, a) || !Uo(t, a, i))
          continue;
        gs(
          t,
          e,
          n,
          i,
          a.selectionSet,
          s,
          o
        );
        break;
      }
      case I.FRAGMENT_SPREAD: {
        const u = a.name.value;
        if (o.has(u) || !Zr(n, a))
          continue;
        o.add(u);
        const c = e[u];
        if (!c || !Uo(t, c, i))
          continue;
        gs(
          t,
          e,
          n,
          i,
          c.selectionSet,
          s,
          o
        );
        break;
      }
    }
}
function Zr(t, e) {
  const n = si(Vs, e, t);
  if ((n == null ? void 0 : n.if) === !0)
    return !1;
  const i = si(
    Us,
    e,
    t
  );
  return (i == null ? void 0 : i.if) !== !1;
}
function Uo(t, e, n) {
  const i = e.typeCondition;
  if (!i)
    return !0;
  const r = it(t, i);
  return r === n ? !0 : tn(r) ? t.isSubType(r, n) : !1;
}
function Bf(t) {
  return t.alias ? t.alias.value : t.name.value;
}
function Gf(t) {
  return {
    OperationDefinition(e) {
      if (e.operation === "subscription") {
        const n = t.getSchema(), i = n.getSubscriptionType();
        if (i) {
          const r = e.name ? e.name.value : null, s = /* @__PURE__ */ Object.create(null), o = t.getDocument(), a = /* @__PURE__ */ Object.create(null);
          for (const c of o.definitions)
            c.kind === I.FRAGMENT_DEFINITION && (a[c.name.value] = c);
          const u = Vf(
            n,
            a,
            s,
            i,
            e.selectionSet
          );
          if (u.size > 1) {
            const g = [...u.values()].slice(1).flat();
            t.reportError(
              new P(
                r != null ? `Subscription "${r}" must select only one top level field.` : "Anonymous Subscription must select only one top level field.",
                {
                  nodes: g
                }
              )
            );
          }
          for (const c of u.values())
            c[0].name.value.startsWith("__") && t.reportError(
              new P(
                r != null ? `Subscription "${r}" must not select an introspection top level field.` : "Anonymous Subscription must not select an introspection top level field.",
                {
                  nodes: c
                }
              )
            );
        }
      }
    }
  };
}
function Su(t, e) {
  const n = /* @__PURE__ */ new Map();
  for (const i of t) {
    const r = e(i), s = n.get(r);
    s === void 0 ? n.set(r, [i]) : s.push(i);
  }
  return n;
}
function qf(t) {
  return {
    Field: e,
    Directive: e
  };
  function e(n) {
    var i;
    const r = (i = n.arguments) !== null && i !== void 0 ? i : [], s = Su(r, (o) => o.name.value);
    for (const [o, a] of s)
      a.length > 1 && t.reportError(
        new P(
          `There can be only one argument named "${o}".`,
          {
            nodes: a.map((u) => u.name)
          }
        )
      );
  }
}
function zf(t) {
  const e = /* @__PURE__ */ Object.create(null), n = t.getSchema(), i = n ? n.getDirectives() : Vi;
  for (const a of i)
    e[a.name] = !a.isRepeatable;
  const r = t.getDocument().definitions;
  for (const a of r)
    a.kind === I.DIRECTIVE_DEFINITION && (e[a.name.value] = !a.repeatable);
  const s = /* @__PURE__ */ Object.create(null), o = /* @__PURE__ */ Object.create(null);
  return {
    // Many different AST nodes may contain directives. Rather than listing
    // them all, just listen for entering any node, and check to see if it
    // defines any directives.
    enter(a) {
      if (!("directives" in a) || !a.directives)
        return;
      let u;
      if (a.kind === I.SCHEMA_DEFINITION || a.kind === I.SCHEMA_EXTENSION)
        u = s;
      else if (zs(a) || Eu(a)) {
        const c = a.name.value;
        u = o[c], u === void 0 && (o[c] = u = /* @__PURE__ */ Object.create(null));
      } else
        u = /* @__PURE__ */ Object.create(null);
      for (const c of a.directives) {
        const f = c.name.value;
        e[f] && (u[f] ? t.reportError(
          new P(
            `The directive "@${f}" can only be used once at this location.`,
            {
              nodes: [u[f], c]
            }
          )
        ) : u[f] = c);
      }
    }
  };
}
function Qf(t) {
  const e = /* @__PURE__ */ Object.create(null);
  return {
    OperationDefinition: () => !1,
    FragmentDefinition(n) {
      const i = n.name.value;
      return e[i] ? t.reportError(
        new P(
          `There can be only one fragment named "${i}".`,
          {
            nodes: [e[i], n.name]
          }
        )
      ) : e[i] = n.name, !1;
    }
  };
}
function Wf(t) {
  const e = [];
  let n = /* @__PURE__ */ Object.create(null);
  return {
    ObjectValue: {
      enter() {
        e.push(n), n = /* @__PURE__ */ Object.create(null);
      },
      leave() {
        const i = e.pop();
        i || Yt(!1), n = i;
      }
    },
    ObjectField(i) {
      const r = i.name.value;
      n[r] ? t.reportError(
        new P(
          `There can be only one input field named "${r}".`,
          {
            nodes: [n[r], i.name]
          }
        )
      ) : n[r] = i.name;
    }
  };
}
function Yf(t) {
  const e = /* @__PURE__ */ Object.create(null);
  return {
    OperationDefinition(n) {
      const i = n.name;
      return i && (e[i.value] ? t.reportError(
        new P(
          `There can be only one operation named "${i.value}".`,
          {
            nodes: [
              e[i.value],
              i
            ]
          }
        )
      ) : e[i.value] = i), !1;
    },
    FragmentDefinition: () => !1
  };
}
function Hf(t) {
  return {
    OperationDefinition(e) {
      var n;
      const i = (n = e.variableDefinitions) !== null && n !== void 0 ? n : [], r = Su(
        i,
        (s) => s.variable.name.value
      );
      for (const [s, o] of r)
        o.length > 1 && t.reportError(
          new P(
            `There can be only one variable named "$${s}".`,
            {
              nodes: o.map((a) => a.variable.name)
            }
          )
        );
    }
  };
}
function Jf(t) {
  let e = {};
  return {
    OperationDefinition: {
      enter() {
        e = {};
      }
    },
    VariableDefinition(n) {
      e[n.variable.name.value] = n;
    },
    ListValue(n) {
      const i = Ja(t.getParentInputType());
      if (!je(i))
        return Sn(t, n), !1;
    },
    ObjectValue(n) {
      const i = jt(t.getInputType());
      if (!ze(i))
        return Sn(t, n), !1;
      const r = ii(n.fields, (s) => s.name.value);
      for (const s of Object.values(i.getFields()))
        if (!r[s.name] && ru(s)) {
          const a = G(s.type);
          t.reportError(
            new P(
              `Field "${i.name}.${s.name}" of required type "${a}" was not provided.`,
              {
                nodes: n
              }
            )
          );
        }
      i.isOneOf && Kf(
        t,
        n,
        i,
        r,
        e
      );
    },
    ObjectField(n) {
      const i = jt(t.getParentInputType());
      if (!t.getInputType() && ze(i)) {
        const s = kn(
          n.name.value,
          Object.keys(i.getFields())
        );
        t.reportError(
          new P(
            `Field "${n.name.value}" is not defined by type "${i.name}".` + mn(s),
            {
              nodes: n
            }
          )
        );
      }
    },
    NullValue(n) {
      const i = t.getInputType();
      re(i) && t.reportError(
        new P(
          `Expected value of type "${G(i)}", found ${be(n)}.`,
          {
            nodes: n
          }
        )
      );
    },
    EnumValue: (n) => Sn(t, n),
    IntValue: (n) => Sn(t, n),
    FloatValue: (n) => Sn(t, n),
    StringValue: (n) => Sn(t, n),
    BooleanValue: (n) => Sn(t, n)
  };
}
function Sn(t, e) {
  const n = t.getInputType();
  if (!n)
    return;
  const i = jt(n);
  if (!yn(i)) {
    const r = G(n);
    t.reportError(
      new P(
        `Expected value of type "${r}", found ${be(e)}.`,
        {
          nodes: e
        }
      )
    );
    return;
  }
  try {
    if (i.parseLiteral(
      e,
      void 0
      /* variables */
    ) === void 0) {
      const s = G(n);
      t.reportError(
        new P(
          `Expected value of type "${s}", found ${be(e)}.`,
          {
            nodes: e
          }
        )
      );
    }
  } catch (r) {
    const s = G(n);
    r instanceof P ? t.reportError(r) : t.reportError(
      new P(
        `Expected value of type "${s}", found ${be(e)}; ` + r.message,
        {
          nodes: e,
          originalError: r
        }
      )
    );
  }
}
function Kf(t, e, n, i, r) {
  var s;
  const o = Object.keys(i);
  if (o.length !== 1) {
    t.reportError(
      new P(
        `OneOf Input Object "${n.name}" must specify exactly one key.`,
        {
          nodes: [e]
        }
      )
    );
    return;
  }
  const u = (s = i[o[0]]) === null || s === void 0 ? void 0 : s.value, c = !u || u.kind === I.NULL, f = (u == null ? void 0 : u.kind) === I.VARIABLE;
  if (c) {
    t.reportError(
      new P(`Field "${n.name}.${o[0]}" must be non-null.`, {
        nodes: [e]
      })
    );
    return;
  }
  if (f) {
    const g = u.name.value;
    r[g].type.kind !== I.NON_NULL_TYPE && t.reportError(
      new P(
        `Variable "${g}" must be non-nullable to be used for OneOf Input Object "${n.name}".`,
        {
          nodes: [e]
        }
      )
    );
  }
}
function Xf(t) {
  return {
    VariableDefinition(e) {
      const n = it(t.getSchema(), e.type);
      if (n !== void 0 && !Pt(n)) {
        const i = e.variable.name.value, r = be(e.type);
        t.reportError(
          new P(
            `Variable "$${i}" cannot be non-input type "${r}".`,
            {
              nodes: e.type
            }
          )
        );
      }
    }
  };
}
function Zf(t) {
  let e = /* @__PURE__ */ Object.create(null);
  return {
    OperationDefinition: {
      enter() {
        e = /* @__PURE__ */ Object.create(null);
      },
      leave(n) {
        const i = t.getRecursiveVariableUsages(n);
        for (const { node: r, type: s, defaultValue: o } of i) {
          const a = r.name.value, u = e[a];
          if (u && s) {
            const c = t.getSchema(), f = it(c, u.type);
            if (f && !ed(
              c,
              f,
              u.defaultValue,
              s,
              o
            )) {
              const g = G(f), p = G(s);
              t.reportError(
                new P(
                  `Variable "$${a}" of type "${g}" used in position expecting type "${p}".`,
                  {
                    nodes: [u, r]
                  }
                )
              );
            }
          }
        }
      }
    },
    VariableDefinition(n) {
      e[n.variable.name.value] = n;
    }
  };
}
function ed(t, e, n, i, r) {
  if (re(i) && !re(e)) {
    if (!(n != null && n.kind !== I.NULL) && !(r !== void 0))
      return !1;
    const a = i.ofType;
    return Wn(t, e, a);
  }
  return Wn(t, e, i);
}
const td = Object.freeze([yf]), _u = Object.freeze([
  tf,
  Yf,
  gf,
  Gf,
  hf,
  of,
  Xf,
  Df,
  nf,
  Qf,
  df,
  vf,
  Ff,
  bf,
  Hf,
  Ef,
  wf,
  lf,
  zf,
  af,
  qf,
  Jf,
  Lf,
  Zf,
  Sf,
  Wf,
  ...td
]);
class nd {
  constructor(e, n) {
    this._ast = e, this._fragments = void 0, this._fragmentSpreads = /* @__PURE__ */ new Map(), this._recursivelyReferencedFragments = /* @__PURE__ */ new Map(), this._onError = n;
  }
  get [Symbol.toStringTag]() {
    return "ASTValidationContext";
  }
  reportError(e) {
    this._onError(e);
  }
  getDocument() {
    return this._ast;
  }
  getFragment(e) {
    let n;
    if (this._fragments)
      n = this._fragments;
    else {
      n = /* @__PURE__ */ Object.create(null);
      for (const i of this.getDocument().definitions)
        i.kind === I.FRAGMENT_DEFINITION && (n[i.name.value] = i);
      this._fragments = n;
    }
    return n[e];
  }
  getFragmentSpreads(e) {
    let n = this._fragmentSpreads.get(e);
    if (!n) {
      n = [];
      const i = [e];
      let r;
      for (; r = i.pop(); )
        for (const s of r.selections)
          s.kind === I.FRAGMENT_SPREAD ? n.push(s) : s.selectionSet && i.push(s.selectionSet);
      this._fragmentSpreads.set(e, n);
    }
    return n;
  }
  getRecursivelyReferencedFragments(e) {
    let n = this._recursivelyReferencedFragments.get(e);
    if (!n) {
      n = [];
      const i = /* @__PURE__ */ Object.create(null), r = [e.selectionSet];
      let s;
      for (; s = r.pop(); )
        for (const o of this.getFragmentSpreads(s)) {
          const a = o.name.value;
          if (i[a] !== !0) {
            i[a] = !0;
            const u = this.getFragment(a);
            u && (n.push(u), r.push(u.selectionSet));
          }
        }
      this._recursivelyReferencedFragments.set(e, n);
    }
    return n;
  }
}
class id extends nd {
  constructor(e, n, i, r) {
    super(n, r), this._schema = e, this._typeInfo = i, this._variableUsages = /* @__PURE__ */ new Map(), this._recursiveVariableUsages = /* @__PURE__ */ new Map();
  }
  get [Symbol.toStringTag]() {
    return "ValidationContext";
  }
  getSchema() {
    return this._schema;
  }
  getVariableUsages(e) {
    let n = this._variableUsages.get(e);
    if (!n) {
      const i = [], r = new yu(this._schema);
      Ps(
        e,
        bu(r, {
          VariableDefinition: () => !1,
          Variable(s) {
            i.push({
              node: s,
              type: r.getInputType(),
              defaultValue: r.getDefaultValue()
            });
          }
        })
      ), n = i, this._variableUsages.set(e, n);
    }
    return n;
  }
  getRecursiveVariableUsages(e) {
    let n = this._recursiveVariableUsages.get(e);
    if (!n) {
      n = this.getVariableUsages(e);
      for (const i of this.getRecursivelyReferencedFragments(e))
        n = n.concat(this.getVariableUsages(i));
      this._recursiveVariableUsages.set(e, n);
    }
    return n;
  }
  getType() {
    return this._typeInfo.getType();
  }
  getParentType() {
    return this._typeInfo.getParentType();
  }
  getInputType() {
    return this._typeInfo.getInputType();
  }
  getParentInputType() {
    return this._typeInfo.getParentInputType();
  }
  getFieldDef() {
    return this._typeInfo.getFieldDef();
  }
  getDirective() {
    return this._typeInfo.getDirective();
  }
  getArgument() {
    return this._typeInfo.getArgument();
  }
  getEnumValue() {
    return this._typeInfo.getEnumValue();
  }
}
function rd(t, e, n = _u, i, r = new yu(t)) {
  var s;
  const o = (s = i == null ? void 0 : i.maxErrors) !== null && s !== void 0 ? s : 100;
  e || ae(!1, "Must provide document."), mu(t);
  const a = Object.freeze({}), u = [], c = new id(
    t,
    e,
    r,
    (g) => {
      if (u.length >= o)
        throw u.push(
          new P(
            "Too many validation errors, error limit reached. Validation aborted."
          )
        ), a;
      u.push(g);
    }
  ), f = Oc(n.map((g) => g(c)));
  try {
    Ps(e, bu(r, f));
  } catch (g) {
    if (g !== a)
      throw g;
  }
  return u;
}
function sd(t) {
  return t instanceof Error ? t : new od(t);
}
let od = class extends Error {
  constructor(e) {
    super("Unexpected error value: " + G(e)), this.name = "NonErrorThrown", this.thrownValue = e;
  }
};
function tt(t, e, n) {
  var i;
  const r = sd(t);
  return ad(r) ? r : new P(r.message, {
    nodes: (i = r.nodes) !== null && i !== void 0 ? i : e,
    source: r.source,
    positions: r.positions,
    path: n,
    originalError: r
  });
}
function ad(t) {
  return Array.isArray(t.path);
}
const Vo = function(t, e, n, i) {
  if (Ht(t) && typeof t.__typename == "string")
    return t.__typename;
  const r = n.schema.getPossibleTypes(i), s = [];
  for (let o = 0; o < r.length; o++) {
    const a = r[o];
    if (a.isTypeOf) {
      const u = a.isTypeOf(t, e, n);
      if (Gl(u))
        s[o] = u;
      else if (u)
        return a.name;
    }
  }
  if (s.length)
    return Promise.all(s).then((o) => {
      for (let a = 0; a < o.length; a++)
        if (o[a])
          return r[a].name;
    });
}, lr = function(t, e, n, i) {
  if (Ht(t) || typeof t == "function") {
    const r = t[i.fieldName];
    return typeof r == "function" ? t[i.fieldName](e, n, i) : r;
  }
};
function Ys(t, e) {
  let n = null;
  for (const r of t.definitions)
    if (r.kind === I.OPERATION_DEFINITION) {
      var i;
      if (e == null) {
        if (n)
          return null;
        n = r;
      } else if (((i = r.name) === null || i === void 0 ? void 0 : i.value) === e)
        return r;
    }
  return n;
}
function ud(t) {
  const e = t.toConfig(), n = Lr(
    es(e.types),
    (p) => p.name,
    g
  );
  return new Gs({
    ...e,
    types: Object.values(n),
    directives: es(e.directives).map(o),
    query: s(e.query),
    mutation: s(e.mutation),
    subscription: s(e.subscription)
  });
  function i(p) {
    return je(p) ? new Ue(i(p.ofType)) : re(p) ? new ne(i(p.ofType)) : r(p);
  }
  function r(p) {
    return n[p.name];
  }
  function s(p) {
    return p && r(p);
  }
  function o(p) {
    const w = p.toConfig();
    return new nn({
      ...w,
      locations: Iu(w.locations, (E) => E),
      args: a(w.args)
    });
  }
  function a(p) {
    return Hi(p, (w) => ({ ...w, type: i(w.type) }));
  }
  function u(p) {
    return Hi(p, (w) => ({
      ...w,
      type: i(w.type),
      args: w.args && a(w.args)
    }));
  }
  function c(p) {
    return Hi(p, (w) => ({
      ...w,
      type: i(w.type)
    }));
  }
  function f(p) {
    return es(p).map(r);
  }
  function g(p) {
    if (Dn(p) || pu(p))
      return p;
    if (pe(p)) {
      const w = p.toConfig();
      return new et({
        ...w,
        interfaces: () => f(w.interfaces),
        fields: () => u(w.fields)
      });
    }
    if (ve(p)) {
      const w = p.toConfig();
      return new _n({
        ...w,
        interfaces: () => f(w.interfaces),
        fields: () => u(w.fields)
      });
    }
    if (Vt(p)) {
      const w = p.toConfig();
      return new Gn({
        ...w,
        types: () => f(w.types)
      });
    }
    if (Bt(p)) {
      const w = p.toConfig();
      return new ri({
        ...w,
        values: Hi(w.values, (E) => E)
      });
    }
    if (ze(p)) {
      const w = p.toConfig();
      return new Ni({
        ...w,
        fields: () => c(w.fields)
      });
    }
    Yt(!1, "Unexpected type: " + G(p));
  }
}
function Hi(t, e) {
  const n = /* @__PURE__ */ Object.create(null);
  for (const i of Object.keys(t).sort($i))
    n[i] = e(t[i]);
  return n;
}
function es(t) {
  return Iu(t, (e) => e.name);
}
function Iu(t, e) {
  return t.slice().sort((n, i) => {
    const r = e(n), s = e(i);
    return $i(r, s);
  });
}
class Bi extends P {
  constructor(e, n) {
    super(e, n), this.name = "PothosError";
  }
}
class ie extends Bi {
  constructor(e, n) {
    super(e, n), this.name = "PothosSchemaError";
  }
}
const ld = Symbol.for("Pothos.contextCache");
function cd(t) {
  const e = /* @__PURE__ */ new WeakMap();
  return (n, ...i) => {
    const r = n[ld] || n;
    if (e.has(r))
      return e.get(r);
    const s = t(n, ...i);
    return e.set(r, s), s;
  };
}
function ci(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
const fi = /* @__PURE__ */ new WeakMap();
class fd {
  /**
  * Called for each type defined with the SchemaBuilder
  * @param  {PothosTypeConfig} typeConfig - Config object describing the added type
  * @return {PothosTypeConfig} Original or updated `typeConfig`
  */
  onTypeConfig(e) {
    return e;
  }
  /**
  * Called for each field on an Object or Interface type
  * @param  {PothosOutputFieldConfig} fieldConfig - Config object describing the added field
  * @return {PothosOutputFieldConfig} Original or updated `fieldConfig`
  */
  onOutputFieldConfig(e) {
    return e;
  }
  /**
  * Called for each argument or field on an Input object defined in your schema
  * @param  {PothosInputFieldConfig} fieldConfig - Config object describing the added field
  * @return {PothosInputFieldConfig} Original or updated `fieldConfig`
  */
  onInputFieldConfig(e) {
    return e;
  }
  /**
  * Called for each Enum value defined in your schema
  * @param  {PothosEnumValueConfig} valueConfig - Config object describing the enum value
  * @return {PothosEnumValueConfig} Original or updated `valueConfig`
  */
  onEnumValueConfig(e) {
    return e;
  }
  /**
  * Called before builder.toSchema() schema is called
  */
  beforeBuild() {
  }
  /**
  * Called after all fields and types have been built during `builder.toSchema()`
  * @param  {GraphQLSchema} schema - the generated schema
  * @return {PothosEnumValueConfig} Original or updated `schema`
  */
  afterBuild(e) {
    return e;
  }
  /**
  * Called with the resolver for each field in the schema
  * @param  {GraphQLFieldResolver} resolve - the resolve function
  * @param  {PothosOutputFieldConfig} fieldConfig - the config object for the field associated with this resolve function
  * @return {GraphQLFieldResolver} - Either the original, or a new resolver function to use for this field
  */
  wrapResolve(e, n) {
    return e;
  }
  /**
  * Called with the subscribe for each field on the Subscription type
  * @param  {GraphQLFieldResolver} subscribe - the subscribe function
  * @param  {PothosOutputFieldConfig} fieldConfig - the config object for the field associated with this subscribe function
  * @return {GraphQLFieldResolver} - Either the original, or a new subscribe function to use for this field
  */
  wrapSubscribe(e, n) {
    return e;
  }
  /**
  * Called with the resolveType for each Interface or Union type
  * @param  {GraphQLTypeResolver} resolveType - the resolveType function
  * @param  {PothosInterfaceTypeConfig | PothosUnionTypeConfig} typeConfig - the config object for the Interface or Union type
  * @return {GraphQLTypeResolver} - Either the original, or a new resolveType function to use for this field
  */
  wrapResolveType(e, n) {
    return e;
  }
  /**
  * Called with the isTypeOf for each Object type
  * @param  {GraphQLTypeResolver} resolveType - the resolveType function
  * @param  {PothosObjectTypeConfig} typeConfig - the config object for the Interface or Union type
  * @return {GraphQLTypeResolver} - Either the original, or a new resolveType function to use for this field
  */
  wrapIsTypeOf(e, n) {
    return e;
  }
  runUnique(e, n) {
    if (fi.has(this.builder) || fi.set(this.builder, /* @__PURE__ */ new Map()), !fi.get(this.builder).has(e)) {
      const i = n();
      return fi.get(this.builder).set(e, i), i;
    }
    return fi.get(this.builder).get(e);
  }
  /**
  * Creates a data object unique to the current request for use by this plugin
  * @param  {Types['Context']} context - the context object for the current request
  * @return {object} - The data object for the current request
  */
  createRequestData(e) {
    throw new Bi("createRequestData not implemented");
  }
  /**
  * Returns a data object for the current request.  requires `createRequestData` to be implemented
  * @param  {Types['Context']} context - the context object for the current request
  * @return {object} - The data object for the current request
  */
  requestData(e) {
    return this.requestDataMap(e);
  }
  constructor(e, n) {
    ci(this, "name", void 0), ci(this, "builder", void 0), ci(this, "buildCache", void 0), ci(this, "options", void 0), ci(this, "requestDataMap", cd((i) => this.createRequestData(i))), this.name = n, this.builder = e.builder, this.buildCache = e, this.options = e.options;
  }
}
function dd(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
class hd extends fd {
  onTypeConfig(e) {
    return this.plugins.reduceRight((n, i) => n === null ? n : i.onTypeConfig(n), e);
  }
  onInputFieldConfig(e) {
    return this.plugins.reduceRight((n, i) => n === null ? n : i.onInputFieldConfig(n), e);
  }
  onOutputFieldConfig(e) {
    return this.plugins.reduceRight((n, i) => n === null ? n : i.onOutputFieldConfig(n), e);
  }
  onEnumValueConfig(e) {
    return this.plugins.reduceRight((n, i) => n === null ? n : i.onEnumValueConfig(n), e);
  }
  beforeBuild() {
    for (const e of this.plugins)
      e.beforeBuild();
  }
  afterBuild(e) {
    return this.plugins.reduceRight((n, i) => i.afterBuild(n), e);
  }
  wrapResolve(e, n) {
    return this.plugins.reduceRight((i, r) => r.wrapResolve(i, n), e);
  }
  wrapSubscribe(e, n) {
    return this.plugins.reduceRight((i, r) => r.wrapSubscribe(i, n), e);
  }
  wrapResolveType(e, n) {
    return this.plugins.reduceRight((i, r) => r.wrapResolveType(i, n), e);
  }
  wrapIsTypeOf(e, n) {
    return this.plugins.reduceRight((i, r) => r.wrapIsTypeOf(i, n), e);
  }
  constructor(e, n) {
    super(e, "PothosMergedPlugin"), dd(this, "plugins", void 0), this.plugins = n;
  }
}
const $n = Symbol.for("Pothos.outputShapeKey"), ui = Symbol.for("Pothos.parentShapeKey"), Gi = Symbol.for("Pothos.inputShapeKey"), pd = Symbol.for("Pothos.inputFieldShapeKey"), gd = Symbol.for("Pothos.outputFieldShapeKey"), Or = Symbol.for("Pothos.typeBrandKey");
function Bo(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
class Ne {
  toString() {
    return `${this.kind}Ref<${this.name}>`;
  }
  constructor(e, n) {
    Bo(this, "kind", void 0), Bo(this, "name", void 0), this.kind = e, this.name = n;
  }
}
function jn(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
let md = $n, yd = ui, bd = Gi;
class Ou extends Ne {
  constructor(e) {
    super("Scalar", e), jn(this, "kind", "Scalar"), jn(this, "$inferType", void 0), jn(this, "$inferInput", void 0), jn(this, md, void 0), jn(this, yd, void 0), jn(this, bd, void 0);
  }
}
function Ed(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
class Nu extends Ou {
  constructor(e) {
    super(e.name), Ed(this, "type", void 0), this.type = e;
  }
}
function di(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
let vd = Gi;
class $r extends Ne {
  constructor(e, n) {
    super("InputList", `InputList<${String(e)}>`), di(this, "kind", "InputList"), di(this, vd, void 0), di(this, "$inferInput", void 0), di(this, "listType", void 0), di(this, "required", void 0), this.listType = e, this.required = n;
  }
}
function Mn(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
let wd = $n, Td = ui;
class Pr extends Ne {
  constructor(e, n) {
    super("List", `List<${String(e)}>`), Mn(this, "kind", "List"), Mn(this, "$inferType", void 0), Mn(this, wd, void 0), Mn(this, Td, void 0), Mn(this, "listType", void 0), Mn(this, "nullable", void 0), this.listType = e, this.nullable = n;
  }
}
function Sd(t) {
  const e = {};
  return Array.isArray(t) ? t.forEach((n) => {
    e[String(n)] = {
      pothosOptions: {}
    };
  }) : Object.entries(t).forEach(([n, i]) => {
    i && typeof i == "object" ? e[n] = {
      ...i,
      pothosOptions: i
    } : typeof i == "string" && (e[i] = {
      pothosOptions: {}
    });
  }), e;
}
function _d(t, e) {
  const n = {};
  return Object.keys(t).filter((i) => typeof t[t[i]] != "number").forEach((i) => {
    n[i] = {
      value: t[i],
      pothosOptions: {},
      ...e == null ? void 0 : e[i]
    };
  }), n;
}
function ms(t, e, n) {
  const i = typeof n == "object" ? n.items : !1, r = typeof n == "object" ? n.list : !!n;
  if (Array.isArray(t))
    return {
      kind: "List",
      type: ms(t[0], e, i),
      nullable: r
    };
  if (t instanceof Pr)
    return {
      kind: "List",
      type: ms(t.listType, e, t.nullable),
      nullable: r
    };
  const s = e.getOutputTypeRef(t), o = s instanceof Ne ? s.kind : e.getTypeConfig(s).graphqlKind, a = s instanceof Ne ? s.name : e.getTypeConfig(s).name;
  if (o !== "InputObject" && o !== "List" && o !== "InputList")
    return {
      kind: o,
      ref: s,
      nullable: r
    };
  throw new ie(`Expected input param ${a} to be an output type but got ${o}`);
}
function ys(t, e, n) {
  const i = typeof n == "object" ? n.items : !0, r = typeof n == "object" ? n.list : !!n;
  if (Array.isArray(t))
    return {
      kind: "List",
      type: ys(t[0], e, i),
      required: r
    };
  if (t instanceof $r)
    return {
      kind: "List",
      type: ys(t.listType, e, t.required),
      required: r
    };
  const s = e.getInputTypeRef(t), o = s instanceof Ne ? s.kind : e.getTypeConfig(s).graphqlKind, a = s instanceof Ne ? s.name : e.getTypeConfig(s).name;
  if (o === "InputObject" || o === "Enum" || o === "Scalar")
    return {
      kind: o,
      ref: s,
      required: r
    };
  throw new ie(`Expected input param ${a} to be an InputObject, Enum, or Scalar but got ${o}`);
}
function Id(t) {
  throw new TypeError(`Unexpected value: ${t}`);
}
function Od(t) {
  return !!(t && (typeof t == "object" || typeof t == "function") && typeof t.then == "function");
}
function Xt(t) {
  if (t === void 0)
    throw new ie(`Received undefined as a type ref.

This is often caused by a circular import
If this ref is imported from a file that re-exports it (like index.ts)
you may be able to resolve this by importing it directly from the file that defines it.
`);
}
function Go(t) {
  if (!(!t || typeof t == "function")) {
    if (!Array.isArray(t))
      throw new ie("interfaces must be an array or function");
    for (const e of t)
      if (e === void 0)
        throw new ie(`Received undefined in list of interfaces.

This is often caused by a circular import
If this ref is imported from a file that re-exports it (like index.ts)
you may be able to resolve this by importing it directly from the file that defines it.

Alternatively you can define interfaces with a function that will be lazily evaluated,
which may resolver issues with circular dependencies:

Example:
builder.objectType('MyObject', {
  interface: () => [Interface1, Interface2],
  ...
});
`);
  }
}
function Nd(t) {
  return typeof t == "object" && t !== null && Or in t ? t[Or] : null;
}
function bs(t) {
  return Array.isArray(t) ? bs(t[0]) : t instanceof Pr || t instanceof $r ? bs(t.listType) : t;
}
function ht(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
class Ad {
  getTypeConfig(e, n) {
    const i = this.configStore.getTypeConfig(e, n);
    return this.typeConfigs.has(i.name) || this.typeConfigs.set(i.name, this.plugin.onTypeConfig(i)), this.typeConfigs.get(i.name);
  }
  getInputTypeFieldConfigs(e) {
    const n = this.getTypeConfig(e, "InputObject"), i = this.types.get(n.name);
    if (!i)
      throw new ie(`Input type ${n.name} has not been built yet`);
    const r = i.getFields(), s = {};
    return Object.keys(r).forEach((o) => {
      var a;
      s[o] = (a = r[o].extensions) === null || a === void 0 ? void 0 : a.pothosConfig;
    }), s;
  }
  getImplementers(e) {
    if (this.implementers.has(e.name))
      return this.implementers.get(e.name);
    const n = [
      ...this.configStore.typeConfigs.values()
    ].filter((i) => i.kind === "Object" && i.interfaces.find((r) => this.configStore.getTypeConfig(r).name === e.name));
    return this.implementers.set(e.name, n), n;
  }
  buildAll() {
    this.configStore.prepareForBuild(), this.configStore.typeConfigs.forEach((e) => {
      (e.kind === "Enum" || e.kind === "Scalar") && this.buildTypeFromConfig(e);
    }), this.configStore.typeConfigs.forEach((e) => {
      e.kind === "InputObject" && this.buildTypeFromConfig(e);
    }), this.types.forEach((e) => {
      e instanceof Ni && e.getFields();
    }), this.configStore.typeConfigs.forEach((e) => {
      e.kind === "Interface" && this.buildTypeFromConfig(e);
    }), this.configStore.typeConfigs.forEach((e) => {
      e.kind === "Object" && this.buildTypeFromConfig(e);
    }), this.configStore.typeConfigs.forEach((e) => {
      e.kind === "Union" && this.buildTypeFromConfig(e);
    }), this.configStore.typeConfigs.forEach((e) => {
      (e.kind === "Query" || e.kind === "Mutation" || e.kind === "Subscription") && this.buildTypeFromConfig(e);
    }), this.types.forEach((e) => {
      e instanceof et || e instanceof _n ? e.getFields() : e instanceof Gn && e.getTypes();
    });
  }
  buildTypeFromConfig(e) {
    const n = this.getTypeConfig(e.name), { name: i } = n;
    switch (this.typeConfigs.set(i, n), n.kind) {
      case "Enum":
        this.addType(i, this.buildEnum(n));
        break;
      case "InputObject":
        this.addType(i, this.buildInputObject(n));
        break;
      case "Interface":
        this.addType(i, this.buildInterface(n));
        break;
      case "Scalar":
        this.addType(i, this.buildScalar(n));
        break;
      case "Union":
        this.addType(i, this.buildUnion(n));
        break;
      case "Object":
      case "Query":
      case "Mutation":
      case "Subscription":
        this.addType(i, this.buildObject(n));
        break;
      default:
        Id(n);
    }
  }
  addType(e, n) {
    if (this.types.has(e))
      throw new ie(`reference or name has already been used to create another type (${n.name})`);
    this.types.set(e, n);
  }
  buildOutputTypeParam(e) {
    return e.kind === "List" ? e.nullable ? new Ue(this.buildOutputTypeParam(e.type)) : new ne(new Ue(this.buildOutputTypeParam(e.type))) : e.nullable ? this.getOutputType(e.ref) : new ne(this.getOutputType(e.ref));
  }
  buildInputTypeParam(e) {
    return e.kind === "List" ? e.required ? new ne(new Ue(this.buildInputTypeParam(e.type))) : new Ue(this.buildInputTypeParam(e.type)) : e.required ? new ne(this.getInputType(e.ref)) : this.getInputType(e.ref);
  }
  buildFields(e) {
    const n = {};
    for (const [s, o] of e) {
      this.outputFieldConfigs.has(o) || this.outputFieldConfigs.set(o, this.plugin.onOutputFieldConfig(o));
      const a = this.outputFieldConfigs.get(o);
      if (!a)
        continue;
      const u = {
        ...a
      }, c = /* @__PURE__ */ new Map();
      Object.keys(u.args).forEach((E) => {
        c.set(E, u.args[E]);
      });
      const f = this.buildInputFields(c), g = {};
      Object.keys(u.args).forEach((E) => {
        g[E] = this.inputFieldConfigs.get(u.args[E]);
      }), u.args = g;
      var i;
      const p = this.plugin.wrapResolve((i = u.resolve) !== null && i !== void 0 ? i : lr, u), w = this.plugin.wrapSubscribe(u.subscribe, u);
      var r;
      n[s] = {
        ...u,
        type: this.buildOutputTypeParam(u.type),
        args: f,
        extensions: {
          ...u.extensions,
          pothosResolveWrapped: p !== ((r = u.resolve) !== null && r !== void 0 ? r : lr),
          pothosSubscribeWrapped: w !== u.subscribe,
          pothosOptions: u.pothosOptions,
          pothosConfig: u
        },
        resolve: p === lr ? void 0 : p,
        subscribe: w
      };
    }
    return n;
  }
  buildInputFields(e) {
    const n = {};
    for (const [i, r] of e) {
      this.inputFieldConfigs.has(r) || this.inputFieldConfigs.set(r, this.plugin.onInputFieldConfig(r));
      const s = this.inputFieldConfigs.get(r);
      s && (n[i] = {
        ...s,
        type: this.buildInputTypeParam(s.type),
        extensions: {
          ...s.extensions,
          pothosOptions: s.pothosOptions,
          pothosConfig: s
        }
      });
    }
    return n;
  }
  getInterfaceFields(e) {
    const n = e.getInterfaces().reduce((s, o) => ({
      ...this.getFields(o),
      ...s
    }), {}), i = this.configStore.getFields(e.name, "Interface"), r = this.buildFields(i);
    return {
      ...n,
      ...r
    };
  }
  getObjectFields(e) {
    const n = e.getInterfaces().reduce((r, s) => ({
      ...this.getFields(s),
      ...r
    }), {}), i = this.buildFields(this.configStore.getFields(e.name, "Object"));
    return {
      ...n,
      ...i
    };
  }
  getRootFields(e) {
    return this.buildFields(this.configStore.getFields(e.name, "Object"));
  }
  getFields(e) {
    if (e instanceof et)
      return e.name === "Query" || e.name === "Mutation" || e.name === "Subscription" ? this.getRootFields(e) : this.getObjectFields(e);
    if (e instanceof _n)
      return this.getInterfaceFields(e);
    throw new ie(`Type ${e.name} does not have fields to resolve`);
  }
  getInputFields(e) {
    return this.buildInputFields(this.configStore.getFields(e.name, "InputObject"));
  }
  getType(e) {
    if (e instanceof Nu)
      return e.type;
    const n = this.configStore.getTypeConfig(e), i = this.types.get(n.name);
    return i || (this.buildTypeFromConfig(n), this.types.get(n.name));
  }
  getOutputType(e) {
    const n = this.getType(e);
    if (n instanceof Ni)
      throw new ie(`Expected ${String(e)} to be an output type but it was defined as an InputObject`);
    return n;
  }
  getInputType(e) {
    const n = this.getType(e);
    if (!n)
      throw new ie(`Missing implementation of for type ${String(e)}`);
    if (n instanceof et)
      throw new ie(`Expected ${n.name} to be an input type but it was defined as a GraphQLObjectType`);
    if (n instanceof _n)
      throw new ie(`Expected ${n.name} to be an input type but it was defined as a GraphQLInterfaceType`);
    if (n instanceof Gn)
      throw new ie(`Expected ${String(e)} to be an input type but it was defined as an GraphQLUnionType`);
    return n;
  }
  getTypeOfKind(e, n) {
    const i = this.getType(e);
    switch (n) {
      case "Object":
      case "Query":
      case "Mutation":
      case "Subscription":
        if (i instanceof et)
          return i;
        break;
      case "Interface":
        if (i instanceof _n)
          return i;
        break;
      case "Union":
        if (i instanceof Gn)
          return i;
        break;
      case "Enum":
        if (i instanceof ri)
          return i;
        break;
      case "Scalar":
        if (i instanceof Ut)
          return i;
        break;
      case "InputObject":
        if (i instanceof Ut)
          return i;
        break;
    }
    throw new ie(`Expected ${String(e)} to be of type ${n}`);
  }
  buildObject(e) {
    var n;
    const i = new et({
      ...e,
      extensions: {
        ...e.extensions,
        pothosOptions: e.pothosOptions,
        pothosConfig: e
      },
      fields: () => this.getFields(i),
      isTypeOf: e.kind === "Object" ? this.plugin.wrapIsTypeOf((n = e.isTypeOf) !== null && n !== void 0 ? n : void 0, e) : void 0,
      interfaces: e.kind === "Object" ? () => e.interfaces.map((r) => this.getTypeOfKind(r, "Interface")) : void 0
    });
    return i;
  }
  buildInterface(e) {
    const n = (r, s, o) => {
      const a = Nd(r);
      if (a)
        return typeof a == "string" ? a : this.getTypeConfig(a).name;
      var u;
      return ((u = e.resolveType) !== null && u !== void 0 ? u : Vo)(r, s, o, i);
    }, i = new _n({
      ...e,
      extensions: {
        ...e.extensions,
        pothosOptions: e.pothosOptions,
        pothosConfig: e
      },
      interfaces: () => e.interfaces.map((r) => this.getTypeOfKind(r, "Interface")),
      fields: () => this.getFields(i),
      resolveType: this.plugin.wrapResolveType(n, e)
    });
    return i;
  }
  buildUnion(e) {
    const n = (i, r, s, o) => {
      if (typeof i == "object" && i !== null && Or in i) {
        const c = i[Or];
        return typeof c == "string" ? c : this.getTypeConfig(c).name;
      }
      if (!e.resolveType)
        return Vo(i, r, s, o);
      const a = e.resolveType(i, r, s, o), u = (c) => {
        if (typeof c == "string" || !c)
          return c;
        if (c instanceof et)
          return c.name;
        try {
          return this.configStore.getTypeConfig(c).name;
        } catch {
        }
        return c;
      };
      return Od(a) ? a.then(u) : u(a);
    };
    return new Gn({
      ...e,
      extensions: {
        ...e.extensions,
        pothosOptions: e.pothosOptions,
        pothosConfig: e
      },
      types: () => e.types.map((i) => this.getTypeOfKind(i, "Object")),
      resolveType: this.plugin.wrapResolveType(n, e)
    });
  }
  buildInputObject(e) {
    const n = new Ni({
      ...e,
      extensions: {
        ...e.extensions,
        pothosOptions: e.pothosOptions,
        pothosConfig: e
      },
      fields: () => this.getInputFields(n)
    });
    return n;
  }
  buildScalar(e) {
    return e.name === "ID" ? Mi : e.name === "Int" ? ji : e.name === "Float" ? kr : e.name === "Boolean" ? Pe : e.name === "String" ? ue : new Ut({
      ...e,
      extensions: {
        ...e.extensions,
        pothosOptions: e.pothosOptions,
        pothosConfig: e
      }
    });
  }
  buildEnum(e) {
    const n = {};
    for (const i of Object.keys(e.values)) {
      const r = e.values[i];
      this.enumValueConfigs.has(r) || this.enumValueConfigs.set(r, this.plugin.onEnumValueConfig(r)), this.enumValueConfigs.get(r) && (n[i] = this.enumValueConfigs.get(r));
    }
    return new ri({
      ...e,
      values: n,
      extensions: {
        ...e.extensions,
        pothosOptions: e.pothosOptions,
        pothosConfig: e
      }
    });
  }
  constructor(e, n) {
    ht(this, "types", /* @__PURE__ */ new Map()), ht(this, "builder", void 0), ht(this, "plugin", void 0), ht(this, "options", void 0), ht(this, "configStore", void 0), ht(this, "pluginMap", void 0), ht(this, "pluginList", void 0), ht(this, "implementers", /* @__PURE__ */ new Map()), ht(this, "typeConfigs", /* @__PURE__ */ new Map()), ht(this, "enumValueConfigs", /* @__PURE__ */ new Map()), ht(this, "outputFieldConfigs", /* @__PURE__ */ new Map()), ht(this, "inputFieldConfigs", /* @__PURE__ */ new Map()), this.builder = e, this.configStore = e.configStore, this.options = n;
    const i = {};
    var r;
    this.pluginList = ((r = e.options.plugins) !== null && r !== void 0 ? r : []).map((s) => {
      const o = this.builder.constructor.plugins[s];
      if (!o)
        throw new Bi(`No plugin named ${s} was registered`);
      return i[s] = new o(this, s), i[s];
    }), this.pluginMap = i, this.plugin = new hd(this, this.pluginList);
  }
}
function ts(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
let xd = Gi;
class Fd extends Ne {
  constructor(e, n) {
    super(e, n), ts(this, "kind", void 0), ts(this, "$inferInput", void 0), ts(this, xd, void 0), this.kind = e;
  }
}
function Ji(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
let Rd = $n, Ld = ui;
class Cd extends Ne {
  constructor(e, n) {
    super(e, n), Ji(this, "kind", void 0), Ji(this, "$inferType", void 0), Ji(this, Rd, void 0), Ji(this, Ld, void 0), this.kind = e;
  }
}
function Et(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
class kd {
  hasConfig(e) {
    return typeof e == "string" ? this.typeConfigs.has(e) : this.refsToName.has(e);
  }
  addUnionTypes(e, n) {
    this.onPrepare(() => {
      const i = this.getTypeConfig(e);
      if (i.graphqlKind !== "Union")
        throw new ie(`Can not add types to ${e} because it is a ${i.kind}`);
      i.types = [
        ...i.types,
        ...typeof n == "function" ? n() : n
      ];
    });
  }
  addInterfaces(e, n) {
    this.onPrepare(() => {
      const i = this.getTypeConfig(e);
      if (i.graphqlKind !== "Object" && i.graphqlKind !== "Interface" || i.kind === "Query" || i.kind === "Mutation" || i.kind === "Subscription")
        throw new ie(`Can not add interfaces to ${e} because it is a ${i.kind}`);
      i.interfaces = [
        ...i.interfaces,
        ...typeof n == "function" ? n() : n
      ];
    });
  }
  addFieldRef(e, n, i, r) {
    if (this.fieldRefs.has(e))
      throw new ie(`FieldRef ${String(e)} has already been added to config store`);
    const s = bs(n), o = Object.keys(i).map((u) => {
      const c = i[u];
      return c.fieldName = u, c.argFor = e, c;
    }), a = () => {
      for (const u of o)
        if (this.pendingFields.has(u)) {
          const c = this.pendingFields.get(u);
          this.pendingFields.set(e, c), this.onTypeConfig(c, a);
          return;
        }
      this.pendingFields.delete(e), this.fieldRefs.set(e, r);
    };
    this.hasConfig(s) || s instanceof Ne || this.scalarsToRefs.has(s) ? a() : (this.pendingFields.set(e, s), this.onTypeConfig(s, () => {
      a();
    }));
  }
  createFieldConfig(e, n, i, r, s) {
    if (!this.fieldRefs.has(e))
      throw this.pendingFields.has(e) ? new ie(`Missing implementation for ${this.describeRef(this.pendingFields.get(e))} used in field ${n} of ${i.name}`) : new ie(`Missing definition for ${String(e)}`);
    const o = this.fieldRefs.get(e)(n, r, i);
    if (s && o.graphqlKind !== s)
      throw new Bi(`Expected ref for field named ${n} to resolve to a ${s} type, but got ${o.graphqlKind}`);
    return o;
  }
  associateRefWithName(e, n) {
    if (!this.typeConfigs.has(n))
      throw new ie(`${n} has not been implemented yet`);
    if (this.refsToName.set(e, n), this.pendingRefResolutions.has(e)) {
      const i = this.pendingRefResolutions.get(e);
      this.pendingRefResolutions.delete(e), i.forEach((r) => void r(this.typeConfigs.get(n)));
    }
  }
  addTypeConfig(e, n) {
    const { name: i } = e;
    if (this.typeConfigs.has(i))
      throw new ie(`Duplicate typename: Another type with name ${i} already exists.`);
    if (this.typeConfigs.set(e.name, e), n && this.associateRefWithName(n, i), this.pendingRefResolutions.has(i)) {
      const r = this.pendingRefResolutions.get(i);
      this.pendingRefResolutions.delete(i), r.forEach((s) => void s(e));
    }
  }
  getTypeConfig(e, n) {
    let i;
    if (typeof e == "string") {
      if (!this.typeConfigs.has(e))
        throw new ie(`Type ${String(e)} has not been implemented`);
      i = this.typeConfigs.get(e);
    } else if (this.refsToName.has(e))
      i = this.typeConfigs.get(this.refsToName.get(e));
    else throw e instanceof Pr || e instanceof $r ? new ie(`Expected a base type but got a ${e.kind} of ${String(e.listType)}`) : new ie(`Ref ${String(e)} has not been implemented`);
    if (n && i.graphqlKind !== n)
      throw new ie(`Expected ref to resolve to a ${n} type, but got ${i.kind}`);
    return i;
  }
  getInputTypeRef(e) {
    if (e instanceof Ne) {
      if (e.kind !== "InputObject" && e.kind !== "Enum" && e.kind !== "Scalar")
        throw new ie(`Expected ${e.name} to be an input type but got ${e.kind}`);
      return e;
    }
    if (typeof e == "string") {
      if (this.scalarsToRefs.has(e))
        return this.scalarsToRefs.get(e);
      if (this.typeConfigs.has(e)) {
        const n = this.typeConfigs.get(e);
        if (n.graphqlKind !== "InputObject" && n.graphqlKind !== "Enum" && n.graphqlKind !== "Scalar")
          throw new ie(`Expected ${n.name} to be an input type but got ${n.graphqlKind}`);
        const i = new Fd(n.graphqlKind, n.name);
        return this.refsToName.set(i, n.name), i;
      }
    }
    return e;
  }
  getOutputTypeRef(e) {
    if (e instanceof Ne) {
      if (e.kind === "InputObject" || e.kind === "InputList")
        throw new ie(`Expected ${e.name} to be an output type but got ${e.kind}`);
      if (e.kind === "List")
        throw new ie(`Expected ${e.name} to be a base type but got a ${e.kind}`);
      return e;
    }
    if (typeof e == "string") {
      if (this.scalarsToRefs.has(e))
        return this.scalarsToRefs.get(e);
      if (this.typeConfigs.has(e)) {
        const n = this.typeConfigs.get(e);
        if (n.graphqlKind === "InputObject")
          throw new ie(`Expected ${n.name} to be an output type but got ${n.graphqlKind}`);
        const i = new Cd(n.graphqlKind, n.name);
        return this.refsToName.set(i, n.name), i;
      }
    }
    return e;
  }
  onTypeConfig(e, n) {
    if (!e)
      throw new ie(`${String(e)} is not a valid type ref`);
    if (this.refsToName.has(e))
      n(this.getTypeConfig(e));
    else if (typeof e == "string" && this.typeConfigs.has(e))
      n(this.typeConfigs.get(e));
    else if (this.pending)
      this.pendingRefResolutions.has(e) ? this.pendingRefResolutions.get(e).push(n) : this.pendingRefResolutions.set(e, [
        n
      ]);
    else throw new ie(`Ref ${String(e)} has not been implemented`);
  }
  onFieldUse(e, n) {
    this.fieldRefCallbacks.has(e) || this.fieldRefCallbacks.set(e, []), this.fieldRefCallbacks.get(e).push(n), this.fieldRefsToConfigs.has(e) && this.fieldRefsToConfigs.get(e).forEach((i) => void n(i));
  }
  getFields(e, n) {
    const i = this.getTypeConfig(e);
    this.fields.has(e) || this.fields.set(e, /* @__PURE__ */ new Map());
    const r = this.fields.get(e);
    if (n && i.graphqlKind !== n)
      throw new ie(`Expected ${e} to be a ${n} type, but found ${i.graphqlKind}`);
    return r;
  }
  prepareForBuild() {
    this.pending = !1;
    const { pendingActions: e } = this;
    if (this.pendingActions = [], e.forEach((n) => void n()), this.pendingRefResolutions.size > 0)
      throw new ie(`Missing implementations for some references (${[
        ...this.pendingRefResolutions.keys()
      ].map((n) => this.describeRef(n)).join(", ")}).`);
  }
  onPrepare(e) {
    this.pending ? this.pendingActions.push(e) : e();
  }
  addFields(e, n) {
    this.onPrepare(() => void this.onTypeConfig(e, (i) => {
      this.buildFields(e, typeof n == "function" ? n() : n);
    }));
  }
  getImplementers(e) {
    const n = this.getTypeConfig(e, "Interface");
    return [
      ...this.typeConfigs.values()
    ].filter((r) => r.kind === "Object" && r.interfaces.find((s) => this.getTypeConfig(s).name === n.name));
  }
  describeRef(e) {
    var n;
    if (typeof e == "string")
      return e;
    if (e.toString !== {}.toString)
      return String(e);
    const i = (n = [
      ...this.pendingFields.entries()
    ].find(([r, s]) => s === e)) === null || n === void 0 ? void 0 : n[0];
    return i ? `<unnamed ref or enum: used by ${i}>` : "<unnamed ref or enum>";
  }
  buildFields(e, n) {
    Object.keys(n).forEach((i) => {
      const r = n[i];
      r.fieldName = i, this.pendingFields.has(r) ? this.onTypeConfig(this.pendingFields.get(r), () => {
        this.buildField(e, r, i);
      }) : this.buildField(e, r, i);
    });
  }
  buildField(e, n, i) {
    const r = this.getTypeConfig(e), s = this.createFieldConfig(n, i, r), o = this.getFields(r.name);
    if (o.has(i))
      throw new ie(`Duplicate field definition for field ${i} in ${r.name}`);
    if (s.graphqlKind !== r.graphqlKind)
      throw new ie(`${r.name}.${i} was defined as a ${s.graphqlKind} field but ${r.name} is a ${r.graphqlKind}`);
    o.set(i, s), this.fieldRefsToConfigs.has(n) || this.fieldRefsToConfigs.set(n, []), this.fieldRefsToConfigs.get(n).push(s), this.fieldRefCallbacks.has(n) && this.fieldRefCallbacks.get(n).forEach((a) => void a(s));
  }
  constructor() {
    Et(this, "typeConfigs", /* @__PURE__ */ new Map()), Et(this, "fieldRefs", /* @__PURE__ */ new WeakMap()), Et(this, "fields", /* @__PURE__ */ new Map()), Et(this, "pendingActions", []), Et(this, "refsToName", /* @__PURE__ */ new Map()), Et(this, "scalarsToRefs", /* @__PURE__ */ new Map()), Et(this, "fieldRefsToConfigs", /* @__PURE__ */ new Map()), Et(this, "pendingFields", /* @__PURE__ */ new Map()), Et(this, "pendingRefResolutions", /* @__PURE__ */ new Map()), Et(this, "fieldRefCallbacks", /* @__PURE__ */ new Map()), Et(this, "pending", !0), [
      Mi,
      ji,
      kr,
      ue,
      Pe
    ].forEach((n) => {
      const i = new Nu(n);
      this.scalarsToRefs.set(n.name, i), this.refsToName.set(i, n.name);
    });
  }
}
function Un(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
let Dd = pd;
class $d {
  toString() {
    var e;
    if (this.kind !== "Arg")
      return this.fieldName ? `${this.parentTypename}.${this.fieldName}` : this.parentTypename;
    var n;
    const i = (n = (e = this.argFor) === null || e === void 0 ? void 0 : e.fieldName) !== null && n !== void 0 ? n : "[unnamed field]";
    var r;
    const s = (r = this.fieldName) !== null && r !== void 0 ? r : "[unnamed argument]";
    return `${this.parentTypename}.${i}(${s})`;
  }
  constructor(e, n) {
    Un(this, "kind", void 0), Un(this, "parentTypename", void 0), Un(this, "fieldName", void 0), Un(this, "argFor", void 0), Un(this, "$inferInput", void 0), Un(this, Dd, void 0), this.kind = e, this.parentTypename = n;
  }
}
function Ze(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
class Es {
  argBuilder() {
    const e = this.field.bind(this), n = Object.keys(Object.getPrototypeOf(this)).filter((i) => typeof this[i] == "function" && Function.prototype[i] === void 0);
    return [
      ...Object.keys(this),
      ...n
    ].forEach((i) => {
      e[i] = typeof this[i] == "function" ? this[i].bind(this) : this[i];
    }), e;
  }
  /**
  * Create in input field or argument for the current type
  * @param {PothosSchemaTypes.InputFieldOptions} [options={}] - Options for this field
  */
  field(e) {
    const n = new $d(this.kind, this.typename);
    return this.builder.configStore.addFieldRef(n, e.type, {}, (i, r, s) => {
      var o;
      return {
        name: i,
        parentField: r,
        kind: this.kind,
        graphqlKind: this.kind,
        parentType: s.name,
        type: ys(e.type, this.builder.configStore, (o = e.required) !== null && o !== void 0 ? o : this.builder.defaultInputFieldRequiredness),
        pothosOptions: e,
        description: e.description,
        deprecationReason: e.deprecationReason,
        defaultValue: e.defaultValue,
        extensions: e.extensions
      };
    }), n;
  }
  helper(e) {
    return (...n) => {
      const [i = {}] = n;
      return this.field({
        ...i,
        type: e
      });
    };
  }
  constructor(e, n, i) {
    Ze(this, "builder", void 0), Ze(this, "kind", void 0), Ze(this, "typename", void 0), Ze(this, "boolean", this.helper("Boolean")), Ze(this, "float", this.helper("Float")), Ze(this, "id", this.helper("ID")), Ze(this, "int", this.helper("Int")), Ze(this, "string", this.helper("String")), Ze(this, "booleanList", this.helper([
      "Boolean"
    ])), Ze(this, "floatList", this.helper([
      "Float"
    ])), Ze(this, "idList", this.helper([
      "ID"
    ])), Ze(this, "intList", this.helper([
      "Int"
    ])), Ze(this, "stringList", this.helper([
      "String"
    ])), Ze(this, "listRef", (r, s) => {
      var o;
      return new $r(r, (o = s == null ? void 0 : s.required) !== null && o !== void 0 ? o : !0);
    }), this.builder = e, this.kind = n, this.typename = i;
  }
}
function hi(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
let Pd = gd;
class jd {
  toString() {
    return this.fieldName ? `${this.parentTypename}.${this.fieldName}` : this.parentTypename;
  }
  constructor(e, n) {
    hi(this, "kind", void 0), hi(this, "parentTypename", void 0), hi(this, "fieldName", void 0), hi(this, "$inferType", void 0), hi(this, Pd, void 0), this.kind = e, this.parentTypename = n;
  }
}
function Ki(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
class Md {
  createField(e) {
    const n = new jd(this.kind, this.typename);
    var i;
    return this.builder.configStore.addFieldRef(n, e.type, (i = e.args) !== null && i !== void 0 ? i : {}, (r, s, o) => {
      var a;
      const u = {};
      e.args && Object.keys(e.args).forEach((w) => {
        const E = e.args[w];
        u[w] = this.builder.configStore.createFieldConfig(E, w, o, r, "Arg");
      });
      var c;
      let f = (c = e.resolve) !== null && c !== void 0 ? c : () => {
        throw new ie(`Not implemented: No resolver found for ${this.typename}.${r}`);
      };
      ((a = e.extensions) === null || a === void 0 ? void 0 : a.pothosExposedField) === r && (f = lr);
      const { subscribe: g } = e;
      var p;
      return {
        kind: this.kind,
        graphqlKind: this.graphqlKind,
        parentType: o.name,
        name: r,
        args: u,
        type: ms(e.type, this.builder.configStore, (p = e.nullable) !== null && p !== void 0 ? p : this.builder.defaultFieldNullability),
        pothosOptions: e,
        extensions: {
          pothosOriginalResolve: f,
          pothosOriginalSubscribe: g,
          ...e.extensions
        },
        description: e.description,
        deprecationReason: e.deprecationReason,
        resolve: f,
        subscribe: g
      };
    }), n;
  }
  exposeField(e, { extensions: n, ...i }) {
    return this.createField({
      ...i,
      extensions: {
        pothosExposedField: e,
        ...n
      },
      resolve: (r) => r[e]
    });
  }
  constructor(e, n, i, r) {
    Ki(this, "typename", void 0), Ki(this, "builder", void 0), Ki(this, "kind", void 0), Ki(this, "graphqlKind", void 0), this.typename = e, this.builder = n, this.kind = i, this.graphqlKind = r;
  }
}
function Ud(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
class jr extends Md {
  /**
  * Create a Boolean field
  * @param {PothosSchemaTypes.FieldOptions} options - Options for this field
  */
  boolean(...e) {
    const [n = {}] = e;
    return this.createField({
      resolve: void 0,
      ...n,
      type: "Boolean"
    });
  }
  /**
  * Create a Float field
  * @param {PothosSchemaTypes.FieldOptions} options - Options for this field
  */
  float(...e) {
    const [n = {}] = e;
    return this.createField({
      resolve: void 0,
      ...n,
      type: "Float"
    });
  }
  /**
  * Create a ID field
  * @param {PothosSchemaTypes.FieldOptions} options - Options for this field
  */
  id(...e) {
    const [n = {}] = e;
    return this.createField({
      resolve: void 0,
      ...n,
      type: "ID"
    });
  }
  /**
  * Create a Int field
  * @param {PothosSchemaTypes.FieldOptions} options - Options for this field
  */
  int(...e) {
    const [n = {}] = e;
    return this.createField({
      resolve: void 0,
      ...n,
      type: "Int"
    });
  }
  /**
  * Create a String field
  * @param {PothosSchemaTypes.FieldOptions} options - Options for this field
  */
  string(...e) {
    const [n = {}] = e;
    return this.createField({
      resolve: void 0,
      ...n,
      type: "String"
    });
  }
  /**
  * Create a Boolean list field
  * @param {PothosSchemaTypes.FieldOptions} options - Options for this field
  */
  booleanList(...e) {
    const [n = {}] = e;
    return this.createField({
      resolve: void 0,
      ...n,
      type: [
        "Boolean"
      ]
    });
  }
  /**
  * Create a Float list field
  * @param {PothosSchemaTypes.FieldOptions} options - Options for this field
  */
  floatList(...e) {
    const [n = {}] = e;
    return this.createField({
      resolve: void 0,
      ...n,
      type: [
        "Float"
      ]
    });
  }
  /**
  * Create a ID list field
  * @param {PothosSchemaTypes.FieldOptions} options - Options for this field
  */
  idList(...e) {
    const [n = {}] = e;
    return this.createField({
      resolve: void 0,
      ...n,
      type: [
        "ID"
      ]
    });
  }
  /**
  * Create a Int list field
  * @param {PothosSchemaTypes.FieldOptions} options - Options for this field
  */
  intList(...e) {
    const [n = {}] = e;
    return this.createField({
      resolve: void 0,
      ...n,
      type: [
        "Int"
      ]
    });
  }
  /**
  * Create a String list field
  * @param {PothosSchemaTypes.FieldOptions} options - Options for this field
  */
  stringList(...e) {
    const [n = {}] = e;
    return this.createField({
      resolve: void 0,
      ...n,
      type: [
        "String"
      ]
    });
  }
  /**
  * create a new field for the current type
  * @param {PothosSchemaTypes.FieldOptions} options - options for this field
  */
  field(e) {
    return this.createField(e);
  }
  listRef(e, n) {
    var i;
    return new Pr(e, (i = n == null ? void 0 : n.nullable) !== null && i !== void 0 ? i : !1);
  }
  constructor(...e) {
    super(...e), Ud(this, "arg", new Es(this.builder, "Arg", this.typename).argBuilder());
  }
}
class Au extends jr {
  /**
  * Create a Boolean field from a boolean property on the parent object
  * @param {string} name - the name of the property on the source object (does not need to match the field name).
  * @param {object} [options={}] - Options for this field
  */
  exposeBoolean(e, ...n) {
    const [i = {}] = n;
    return this.exposeField(e, {
      ...i,
      type: "Boolean"
    });
  }
  /**
  * Create a Float field from a numeric property on the parent object
  * @param {string} name - the name of the property on the source object (does not need to match the field name).
  * @param {object} [options={}] - Options for this field
  */
  exposeFloat(e, ...n) {
    const [i = {}] = n;
    return this.exposeField(e, {
      ...i,
      type: "Float"
    });
  }
  /**
  * Create an ID field from a property on the parent object
  * @param {string} name - the name of the property on the source object (does not need to match the field name).
  * @param {object} [options={}] - Options for this field
  */
  exposeID(e, ...n) {
    const [i = {}] = n;
    return this.exposeField(e, {
      ...i,
      type: "ID"
    });
  }
  /**
  * Create an Int field from a numeric property on the parent object
  * @param {string} name - the name of the property on the source object (does not need to match the field name).
  * @param {object} [options={}] - Options for this field
  */
  exposeInt(e, ...n) {
    const [i = {}] = n;
    return this.exposeField(e, {
      ...i,
      type: "Int"
    });
  }
  /**
  * Create a String field from a string property on the parent object
  * @param {string} name - the name of the property on the source object (does not need to match the field name).
  * @param {object} [options={}] - Options for this field
  */
  exposeString(e, ...n) {
    const [i = {}] = n;
    return this.exposeField(e, {
      ...i,
      type: "String"
    });
  }
  /**
  * Create a Boolean list field from a boolean[] property on the parent object
  * @param {string} name - the name of the property on the source object (does not need to match the field name).
  * @param {object} [options={}] - Options for this field
  */
  exposeBooleanList(e, ...n) {
    const [i = {}] = n;
    return this.exposeField(e, {
      ...i,
      type: [
        "Boolean"
      ]
    });
  }
  /**
  * Create a Float list field from a number[] property on the parent object
  * @param {string} name - the name of the property on the source object (does not need to match the field name).
  * @param {object} [options={}] - Options for this field
  */
  exposeFloatList(e, ...n) {
    const [i = {}] = n;
    return this.exposeField(e, {
      ...i,
      type: [
        "Float"
      ]
    });
  }
  /**
  * Create an ID list field from an id[] property on the parent object
  * @param {string} name - the name of the property on the source object (does not need to match the field name).
  * @param {object} [options={}] - Options for this field
  */
  exposeIDList(e, ...n) {
    const [i = {}] = n;
    return this.exposeField(e, {
      ...i,
      type: [
        "ID"
      ]
    });
  }
  /**
  * Create a Int list field from a number[] property on the parent object
  * @param {string} name - the name of the property on the source object (does not need to match the field name).
  * @param {object} [options={}] - Options for this field
  */
  exposeIntList(e, ...n) {
    const [i = {}] = n;
    return this.exposeField(e, {
      ...i,
      type: [
        "Int"
      ]
    });
  }
  /**
  * Create a String list field from a string[] property on the parent object
  * @param {string} name - the name of the property on the source object (does not need to match the field name).
  * @param {object} [options={}] - Options for this field
  */
  exposeStringList(e, ...n) {
    const [i = {}] = n;
    return this.exposeField(e, {
      ...i,
      type: [
        "String"
      ]
    });
  }
  /**
  * Create a field that resolves to a property of the corresponding type on the parent object
  * @param {string} name - the name of the property on the source object (does not need to match the field name).
  * @param {object} [options={}] - Options for this field
  */
  expose(e, ...n) {
    const [i = {}] = n;
    return this.exposeField(e, i);
  }
}
class Xi extends Au {
  constructor(e, n) {
    super(e, n, "Interface", "Interface");
  }
}
class Zi extends jr {
  constructor(e) {
    super("Mutation", e, "Mutation", "Object");
  }
}
class er extends Au {
  constructor(e, n) {
    super(e, n, "Object", "Object");
  }
}
class tr extends jr {
  constructor(e) {
    super("Query", e, "Query", "Object");
  }
}
class nr extends jr {
  constructor(e) {
    super("Subscription", e, "Subscription", "Object");
  }
}
function pi(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
let Vd = $n, Bd = Gi;
class Gd extends Ne {
  constructor(e) {
    super("Enum", e), pi(this, "kind", "Enum"), pi(this, "$inferType", void 0), pi(this, "$inferInput", void 0), pi(this, Vd, void 0), pi(this, Bd, void 0);
  }
}
function cr(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
let qd = Gi;
class xu extends Ne {
  constructor(e) {
    super("InputObject", e), cr(this, "kind", "InputObject"), cr(this, "$inferInput", void 0), cr(this, qd, void 0);
  }
}
class zd extends xu {
  implement(e) {
    return this.builder.inputType(this, e), this;
  }
  constructor(e, n) {
    super(n), cr(this, "builder", void 0), this.builder = e;
  }
}
function wi(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
let Qd = $n, Wd = ui;
class Fu extends Ne {
  constructor(e) {
    super("Interface", e), wi(this, "kind", "Interface"), wi(this, "$inferType", void 0), wi(this, Qd, void 0), wi(this, Wd, void 0);
  }
}
class Yd extends Fu {
  implement(e) {
    return this.builder.interfaceType(this, e);
  }
  constructor(e, n) {
    super(n), wi(this, "builder", void 0), this.builder = e;
  }
}
function Ti(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
let Hd = $n, Jd = ui;
class vs extends Ne {
  constructor(e) {
    super("Object", e), Ti(this, "kind", "Object"), Ti(this, "$inferType", void 0), Ti(this, Hd, void 0), Ti(this, Jd, void 0);
  }
}
class Kd extends vs {
  implement(e) {
    return this.builder.objectType(this, e);
  }
  constructor(e, n) {
    super(n), Ti(this, "builder", void 0), this.builder = e;
  }
}
function ir(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
let Xd = $n, Zd = ui;
class eh extends Ne {
  constructor(e) {
    super("Union", e), ir(this, "kind", "Union"), ir(this, "$inferType", void 0), ir(this, Xd, void 0), ir(this, Zd, void 0);
  }
}
function qn(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
let Hs = class {
  static registerPlugin(e, n) {
    if (!this.allowPluginReRegistration && this.plugins[e])
      throw new Bi(`Received multiple implementations for plugin ${e}`);
    this.plugins[e] = n;
  }
  objectType(e, n, i) {
    Xt(e), Go(n.interfaces);
    var r;
    const s = typeof e == "string" ? e : (r = n.name) !== null && r !== void 0 ? r : e.name;
    if (s === "Query" || s === "Mutation" || s === "Subscription")
      throw new ie(`Invalid object name ${s} use .create${s}Type() instead`);
    const o = e instanceof Ne ? e : new vs(s), a = {
      kind: "Object",
      graphqlKind: "Object",
      name: s,
      interfaces: [],
      description: n.description,
      extensions: n.extensions,
      isTypeOf: n.isTypeOf,
      pothosOptions: n
    };
    return this.configStore.addTypeConfig(a, o), n.interfaces && this.configStore.addInterfaces(s, n.interfaces), typeof e == "function" && this.configStore.associateRefWithName(e, s), i && this.configStore.addFields(o, () => i(new er(s, this))), n.fields && this.configStore.addFields(o, () => {
      const u = new er(s, this);
      return n.fields(u);
    }), o;
  }
  objectFields(e, n) {
    Xt(e), this.configStore.onTypeConfig(e, ({ name: i }) => {
      this.configStore.addFields(e, () => n(new er(i, this)));
    });
  }
  objectField(e, n, i) {
    Xt(e), this.configStore.onTypeConfig(e, ({ name: r }) => {
      this.configStore.addFields(e, () => ({
        [n]: i(new er(r, this))
      }));
    });
  }
  queryType(...e) {
    const [n = {}, i] = e, r = {
      kind: "Query",
      graphqlKind: "Object",
      name: "Query",
      description: n.description,
      pothosOptions: n,
      extensions: n.extensions
    }, s = new vs("Query");
    return this.configStore.addTypeConfig(r, s), i && this.configStore.addFields("Query", () => i(new tr(this))), n.fields && this.configStore.addFields("Query", () => n.fields(new tr(this))), s;
  }
  queryFields(e) {
    this.configStore.addFields("Query", () => e(new tr(this)));
  }
  queryField(e, n) {
    this.configStore.addFields("Query", () => ({
      [e]: n(new tr(this))
    }));
  }
  mutationType(...e) {
    const [n = {}, i] = e, r = {
      kind: "Mutation",
      graphqlKind: "Object",
      name: "Mutation",
      description: n.description,
      pothosOptions: n,
      extensions: n.extensions
    };
    this.configStore.addTypeConfig(r), i && this.configStore.addFields("Mutation", () => i(new Zi(this))), n.fields && this.configStore.addFields("Mutation", () => n.fields(new Zi(this)));
  }
  mutationFields(e) {
    this.configStore.addFields("Mutation", () => e(new Zi(this)));
  }
  mutationField(e, n) {
    this.configStore.addFields("Mutation", () => ({
      [e]: n(new Zi(this))
    }));
  }
  subscriptionType(...e) {
    const [n = {}, i] = e, r = {
      kind: "Subscription",
      graphqlKind: "Object",
      name: "Subscription",
      description: n.description,
      pothosOptions: n,
      extensions: n.extensions
    };
    this.configStore.addTypeConfig(r), i && this.configStore.addFields("Subscription", () => i(new nr(this))), n.fields && this.configStore.addFields("Subscription", () => n.fields(new nr(this)));
  }
  subscriptionFields(e) {
    this.configStore.addFields("Subscription", () => e(new nr(this)));
  }
  subscriptionField(e, n) {
    this.configStore.addFields("Subscription", () => ({
      [e]: n(new nr(this))
    }));
  }
  args(e) {
    return e(new Es(this, "Arg", "[unknown]"));
  }
  interfaceType(e, n, i) {
    Xt(e), Go(n.interfaces);
    var r;
    const s = typeof e == "string" ? e : (r = n.name) !== null && r !== void 0 ? r : e.name, o = e instanceof Ne ? e : new Fu(s), a = o.name, u = {
      kind: "Interface",
      graphqlKind: "Interface",
      name: a,
      interfaces: [],
      description: n.description,
      pothosOptions: n,
      extensions: n.extensions,
      resolveType: n.resolveType
    };
    return this.configStore.addTypeConfig(u, o), n.interfaces && this.configStore.addInterfaces(a, n.interfaces), typeof e == "function" && this.configStore.associateRefWithName(e, s), i && this.configStore.addFields(o, () => i(new Xi(a, this))), n.fields && this.configStore.addFields(o, () => n.fields(new Xi(a, this))), o;
  }
  interfaceFields(e, n) {
    Xt(e), this.configStore.onTypeConfig(e, ({ name: i }) => {
      this.configStore.addFields(e, () => n(new Xi(i, this)));
    });
  }
  interfaceField(e, n, i) {
    Xt(e), this.configStore.onTypeConfig(e, ({ name: r }) => {
      this.configStore.addFields(e, () => ({
        [n]: i(new Xi(r, this))
      }));
    });
  }
  unionType(e, n) {
    const i = new eh(e);
    Array.isArray(n.types) && n.types.forEach((s) => {
      Xt(s);
    });
    const r = {
      kind: "Union",
      graphqlKind: "Union",
      name: e,
      types: [],
      description: n.description,
      resolveType: n.resolveType,
      pothosOptions: n,
      extensions: n.extensions
    };
    return this.configStore.addTypeConfig(r, i), this.configStore.addUnionTypes(e, n.types), i;
  }
  enumType(e, n) {
    Xt(e);
    const i = typeof e == "string" ? e : n.name, r = new Gd(i), s = typeof e == "object" ? _d(
      // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
      e,
      n == null ? void 0 : n.values
    ) : Sd(n.values), o = {
      kind: "Enum",
      graphqlKind: "Enum",
      name: i,
      values: s,
      description: n.description,
      pothosOptions: n,
      extensions: n.extensions
    };
    return this.configStore.addTypeConfig(o, r), typeof e != "string" && this.configStore.associateRefWithName(e, i), r;
  }
  scalarType(e, n) {
    const i = new Ou(e), r = {
      kind: "Scalar",
      graphqlKind: "Scalar",
      name: e,
      description: n.description,
      parseLiteral: n.parseLiteral,
      parseValue: n.parseValue,
      serialize: n.serialize,
      pothosOptions: n,
      extensions: n.extensions
    };
    return this.configStore.addTypeConfig(r, i), i;
  }
  addScalarType(e, n, ...i) {
    const [r = {}] = i, s = n.toConfig();
    return this.scalarType(e, {
      ...s,
      ...r,
      extensions: {
        ...s.extensions,
        ...r.extensions
      }
    });
  }
  inputType(e, n) {
    Xt(e);
    const i = typeof e == "string" ? e : e.name, r = typeof e == "string" ? new xu(i) : e, s = {
      kind: "InputObject",
      graphqlKind: "InputObject",
      name: i,
      isOneOf: n.isOneOf,
      description: n.description,
      pothosOptions: n,
      extensions: n.extensions
    };
    return this.configStore.addTypeConfig(s, r), this.configStore.addFields(r, () => n.fields(new Es(this, "InputObject", i))), r;
  }
  inputRef(e) {
    return new zd(this, e);
  }
  objectRef(e) {
    return new Kd(this, e);
  }
  interfaceRef(e) {
    return new Yd(this, e);
  }
  toSchema(...e) {
    const [n = {}] = e, { directives: i, extensions: r } = n;
    [
      Mi,
      ji,
      kr,
      ue,
      Pe
    ].forEach((f) => {
      this.configStore.hasConfig(f.name) || this.addScalarType(f.name, f);
    });
    const o = new Ad(this, n);
    o.plugin.beforeBuild(), o.buildAll();
    const a = [
      ...o.types.values()
    ], u = new Gs({
      query: o.types.get("Query"),
      mutation: o.types.get("Mutation"),
      subscription: o.types.get("Subscription"),
      extensions: r ?? {},
      directives: i,
      types: a
    }), c = o.plugin.afterBuild(u);
    return n.sortSchema === !1 ? c : ud(c);
  }
  constructor(e) {
    qn(this, "configStore", void 0), qn(this, "options", void 0), qn(this, "defaultFieldNullability", void 0), qn(this, "defaultInputFieldRequiredness", void 0), this.options = e, this.configStore = new kd();
    var n;
    this.defaultFieldNullability = (n = e.defaultFieldNullability) !== null && n !== void 0 ? n : !1;
    var i;
    this.defaultInputFieldRequiredness = (i = e.defaultInputFieldRequiredness) !== null && i !== void 0 ? i : !1;
  }
};
qn(Hs, "plugins", {});
qn(Hs, "allowPluginReRegistration", !1);
const th = Hs;
function Js(t) {
  if (typeof t != "string")
    throw new TypeError("Expected a string");
  return t.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
}
const nh = [
  // German umlauts
  ["ß", "ss"],
  ["ẞ", "Ss"],
  ["ä", "ae"],
  ["Ä", "Ae"],
  ["ö", "oe"],
  ["Ö", "Oe"],
  ["ü", "ue"],
  ["Ü", "Ue"],
  // Latin
  ["À", "A"],
  ["Á", "A"],
  ["Â", "A"],
  ["Ã", "A"],
  ["Ä", "Ae"],
  ["Å", "A"],
  ["Æ", "AE"],
  ["Ç", "C"],
  ["È", "E"],
  ["É", "E"],
  ["Ê", "E"],
  ["Ë", "E"],
  ["Ì", "I"],
  ["Í", "I"],
  ["Î", "I"],
  ["Ï", "I"],
  ["Ð", "D"],
  ["Ñ", "N"],
  ["Ò", "O"],
  ["Ó", "O"],
  ["Ô", "O"],
  ["Õ", "O"],
  ["Ö", "Oe"],
  ["Ő", "O"],
  ["Ø", "O"],
  ["Ù", "U"],
  ["Ú", "U"],
  ["Û", "U"],
  ["Ü", "Ue"],
  ["Ű", "U"],
  ["Ý", "Y"],
  ["Þ", "TH"],
  ["ß", "ss"],
  ["à", "a"],
  ["á", "a"],
  ["â", "a"],
  ["ã", "a"],
  ["ä", "ae"],
  ["å", "a"],
  ["æ", "ae"],
  ["ç", "c"],
  ["è", "e"],
  ["é", "e"],
  ["ê", "e"],
  ["ë", "e"],
  ["ì", "i"],
  ["í", "i"],
  ["î", "i"],
  ["ï", "i"],
  ["ð", "d"],
  ["ñ", "n"],
  ["ò", "o"],
  ["ó", "o"],
  ["ô", "o"],
  ["õ", "o"],
  ["ö", "oe"],
  ["ő", "o"],
  ["ø", "o"],
  ["ù", "u"],
  ["ú", "u"],
  ["û", "u"],
  ["ü", "ue"],
  ["ű", "u"],
  ["ý", "y"],
  ["þ", "th"],
  ["ÿ", "y"],
  ["ẞ", "SS"],
  // Vietnamese
  ["à", "a"],
  ["À", "A"],
  ["á", "a"],
  ["Á", "A"],
  ["â", "a"],
  ["Â", "A"],
  ["ã", "a"],
  ["Ã", "A"],
  ["è", "e"],
  ["È", "E"],
  ["é", "e"],
  ["É", "E"],
  ["ê", "e"],
  ["Ê", "E"],
  ["ì", "i"],
  ["Ì", "I"],
  ["í", "i"],
  ["Í", "I"],
  ["ò", "o"],
  ["Ò", "O"],
  ["ó", "o"],
  ["Ó", "O"],
  ["ô", "o"],
  ["Ô", "O"],
  ["õ", "o"],
  ["Õ", "O"],
  ["ù", "u"],
  ["Ù", "U"],
  ["ú", "u"],
  ["Ú", "U"],
  ["ý", "y"],
  ["Ý", "Y"],
  ["ă", "a"],
  ["Ă", "A"],
  ["Đ", "D"],
  ["đ", "d"],
  ["ĩ", "i"],
  ["Ĩ", "I"],
  ["ũ", "u"],
  ["Ũ", "U"],
  ["ơ", "o"],
  ["Ơ", "O"],
  ["ư", "u"],
  ["Ư", "U"],
  ["ạ", "a"],
  ["Ạ", "A"],
  ["ả", "a"],
  ["Ả", "A"],
  ["ấ", "a"],
  ["Ấ", "A"],
  ["ầ", "a"],
  ["Ầ", "A"],
  ["ẩ", "a"],
  ["Ẩ", "A"],
  ["ẫ", "a"],
  ["Ẫ", "A"],
  ["ậ", "a"],
  ["Ậ", "A"],
  ["ắ", "a"],
  ["Ắ", "A"],
  ["ằ", "a"],
  ["Ằ", "A"],
  ["ẳ", "a"],
  ["Ẳ", "A"],
  ["ẵ", "a"],
  ["Ẵ", "A"],
  ["ặ", "a"],
  ["Ặ", "A"],
  ["ẹ", "e"],
  ["Ẹ", "E"],
  ["ẻ", "e"],
  ["Ẻ", "E"],
  ["ẽ", "e"],
  ["Ẽ", "E"],
  ["ế", "e"],
  ["Ế", "E"],
  ["ề", "e"],
  ["Ề", "E"],
  ["ể", "e"],
  ["Ể", "E"],
  ["ễ", "e"],
  ["Ễ", "E"],
  ["ệ", "e"],
  ["Ệ", "E"],
  ["ỉ", "i"],
  ["Ỉ", "I"],
  ["ị", "i"],
  ["Ị", "I"],
  ["ọ", "o"],
  ["Ọ", "O"],
  ["ỏ", "o"],
  ["Ỏ", "O"],
  ["ố", "o"],
  ["Ố", "O"],
  ["ồ", "o"],
  ["Ồ", "O"],
  ["ổ", "o"],
  ["Ổ", "O"],
  ["ỗ", "o"],
  ["Ỗ", "O"],
  ["ộ", "o"],
  ["Ộ", "O"],
  ["ớ", "o"],
  ["Ớ", "O"],
  ["ờ", "o"],
  ["Ờ", "O"],
  ["ở", "o"],
  ["Ở", "O"],
  ["ỡ", "o"],
  ["Ỡ", "O"],
  ["ợ", "o"],
  ["Ợ", "O"],
  ["ụ", "u"],
  ["Ụ", "U"],
  ["ủ", "u"],
  ["Ủ", "U"],
  ["ứ", "u"],
  ["Ứ", "U"],
  ["ừ", "u"],
  ["Ừ", "U"],
  ["ử", "u"],
  ["Ử", "U"],
  ["ữ", "u"],
  ["Ữ", "U"],
  ["ự", "u"],
  ["Ự", "U"],
  ["ỳ", "y"],
  ["Ỳ", "Y"],
  ["ỵ", "y"],
  ["Ỵ", "Y"],
  ["ỷ", "y"],
  ["Ỷ", "Y"],
  ["ỹ", "y"],
  ["Ỹ", "Y"],
  // Arabic
  ["ء", "e"],
  ["آ", "a"],
  ["أ", "a"],
  ["ؤ", "w"],
  ["إ", "i"],
  ["ئ", "y"],
  ["ا", "a"],
  ["ب", "b"],
  ["ة", "t"],
  ["ت", "t"],
  ["ث", "th"],
  ["ج", "j"],
  ["ح", "h"],
  ["خ", "kh"],
  ["د", "d"],
  ["ذ", "dh"],
  ["ر", "r"],
  ["ز", "z"],
  ["س", "s"],
  ["ش", "sh"],
  ["ص", "s"],
  ["ض", "d"],
  ["ط", "t"],
  ["ظ", "z"],
  ["ع", "e"],
  ["غ", "gh"],
  ["ـ", "_"],
  ["ف", "f"],
  ["ق", "q"],
  ["ك", "k"],
  ["ل", "l"],
  ["م", "m"],
  ["ن", "n"],
  ["ه", "h"],
  ["و", "w"],
  ["ى", "a"],
  ["ي", "y"],
  ["َ‎", "a"],
  ["ُ", "u"],
  ["ِ‎", "i"],
  ["٠", "0"],
  ["١", "1"],
  ["٢", "2"],
  ["٣", "3"],
  ["٤", "4"],
  ["٥", "5"],
  ["٦", "6"],
  ["٧", "7"],
  ["٨", "8"],
  ["٩", "9"],
  // Persian / Farsi
  ["چ", "ch"],
  ["ک", "k"],
  ["گ", "g"],
  ["پ", "p"],
  ["ژ", "zh"],
  ["ی", "y"],
  ["۰", "0"],
  ["۱", "1"],
  ["۲", "2"],
  ["۳", "3"],
  ["۴", "4"],
  ["۵", "5"],
  ["۶", "6"],
  ["۷", "7"],
  ["۸", "8"],
  ["۹", "9"],
  // Pashto
  ["ټ", "p"],
  ["ځ", "z"],
  ["څ", "c"],
  ["ډ", "d"],
  ["ﺫ", "d"],
  ["ﺭ", "r"],
  ["ړ", "r"],
  ["ﺯ", "z"],
  ["ږ", "g"],
  ["ښ", "x"],
  ["ګ", "g"],
  ["ڼ", "n"],
  ["ۀ", "e"],
  ["ې", "e"],
  ["ۍ", "ai"],
  // Urdu
  ["ٹ", "t"],
  ["ڈ", "d"],
  ["ڑ", "r"],
  ["ں", "n"],
  ["ہ", "h"],
  ["ھ", "h"],
  ["ے", "e"],
  // Russian
  ["А", "A"],
  ["а", "a"],
  ["Б", "B"],
  ["б", "b"],
  ["В", "V"],
  ["в", "v"],
  ["Г", "G"],
  ["г", "g"],
  ["Д", "D"],
  ["д", "d"],
  ["ъе", "ye"],
  ["Ъе", "Ye"],
  ["ъЕ", "yE"],
  ["ЪЕ", "YE"],
  ["Е", "E"],
  ["е", "e"],
  ["Ё", "Yo"],
  ["ё", "yo"],
  ["Ж", "Zh"],
  ["ж", "zh"],
  ["З", "Z"],
  ["з", "z"],
  ["И", "I"],
  ["и", "i"],
  ["ый", "iy"],
  ["Ый", "Iy"],
  ["ЫЙ", "IY"],
  ["ыЙ", "iY"],
  ["Й", "Y"],
  ["й", "y"],
  ["К", "K"],
  ["к", "k"],
  ["Л", "L"],
  ["л", "l"],
  ["М", "M"],
  ["м", "m"],
  ["Н", "N"],
  ["н", "n"],
  ["О", "O"],
  ["о", "o"],
  ["П", "P"],
  ["п", "p"],
  ["Р", "R"],
  ["р", "r"],
  ["С", "S"],
  ["с", "s"],
  ["Т", "T"],
  ["т", "t"],
  ["У", "U"],
  ["у", "u"],
  ["Ф", "F"],
  ["ф", "f"],
  ["Х", "Kh"],
  ["х", "kh"],
  ["Ц", "Ts"],
  ["ц", "ts"],
  ["Ч", "Ch"],
  ["ч", "ch"],
  ["Ш", "Sh"],
  ["ш", "sh"],
  ["Щ", "Sch"],
  ["щ", "sch"],
  ["Ъ", ""],
  ["ъ", ""],
  ["Ы", "Y"],
  ["ы", "y"],
  ["Ь", ""],
  ["ь", ""],
  ["Э", "E"],
  ["э", "e"],
  ["Ю", "Yu"],
  ["ю", "yu"],
  ["Я", "Ya"],
  ["я", "ya"],
  // Romanian
  ["ă", "a"],
  ["Ă", "A"],
  ["ș", "s"],
  ["Ș", "S"],
  ["ț", "t"],
  ["Ț", "T"],
  ["ţ", "t"],
  ["Ţ", "T"],
  // Turkish
  ["ş", "s"],
  ["Ş", "S"],
  ["ç", "c"],
  ["Ç", "C"],
  ["ğ", "g"],
  ["Ğ", "G"],
  ["ı", "i"],
  ["İ", "I"],
  // Armenian
  ["ա", "a"],
  ["Ա", "A"],
  ["բ", "b"],
  ["Բ", "B"],
  ["գ", "g"],
  ["Գ", "G"],
  ["դ", "d"],
  ["Դ", "D"],
  ["ե", "ye"],
  ["Ե", "Ye"],
  ["զ", "z"],
  ["Զ", "Z"],
  ["է", "e"],
  ["Է", "E"],
  ["ը", "y"],
  ["Ը", "Y"],
  ["թ", "t"],
  ["Թ", "T"],
  ["ժ", "zh"],
  ["Ժ", "Zh"],
  ["ի", "i"],
  ["Ի", "I"],
  ["լ", "l"],
  ["Լ", "L"],
  ["խ", "kh"],
  ["Խ", "Kh"],
  ["ծ", "ts"],
  ["Ծ", "Ts"],
  ["կ", "k"],
  ["Կ", "K"],
  ["հ", "h"],
  ["Հ", "H"],
  ["ձ", "dz"],
  ["Ձ", "Dz"],
  ["ղ", "gh"],
  ["Ղ", "Gh"],
  ["ճ", "tch"],
  ["Ճ", "Tch"],
  ["մ", "m"],
  ["Մ", "M"],
  ["յ", "y"],
  ["Յ", "Y"],
  ["ն", "n"],
  ["Ն", "N"],
  ["շ", "sh"],
  ["Շ", "Sh"],
  ["ո", "vo"],
  ["Ո", "Vo"],
  ["չ", "ch"],
  ["Չ", "Ch"],
  ["պ", "p"],
  ["Պ", "P"],
  ["ջ", "j"],
  ["Ջ", "J"],
  ["ռ", "r"],
  ["Ռ", "R"],
  ["ս", "s"],
  ["Ս", "S"],
  ["վ", "v"],
  ["Վ", "V"],
  ["տ", "t"],
  ["Տ", "T"],
  ["ր", "r"],
  ["Ր", "R"],
  ["ց", "c"],
  ["Ց", "C"],
  ["ու", "u"],
  ["ՈՒ", "U"],
  ["Ու", "U"],
  ["փ", "p"],
  ["Փ", "P"],
  ["ք", "q"],
  ["Ք", "Q"],
  ["օ", "o"],
  ["Օ", "O"],
  ["ֆ", "f"],
  ["Ֆ", "F"],
  ["և", "yev"],
  // Georgian
  ["ა", "a"],
  ["ბ", "b"],
  ["გ", "g"],
  ["დ", "d"],
  ["ე", "e"],
  ["ვ", "v"],
  ["ზ", "z"],
  ["თ", "t"],
  ["ი", "i"],
  ["კ", "k"],
  ["ლ", "l"],
  ["მ", "m"],
  ["ნ", "n"],
  ["ო", "o"],
  ["პ", "p"],
  ["ჟ", "zh"],
  ["რ", "r"],
  ["ს", "s"],
  ["ტ", "t"],
  ["უ", "u"],
  ["ფ", "ph"],
  ["ქ", "q"],
  ["ღ", "gh"],
  ["ყ", "k"],
  ["შ", "sh"],
  ["ჩ", "ch"],
  ["ც", "ts"],
  ["ძ", "dz"],
  ["წ", "ts"],
  ["ჭ", "tch"],
  ["ხ", "kh"],
  ["ჯ", "j"],
  ["ჰ", "h"],
  // Czech
  ["č", "c"],
  ["ď", "d"],
  ["ě", "e"],
  ["ň", "n"],
  ["ř", "r"],
  ["š", "s"],
  ["ť", "t"],
  ["ů", "u"],
  ["ž", "z"],
  ["Č", "C"],
  ["Ď", "D"],
  ["Ě", "E"],
  ["Ň", "N"],
  ["Ř", "R"],
  ["Š", "S"],
  ["Ť", "T"],
  ["Ů", "U"],
  ["Ž", "Z"],
  // Dhivehi
  ["ހ", "h"],
  ["ށ", "sh"],
  ["ނ", "n"],
  ["ރ", "r"],
  ["ބ", "b"],
  ["ޅ", "lh"],
  ["ކ", "k"],
  ["އ", "a"],
  ["ވ", "v"],
  ["މ", "m"],
  ["ފ", "f"],
  ["ދ", "dh"],
  ["ތ", "th"],
  ["ލ", "l"],
  ["ގ", "g"],
  ["ޏ", "gn"],
  ["ސ", "s"],
  ["ޑ", "d"],
  ["ޒ", "z"],
  ["ޓ", "t"],
  ["ޔ", "y"],
  ["ޕ", "p"],
  ["ޖ", "j"],
  ["ޗ", "ch"],
  ["ޘ", "tt"],
  ["ޙ", "hh"],
  ["ޚ", "kh"],
  ["ޛ", "th"],
  ["ޜ", "z"],
  ["ޝ", "sh"],
  ["ޞ", "s"],
  ["ޟ", "d"],
  ["ޠ", "t"],
  ["ޡ", "z"],
  ["ޢ", "a"],
  ["ޣ", "gh"],
  ["ޤ", "q"],
  ["ޥ", "w"],
  ["ަ", "a"],
  ["ާ", "aa"],
  ["ި", "i"],
  ["ީ", "ee"],
  ["ު", "u"],
  ["ޫ", "oo"],
  ["ެ", "e"],
  ["ޭ", "ey"],
  ["ޮ", "o"],
  ["ޯ", "oa"],
  ["ް", ""],
  // Greek
  ["α", "a"],
  ["β", "v"],
  ["γ", "g"],
  ["δ", "d"],
  ["ε", "e"],
  ["ζ", "z"],
  ["η", "i"],
  ["θ", "th"],
  ["ι", "i"],
  ["κ", "k"],
  ["λ", "l"],
  ["μ", "m"],
  ["ν", "n"],
  ["ξ", "ks"],
  ["ο", "o"],
  ["π", "p"],
  ["ρ", "r"],
  ["σ", "s"],
  ["τ", "t"],
  ["υ", "y"],
  ["φ", "f"],
  ["χ", "x"],
  ["ψ", "ps"],
  ["ω", "o"],
  ["ά", "a"],
  ["έ", "e"],
  ["ί", "i"],
  ["ό", "o"],
  ["ύ", "y"],
  ["ή", "i"],
  ["ώ", "o"],
  ["ς", "s"],
  ["ϊ", "i"],
  ["ΰ", "y"],
  ["ϋ", "y"],
  ["ΐ", "i"],
  ["Α", "A"],
  ["Β", "B"],
  ["Γ", "G"],
  ["Δ", "D"],
  ["Ε", "E"],
  ["Ζ", "Z"],
  ["Η", "I"],
  ["Θ", "TH"],
  ["Ι", "I"],
  ["Κ", "K"],
  ["Λ", "L"],
  ["Μ", "M"],
  ["Ν", "N"],
  ["Ξ", "KS"],
  ["Ο", "O"],
  ["Π", "P"],
  ["Ρ", "R"],
  ["Σ", "S"],
  ["Τ", "T"],
  ["Υ", "Y"],
  ["Φ", "F"],
  ["Χ", "X"],
  ["Ψ", "PS"],
  ["Ω", "O"],
  ["Ά", "A"],
  ["Έ", "E"],
  ["Ί", "I"],
  ["Ό", "O"],
  ["Ύ", "Y"],
  ["Ή", "I"],
  ["Ώ", "O"],
  ["Ϊ", "I"],
  ["Ϋ", "Y"],
  // Disabled as it conflicts with German and Latin.
  // Hungarian
  // ['ä', 'a'],
  // ['Ä', 'A'],
  // ['ö', 'o'],
  // ['Ö', 'O'],
  // ['ü', 'u'],
  // ['Ü', 'U'],
  // ['ű', 'u'],
  // ['Ű', 'U'],
  // Latvian
  ["ā", "a"],
  ["ē", "e"],
  ["ģ", "g"],
  ["ī", "i"],
  ["ķ", "k"],
  ["ļ", "l"],
  ["ņ", "n"],
  ["ū", "u"],
  ["Ā", "A"],
  ["Ē", "E"],
  ["Ģ", "G"],
  ["Ī", "I"],
  ["Ķ", "K"],
  ["Ļ", "L"],
  ["Ņ", "N"],
  ["Ū", "U"],
  ["č", "c"],
  ["š", "s"],
  ["ž", "z"],
  ["Č", "C"],
  ["Š", "S"],
  ["Ž", "Z"],
  // Lithuanian
  ["ą", "a"],
  ["č", "c"],
  ["ę", "e"],
  ["ė", "e"],
  ["į", "i"],
  ["š", "s"],
  ["ų", "u"],
  ["ū", "u"],
  ["ž", "z"],
  ["Ą", "A"],
  ["Č", "C"],
  ["Ę", "E"],
  ["Ė", "E"],
  ["Į", "I"],
  ["Š", "S"],
  ["Ų", "U"],
  ["Ū", "U"],
  // Macedonian
  ["Ќ", "Kj"],
  ["ќ", "kj"],
  ["Љ", "Lj"],
  ["љ", "lj"],
  ["Њ", "Nj"],
  ["њ", "nj"],
  ["Тс", "Ts"],
  ["тс", "ts"],
  // Polish
  ["ą", "a"],
  ["ć", "c"],
  ["ę", "e"],
  ["ł", "l"],
  ["ń", "n"],
  ["ś", "s"],
  ["ź", "z"],
  ["ż", "z"],
  ["Ą", "A"],
  ["Ć", "C"],
  ["Ę", "E"],
  ["Ł", "L"],
  ["Ń", "N"],
  ["Ś", "S"],
  ["Ź", "Z"],
  ["Ż", "Z"],
  // Disabled as it conflicts with Vietnamese.
  // Serbian
  // ['љ', 'lj'],
  // ['њ', 'nj'],
  // ['Љ', 'Lj'],
  // ['Њ', 'Nj'],
  // ['đ', 'dj'],
  // ['Đ', 'Dj'],
  // ['ђ', 'dj'],
  // ['ј', 'j'],
  // ['ћ', 'c'],
  // ['џ', 'dz'],
  // ['Ђ', 'Dj'],
  // ['Ј', 'j'],
  // ['Ћ', 'C'],
  // ['Џ', 'Dz'],
  // Disabled as it conflicts with German and Latin.
  // Slovak
  // ['ä', 'a'],
  // ['Ä', 'A'],
  // ['ľ', 'l'],
  // ['ĺ', 'l'],
  // ['ŕ', 'r'],
  // ['Ľ', 'L'],
  // ['Ĺ', 'L'],
  // ['Ŕ', 'R'],
  // Disabled as it conflicts with German and Latin.
  // Swedish
  // ['å', 'o'],
  // ['Å', 'o'],
  // ['ä', 'a'],
  // ['Ä', 'A'],
  // ['ë', 'e'],
  // ['Ë', 'E'],
  // ['ö', 'o'],
  // ['Ö', 'O'],
  // Ukrainian
  ["Є", "Ye"],
  ["І", "I"],
  ["Ї", "Yi"],
  ["Ґ", "G"],
  ["є", "ye"],
  ["і", "i"],
  ["ї", "yi"],
  ["ґ", "g"],
  // Dutch
  ["Ĳ", "IJ"],
  ["ĳ", "ij"],
  // Danish
  // ['Æ', 'Ae'],
  // ['Ø', 'Oe'],
  // ['Å', 'Aa'],
  // ['æ', 'ae'],
  // ['ø', 'oe'],
  // ['å', 'aa']
  // Currencies
  ["¢", "c"],
  ["¥", "Y"],
  ["߿", "b"],
  ["৳", "t"],
  ["૱", "Bo"],
  ["฿", "B"],
  ["₠", "CE"],
  ["₡", "C"],
  ["₢", "Cr"],
  ["₣", "F"],
  ["₥", "m"],
  ["₦", "N"],
  ["₧", "Pt"],
  ["₨", "Rs"],
  ["₩", "W"],
  ["₫", "s"],
  ["€", "E"],
  ["₭", "K"],
  ["₮", "T"],
  ["₯", "Dp"],
  ["₰", "S"],
  ["₱", "P"],
  ["₲", "G"],
  ["₳", "A"],
  ["₴", "S"],
  ["₵", "C"],
  ["₶", "tt"],
  ["₷", "S"],
  ["₸", "T"],
  ["₹", "R"],
  ["₺", "L"],
  ["₽", "P"],
  ["₿", "B"],
  ["﹩", "$"],
  ["￠", "c"],
  ["￥", "Y"],
  ["￦", "W"],
  // Latin
  ["𝐀", "A"],
  ["𝐁", "B"],
  ["𝐂", "C"],
  ["𝐃", "D"],
  ["𝐄", "E"],
  ["𝐅", "F"],
  ["𝐆", "G"],
  ["𝐇", "H"],
  ["𝐈", "I"],
  ["𝐉", "J"],
  ["𝐊", "K"],
  ["𝐋", "L"],
  ["𝐌", "M"],
  ["𝐍", "N"],
  ["𝐎", "O"],
  ["𝐏", "P"],
  ["𝐐", "Q"],
  ["𝐑", "R"],
  ["𝐒", "S"],
  ["𝐓", "T"],
  ["𝐔", "U"],
  ["𝐕", "V"],
  ["𝐖", "W"],
  ["𝐗", "X"],
  ["𝐘", "Y"],
  ["𝐙", "Z"],
  ["𝐚", "a"],
  ["𝐛", "b"],
  ["𝐜", "c"],
  ["𝐝", "d"],
  ["𝐞", "e"],
  ["𝐟", "f"],
  ["𝐠", "g"],
  ["𝐡", "h"],
  ["𝐢", "i"],
  ["𝐣", "j"],
  ["𝐤", "k"],
  ["𝐥", "l"],
  ["𝐦", "m"],
  ["𝐧", "n"],
  ["𝐨", "o"],
  ["𝐩", "p"],
  ["𝐪", "q"],
  ["𝐫", "r"],
  ["𝐬", "s"],
  ["𝐭", "t"],
  ["𝐮", "u"],
  ["𝐯", "v"],
  ["𝐰", "w"],
  ["𝐱", "x"],
  ["𝐲", "y"],
  ["𝐳", "z"],
  ["𝐴", "A"],
  ["𝐵", "B"],
  ["𝐶", "C"],
  ["𝐷", "D"],
  ["𝐸", "E"],
  ["𝐹", "F"],
  ["𝐺", "G"],
  ["𝐻", "H"],
  ["𝐼", "I"],
  ["𝐽", "J"],
  ["𝐾", "K"],
  ["𝐿", "L"],
  ["𝑀", "M"],
  ["𝑁", "N"],
  ["𝑂", "O"],
  ["𝑃", "P"],
  ["𝑄", "Q"],
  ["𝑅", "R"],
  ["𝑆", "S"],
  ["𝑇", "T"],
  ["𝑈", "U"],
  ["𝑉", "V"],
  ["𝑊", "W"],
  ["𝑋", "X"],
  ["𝑌", "Y"],
  ["𝑍", "Z"],
  ["𝑎", "a"],
  ["𝑏", "b"],
  ["𝑐", "c"],
  ["𝑑", "d"],
  ["𝑒", "e"],
  ["𝑓", "f"],
  ["𝑔", "g"],
  ["𝑖", "i"],
  ["𝑗", "j"],
  ["𝑘", "k"],
  ["𝑙", "l"],
  ["𝑚", "m"],
  ["𝑛", "n"],
  ["𝑜", "o"],
  ["𝑝", "p"],
  ["𝑞", "q"],
  ["𝑟", "r"],
  ["𝑠", "s"],
  ["𝑡", "t"],
  ["𝑢", "u"],
  ["𝑣", "v"],
  ["𝑤", "w"],
  ["𝑥", "x"],
  ["𝑦", "y"],
  ["𝑧", "z"],
  ["𝑨", "A"],
  ["𝑩", "B"],
  ["𝑪", "C"],
  ["𝑫", "D"],
  ["𝑬", "E"],
  ["𝑭", "F"],
  ["𝑮", "G"],
  ["𝑯", "H"],
  ["𝑰", "I"],
  ["𝑱", "J"],
  ["𝑲", "K"],
  ["𝑳", "L"],
  ["𝑴", "M"],
  ["𝑵", "N"],
  ["𝑶", "O"],
  ["𝑷", "P"],
  ["𝑸", "Q"],
  ["𝑹", "R"],
  ["𝑺", "S"],
  ["𝑻", "T"],
  ["𝑼", "U"],
  ["𝑽", "V"],
  ["𝑾", "W"],
  ["𝑿", "X"],
  ["𝒀", "Y"],
  ["𝒁", "Z"],
  ["𝒂", "a"],
  ["𝒃", "b"],
  ["𝒄", "c"],
  ["𝒅", "d"],
  ["𝒆", "e"],
  ["𝒇", "f"],
  ["𝒈", "g"],
  ["𝒉", "h"],
  ["𝒊", "i"],
  ["𝒋", "j"],
  ["𝒌", "k"],
  ["𝒍", "l"],
  ["𝒎", "m"],
  ["𝒏", "n"],
  ["𝒐", "o"],
  ["𝒑", "p"],
  ["𝒒", "q"],
  ["𝒓", "r"],
  ["𝒔", "s"],
  ["𝒕", "t"],
  ["𝒖", "u"],
  ["𝒗", "v"],
  ["𝒘", "w"],
  ["𝒙", "x"],
  ["𝒚", "y"],
  ["𝒛", "z"],
  ["𝒜", "A"],
  ["𝒞", "C"],
  ["𝒟", "D"],
  ["𝒢", "g"],
  ["𝒥", "J"],
  ["𝒦", "K"],
  ["𝒩", "N"],
  ["𝒪", "O"],
  ["𝒫", "P"],
  ["𝒬", "Q"],
  ["𝒮", "S"],
  ["𝒯", "T"],
  ["𝒰", "U"],
  ["𝒱", "V"],
  ["𝒲", "W"],
  ["𝒳", "X"],
  ["𝒴", "Y"],
  ["𝒵", "Z"],
  ["𝒶", "a"],
  ["𝒷", "b"],
  ["𝒸", "c"],
  ["𝒹", "d"],
  ["𝒻", "f"],
  ["𝒽", "h"],
  ["𝒾", "i"],
  ["𝒿", "j"],
  ["𝓀", "h"],
  ["𝓁", "l"],
  ["𝓂", "m"],
  ["𝓃", "n"],
  ["𝓅", "p"],
  ["𝓆", "q"],
  ["𝓇", "r"],
  ["𝓈", "s"],
  ["𝓉", "t"],
  ["𝓊", "u"],
  ["𝓋", "v"],
  ["𝓌", "w"],
  ["𝓍", "x"],
  ["𝓎", "y"],
  ["𝓏", "z"],
  ["𝓐", "A"],
  ["𝓑", "B"],
  ["𝓒", "C"],
  ["𝓓", "D"],
  ["𝓔", "E"],
  ["𝓕", "F"],
  ["𝓖", "G"],
  ["𝓗", "H"],
  ["𝓘", "I"],
  ["𝓙", "J"],
  ["𝓚", "K"],
  ["𝓛", "L"],
  ["𝓜", "M"],
  ["𝓝", "N"],
  ["𝓞", "O"],
  ["𝓟", "P"],
  ["𝓠", "Q"],
  ["𝓡", "R"],
  ["𝓢", "S"],
  ["𝓣", "T"],
  ["𝓤", "U"],
  ["𝓥", "V"],
  ["𝓦", "W"],
  ["𝓧", "X"],
  ["𝓨", "Y"],
  ["𝓩", "Z"],
  ["𝓪", "a"],
  ["𝓫", "b"],
  ["𝓬", "c"],
  ["𝓭", "d"],
  ["𝓮", "e"],
  ["𝓯", "f"],
  ["𝓰", "g"],
  ["𝓱", "h"],
  ["𝓲", "i"],
  ["𝓳", "j"],
  ["𝓴", "k"],
  ["𝓵", "l"],
  ["𝓶", "m"],
  ["𝓷", "n"],
  ["𝓸", "o"],
  ["𝓹", "p"],
  ["𝓺", "q"],
  ["𝓻", "r"],
  ["𝓼", "s"],
  ["𝓽", "t"],
  ["𝓾", "u"],
  ["𝓿", "v"],
  ["𝔀", "w"],
  ["𝔁", "x"],
  ["𝔂", "y"],
  ["𝔃", "z"],
  ["𝔄", "A"],
  ["𝔅", "B"],
  ["𝔇", "D"],
  ["𝔈", "E"],
  ["𝔉", "F"],
  ["𝔊", "G"],
  ["𝔍", "J"],
  ["𝔎", "K"],
  ["𝔏", "L"],
  ["𝔐", "M"],
  ["𝔑", "N"],
  ["𝔒", "O"],
  ["𝔓", "P"],
  ["𝔔", "Q"],
  ["𝔖", "S"],
  ["𝔗", "T"],
  ["𝔘", "U"],
  ["𝔙", "V"],
  ["𝔚", "W"],
  ["𝔛", "X"],
  ["𝔜", "Y"],
  ["𝔞", "a"],
  ["𝔟", "b"],
  ["𝔠", "c"],
  ["𝔡", "d"],
  ["𝔢", "e"],
  ["𝔣", "f"],
  ["𝔤", "g"],
  ["𝔥", "h"],
  ["𝔦", "i"],
  ["𝔧", "j"],
  ["𝔨", "k"],
  ["𝔩", "l"],
  ["𝔪", "m"],
  ["𝔫", "n"],
  ["𝔬", "o"],
  ["𝔭", "p"],
  ["𝔮", "q"],
  ["𝔯", "r"],
  ["𝔰", "s"],
  ["𝔱", "t"],
  ["𝔲", "u"],
  ["𝔳", "v"],
  ["𝔴", "w"],
  ["𝔵", "x"],
  ["𝔶", "y"],
  ["𝔷", "z"],
  ["𝔸", "A"],
  ["𝔹", "B"],
  ["𝔻", "D"],
  ["𝔼", "E"],
  ["𝔽", "F"],
  ["𝔾", "G"],
  ["𝕀", "I"],
  ["𝕁", "J"],
  ["𝕂", "K"],
  ["𝕃", "L"],
  ["𝕄", "M"],
  ["𝕆", "N"],
  ["𝕊", "S"],
  ["𝕋", "T"],
  ["𝕌", "U"],
  ["𝕍", "V"],
  ["𝕎", "W"],
  ["𝕏", "X"],
  ["𝕐", "Y"],
  ["𝕒", "a"],
  ["𝕓", "b"],
  ["𝕔", "c"],
  ["𝕕", "d"],
  ["𝕖", "e"],
  ["𝕗", "f"],
  ["𝕘", "g"],
  ["𝕙", "h"],
  ["𝕚", "i"],
  ["𝕛", "j"],
  ["𝕜", "k"],
  ["𝕝", "l"],
  ["𝕞", "m"],
  ["𝕟", "n"],
  ["𝕠", "o"],
  ["𝕡", "p"],
  ["𝕢", "q"],
  ["𝕣", "r"],
  ["𝕤", "s"],
  ["𝕥", "t"],
  ["𝕦", "u"],
  ["𝕧", "v"],
  ["𝕨", "w"],
  ["𝕩", "x"],
  ["𝕪", "y"],
  ["𝕫", "z"],
  ["𝕬", "A"],
  ["𝕭", "B"],
  ["𝕮", "C"],
  ["𝕯", "D"],
  ["𝕰", "E"],
  ["𝕱", "F"],
  ["𝕲", "G"],
  ["𝕳", "H"],
  ["𝕴", "I"],
  ["𝕵", "J"],
  ["𝕶", "K"],
  ["𝕷", "L"],
  ["𝕸", "M"],
  ["𝕹", "N"],
  ["𝕺", "O"],
  ["𝕻", "P"],
  ["𝕼", "Q"],
  ["𝕽", "R"],
  ["𝕾", "S"],
  ["𝕿", "T"],
  ["𝖀", "U"],
  ["𝖁", "V"],
  ["𝖂", "W"],
  ["𝖃", "X"],
  ["𝖄", "Y"],
  ["𝖅", "Z"],
  ["𝖆", "a"],
  ["𝖇", "b"],
  ["𝖈", "c"],
  ["𝖉", "d"],
  ["𝖊", "e"],
  ["𝖋", "f"],
  ["𝖌", "g"],
  ["𝖍", "h"],
  ["𝖎", "i"],
  ["𝖏", "j"],
  ["𝖐", "k"],
  ["𝖑", "l"],
  ["𝖒", "m"],
  ["𝖓", "n"],
  ["𝖔", "o"],
  ["𝖕", "p"],
  ["𝖖", "q"],
  ["𝖗", "r"],
  ["𝖘", "s"],
  ["𝖙", "t"],
  ["𝖚", "u"],
  ["𝖛", "v"],
  ["𝖜", "w"],
  ["𝖝", "x"],
  ["𝖞", "y"],
  ["𝖟", "z"],
  ["𝖠", "A"],
  ["𝖡", "B"],
  ["𝖢", "C"],
  ["𝖣", "D"],
  ["𝖤", "E"],
  ["𝖥", "F"],
  ["𝖦", "G"],
  ["𝖧", "H"],
  ["𝖨", "I"],
  ["𝖩", "J"],
  ["𝖪", "K"],
  ["𝖫", "L"],
  ["𝖬", "M"],
  ["𝖭", "N"],
  ["𝖮", "O"],
  ["𝖯", "P"],
  ["𝖰", "Q"],
  ["𝖱", "R"],
  ["𝖲", "S"],
  ["𝖳", "T"],
  ["𝖴", "U"],
  ["𝖵", "V"],
  ["𝖶", "W"],
  ["𝖷", "X"],
  ["𝖸", "Y"],
  ["𝖹", "Z"],
  ["𝖺", "a"],
  ["𝖻", "b"],
  ["𝖼", "c"],
  ["𝖽", "d"],
  ["𝖾", "e"],
  ["𝖿", "f"],
  ["𝗀", "g"],
  ["𝗁", "h"],
  ["𝗂", "i"],
  ["𝗃", "j"],
  ["𝗄", "k"],
  ["𝗅", "l"],
  ["𝗆", "m"],
  ["𝗇", "n"],
  ["𝗈", "o"],
  ["𝗉", "p"],
  ["𝗊", "q"],
  ["𝗋", "r"],
  ["𝗌", "s"],
  ["𝗍", "t"],
  ["𝗎", "u"],
  ["𝗏", "v"],
  ["𝗐", "w"],
  ["𝗑", "x"],
  ["𝗒", "y"],
  ["𝗓", "z"],
  ["𝗔", "A"],
  ["𝗕", "B"],
  ["𝗖", "C"],
  ["𝗗", "D"],
  ["𝗘", "E"],
  ["𝗙", "F"],
  ["𝗚", "G"],
  ["𝗛", "H"],
  ["𝗜", "I"],
  ["𝗝", "J"],
  ["𝗞", "K"],
  ["𝗟", "L"],
  ["𝗠", "M"],
  ["𝗡", "N"],
  ["𝗢", "O"],
  ["𝗣", "P"],
  ["𝗤", "Q"],
  ["𝗥", "R"],
  ["𝗦", "S"],
  ["𝗧", "T"],
  ["𝗨", "U"],
  ["𝗩", "V"],
  ["𝗪", "W"],
  ["𝗫", "X"],
  ["𝗬", "Y"],
  ["𝗭", "Z"],
  ["𝗮", "a"],
  ["𝗯", "b"],
  ["𝗰", "c"],
  ["𝗱", "d"],
  ["𝗲", "e"],
  ["𝗳", "f"],
  ["𝗴", "g"],
  ["𝗵", "h"],
  ["𝗶", "i"],
  ["𝗷", "j"],
  ["𝗸", "k"],
  ["𝗹", "l"],
  ["𝗺", "m"],
  ["𝗻", "n"],
  ["𝗼", "o"],
  ["𝗽", "p"],
  ["𝗾", "q"],
  ["𝗿", "r"],
  ["𝘀", "s"],
  ["𝘁", "t"],
  ["𝘂", "u"],
  ["𝘃", "v"],
  ["𝘄", "w"],
  ["𝘅", "x"],
  ["𝘆", "y"],
  ["𝘇", "z"],
  ["𝘈", "A"],
  ["𝘉", "B"],
  ["𝘊", "C"],
  ["𝘋", "D"],
  ["𝘌", "E"],
  ["𝘍", "F"],
  ["𝘎", "G"],
  ["𝘏", "H"],
  ["𝘐", "I"],
  ["𝘑", "J"],
  ["𝘒", "K"],
  ["𝘓", "L"],
  ["𝘔", "M"],
  ["𝘕", "N"],
  ["𝘖", "O"],
  ["𝘗", "P"],
  ["𝘘", "Q"],
  ["𝘙", "R"],
  ["𝘚", "S"],
  ["𝘛", "T"],
  ["𝘜", "U"],
  ["𝘝", "V"],
  ["𝘞", "W"],
  ["𝘟", "X"],
  ["𝘠", "Y"],
  ["𝘡", "Z"],
  ["𝘢", "a"],
  ["𝘣", "b"],
  ["𝘤", "c"],
  ["𝘥", "d"],
  ["𝘦", "e"],
  ["𝘧", "f"],
  ["𝘨", "g"],
  ["𝘩", "h"],
  ["𝘪", "i"],
  ["𝘫", "j"],
  ["𝘬", "k"],
  ["𝘭", "l"],
  ["𝘮", "m"],
  ["𝘯", "n"],
  ["𝘰", "o"],
  ["𝘱", "p"],
  ["𝘲", "q"],
  ["𝘳", "r"],
  ["𝘴", "s"],
  ["𝘵", "t"],
  ["𝘶", "u"],
  ["𝘷", "v"],
  ["𝘸", "w"],
  ["𝘹", "x"],
  ["𝘺", "y"],
  ["𝘻", "z"],
  ["𝘼", "A"],
  ["𝘽", "B"],
  ["𝘾", "C"],
  ["𝘿", "D"],
  ["𝙀", "E"],
  ["𝙁", "F"],
  ["𝙂", "G"],
  ["𝙃", "H"],
  ["𝙄", "I"],
  ["𝙅", "J"],
  ["𝙆", "K"],
  ["𝙇", "L"],
  ["𝙈", "M"],
  ["𝙉", "N"],
  ["𝙊", "O"],
  ["𝙋", "P"],
  ["𝙌", "Q"],
  ["𝙍", "R"],
  ["𝙎", "S"],
  ["𝙏", "T"],
  ["𝙐", "U"],
  ["𝙑", "V"],
  ["𝙒", "W"],
  ["𝙓", "X"],
  ["𝙔", "Y"],
  ["𝙕", "Z"],
  ["𝙖", "a"],
  ["𝙗", "b"],
  ["𝙘", "c"],
  ["𝙙", "d"],
  ["𝙚", "e"],
  ["𝙛", "f"],
  ["𝙜", "g"],
  ["𝙝", "h"],
  ["𝙞", "i"],
  ["𝙟", "j"],
  ["𝙠", "k"],
  ["𝙡", "l"],
  ["𝙢", "m"],
  ["𝙣", "n"],
  ["𝙤", "o"],
  ["𝙥", "p"],
  ["𝙦", "q"],
  ["𝙧", "r"],
  ["𝙨", "s"],
  ["𝙩", "t"],
  ["𝙪", "u"],
  ["𝙫", "v"],
  ["𝙬", "w"],
  ["𝙭", "x"],
  ["𝙮", "y"],
  ["𝙯", "z"],
  ["𝙰", "A"],
  ["𝙱", "B"],
  ["𝙲", "C"],
  ["𝙳", "D"],
  ["𝙴", "E"],
  ["𝙵", "F"],
  ["𝙶", "G"],
  ["𝙷", "H"],
  ["𝙸", "I"],
  ["𝙹", "J"],
  ["𝙺", "K"],
  ["𝙻", "L"],
  ["𝙼", "M"],
  ["𝙽", "N"],
  ["𝙾", "O"],
  ["𝙿", "P"],
  ["𝚀", "Q"],
  ["𝚁", "R"],
  ["𝚂", "S"],
  ["𝚃", "T"],
  ["𝚄", "U"],
  ["𝚅", "V"],
  ["𝚆", "W"],
  ["𝚇", "X"],
  ["𝚈", "Y"],
  ["𝚉", "Z"],
  ["𝚊", "a"],
  ["𝚋", "b"],
  ["𝚌", "c"],
  ["𝚍", "d"],
  ["𝚎", "e"],
  ["𝚏", "f"],
  ["𝚐", "g"],
  ["𝚑", "h"],
  ["𝚒", "i"],
  ["𝚓", "j"],
  ["𝚔", "k"],
  ["𝚕", "l"],
  ["𝚖", "m"],
  ["𝚗", "n"],
  ["𝚘", "o"],
  ["𝚙", "p"],
  ["𝚚", "q"],
  ["𝚛", "r"],
  ["𝚜", "s"],
  ["𝚝", "t"],
  ["𝚞", "u"],
  ["𝚟", "v"],
  ["𝚠", "w"],
  ["𝚡", "x"],
  ["𝚢", "y"],
  ["𝚣", "z"],
  // Dotless letters
  ["𝚤", "l"],
  ["𝚥", "j"],
  // Greek
  ["𝛢", "A"],
  ["𝛣", "B"],
  ["𝛤", "G"],
  ["𝛥", "D"],
  ["𝛦", "E"],
  ["𝛧", "Z"],
  ["𝛨", "I"],
  ["𝛩", "TH"],
  ["𝛪", "I"],
  ["𝛫", "K"],
  ["𝛬", "L"],
  ["𝛭", "M"],
  ["𝛮", "N"],
  ["𝛯", "KS"],
  ["𝛰", "O"],
  ["𝛱", "P"],
  ["𝛲", "R"],
  ["𝛳", "TH"],
  ["𝛴", "S"],
  ["𝛵", "T"],
  ["𝛶", "Y"],
  ["𝛷", "F"],
  ["𝛸", "x"],
  ["𝛹", "PS"],
  ["𝛺", "O"],
  ["𝛻", "D"],
  ["𝛼", "a"],
  ["𝛽", "b"],
  ["𝛾", "g"],
  ["𝛿", "d"],
  ["𝜀", "e"],
  ["𝜁", "z"],
  ["𝜂", "i"],
  ["𝜃", "th"],
  ["𝜄", "i"],
  ["𝜅", "k"],
  ["𝜆", "l"],
  ["𝜇", "m"],
  ["𝜈", "n"],
  ["𝜉", "ks"],
  ["𝜊", "o"],
  ["𝜋", "p"],
  ["𝜌", "r"],
  ["𝜍", "s"],
  ["𝜎", "s"],
  ["𝜏", "t"],
  ["𝜐", "y"],
  ["𝜑", "f"],
  ["𝜒", "x"],
  ["𝜓", "ps"],
  ["𝜔", "o"],
  ["𝜕", "d"],
  ["𝜖", "E"],
  ["𝜗", "TH"],
  ["𝜘", "K"],
  ["𝜙", "f"],
  ["𝜚", "r"],
  ["𝜛", "p"],
  ["𝜜", "A"],
  ["𝜝", "V"],
  ["𝜞", "G"],
  ["𝜟", "D"],
  ["𝜠", "E"],
  ["𝜡", "Z"],
  ["𝜢", "I"],
  ["𝜣", "TH"],
  ["𝜤", "I"],
  ["𝜥", "K"],
  ["𝜦", "L"],
  ["𝜧", "M"],
  ["𝜨", "N"],
  ["𝜩", "KS"],
  ["𝜪", "O"],
  ["𝜫", "P"],
  ["𝜬", "S"],
  ["𝜭", "TH"],
  ["𝜮", "S"],
  ["𝜯", "T"],
  ["𝜰", "Y"],
  ["𝜱", "F"],
  ["𝜲", "X"],
  ["𝜳", "PS"],
  ["𝜴", "O"],
  ["𝜵", "D"],
  ["𝜶", "a"],
  ["𝜷", "v"],
  ["𝜸", "g"],
  ["𝜹", "d"],
  ["𝜺", "e"],
  ["𝜻", "z"],
  ["𝜼", "i"],
  ["𝜽", "th"],
  ["𝜾", "i"],
  ["𝜿", "k"],
  ["𝝀", "l"],
  ["𝝁", "m"],
  ["𝝂", "n"],
  ["𝝃", "ks"],
  ["𝝄", "o"],
  ["𝝅", "p"],
  ["𝝆", "r"],
  ["𝝇", "s"],
  ["𝝈", "s"],
  ["𝝉", "t"],
  ["𝝊", "y"],
  ["𝝋", "f"],
  ["𝝌", "x"],
  ["𝝍", "ps"],
  ["𝝎", "o"],
  ["𝝏", "a"],
  ["𝝐", "e"],
  ["𝝑", "i"],
  ["𝝒", "k"],
  ["𝝓", "f"],
  ["𝝔", "r"],
  ["𝝕", "p"],
  ["𝝖", "A"],
  ["𝝗", "B"],
  ["𝝘", "G"],
  ["𝝙", "D"],
  ["𝝚", "E"],
  ["𝝛", "Z"],
  ["𝝜", "I"],
  ["𝝝", "TH"],
  ["𝝞", "I"],
  ["𝝟", "K"],
  ["𝝠", "L"],
  ["𝝡", "M"],
  ["𝝢", "N"],
  ["𝝣", "KS"],
  ["𝝤", "O"],
  ["𝝥", "P"],
  ["𝝦", "R"],
  ["𝝧", "TH"],
  ["𝝨", "S"],
  ["𝝩", "T"],
  ["𝝪", "Y"],
  ["𝝫", "F"],
  ["𝝬", "X"],
  ["𝝭", "PS"],
  ["𝝮", "O"],
  ["𝝯", "D"],
  ["𝝰", "a"],
  ["𝝱", "v"],
  ["𝝲", "g"],
  ["𝝳", "d"],
  ["𝝴", "e"],
  ["𝝵", "z"],
  ["𝝶", "i"],
  ["𝝷", "th"],
  ["𝝸", "i"],
  ["𝝹", "k"],
  ["𝝺", "l"],
  ["𝝻", "m"],
  ["𝝼", "n"],
  ["𝝽", "ks"],
  ["𝝾", "o"],
  ["𝝿", "p"],
  ["𝞀", "r"],
  ["𝞁", "s"],
  ["𝞂", "s"],
  ["𝞃", "t"],
  ["𝞄", "y"],
  ["𝞅", "f"],
  ["𝞆", "x"],
  ["𝞇", "ps"],
  ["𝞈", "o"],
  ["𝞉", "a"],
  ["𝞊", "e"],
  ["𝞋", "i"],
  ["𝞌", "k"],
  ["𝞍", "f"],
  ["𝞎", "r"],
  ["𝞏", "p"],
  ["𝞐", "A"],
  ["𝞑", "V"],
  ["𝞒", "G"],
  ["𝞓", "D"],
  ["𝞔", "E"],
  ["𝞕", "Z"],
  ["𝞖", "I"],
  ["𝞗", "TH"],
  ["𝞘", "I"],
  ["𝞙", "K"],
  ["𝞚", "L"],
  ["𝞛", "M"],
  ["𝞜", "N"],
  ["𝞝", "KS"],
  ["𝞞", "O"],
  ["𝞟", "P"],
  ["𝞠", "S"],
  ["𝞡", "TH"],
  ["𝞢", "S"],
  ["𝞣", "T"],
  ["𝞤", "Y"],
  ["𝞥", "F"],
  ["𝞦", "X"],
  ["𝞧", "PS"],
  ["𝞨", "O"],
  ["𝞩", "D"],
  ["𝞪", "av"],
  ["𝞫", "g"],
  ["𝞬", "d"],
  ["𝞭", "e"],
  ["𝞮", "z"],
  ["𝞯", "i"],
  ["𝞰", "i"],
  ["𝞱", "th"],
  ["𝞲", "i"],
  ["𝞳", "k"],
  ["𝞴", "l"],
  ["𝞵", "m"],
  ["𝞶", "n"],
  ["𝞷", "ks"],
  ["𝞸", "o"],
  ["𝞹", "p"],
  ["𝞺", "r"],
  ["𝞻", "s"],
  ["𝞼", "s"],
  ["𝞽", "t"],
  ["𝞾", "y"],
  ["𝞿", "f"],
  ["𝟀", "x"],
  ["𝟁", "ps"],
  ["𝟂", "o"],
  ["𝟃", "a"],
  ["𝟄", "e"],
  ["𝟅", "i"],
  ["𝟆", "k"],
  ["𝟇", "f"],
  ["𝟈", "r"],
  ["𝟉", "p"],
  ["𝟊", "F"],
  ["𝟋", "f"],
  ["⒜", "(a)"],
  ["⒝", "(b)"],
  ["⒞", "(c)"],
  ["⒟", "(d)"],
  ["⒠", "(e)"],
  ["⒡", "(f)"],
  ["⒢", "(g)"],
  ["⒣", "(h)"],
  ["⒤", "(i)"],
  ["⒥", "(j)"],
  ["⒦", "(k)"],
  ["⒧", "(l)"],
  ["⒨", "(m)"],
  ["⒩", "(n)"],
  ["⒪", "(o)"],
  ["⒫", "(p)"],
  ["⒬", "(q)"],
  ["⒭", "(r)"],
  ["⒮", "(s)"],
  ["⒯", "(t)"],
  ["⒰", "(u)"],
  ["⒱", "(v)"],
  ["⒲", "(w)"],
  ["⒳", "(x)"],
  ["⒴", "(y)"],
  ["⒵", "(z)"],
  ["Ⓐ", "(A)"],
  ["Ⓑ", "(B)"],
  ["Ⓒ", "(C)"],
  ["Ⓓ", "(D)"],
  ["Ⓔ", "(E)"],
  ["Ⓕ", "(F)"],
  ["Ⓖ", "(G)"],
  ["Ⓗ", "(H)"],
  ["Ⓘ", "(I)"],
  ["Ⓙ", "(J)"],
  ["Ⓚ", "(K)"],
  ["Ⓛ", "(L)"],
  ["Ⓝ", "(N)"],
  ["Ⓞ", "(O)"],
  ["Ⓟ", "(P)"],
  ["Ⓠ", "(Q)"],
  ["Ⓡ", "(R)"],
  ["Ⓢ", "(S)"],
  ["Ⓣ", "(T)"],
  ["Ⓤ", "(U)"],
  ["Ⓥ", "(V)"],
  ["Ⓦ", "(W)"],
  ["Ⓧ", "(X)"],
  ["Ⓨ", "(Y)"],
  ["Ⓩ", "(Z)"],
  ["ⓐ", "(a)"],
  ["ⓑ", "(b)"],
  ["ⓒ", "(b)"],
  ["ⓓ", "(c)"],
  ["ⓔ", "(e)"],
  ["ⓕ", "(f)"],
  ["ⓖ", "(g)"],
  ["ⓗ", "(h)"],
  ["ⓘ", "(i)"],
  ["ⓙ", "(j)"],
  ["ⓚ", "(k)"],
  ["ⓛ", "(l)"],
  ["ⓜ", "(m)"],
  ["ⓝ", "(n)"],
  ["ⓞ", "(o)"],
  ["ⓟ", "(p)"],
  ["ⓠ", "(q)"],
  ["ⓡ", "(r)"],
  ["ⓢ", "(s)"],
  ["ⓣ", "(t)"],
  ["ⓤ", "(u)"],
  ["ⓥ", "(v)"],
  ["ⓦ", "(w)"],
  ["ⓧ", "(x)"],
  ["ⓨ", "(y)"],
  ["ⓩ", "(z)"],
  // Maltese
  ["Ċ", "C"],
  ["ċ", "c"],
  ["Ġ", "G"],
  ["ġ", "g"],
  ["Ħ", "H"],
  ["ħ", "h"],
  ["Ż", "Z"],
  ["ż", "z"],
  // Numbers
  ["𝟎", "0"],
  ["𝟏", "1"],
  ["𝟐", "2"],
  ["𝟑", "3"],
  ["𝟒", "4"],
  ["𝟓", "5"],
  ["𝟔", "6"],
  ["𝟕", "7"],
  ["𝟖", "8"],
  ["𝟗", "9"],
  ["𝟘", "0"],
  ["𝟙", "1"],
  ["𝟚", "2"],
  ["𝟛", "3"],
  ["𝟜", "4"],
  ["𝟝", "5"],
  ["𝟞", "6"],
  ["𝟟", "7"],
  ["𝟠", "8"],
  ["𝟡", "9"],
  ["𝟢", "0"],
  ["𝟣", "1"],
  ["𝟤", "2"],
  ["𝟥", "3"],
  ["𝟦", "4"],
  ["𝟧", "5"],
  ["𝟨", "6"],
  ["𝟩", "7"],
  ["𝟪", "8"],
  ["𝟫", "9"],
  ["𝟬", "0"],
  ["𝟭", "1"],
  ["𝟮", "2"],
  ["𝟯", "3"],
  ["𝟰", "4"],
  ["𝟱", "5"],
  ["𝟲", "6"],
  ["𝟳", "7"],
  ["𝟴", "8"],
  ["𝟵", "9"],
  ["𝟶", "0"],
  ["𝟷", "1"],
  ["𝟸", "2"],
  ["𝟹", "3"],
  ["𝟺", "4"],
  ["𝟻", "5"],
  ["𝟼", "6"],
  ["𝟽", "7"],
  ["𝟾", "8"],
  ["𝟿", "9"],
  ["①", "1"],
  ["②", "2"],
  ["③", "3"],
  ["④", "4"],
  ["⑤", "5"],
  ["⑥", "6"],
  ["⑦", "7"],
  ["⑧", "8"],
  ["⑨", "9"],
  ["⑩", "10"],
  ["⑪", "11"],
  ["⑫", "12"],
  ["⑬", "13"],
  ["⑭", "14"],
  ["⑮", "15"],
  ["⑯", "16"],
  ["⑰", "17"],
  ["⑱", "18"],
  ["⑲", "19"],
  ["⑳", "20"],
  ["⑴", "1"],
  ["⑵", "2"],
  ["⑶", "3"],
  ["⑷", "4"],
  ["⑸", "5"],
  ["⑹", "6"],
  ["⑺", "7"],
  ["⑻", "8"],
  ["⑼", "9"],
  ["⑽", "10"],
  ["⑾", "11"],
  ["⑿", "12"],
  ["⒀", "13"],
  ["⒁", "14"],
  ["⒂", "15"],
  ["⒃", "16"],
  ["⒄", "17"],
  ["⒅", "18"],
  ["⒆", "19"],
  ["⒇", "20"],
  ["⒈", "1."],
  ["⒉", "2."],
  ["⒊", "3."],
  ["⒋", "4."],
  ["⒌", "5."],
  ["⒍", "6."],
  ["⒎", "7."],
  ["⒏", "8."],
  ["⒐", "9."],
  ["⒑", "10."],
  ["⒒", "11."],
  ["⒓", "12."],
  ["⒔", "13."],
  ["⒕", "14."],
  ["⒖", "15."],
  ["⒗", "16."],
  ["⒘", "17."],
  ["⒙", "18."],
  ["⒚", "19."],
  ["⒛", "20."],
  ["⓪", "0"],
  ["⓫", "11"],
  ["⓬", "12"],
  ["⓭", "13"],
  ["⓮", "14"],
  ["⓯", "15"],
  ["⓰", "16"],
  ["⓱", "17"],
  ["⓲", "18"],
  ["⓳", "19"],
  ["⓴", "20"],
  ["⓵", "1"],
  ["⓶", "2"],
  ["⓷", "3"],
  ["⓸", "4"],
  ["⓹", "5"],
  ["⓺", "6"],
  ["⓻", "7"],
  ["⓼", "8"],
  ["⓽", "9"],
  ["⓾", "10"],
  ["⓿", "0"],
  // Punctuation
  ["🙰", "&"],
  ["🙱", "&"],
  ["🙲", "&"],
  ["🙳", "&"],
  ["🙴", "&"],
  ["🙵", "&"],
  ["🙶", '"'],
  ["🙷", '"'],
  ["🙸", '"'],
  ["‽", "?!"],
  ["🙹", "?!"],
  ["🙺", "?!"],
  ["🙻", "?!"],
  ["🙼", "/"],
  ["🙽", "\\"],
  // Alchemy
  ["🜇", "AR"],
  ["🜈", "V"],
  ["🜉", "V"],
  ["🜆", "VR"],
  ["🜅", "VF"],
  ["🜩", "2"],
  ["🜪", "5"],
  ["🝡", "f"],
  ["🝢", "W"],
  ["🝣", "U"],
  ["🝧", "V"],
  ["🝨", "T"],
  ["🝪", "V"],
  ["🝫", "MB"],
  ["🝬", "VB"],
  ["🝲", "3B"],
  ["🝳", "3B"],
  // Emojis
  ["💯", "100"],
  ["🔙", "BACK"],
  ["🔚", "END"],
  ["🔛", "ON!"],
  ["🔜", "SOON"],
  ["🔝", "TOP"],
  ["🔞", "18"],
  ["🔤", "abc"],
  ["🔠", "ABCD"],
  ["🔡", "abcd"],
  ["🔢", "1234"],
  ["🔣", "T&@%"],
  ["#️⃣", "#"],
  ["*️⃣", "*"],
  ["0️⃣", "0"],
  ["1️⃣", "1"],
  ["2️⃣", "2"],
  ["3️⃣", "3"],
  ["4️⃣", "4"],
  ["5️⃣", "5"],
  ["6️⃣", "6"],
  ["7️⃣", "7"],
  ["8️⃣", "8"],
  ["9️⃣", "9"],
  ["🔟", "10"],
  ["🅰️", "A"],
  ["🅱️", "B"],
  ["🆎", "AB"],
  ["🆑", "CL"],
  ["🅾️", "O"],
  ["🅿", "P"],
  ["🆘", "SOS"],
  ["🅲", "C"],
  ["🅳", "D"],
  ["🅴", "E"],
  ["🅵", "F"],
  ["🅶", "G"],
  ["🅷", "H"],
  ["🅸", "I"],
  ["🅹", "J"],
  ["🅺", "K"],
  ["🅻", "L"],
  ["🅼", "M"],
  ["🅽", "N"],
  ["🆀", "Q"],
  ["🆁", "R"],
  ["🆂", "S"],
  ["🆃", "T"],
  ["🆄", "U"],
  ["🆅", "V"],
  ["🆆", "W"],
  ["🆇", "X"],
  ["🆈", "Y"],
  ["🆉", "Z"]
], ih = (t, e) => {
  for (const [n, i] of e)
    t = t.replace(new RegExp(Js(n), "g"), i);
  return t;
};
function rh(t, e) {
  if (typeof t != "string")
    throw new TypeError(`Expected a string, got \`${typeof t}\``);
  e = {
    customReplacements: [],
    ...e
  };
  const n = new Map([
    ...nh,
    ...e.customReplacements
  ]);
  return t = t.normalize(), t = ih(t, n), t = t.normalize("NFD").replace(new RegExp("\\p{Diacritic}", "gu"), "").normalize(), t;
}
const sh = [
  ["&", " and "],
  ["🦄", " unicorn "],
  ["♥", " love "]
], oh = (t) => t.replace(/([A-Z]{2,})(\d+)/g, "$1 $2").replace(/([a-z\d]+)([A-Z]{2,})/g, "$1 $2").replace(/([a-z\d])([A-Z])/g, "$1 $2").replace(/([A-Z]+)([A-Z][a-rt-z\d]+)/g, "$1 $2"), ah = (t, e) => {
  const n = Js(e);
  return t.replace(new RegExp(`${n}{2,}`, "g"), e).replace(new RegExp(`^${n}|${n}$`, "g"), "");
}, uh = (t) => {
  let e = "a-z\\d";
  if (e += t.lowercase ? "" : "A-Z", t.preserveCharacters.length > 0)
    for (const n of t.preserveCharacters) {
      if (n === t.separator)
        throw new Error(`The separator character \`${t.separator}\` cannot be included in preserved characters: ${t.preserveCharacters}`);
      e += Js(n);
    }
  return new RegExp(`[^${e}]+`, "g");
};
function lh(t, e) {
  if (typeof t != "string")
    throw new TypeError(`Expected a string, got \`${typeof t}\``);
  e = {
    separator: "-",
    lowercase: !0,
    decamelize: !0,
    customReplacements: [],
    preserveLeadingUnderscore: !1,
    preserveTrailingDash: !1,
    preserveCharacters: [],
    ...e
  };
  const n = e.preserveLeadingUnderscore && t.startsWith("_"), i = e.preserveTrailingDash && t.endsWith("-"), r = new Map([
    ...sh,
    ...e.customReplacements
  ]);
  t = rh(t, { customReplacements: r }), e.decamelize && (t = oh(t));
  const s = uh(e);
  return e.lowercase && (t = t.toLowerCase()), t = t.replace(/([a-zA-Z\d]+)'([ts])(\s|$)/g, "$1$2$3"), t = t.replace(s, e.separator), t = t.replace(/\\/g, ""), e.separator && (t = ah(t, e.separator)), n && (t = `_${t}`), i && (t = `${t}-`), t;
}
function ch() {
  const t = /* @__PURE__ */ new Map(), e = (n, i) => {
    if (n = lh(n, i), !n)
      return "";
    const r = n.toLowerCase(), s = t.get(r.replace(/(?:-\d+?)+?$/, "")) || 0, o = t.get(r);
    t.set(r, typeof o == "number" ? o + 1 : 1);
    const a = t.get(r) || 2;
    return (a >= 2 || s > 2) && (n = `${n}-${a}`), n;
  };
  return e.reset = () => {
    t.clear();
  }, e;
}
function qo(t) {
  return t;
}
function zo(t) {
  if (typeof t != "object" || t === null || Array.isArray(t))
    throw new TypeError("JSONObject cannot represent non-object value: " + t);
  return t;
}
function Ru(t, e, n) {
  var i = /* @__PURE__ */ Object.create(null);
  return e.fields.forEach(function(r) {
    i[r.name.value] = Ks(t, r.value, n);
  }), i;
}
function Ks(t, e, n) {
  switch (e.kind) {
    case I.STRING:
    case I.BOOLEAN:
      return e.value;
    case I.INT:
    case I.FLOAT:
      return parseFloat(e.value);
    case I.OBJECT:
      return Ru(t, e, n);
    case I.LIST:
      return e.values.map(function(i) {
        return Ks(t, i, n);
      });
    case I.NULL:
      return null;
    case I.VARIABLE:
      return n ? n[e.name.value] : void 0;
    default:
      throw new TypeError(t + " cannot represent value: " + be(e));
  }
}
var fh = new Ut({
  name: "JSON",
  description: "The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).",
  specifiedByUrl: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf",
  serialize: qo,
  parseValue: qo,
  parseLiteral: function(e, n) {
    return Ks("JSON", e, n);
  }
}), dh = new Ut({
  name: "JSONObject",
  description: "The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).",
  specifiedByUrl: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf",
  serialize: zo,
  parseValue: zo,
  parseLiteral: function(e, n) {
    if (e.kind !== I.OBJECT)
      throw new TypeError("JSONObject cannot represent non-object value: " + be(e));
    return Ru("JSONObject", e, n);
  }
});
const Lu = 3;
function nt(t) {
  return Mr(t, []);
}
function Mr(t, e) {
  switch (typeof t) {
    case "string":
      return JSON.stringify(t);
    case "function":
      return t.name ? `[function ${t.name}]` : "[function]";
    case "object":
      return hh(t, e);
    default:
      return String(t);
  }
}
function Qo(t) {
  return (t.name = "GraphQLError") ? t.toString() : `${t.name}: ${t.message};
 ${t.stack}`;
}
function hh(t, e) {
  if (t === null)
    return "null";
  if (t instanceof Error)
    return t.name === "AggregateError" ? Qo(t) + `
` + Wo(t.errors, e) : Qo(t);
  if (e.includes(t))
    return "[Circular]";
  const n = [...e, t];
  if (ph(t)) {
    const i = t.toJSON();
    if (i !== t)
      return typeof i == "string" ? i : Mr(i, n);
  } else if (Array.isArray(t))
    return Wo(t, n);
  return gh(t, n);
}
function ph(t) {
  return typeof t.toJSON == "function";
}
function gh(t, e) {
  const n = Object.entries(t);
  return n.length === 0 ? "{}" : e.length > Lu ? "[" + mh(t) + "]" : "{ " + n.map(([r, s]) => r + ": " + Mr(s, e)).join(", ") + " }";
}
function Wo(t, e) {
  if (t.length === 0)
    return "[]";
  if (e.length > Lu)
    return "[Array]";
  const n = t.length, i = [];
  for (let r = 0; r < n; ++r)
    i.push(Mr(t[r], e));
  return "[" + i.join(", ") + "]";
}
function mh(t) {
  const e = Object.prototype.toString.call(t).replace(/^\[object /, "").replace(/]$/, "");
  if (e === "Object" && typeof t.constructor == "function") {
    const n = t.constructor.name;
    if (typeof n == "string" && n !== "")
      return n;
  }
  return e;
}
const yh = [
  "message",
  "locations",
  "path",
  "nodes",
  "source",
  "positions",
  "originalError",
  "name",
  "stack",
  "extensions"
];
function bh(t) {
  return t != null && typeof t == "object" && Object.keys(t).every((e) => yh.includes(e));
}
function X(t, e) {
  return e != null && e.originalError && !(e.originalError instanceof Error) && bh(e.originalError) && (e.originalError = X(e.originalError.message, e.originalError)), ja.major >= 17 ? new P(t, e) : new P(t, e == null ? void 0 : e.nodes, e == null ? void 0 : e.source, e == null ? void 0 : e.positions, e == null ? void 0 : e.path, e == null ? void 0 : e.originalError, e == null ? void 0 : e.extensions);
}
function Eh(t) {
  return t != null && typeof t == "object" && Symbol.iterator in t;
}
function Cu(t) {
  return typeof t == "object" && t !== null;
}
function Ae(t) {
  return (t == null ? void 0 : t.then) != null;
}
function vh(t, e, n) {
  let i = n;
  for (const r of t)
    i = Ae(i) ? i.then((s) => e(s, r)) : e(i, r);
  return i;
}
function ku(t, e) {
  return Object.prototype.hasOwnProperty.call(t, e);
}
function Du(t, e, n = {}) {
  const i = {}, s = (e.arguments ?? []).reduce((o, a) => ({
    ...o,
    [a.name.value]: a
  }), {});
  for (const { name: o, type: a, defaultValue: u } of t.args) {
    const c = s[o];
    if (!c) {
      if (u !== void 0)
        i[o] = u;
      else if (re(a))
        throw X(`Argument "${o}" of required type "${nt(a)}" was not provided.`, {
          nodes: [e]
        });
      continue;
    }
    const f = c.value;
    let g = f.kind === I.NULL;
    if (f.kind === I.VARIABLE) {
      const w = f.name.value;
      if (n == null || !ku(n, w)) {
        if (u !== void 0)
          i[o] = u;
        else if (re(a))
          throw X(`Argument "${o}" of required type "${nt(a)}" was provided the variable "$${w}" which was not provided a runtime value.`, {
            nodes: [f]
          });
        continue;
      }
      g = n[w] == null;
    }
    if (g && re(a))
      throw X(`Argument "${o}" of non-null type "${nt(a)}" must not be null.`, {
        nodes: [f]
      });
    const p = Nn(f, a, n);
    if (p === void 0)
      throw X(`Argument "${o}" has invalid value ${be(f)}.`, {
        nodes: [f]
      });
    i[o] = p;
  }
  return i;
}
function $u(t) {
  const e = /* @__PURE__ */ new WeakMap();
  return function(i) {
    const r = e.get(i);
    if (r === void 0) {
      const s = t(i);
      return e.set(i, s), s;
    }
    return r;
  };
}
function wh(t) {
  const e = /* @__PURE__ */ new WeakMap();
  return function(i, r, s) {
    let o = e.get(i);
    if (!o) {
      o = /* @__PURE__ */ new WeakMap(), e.set(i, o);
      const c = /* @__PURE__ */ new WeakMap();
      o.set(r, c);
      const f = t(i, r, s);
      return c.set(s, f), f;
    }
    let a = o.get(r);
    if (!a) {
      a = /* @__PURE__ */ new WeakMap(), o.set(r, a);
      const c = t(i, r, s);
      return a.set(s, c), c;
    }
    const u = a.get(s);
    if (u === void 0) {
      const c = t(i, r, s);
      return a.set(s, c), c;
    }
    return u;
  };
}
function Th(t) {
  const e = /* @__PURE__ */ new WeakMap();
  return function(i, r, s, o, a) {
    let u = e.get(i);
    if (!u) {
      u = /* @__PURE__ */ new WeakMap(), e.set(i, u);
      const w = /* @__PURE__ */ new WeakMap();
      u.set(r, w);
      const E = /* @__PURE__ */ new WeakMap();
      w.set(s, E);
      const R = /* @__PURE__ */ new WeakMap();
      E.set(o, R);
      const x = t(i, r, s, o, a);
      return R.set(a, x), x;
    }
    let c = u.get(r);
    if (!c) {
      c = /* @__PURE__ */ new WeakMap(), u.set(r, c);
      const w = /* @__PURE__ */ new WeakMap();
      c.set(s, w);
      const E = /* @__PURE__ */ new WeakMap();
      w.set(o, E);
      const R = t(i, r, s, o, a);
      return E.set(a, R), R;
    }
    let f = c.get(s);
    if (!f) {
      f = /* @__PURE__ */ new WeakMap(), c.set(s, f);
      const w = /* @__PURE__ */ new WeakMap();
      f.set(o, w);
      const E = t(i, r, s, o, a);
      return w.set(a, E), E;
    }
    let g = f.get(o);
    if (!g) {
      g = /* @__PURE__ */ new WeakMap(), f.set(o, g);
      const w = t(i, r, s, o, a);
      return g.set(a, w), w;
    }
    const p = g.get(a);
    if (p === void 0) {
      const w = t(i, r, s, o, a);
      return g.set(a, w), w;
    }
    return p;
  };
}
function Sh(t, e, n) {
  const r = _h(t).get(e);
  if (r == null)
    throw X(`Schema is not configured to execute ${e} operation.`, {
      nodes: n
    });
  return r;
}
const _h = $u(function(e) {
  const n = /* @__PURE__ */ new Map(), i = e.getQueryType();
  i && n.set("query", i);
  const r = e.getMutationType();
  r && n.set("mutation", r);
  const s = e.getSubscriptionType();
  return s && n.set("subscription", s), n;
});
function Pu(t, e, n, i) {
  Symbol.asyncIterator in t && (t = t[Symbol.asyncIterator]());
  let r, s;
  typeof t.return == "function" && (r = t.return, s = (u) => {
    const c = () => Promise.reject(u);
    return r.call(t).then(c, c);
  });
  function o(u) {
    return u.done ? u : Yo(u.value, e).then(Ho, s);
  }
  let a;
  if (n) {
    const u = n;
    a = (c) => Yo(c, u).then(Ho, s);
  }
  return {
    next() {
      return t.next().then(o, a);
    },
    return() {
      return r ? r.call(t).then(o, a) : Promise.resolve({ value: void 0, done: !0 });
    },
    throw(u) {
      return typeof t.throw == "function" ? t.throw(u).then(o, a) : Promise.reject(u).catch(s);
    },
    [Symbol.asyncIterator]() {
      return this;
    }
  };
}
function Yo(t, e) {
  return new Promise((n) => n(e(t)));
}
function Ho(t) {
  return { value: t, done: !1 };
}
class Nr extends Map {
  get [Symbol.toStringTag]() {
    return "AccumulatorMap";
  }
  add(e, n) {
    const i = this.get(e);
    i === void 0 ? this.set(e, [n]) : i.push(n);
  }
}
const Ih = new nn({
  name: "defer",
  description: "Directs the executor to defer this fragment when the `if` argument is true or undefined.",
  locations: [K.FRAGMENT_SPREAD, K.INLINE_FRAGMENT],
  args: {
    if: {
      type: new ne(Pe),
      description: "Deferred when true or undefined.",
      defaultValue: !0
    },
    label: {
      type: ue,
      description: "Unique name"
    }
  }
}), Oh = new nn({
  name: "stream",
  description: "Directs the executor to stream plural fields when the `if` argument is true or undefined.",
  locations: [K.FIELD],
  args: {
    if: {
      type: new ne(Pe),
      description: "Stream when true or undefined.",
      defaultValue: !0
    },
    label: {
      type: ue,
      description: "Unique name"
    },
    initialCount: {
      defaultValue: 0,
      type: ji,
      description: "Number of items to return immediately"
    }
  }
});
function zn(t, e, n, i, r, s, o, a) {
  for (const u of r.selections)
    switch (u.kind) {
      case I.FIELD: {
        if (!ns(n, u))
          continue;
        s.add(Nh(u), u);
        break;
      }
      case I.INLINE_FRAGMENT: {
        if (!ns(n, u) || !Jo(t, u, i))
          continue;
        const c = Ko(n, u);
        if (c) {
          const f = new Nr();
          zn(t, e, n, i, u.selectionSet, f, o, a), o.push({
            label: c.label,
            fields: f
          });
        } else
          zn(t, e, n, i, u.selectionSet, s, o, a);
        break;
      }
      case I.FRAGMENT_SPREAD: {
        const c = u.name.value;
        if (!ns(n, u))
          continue;
        const f = Ko(n, u);
        if (a.has(c) && !f)
          continue;
        const g = e[c];
        if (!g || !Jo(t, g, i))
          continue;
        if (f || a.add(c), f) {
          const p = new Nr();
          zn(t, e, n, i, g.selectionSet, p, o, a), o.push({
            label: f.label,
            fields: p
          });
        } else
          zn(t, e, n, i, g.selectionSet, s, o, a);
        break;
      }
    }
}
function ju(t, e, n, i, r) {
  const s = new Nr(), o = [];
  return zn(t, e, n, i, r, s, o, /* @__PURE__ */ new Set()), { fields: s, patches: o };
}
function ns(t, e) {
  const n = si(Vs, e, t);
  if ((n == null ? void 0 : n.if) === !0)
    return !1;
  const i = si(Us, e, t);
  return (i == null ? void 0 : i.if) !== !1;
}
function Jo(t, e, n) {
  const i = e.typeCondition;
  if (!i)
    return !0;
  const r = it(t, i);
  return r === n ? !0 : tn(r) ? t.getPossibleTypes(r).includes(n) : !1;
}
function Nh(t) {
  return t.alias ? t.alias.value : t.name.value;
}
function Ko(t, e) {
  const n = si(Ih, e, t);
  if (n && n.if !== !1)
    return {
      label: typeof n.label == "string" ? n.label : void 0
    };
}
const Ah = Th(function(e, n, i, r, s) {
  const o = new Nr(), a = /* @__PURE__ */ new Set(), u = [], c = {
    fields: o,
    patches: u
  };
  for (const f of s)
    f.selectionSet && zn(e, n, i, r, f.selectionSet, o, u, a);
  return c;
});
function Ur(t) {
  return (t == null ? void 0 : t[Symbol.asyncIterator]) != null;
}
function li(t, e, n) {
  return { prev: t, key: e, typename: n };
}
function Ve(t) {
  const e = [];
  let n = t;
  for (; n; )
    e.push(n.key), n = n.prev;
  return e.reverse();
}
function xh(t) {
  return t.map((e) => typeof e == "number" ? "[" + e.toString() + "]" : "." + e).join("");
}
function Fh(t) {
  return t != null && typeof t == "object" && "errors" in t;
}
function Rh(t) {
  return t != null && typeof t.toString == "function";
}
function oi(t) {
  return t instanceof P;
}
function Mu(t) {
  return t instanceof P ? t.originalError != null ? Mu(t.originalError) : !0 : !1;
}
function Uu(t) {
  var e;
  return typeof t == "object" && ((e = t == null ? void 0 : t.constructor) == null ? void 0 : e.name) === "DOMException" && t.name === "AbortError";
}
function fr(t, e, n) {
  const i = /* @__PURE__ */ new Set();
  if (Fh(t))
    for (const r of t.errors) {
      const s = fr(r, e, n);
      for (const o of s)
        i.add(o);
    }
  else if (Uu(t))
    n.debug("Request aborted");
  else if (e) {
    const r = e.maskError(t, e.errorMessage, e.isDev);
    r !== t && n.error(t), i.add(oi(r) ? r : X(r.message, {
      originalError: r
    }));
  } else oi(t) ? i.add(t) : t instanceof Error ? i.add(X(t.message, {
    originalError: t
  })) : typeof t == "string" ? i.add(X(t, {
    extensions: {
      unexpected: !0
    }
  })) : Rh(t) ? i.add(X(t.toString(), {
    extensions: {
      unexpected: !0
    }
  })) : (n.error(t), i.add(X("Unexpected error.", {
    extensions: {
      http: {
        unexpected: !0
      }
    }
  })));
  return Array.from(i);
}
function Xs(t, e = {}, n = !1) {
  var s, o, a, u;
  let i, r = !1;
  if ("extensions" in t && ((s = t.extensions) != null && s.http) && (t.extensions.http.headers && Object.assign(e, t.extensions.http.headers), t.extensions.http.status && (i = t.extensions.http.status)), "errors" in t && ((o = t.errors) != null && o.length))
    for (const c of t.errors)
      if ((a = c.extensions) != null && a.http) {
        if (c.extensions.http.headers && Object.assign(e, c.extensions.http.headers), n && c.extensions.http.spec)
          continue;
        c.extensions.http.status && (!i || c.extensions.http.status > i) && (i = c.extensions.http.status);
      } else (!Mu(c) || (u = c.extensions) != null && u.unexpected) && (r = !0);
  else
    i || (i = 200);
  return i || (r && !("data" in t) ? i = 500 : i = 200), {
    status: i,
    headers: e
  };
}
function Lh(t) {
  return Array.isArray(t) && t.length > 0 && // if one item in the array is a GraphQLError, we're good
  t.some(oi);
}
const En = {
  red: "\x1B[31m",
  yellow: "\x1B[33m",
  magenta: "\x1B[35m",
  cyan: "\x1B[36m",
  reset: "\x1B[0m"
}, Xo = En.yellow + "WARN" + En.reset, Zo = En.cyan + "INFO" + En.reset, ea = En.red + "ERR" + En.reset, ta = En.magenta + "DEBUG" + En.reset, gi = {
  debug: 0,
  info: 1,
  warn: 2,
  error: 3,
  silent: 4
}, rr = () => {
}, Vr = (t) => (...e) => console.log(t, ...e), Ch = console.debug ? (...t) => console.debug(ta, ...t) : Vr(ta), kh = console.info ? (...t) => console.info(Zo, ...t) : Vr(Zo), Dh = console.warn ? (...t) => console.warn(Xo, ...t) : Vr(Xo), $h = console.error ? (...t) => console.error(ea, ...t) : Vr(ea), is = (t = ((e) => (e = globalThis.process) == null ? void 0 : e.env.DEBUG)() === "1" ? "debug" : "info") => {
  const n = gi[t];
  return {
    debug: n > gi.debug ? rr : Ch,
    info: n > gi.info ? rr : kh,
    warn: n > gi.warn ? rr : Dh,
    error: n > gi.error ? rr : $h
  };
};
var Ph = '<!doctype html><html lang=en><head><meta charset=utf-8><title>__TITLE__</title><link rel=icon href=https://raw.githubusercontent.com/dotansimha/graphql-yoga/main/website/public/favicon.ico><link rel=stylesheet href=https://unpkg.com/@graphql-yoga/graphiql@4.3.1/dist/style.css></head><body id=body class=no-focus-outline><noscript>You need to enable JavaScript to run this app.</noscript><div id=root></div><script type=module>import{renderYogaGraphiQL}from"https://unpkg.com/@graphql-yoga/graphiql@4.3.1/dist/yoga-graphiql.es.js";renderYogaGraphiQL(root,__OPTS__)<\/script></body></html>';
function jh({ headers: t, method: e }) {
  var n;
  return e === "GET" && !!((n = t == null ? void 0 : t.get("accept")) != null && n.includes("text/html"));
}
const Mh = (t) => Ph.replace("__TITLE__", (t == null ? void 0 : t.title) || "Yoga GraphiQL").replace("__OPTS__", JSON.stringify(t ?? {}));
function Uh(t) {
  const e = t.logger ?? console;
  let n;
  typeof (t == null ? void 0 : t.options) == "function" ? n = t == null ? void 0 : t.options : typeof (t == null ? void 0 : t.options) == "object" ? n = () => t == null ? void 0 : t.options : (t == null ? void 0 : t.options) === !1 ? n = () => !1 : n = () => ({});
  const i = (t == null ? void 0 : t.render) ?? Mh;
  let r;
  const s = ({ URLPattern: o }) => (r || (r = new o({
    pathname: t.graphqlEndpoint
  })), r);
  return {
    async onRequest({ request: o, serverContext: a, fetchAPI: u, endResponse: c, url: f }) {
      if (jh(o) && (o.url.endsWith(t.graphqlEndpoint) || o.url.endsWith(`${t.graphqlEndpoint}/`) || f.pathname === t.graphqlEndpoint || f.pathname === `${t.graphqlEndpoint}/` || s(u).test(f))) {
        e.debug("Rendering GraphiQL");
        const g = await n(o, a);
        if (g) {
          const p = await i({
            ...g === !0 ? {} : g
          }), w = new u.Response(p, {
            headers: {
              "Content-Type": "text/html"
            },
            status: 200
          });
          c(w);
        }
      }
    }
  };
}
const Vh = (t) => {
  if (t == null)
    return {};
  if (gu(t))
    return {
      onPluginInit({ setSchema: n }) {
        n(t);
      }
    };
  if ("then" in t) {
    let n;
    return {
      onRequestParse() {
        return {
          async onRequestParseDone() {
            n || (n = await t);
          }
        };
      },
      onEnveloped({ setSchema: i }) {
        if (!n)
          throw new Error("You provide a promise of a schema but it hasn't been resolved yet. Make sure you use this plugin with GraphQL Yoga.");
        i(n);
      }
    };
  }
  const e = /* @__PURE__ */ new WeakMap();
  return {
    onRequestParse({ request: n, serverContext: i }) {
      return {
        async onRequestParseDone() {
          const r = await t({
            ...i,
            request: n
          });
          e.set(n, r);
        }
      };
    },
    onEnveloped({ setSchema: n, context: i }) {
      if ((i == null ? void 0 : i.request) == null)
        throw new Error("Request object is not available in the context. Make sure you use this plugin with GraphQL Yoga.");
      const r = e.get(i.request);
      if (r == null)
        throw new Error("No schema found for this request. Make sure you use this plugin with GraphQL Yoga.");
      n(r);
    }
  };
};
function Bh(t) {
  return t != null && typeof t.then == "function";
}
const Gh = (t) => {
  throw t;
};
class pt {
  constructor(e) {
    U(this, "state");
    let n;
    try {
      n = e();
    } catch (i) {
      this.state = { status: "rejected", value: i };
      return;
    }
    if (Bh(n)) {
      this.state = { status: "pending", value: n };
      return;
    }
    this.state = { status: "fulfilled", value: n };
  }
  then(e, n) {
    const i = this.state;
    if (i.status === "pending")
      return new pt(() => i.value.then(e, n));
    const r = typeof n == "function" ? n : Gh;
    if (i.status === "rejected")
      return new pt(() => r(i.value));
    try {
      const s = typeof e == "function" ? e : void 0;
      return s === void 0 ? new pt(() => i.value) : new pt(() => s(i.value));
    } catch (s) {
      return new pt(() => r(s));
    }
  }
  catch(e) {
    return this.then(void 0, e);
  }
  resolve() {
    const e = this.state;
    if (e.status === "pending")
      return Promise.resolve(e.value);
    if (e.status === "rejected")
      throw e.value;
    return e.value;
  }
  static all(e) {
    let n = !1, i, r = !1;
    const s = [];
    for (const o of e) {
      const a = o.state;
      if (a.status === "rejected") {
        if (n)
          continue;
        n = !0, i = a.value;
        continue;
      }
      a.status === "pending" && (r = !0), s.push(a.value);
    }
    return r ? n ? (Promise.all(s).catch(() => {
    }), new pt(() => {
      throw i;
    })) : new pt(() => Promise.all(s)) : new pt(() => s);
  }
}
function Qt(t) {
  if (t instanceof Error)
    return t;
  if (typeof t == "object" && t != null && "message" in t && typeof t.message == "string") {
    let e;
    "cause" in t && (e = { cause: t.cause });
    const n = new Error(t.message, e);
    return "stack" in t && typeof t.stack == "string" && (n.stack = t.stack), "name" in t && typeof t.name == "string" && (n.name = t.name), n;
  }
  return new Error(String(t));
}
function qh(t) {
  const e = t[Symbol.asyncIterator]();
  let n, i, r = !1;
  async function s() {
    if (r)
      return { value: void 0, done: !0 };
    try {
      if (!n) {
        if (i)
          return await i, await s();
        let u;
        i = new Promise((f) => {
          u = f;
        });
        const c = await e.next();
        return c.done ? (r = !0, await s()) : (n = c.value[Symbol.asyncIterator](), i = void 0, u(), await s());
      }
      const o = n, a = await n.next();
      return a.done ? (n === o && (n = void 0), await s()) : a;
    } catch (o) {
      throw r = !0, o;
    }
  }
  return {
    next: s,
    async return() {
      var o, a;
      return r = !0, await Promise.all([(o = n == null ? void 0 : n.return) == null ? void 0 : o.call(n), (a = e.return) == null ? void 0 : a.call(e)]), { value: void 0, done: !0 };
    },
    async throw(o) {
      var a, u;
      throw r = !0, await Promise.all([(a = n == null ? void 0 : n.throw) == null ? void 0 : a.call(n, o), (u = e.throw) == null ? void 0 : u.call(e, o)]), o;
    },
    [Symbol.asyncIterator]() {
      return this;
    }
  };
}
function na(t, e) {
  if (!t)
    throw new Error(e ?? "Unexpected invariant triggered.");
}
async function ia(t, e) {
  const n = /* @__PURE__ */ Object.create(null);
  return await new Promise((i, r) => {
    e == null || e.addEventListener("abort", () => {
      r(e.reason);
    }), Promise.all(Object.entries(t).map(async ([s, o]) => {
      n[s] = await o;
    })).then(() => i(), r);
  }), n;
}
function zh(t, e, n, i) {
  const r = [], s = i == null ? void 0 : i.maxErrors;
  try {
    const o = Qh(t, e, n, (a) => {
      if (s != null && r.length >= s)
        throw X("Too many errors processing variables, error limit reached. Execution aborted.");
      r.push(a);
    });
    if (r.length === 0)
      return { coerced: o };
  } catch (o) {
    r.push(o);
  }
  return { errors: r };
}
function Qh(t, e, n, i) {
  const r = {};
  for (const s of e) {
    const o = s.variable.name.value, a = it(t, s.type);
    if (!Pt(a)) {
      const c = be(s.type);
      i(X(`Variable "$${o}" expected value of type "${c}" which cannot be used as an input type.`, { nodes: s.type }));
      continue;
    }
    if (!ku(n, o)) {
      if (s.defaultValue)
        r[o] = Nn(s.defaultValue, a);
      else if (re(a)) {
        const c = nt(a);
        i(X(`Variable "$${o}" of required type "${c}" was not provided.`, {
          nodes: s
        }));
      }
      continue;
    }
    const u = n[o];
    if (u === null && re(a)) {
      const c = nt(a);
      i(X(`Variable "$${o}" of non-null type "${c}" must not be null.`, {
        nodes: s
      }));
      continue;
    }
    r[o] = Pf(u, a, (c, f, g) => {
      let p = `Variable "$${o}" got invalid value ` + nt(f);
      c.length > 0 && (p += ` at "${o}${xh(c)}"`), i(X(p + "; " + g.message, {
        nodes: s,
        originalError: g
      }));
    });
  }
  return r;
}
const Wh = wh((t, e, n) => Ah(t.schema, t.fragments, t.variableValues, e, n));
function Yh(t) {
  const e = Bu(t);
  return "schema" in e ? Vu(e) : {
    errors: e.map((n) => {
      var i;
      return Object.defineProperty(n, "extensions", {
        value: {
          ...n.extensions,
          http: {
            ...(i = n.extensions) == null ? void 0 : i.http,
            status: 400
          }
        }
      }), n;
    })
  };
}
function Vu(t) {
  var n;
  if ((n = t.signal) != null && n.aborted)
    throw t.signal.reason;
  return new pt(() => Kh(t)).then((i) => {
    const r = ra(i, t.errors);
    return t.subsequentPayloads.size > 0 ? {
      initialResult: {
        ...r,
        hasNext: !0
      },
      subsequentResults: hp(t)
    } : r;
  }, (i) => {
    var r;
    if ((r = t.signal) != null && r.aborted)
      throw t.signal.reason;
    return i.errors ? t.errors.push(...i.errors) : t.errors.push(i), ra(null, t.errors);
  }).resolve();
}
function ra(t, e) {
  return e.length === 0 ? { data: t } : { errors: e, data: t };
}
const Hh = $u(function(e) {
  const n = /* @__PURE__ */ Object.create(null);
  for (const i of e.definitions)
    i.kind === I.FRAGMENT_DEFINITION && (n[i.name.value] = i);
  return n;
});
function Bu(t) {
  var R;
  const { schema: e, document: n, rootValue: i, contextValue: r, variableValues: s, operationName: o, fieldResolver: a, typeResolver: u, subscribeFieldResolver: c, signal: f } = t;
  mu(e);
  const g = Hh(n);
  let p;
  for (const x of n.definitions)
    switch (x.kind) {
      case I.OPERATION_DEFINITION:
        if (o == null) {
          if (p !== void 0)
            return [
              X("Must provide operation name if query contains multiple operations.")
            ];
          p = x;
        } else ((R = x.name) == null ? void 0 : R.value) === o && (p = x);
        break;
    }
  if (p == null)
    return o != null ? [X(`Unknown operation named "${o}".`)] : [X("Must provide an operation.")];
  const w = p.variableDefinitions ?? [], E = zh(e, w, s ?? {}, {
    maxErrors: 50
  });
  return E.errors ? E.errors : {
    schema: e,
    fragments: g,
    rootValue: i,
    contextValue: r,
    operation: p,
    variableValues: E.coerced,
    fieldResolver: a ?? ua,
    typeResolver: u ?? rp,
    subscribeFieldResolver: c ?? ua,
    subsequentPayloads: /* @__PURE__ */ new Set(),
    errors: [],
    signal: f
  };
}
function Jh(t, e) {
  return {
    ...t,
    rootValue: e,
    subsequentPayloads: /* @__PURE__ */ new Set(),
    errors: []
  };
}
function Kh(t) {
  const { operation: e, schema: n, fragments: i, variableValues: r, rootValue: s } = t, o = Sh(n, e.operation, [e]);
  o == null && X(`Schema is not configured to execute ${e.operation} operation.`, {
    nodes: e
  });
  const { fields: a, patches: u } = ju(n, i, r, o, e.selectionSet), c = void 0;
  let f;
  e.operation === "mutation" ? f = Xh(t, o, s, c, a) : f = Zs(t, o, s, c, a);
  for (const g of u) {
    const { label: p, fields: w } = g;
    Yu(t, o, s, w, p, c);
  }
  return f;
}
function Xh(t, e, n, i, r) {
  return vh(r, (s, [o, a]) => {
    var c;
    const u = li(i, o, e.name);
    if ((c = t.signal) != null && c.aborted)
      throw t.signal.reason;
    return new pt(() => Gu(t, e, n, a, u)).then((f) => (f === void 0 || (s[o] = f), s));
  }, /* @__PURE__ */ Object.create(null)).resolve();
}
function Zs(t, e, n, i, r, s) {
  var u;
  const o = /* @__PURE__ */ Object.create(null);
  let a = !1;
  try {
    for (const [c, f] of r) {
      if ((u = t.signal) != null && u.aborted)
        throw t.signal.reason;
      const g = li(i, c, e.name), p = Gu(t, e, n, f, g, s);
      p !== void 0 && (o[c] = p, Ae(p) && (a = !0));
    }
  } catch (c) {
    if (a)
      return ia(o, t.signal).finally(() => {
        throw c;
      });
    throw c;
  }
  return a ? ia(o, t.signal) : o;
}
function Gu(t, e, n, i, r, s) {
  const o = (s == null ? void 0 : s.errors) ?? t.errors, a = Ju(t.schema, e, i[0]);
  if (!a)
    return;
  const u = a.type, c = a.resolve ?? t.fieldResolver, f = qu(t, a, i, e, r);
  try {
    const g = Du(a, i[0], t.variableValues), p = t.contextValue, w = c(n, g, p, f);
    let E;
    return Ae(w) ? E = w.then((R) => vn(t, u, i, f, r, R, s)) : E = vn(t, u, i, f, r, w, s), Ae(E) ? E.then(void 0, (R) => {
      if (R instanceof AggregateError)
        return new AggregateError(R.errors.map((S) => {
          S = Qt(S);
          const A = tt(S, i, Ve(r)), O = gt(A, u, o);
          return dt(t, r, s), O;
        }));
      R = Qt(R);
      const x = tt(R, i, Ve(r)), y = gt(x, u, o);
      return dt(t, r, s), y;
    }) : E;
  } catch (g) {
    if (g instanceof AggregateError)
      return new AggregateError(g.errors.map((R) => {
        const x = Qt(R), y = tt(x, i, Ve(r));
        return gt(y, u, o);
      }));
    const p = Qt(g), w = tt(p, i, Ve(r)), E = gt(w, u, o);
    return dt(t, r, s), E;
  }
}
function qu(t, e, n, i, r) {
  return {
    fieldName: e.name,
    fieldNodes: n,
    returnType: e.type,
    parentType: i,
    path: r,
    schema: t.schema,
    fragments: t.fragments,
    rootValue: t.rootValue,
    operation: t.operation,
    variableValues: t.variableValues
  };
}
const Zh = "CRITICAL_ERROR";
function gt(t, e, n) {
  var i;
  if (re(e) || (i = t.extensions) != null && i[Zh])
    throw t;
  return n.push(t), null;
}
function vn(t, e, n, i, r, s, o) {
  if (s instanceof Error)
    throw s;
  if (re(e)) {
    const a = vn(t, e.ofType, n, i, r, s, o);
    if (a === null)
      throw new Error(`Cannot return null for non-nullable field ${i.parentType.name}.${i.fieldName}.`);
    return a;
  }
  if (s == null)
    return null;
  if (je(e))
    return tp(t, e, n, i, r, s, o);
  if (yn(e))
    return np(e, s);
  if (tn(e))
    return ip(t, e, n, i, r, s, o);
  if (pe(e))
    return ws(t, e, n, i, r, s, o);
  console.assert(!1, "Cannot complete value of unexpected output type: " + nt(e));
}
function zu(t, e, n) {
  if (typeof n.key == "number")
    return;
  const i = si(Oh, e[0], t.variableValues);
  if (i && i.if !== !1)
    return na(typeof i.initialCount == "number", "initialCount must be a number"), na(i.initialCount >= 0, "initialCount must be a positive integer"), {
      initialCount: i.initialCount,
      label: typeof i.label == "string" ? i.label : void 0
    };
}
async function ep(t, e, n, i, r, s, o) {
  var p;
  (p = t.signal) == null || p.addEventListener("abort", () => {
    var w;
    (w = s.return) == null || w.call(s);
  });
  const a = (o == null ? void 0 : o.errors) ?? t.errors, u = zu(t, n, r);
  let c = !1;
  const f = [];
  let g = 0;
  for (; ; ) {
    if (u && typeof u.initialCount == "number" && g >= u.initialCount) {
      fp(g, s, t, n, i, e, r, u.label, o);
      break;
    }
    const w = li(r, g, void 0);
    let E;
    try {
      if (E = await s.next(), E.done)
        break;
    } catch (R) {
      const x = Qt(R), y = tt(x, n, Ve(w));
      f.push(gt(y, e, a));
      break;
    }
    Qu(E.value, f, a, t, e, n, i, w, o) && (c = !0), g += 1;
  }
  return c ? Promise.all(f) : f;
}
function tp(t, e, n, i, r, s, o) {
  const a = e.ofType, u = (o == null ? void 0 : o.errors) ?? t.errors;
  if (Ur(s)) {
    const E = s[Symbol.asyncIterator]();
    return ep(t, a, n, i, r, E, o);
  }
  if (!Eh(s))
    throw X(`Expected Iterable, but did not find one for field "${i.parentType.name}.${i.fieldName}".`);
  const c = zu(t, n, r);
  let f = !1, g = o;
  const p = [];
  let w = 0;
  for (const E of s) {
    const R = li(r, w, void 0);
    if (c && typeof c.initialCount == "number" && w >= c.initialCount) {
      g = lp(r, R, E, t, n, i, a, c.label, g), w++;
      continue;
    }
    Qu(E, p, u, t, a, n, i, R, o) && (f = !0), w++;
  }
  return f ? Promise.all(p) : p;
}
function Qu(t, e, n, i, r, s, o, a, u) {
  try {
    let c;
    if (Ae(t) ? c = t.then((f) => vn(i, r, s, o, a, f, u)) : c = vn(i, r, s, o, a, t, u), Ae(c))
      return e.push(c.then(void 0, (f) => {
        f = Qt(f);
        const g = tt(f, s, Ve(a)), p = gt(g, r, n);
        return dt(i, a, u), p;
      })), !0;
    e.push(c);
  } catch (c) {
    const f = Qt(c), g = tt(f, s, Ve(a)), p = gt(g, r, n);
    dt(i, a, u), e.push(p);
  }
  return !1;
}
function np(t, e) {
  let n;
  try {
    n = t.serialize(e);
  } catch (i) {
    throw i instanceof P ? new Error(i.message) : i;
  }
  if (n == null)
    throw new Error(`Expected \`${nt(t)}.serialize(${nt(e)})\` to return non-nullable value, returned: ${nt(n)}`);
  return n;
}
function ip(t, e, n, i, r, s, o) {
  const a = e.resolveType ?? t.typeResolver, u = t.contextValue, c = a(s, u, i, e);
  return Ae(c) ? c.then((f) => ws(t, sa(f, t, e, n, i, s), n, i, r, s, o)) : ws(t, sa(c, t, e, n, i, s), n, i, r, s, o);
}
function sa(t, e, n, i, r, s) {
  if (t == null)
    throw X(`Abstract type "${n.name}" must resolve to an Object type at runtime for field "${r.parentType.name}.${r.fieldName}". Either the "${n.name}" type should provide a "resolveType" function or each possible type should provide an "isTypeOf" function.`, { nodes: i });
  if (pe(t)) {
    if (ja.major >= 16)
      throw X("Support for returning GraphQLObjectType from resolveType was removed in graphql-js@16.0.0 please return type name instead.");
    t = t.name;
  }
  if (typeof t != "string")
    throw X(`Abstract type "${n.name}" must resolve to an Object type at runtime for field "${r.parentType.name}.${r.fieldName}" with value ${nt(s)}, received "${nt(t)}".`);
  const o = e.schema.getType(t);
  if (o == null)
    throw X(`Abstract type "${n.name}" was resolved to a type "${t}" that does not exist inside the schema.`, { nodes: i });
  if (!pe(o))
    throw X(`Abstract type "${n.name}" was resolved to a non-object type "${t}".`, { nodes: i });
  if (!e.schema.isSubType(n, o))
    throw X(`Runtime Object type "${o.name}" is not a possible type for "${n.name}".`, { nodes: i });
  return o;
}
function ws(t, e, n, i, r, s, o) {
  if (e.isTypeOf) {
    const a = e.isTypeOf(s, t.contextValue, i);
    if (Ae(a))
      return a.then((u) => {
        if (!u)
          throw oa(e, s, n);
        return aa(t, e, n, r, s, o);
      });
    if (!a)
      throw oa(e, s, n);
  }
  return aa(t, e, n, r, s, o);
}
function oa(t, e, n) {
  return X(`Expected value of type "${t.name}" but got: ${nt(e)}.`, {
    nodes: n
  });
}
function aa(t, e, n, i, r, s) {
  const { fields: o, patches: a } = Wh(t, e, n), u = Zs(t, e, r, i, o, s);
  for (const c of a) {
    const { label: f, fields: g } = c;
    Yu(t, e, r, g, f, i, s);
  }
  return u;
}
const rp = function(t, e, n, i) {
  if (Cu(t) && typeof t.__typename == "string")
    return t.__typename;
  const r = n.schema.getPossibleTypes(i), s = [];
  for (let o = 0; o < r.length; o++) {
    const a = r[o];
    if (a.isTypeOf) {
      const u = a.isTypeOf(t, e, n);
      if (Ae(u))
        s[o] = u;
      else if (u)
        return a.name;
    }
  }
  if (s.length)
    return Promise.all(s).then((o) => {
      for (let a = 0; a < o.length; a++)
        if (o[a])
          return r[a].name;
    });
}, ua = function(t, e, n, i) {
  if (Cu(t) || typeof t == "function") {
    const r = t[i.fieldName];
    return typeof r == "function" ? t[i.fieldName](e, n, i) : r;
  }
};
function sp(t) {
  const e = Bu(t);
  if (!("schema" in e))
    return {
      errors: e.map((i) => {
        var r;
        return Object.defineProperty(i, "extensions", {
          value: {
            ...i.extensions,
            http: {
              ...(r = i.extensions) == null ? void 0 : r.http,
              status: 400
            }
          }
        }), i;
      })
    };
  const n = ap(e);
  return Ae(n) ? n.then((i) => la(e, i)) : la(e, n);
}
function Wu(t) {
  const e = t.subsequentResults;
  let n = !1, i = !1;
  return {
    [Symbol.asyncIterator]() {
      return this;
    },
    next() {
      return i ? Promise.resolve({
        value: void 0,
        done: i
      }) : n ? e.next() : (n = !0, Promise.resolve({
        value: t.initialResult,
        done: i
      }));
    },
    return() {
      return i = !0, e.return();
    },
    throw(r) {
      return i = !0, e.throw(r);
    }
  };
}
async function* op(t) {
  "initialResult" in t ? yield* Wu(t) : yield t;
}
function la(t, e) {
  return Ur(e) ? qh(Pu(e, async (n) => op(await Vu(Jh(t, n))), (n) => {
    throw n instanceof AggregateError ? new AggregateError(n.errors.map((i) => ca(i, t.operation)), n.message) : ca(n, t.operation);
  })) : e;
}
function ca(t, e) {
  return X(t.message, {
    originalError: t,
    nodes: [e]
  });
}
function ap(t) {
  try {
    const e = up(t);
    return Ae(e) ? e.then(void 0, (n) => ({ errors: [n] })) : e;
  } catch (e) {
    return { errors: [e] };
  }
}
function up(t) {
  const { schema: e, fragments: n, operation: i, variableValues: r, rootValue: s } = t, o = e.getSubscriptionType();
  if (o == null)
    throw X("Schema is not configured to execute subscription operation.", {
      nodes: i
    });
  const { fields: a } = ju(e, n, r, o, i.selectionSet), [u, c] = [...a.entries()][0], f = c[0].name.value, g = Ju(e, o, c[0]);
  if (!g)
    throw X(`The subscription field "${f}" is not defined.`, {
      nodes: c
    });
  const p = li(void 0, u, o.name), w = qu(t, g, c, o, p);
  try {
    const E = Du(g, c[0], r), R = t.contextValue, y = (g.subscribe ?? t.subscribeFieldResolver)(s, E, R, w);
    return Ae(y) ? y.then(fa).then(void 0, (S) => {
      throw tt(S, c, Ve(p));
    }) : fa(y, t.signal);
  } catch (E) {
    throw tt(E, c, Ve(p));
  }
}
function fa(t, e) {
  if (t instanceof Error)
    throw t;
  if (!Ur(t))
    throw X(`Subscription field must return Async Iterable. Received: ${nt(t)}.`);
  return {
    [Symbol.asyncIterator]() {
      const n = t[Symbol.asyncIterator]();
      return e == null || e.addEventListener("abort", () => {
        var i;
        (i = n.return) == null || i.call(n);
      }), n;
    }
  };
}
function Yu(t, e, n, i, r, s, o) {
  const a = new pp({
    label: r,
    path: s,
    parentContext: o,
    exeContext: t
  });
  let u;
  try {
    u = Zs(t, e, n, s, i, a), Ae(u) && (u = u.then(null, (c) => (a.errors.push(c), null)));
  } catch (c) {
    a.errors.push(c), u = null;
  }
  a.addData(u);
}
function lp(t, e, n, i, r, s, o, a, u) {
  const c = new Hu({
    label: a,
    path: e,
    parentContext: u,
    exeContext: i
  });
  let f;
  try {
    try {
      Ae(n) ? f = n.then((p) => vn(i, o, r, s, e, p, c)) : f = vn(i, o, r, s, e, n, c), Ae(f) && (f = f.then(void 0, (p) => {
        p = Qt(p);
        const w = tt(p, r, Ve(e)), E = gt(w, o, c.errors);
        return dt(i, e, c), E;
      }));
    } catch (p) {
      const w = Qt(p), E = tt(w, r, Ve(e));
      f = gt(E, o, c.errors), dt(i, e, c);
    }
  } catch (p) {
    return c.errors.push(p), dt(i, t, c), c.addItems(null), c;
  }
  let g;
  return Ae(f) ? g = f.then((p) => [p], (p) => (c.errors.push(p), dt(i, t, c), null)) : g = [f], c.addItems(g), c;
}
async function cp(t, e, n, i, r, s, o) {
  let a;
  try {
    const { value: c, done: f } = await t.next();
    if (f)
      return s.setIsCompletedIterator(), { done: f, value: void 0 };
    a = c;
  } catch (c) {
    const f = Qt(c), g = tt(f, n, Ve(o));
    return { done: !0, value: gt(g, r, s.errors) };
  }
  let u;
  try {
    return u = vn(e, r, n, i, o, a, s), Ae(u) && (u = u.then(void 0, (c) => {
      const f = tt(c, n, Ve(o)), g = gt(f, r, s.errors);
      return dt(e, o, s), g;
    })), { done: !1, value: u };
  } catch (c) {
    const f = tt(c, n, Ve(o)), g = gt(f, r, s.errors);
    return dt(e, o, s), { done: !1, value: g };
  }
}
async function fp(t, e, n, i, r, s, o, a, u) {
  let c = t, f = u ?? void 0;
  for (; ; ) {
    const g = li(o, c, void 0), p = new Hu({
      label: a,
      path: g,
      parentContext: f,
      iterator: e,
      exeContext: n
    });
    let w;
    try {
      w = await cp(e, n, i, r, s, p, g);
    } catch (y) {
      p.errors.push(y), dt(n, o, p), p.addItems(null), e != null && e.return && e.return().catch(() => {
      });
      return;
    }
    const { done: E, value: R } = w;
    let x;
    if (Ae(R) ? x = R.then((y) => [y], (y) => (p.errors.push(y), dt(n, o, p), null)) : x = [R], p.addItems(x), E)
      break;
    f = p, c++;
  }
}
function dt(t, e, n) {
  const i = Ve(e);
  t.subsequentPayloads.forEach((r) => {
    var s;
    if (r !== n) {
      for (let o = 0; o < i.length; o++)
        if (r.path[o] !== i[o])
          return;
      eo(r) && ((s = r.iterator) != null && s.return) && r.iterator.return().catch(() => {
      }), t.subsequentPayloads.delete(r);
    }
  });
}
function dp(t) {
  const e = [];
  for (const n of t.subsequentPayloads) {
    const i = {};
    if (n.isCompleted) {
      if (t.subsequentPayloads.delete(n), eo(n)) {
        const r = n.items;
        if (n.isCompletedIterator)
          continue;
        i.items = r;
      } else {
        const r = n.data;
        i.data = r ?? null;
      }
      i.path = n.path, n.label && (i.label = n.label), n.errors.length > 0 && (i.errors = n.errors), e.push(i);
    }
  }
  return e;
}
function hp(t) {
  let e = !1;
  const n = new Promise((s, o) => {
    var a;
    (a = t.signal) == null || a.addEventListener("abort", () => {
      var u;
      e = !0, o((u = t.signal) == null ? void 0 : u.reason);
    });
  });
  async function i() {
    if (e)
      return { value: void 0, done: !0 };
    if (await Promise.race([
      n,
      ...Array.from(t.subsequentPayloads).map((a) => a.promise)
    ]), e)
      return { value: void 0, done: !0 };
    const s = dp(t), o = t.subsequentPayloads.size > 0;
    return !s.length && o ? i() : (o || (e = !0), {
      value: s.length ? { incremental: s, hasNext: o } : { hasNext: o },
      done: !1
    });
  }
  function r() {
    const s = [];
    return t.subsequentPayloads.forEach((o) => {
      var a;
      eo(o) && ((a = o.iterator) != null && a.return) && s.push(o.iterator.return());
    }), Promise.all(s);
  }
  return {
    [Symbol.asyncIterator]() {
      return this;
    },
    next: i,
    async return() {
      return await r(), e = !0, { value: void 0, done: !0 };
    },
    async throw(s) {
      return await r(), e = !0, Promise.reject(s);
    }
  };
}
class pp {
  constructor(e) {
    U(this, "type");
    U(this, "errors");
    U(this, "label");
    U(this, "path");
    U(this, "promise");
    U(this, "data");
    U(this, "parentContext");
    U(this, "isCompleted");
    U(this, "_exeContext");
    U(this, "_resolve");
    this.type = "defer", this.label = e.label, this.path = Ve(e.path), this.parentContext = e.parentContext, this.errors = [], this._exeContext = e.exeContext, this._exeContext.subsequentPayloads.add(this), this.isCompleted = !1, this.data = null, this.promise = new Promise((n) => {
      this._resolve = (i) => {
        n(i);
      };
    }).then((n) => {
      this.data = n, this.isCompleted = !0;
    });
  }
  addData(e) {
    var i, r, s;
    const n = (i = this.parentContext) == null ? void 0 : i.promise;
    if (n) {
      (r = this._resolve) == null || r.call(this, n.then(() => e));
      return;
    }
    (s = this._resolve) == null || s.call(this, e);
  }
}
class Hu {
  constructor(e) {
    U(this, "type");
    U(this, "errors");
    U(this, "label");
    U(this, "path");
    U(this, "items");
    U(this, "promise");
    U(this, "parentContext");
    U(this, "iterator");
    U(this, "isCompletedIterator");
    U(this, "isCompleted");
    U(this, "_exeContext");
    U(this, "_resolve");
    this.type = "stream", this.items = null, this.label = e.label, this.path = Ve(e.path), this.parentContext = e.parentContext, this.iterator = e.iterator, this.errors = [], this._exeContext = e.exeContext, this._exeContext.subsequentPayloads.add(this), this.isCompleted = !1, this.items = null, this.promise = new Promise((n) => {
      this._resolve = (i) => {
        n(i);
      };
    }).then((n) => {
      this.items = n, this.isCompleted = !0;
    });
  }
  addItems(e) {
    var i, r, s;
    const n = (i = this.parentContext) == null ? void 0 : i.promise;
    if (n) {
      (r = this._resolve) == null || r.call(this, n.then(() => e));
      return;
    }
    (s = this._resolve) == null || s.call(this, e);
  }
  setIsCompletedIterator() {
    this.isCompletedIterator = !0;
  }
}
function eo(t) {
  return t.type === "stream";
}
function Ju(t, e, n) {
  const i = n.name.value;
  return i === vr.name && t.getQueryType() === e ? vr : i === wr.name && t.getQueryType() === e ? wr : i === Tr.name ? Tr : e.getFields()[i];
}
function da(t) {
  const e = Ys(t.document, t.operationName);
  if (e == null)
    throw new Error("Must provide an operation.");
  return e.operation === "subscription" ? sp(t) : new pt(() => Yh(t)).then((n) => "initialResult" in n ? Wu(n) : n).resolve();
}
function gp(t) {
  return t && t.__esModule && Object.prototype.hasOwnProperty.call(t, "default") ? t.default : t;
}
var Ee = {}, mp = Ee.fetch = globalThis.fetch, yp = Ee.Headers = globalThis.Headers, bp = Ee.Request = globalThis.Request, Ku = Ee.Response = globalThis.Response, Ep = Ee.FormData = globalThis.FormData, vp = Ee.ReadableStream = globalThis.ReadableStream, wp = Ee.WritableStream = globalThis.WritableStream, Tp = Ee.TransformStream = globalThis.TransformStream, Sp = Ee.CompressionStream = globalThis.CompressionStream, _p = Ee.DecompressionStream = globalThis.DecompressionStream, Ip = Ee.Blob = globalThis.Blob, Op = Ee.File = globalThis.File, Np = Ee.crypto = globalThis.crypto, Ap = Ee.btoa = globalThis.btoa, xp = Ee.TextEncoder = globalThis.TextEncoder, Fp = Ee.TextDecoder = globalThis.TextDecoder, Rp = Ee.URLPattern = globalThis.URLPattern, Xu = Ee.URL = globalThis.URL, to = Ee.URLSearchParams = globalThis.URLSearchParams, Lp = Ee.createFetch = () => globalThis, Zu = /* @__PURE__ */ Sl({
  __proto__: null,
  Blob: Ip,
  CompressionStream: Sp,
  DecompressionStream: _p,
  File: Op,
  FormData: Ep,
  Headers: yp,
  ReadableStream: vp,
  Request: bp,
  Response: Ku,
  TextDecoder: Fp,
  TextEncoder: xp,
  TransformStream: Tp,
  URL: Xu,
  URLPattern: Rp,
  URLSearchParams: to,
  WritableStream: wp,
  btoa: Ap,
  createFetch: Lp,
  crypto: Np,
  default: Ee,
  fetch: mp
}, [Ee]);
function el(t) {
  return t != null && typeof t == "object" && typeof t[Symbol.asyncIterator] == "function";
}
function Cp(t) {
  var i, r, s, o, a;
  if ((i = t.socket) != null && i.localPort)
    return (r = t.socket) == null ? void 0 : r.localPort;
  const e = ((s = t.headers) == null ? void 0 : s[":authority"]) || ((o = t.headers) == null ? void 0 : o.host), n = (a = e == null ? void 0 : e.split(":")) == null ? void 0 : a[1];
  return n || 80;
}
function kp(t) {
  var i, r, s, o, a;
  if ((i = t.headers) != null && i[":authority"])
    return (r = t.headers) == null ? void 0 : r[":authority"];
  if ((s = t.headers) != null && s.host)
    return (o = t.headers) == null ? void 0 : o.host;
  const e = Cp(t);
  if (t.hostname)
    return t.hostname + ":" + e;
  const n = (a = t.socket) == null ? void 0 : a.localAddress;
  return n && !(n != null && n.includes("::")) && !(n != null && n.includes("ffff")) ? `${n}:${e}` : "localhost";
}
function Dp(t) {
  var r;
  const e = kp(t), n = t.protocol || ((r = t.socket) != null && r.encrypted ? "https" : "http"), i = t.originalUrl || t.url || "/graphql";
  return `${n}://${e}${i}`;
}
function $p(t) {
  const e = t[Symbol.toStringTag];
  return !!(typeof t == "string" || e === "Uint8Array" || e === "Blob" || e === "FormData" || e === "URLSearchParams" || el(t));
}
class tl extends EventTarget {
  constructor() {
    super(...arguments);
    U(this, "aborted", !1);
    U(this, "_onabort", null);
    U(this, "reason");
  }
  throwIfAborted() {
    if (this.aborted)
      throw this.reason;
  }
  sendAbort() {
    this.reason = new DOMException("This operation was aborted", "AbortError"), this.aborted = !0, this.dispatchEvent(new Event("abort"));
  }
  get onabort() {
    return this._onabort;
  }
  set onabort(n) {
    this._onabort = n, n ? this.addEventListener("abort", n) : this.removeEventListener("abort", n);
  }
  any(n) {
    return AbortSignal.any([...n]);
  }
}
let ha = !1;
const Ts = /* @__PURE__ */ new WeakMap();
function Pp(t, e) {
  var u, c, f, g;
  const n = t.raw || t.req || t;
  let i = Dp(n);
  if (t.query) {
    const p = new Xu(i);
    for (const w in t.query)
      p.searchParams.set(w, t.query[w]);
    i = p.toString();
  }
  let r;
  const s = Ts.get(t);
  Ts.delete(t);
  let o = t.headers;
  if ((u = t.headers) != null && u[":method"]) {
    o = {};
    for (const p in t.headers)
      p.startsWith(":") || (o[p] = t.headers[p]);
  }
  if (s != null && s.once) {
    let p;
    if (e !== globalThis.Request)
      r = new tl(), p = () => r.sendAbort();
    else {
      const E = new AbortController();
      r = E.signal, p = () => E.abort();
    }
    const w = () => {
      r && !r.aborted && (n.aborted = !0, p());
    };
    s.once("error", w), s.once("close", w), s.once("finish", () => {
      s.removeListener("close", w);
    });
  }
  if (t.method === "GET" || t.method === "HEAD")
    return new e(i, {
      method: t.method,
      headers: o,
      signal: r
    });
  const a = t.body;
  if (a != null && Object.keys(a).length > 0) {
    if ($p(a))
      return new e(i, {
        method: t.method,
        headers: o,
        body: a,
        signal: r
      });
    const p = new e(i, {
      method: t.method,
      headers: o,
      signal: r
    });
    return (c = p.headers.get("content-type")) != null && c.includes("json") || p.headers.set("content-type", "application/json; charset=utf-8"), new Proxy(p, {
      get: (w, E, R) => {
        switch (E) {
          case "json":
            return async () => a;
          case "text":
            return async () => JSON.stringify(a);
          default:
            return Reflect.get(w, E, R);
        }
      }
    });
  }
  return (g = (f = globalThis.process) == null ? void 0 : f.versions) != null && g.bun && no(n) ? (ha || (ha = !0, console.warn(`You use Bun Node compatibility mode, which is not recommended!
It will affect your performance. Please check our Bun integration recipe, and avoid using 'http' for your server implementation.`)), new e(i, {
    method: t.method,
    headers: o,
    duplex: "half",
    body: new ReadableStream({
      start(p) {
        n.on("data", (w) => {
          p.enqueue(w);
        }), n.on("error", (w) => {
          p.error(w);
        }), n.on("end", () => {
          p.close();
        });
      },
      cancel(p) {
        n.destroy(p);
      }
    }),
    signal: r
  })) : new e(i, {
    method: t.method,
    headers: o,
    body: n,
    duplex: "half",
    signal: r
  });
}
function no(t) {
  return t.read != null;
}
function jp(t) {
  return no(t);
}
function pa(t) {
  return t != null && t.setHeader != null && t.end != null && t.once != null && t.write != null;
}
function Mp(t) {
  return t != null && t.request != null && t.respondWith != null;
}
function Up(t) {
  var e, n, i, r, s, o;
  (n = (e = t == null ? void 0 : t.socket) == null ? void 0 : e.setTimeout) == null || n.call(e, 0), (r = (i = t == null ? void 0 : t.socket) == null ? void 0 : i.setNoDelay) == null || r.call(i, !0), (o = (s = t == null ? void 0 : t.socket) == null ? void 0 : s.setKeepAlive) == null || o.call(s, !0);
}
function dr(t) {
  t.end(null, null, null);
}
async function Vp(t, e) {
  let n = !1;
  const i = () => {
    n = !0;
  };
  t.once("error", i), t.once("close", i), t.once("finish", () => {
    t.removeListener("close", i);
  });
  for await (const r of e) {
    if (n)
      break;
    if (!t.write(r)) {
      if (n)
        break;
      await new Promise((s) => t.once("drain", s));
    }
  }
  dr(t);
}
function ga(t, e, n) {
  if (e.closed || e.destroyed || e.writableEnded)
    return;
  if (!t) {
    e.statusCode = 404, e.end();
    return;
  }
  e.statusCode = t.status, e.statusMessage = t.statusText;
  let i = !1;
  t.headers.forEach((o, a) => {
    var u, c;
    if (a === "set-cookie") {
      if (i)
        return;
      i = !0;
      const f = (c = (u = t.headers).getSetCookie) == null ? void 0 : c.call(u);
      if (f) {
        e.setHeader("set-cookie", f);
        return;
      }
    }
    e.setHeader(a, o);
  });
  const r = t._buffer;
  if (r) {
    e.write(r), dr(e);
    return;
  }
  const s = t.body;
  if (s == null) {
    dr(e);
    return;
  }
  if (s[Symbol.toStringTag] === "Uint8Array") {
    e.write(s), dr(e);
    return;
  }
  if (Up(n), no(s)) {
    e.once("close", () => {
      s.destroy();
    }), s.pipe(e);
    return;
  }
  if (el(s))
    return Vp(e, s);
}
function Bp(t) {
  return t != null && typeof t == "object" && ("body" in t || "cache" in t || "credentials" in t || "headers" in t || "integrity" in t || "keepalive" in t || "method" in t || "mode" in t || "redirect" in t || "referrer" in t || "referrerPolicy" in t || "signal" in t || "window" in t);
}
function sr(...t) {
  const [e, ...n] = t.filter((i) => i != null && typeof i == "object");
  return n.forEach((i) => {
    const r = Object.getOwnPropertyNames(i).reduce((s, o) => (Object.getOwnPropertyDescriptor(i, o) && (s[o] = Object.getOwnPropertyDescriptor(i, o)), s), {});
    Object.getOwnPropertySymbols(i).forEach((s) => {
      const o = Object.getOwnPropertyDescriptor(i, s);
      o != null && o.enumerable && (r[s] = o);
    }), Object.defineProperties(e, r);
  }), e;
}
function hn(t) {
  return (t == null ? void 0 : t.then) != null;
}
function ma(t, e) {
  const n = t[Symbol.iterator]();
  let i = !1;
  function r() {
    i = !0;
  }
  function s() {
    const { done: o, value: a } = n.next();
    if (o)
      return;
    const u = e(a, r);
    if (hn(u))
      return u.then(() => {
        if (!i)
          return s();
      });
    if (!i)
      return s();
  }
  return s();
}
function or(t, e) {
  return new e(t.stack || t.message || t.toString(), {
    status: t.status || 500
  });
}
function ya(t, e) {
  if (t == null) {
    if (e == null)
      return {};
    t = {};
  }
  const n = {}, i = /* @__PURE__ */ new Set();
  return new Proxy(t, {
    get(r, s) {
      if (e != null && s === "waitUntil")
        return function(u) {
          e.push(u.catch((c) => console.error(c)));
        };
      const o = n[s];
      if (o != null)
        return typeof o == "function" ? o.bind(n) : o;
      if (!i.has(s))
        return r[s];
    },
    set(r, s, o) {
      return n[s] = o, !0;
    },
    has(r, s) {
      return e != null && s === "waitUntil" ? !0 : i.has(s) ? !1 : s in n ? !0 : s in r;
    },
    defineProperty(r, s, o) {
      return Reflect.defineProperty(n, s, o);
    },
    deleteProperty(r, s) {
      return s in n ? Reflect.deleteProperty(n, s) : (i.add(s), !0);
    },
    ownKeys(r) {
      const s = Reflect.ownKeys(n), o = Reflect.ownKeys(r), a = Array.from(i), u = new Set(s.concat(o.filter((c) => !a.includes(c))));
      return e != null && u.add("waitUntil"), Array.from(u);
    },
    getOwnPropertyDescriptor(r, s) {
      if (s in n)
        return Reflect.getOwnPropertyDescriptor(n, s);
      if (!i.has(s))
        return Reflect.getOwnPropertyDescriptor(r, s);
    }
  });
}
function Gp() {
  let t, e;
  return {
    promise: new Promise(function(r, s) {
      t = r, e = s;
    }),
    get resolve() {
      return t;
    },
    get reject() {
      return e;
    }
  };
}
function ba(t, e) {
  if (hn(t) && e) {
    const n = Gp();
    return e.addEventListener("abort", function() {
      n.reject(e.reason);
    }), t.then(function(r) {
      n.resolve(r);
    }).catch(function(r) {
      n.reject(r);
    }), n.promise;
  }
  return t;
}
function qp(t) {
  return !!t.onData;
}
function zp({ req: t, res: e, fetchAPI: n, signal: i }) {
  let r;
  const s = t.getMethod();
  if (s !== "get" && s !== "head") {
    let c;
    r = new n.ReadableStream({
      start(g) {
        c = g;
      }
    });
    const f = r.readable;
    if (f)
      i.addEventListener("abort", () => {
        f.push(null);
      }), e.onData(function(g, p) {
        const w = Buffer.from(g, 0, g.byteLength);
        f.push(Buffer.from(w)), p && f.push(null);
      });
    else {
      let g = !1;
      i.addEventListener("abort", () => {
        g || (g = !0, c.close());
      }), e.onData(function(p, w) {
        const E = Buffer.from(p, 0, p.byteLength);
        c.enqueue(Buffer.from(E)), w && (g = !0, c.close());
      });
    }
  }
  const o = new n.Headers();
  t.forEach((c, f) => {
    o.append(c, f);
  });
  let a = `http://localhost${t.getUrl()}`;
  const u = t.getQuery();
  return u && (a += `?${u}`), new n.Request(a, {
    method: s,
    headers: o,
    body: r,
    signal: i,
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore - not in the TS types yet
    duplex: "half"
  });
}
async function Qp(t, e, n) {
  for await (const i of e.body) {
    if (n.aborted)
      return;
    t.cork(() => {
      t.write(i);
    });
  }
  t.cork(() => {
    t.end();
  });
}
function Ea(t, e, n) {
  if (!e) {
    t.writeStatus("404 Not Found"), t.end();
    return;
  }
  const i = e._buffer;
  if (!n.aborted && (t.cork(() => {
    var r, s;
    t.writeStatus(`${e.status} ${e.statusText}`);
    for (const [o, a] of e.headers)
      if (o !== "content-length") {
        if (o === "set-cookie") {
          const u = (s = (r = e.headers).getSetCookie) == null ? void 0 : s.call(r);
          if (u) {
            for (const c of u)
              t.writeHeader(o, c);
            continue;
          }
        }
        t.writeHeader(o, a);
      }
    i && t.end(i);
  }), !i)) {
    if (!e.body) {
      t.end();
      return;
    }
    return Qp(t, e, n);
  }
}
async function Wp(t) {
  await Promise.allSettled(t);
}
function Yp(t) {
  try {
    return !!(t != null && t.request);
  } catch {
    return !1;
  }
}
const Hp = {};
function Jp(t, e) {
  const n = {
    ...Zu,
    ...e == null ? void 0 : e.fetchAPI
  }, i = typeof t == "function" ? t : t.handle, r = [], s = [];
  if ((e == null ? void 0 : e.plugins) != null)
    for (const y of e.plugins)
      y.onRequest && r.push(y.onRequest), y.onResponse && s.push(y.onResponse);
  const o = r.length > 0 || s.length > 0 ? function(S, A) {
    let O = i, C;
    if (r.length === 0)
      return b();
    let T = new Proxy(Hp, {
      get(d, N, L) {
        return T = new n.URL(S.url, "http://localhost"), Reflect.get(T, N, T);
      }
    });
    const _ = ma(r, (d, N) => d({
      request: S,
      setRequest(L) {
        S = L;
      },
      serverContext: A,
      fetchAPI: n,
      url: T,
      requestHandler: O,
      setRequestHandler(L) {
        O = L;
      },
      endResponse(L) {
        C = L, L && N();
      }
    }));
    function m(d) {
      if (s.length === 0)
        return d;
      const N = {
        request: S,
        response: d,
        serverContext: A,
        setResponse(J) {
          d = J;
        },
        fetchAPI: n
      }, L = ma(s, (J) => J(N));
      return hn(L) ? L.then(() => d) : d;
    }
    function b() {
      if (!C) {
        const d = O(S, A);
        return hn(d) ? d.then(m) : m(d);
      }
      return m(C);
    }
    return hn(_) ? _.then(b) : b();
  } : i;
  function a(y, ...S) {
    const A = S.length > 1 ? sr(...S) : S[0] || {}, O = Pp(y, n.Request);
    return o(O, A);
  }
  function u(y, S, ...A) {
    const O = S.raw || S;
    return Ts.set(y, O), a(y, ...A);
  }
  function c(y, S, ...A) {
    const O = [], C = {
      req: y,
      res: S,
      waitUntil(_) {
        O.push(_.catch((m) => console.error(m)));
      }
    };
    let T;
    try {
      T = u(y, S, C, ...A);
    } catch (_) {
      T = or(_, n.Response);
    }
    if (hn(T))
      return T.catch((_) => or(_, n.Response)).then((_) => ga(_, S, y)).catch((_) => {
        console.error(`Unexpected error while handling request: ${_.message || _}`);
      });
    try {
      return ga(T, S, y);
    } catch (_) {
      console.error(`Unexpected error while handling request: ${_.message || _}`);
    }
  }
  function f(y, S, ...A) {
    const O = [], C = {
      res: y,
      req: S,
      waitUntil(q) {
        O.push(q.catch((Z) => console.error(Z)));
      }
    }, _ = A.filter((q) => q != null).length > 0 ? sr(C, ...A) : C, m = new tl(), b = y.end.bind(y);
    let d = !1;
    y.end = function(q) {
      return d = !0, b(q);
    }, y.onAborted.bind(y)(function() {
      m.sendAbort();
    }), y.onAborted = function(q) {
      m.addEventListener("abort", q);
    };
    const L = zp({
      req: S,
      res: y,
      fetchAPI: n,
      signal: m
    });
    let J;
    try {
      J = o(L, _);
    } catch (q) {
      J = or(q, n.Response);
    }
    if (hn(J))
      return J.catch((q) => or(q, n.Response)).then((q) => {
        if (!m.aborted && !d)
          return Ea(y, q, m);
      }).catch((q) => {
        console.error(`Unexpected error while handling request: 
${q.stack || q.message || q}`);
      });
    try {
      if (!m.aborted && !d)
        return Ea(y, J, m);
    } catch (q) {
      console.error(`Unexpected error while handling request: 
${q.stack || q.message || q}`);
    }
  }
  function g(y, ...S) {
    if (!y.respondWith || !y.request)
      throw new TypeError(`Expected FetchEvent, got ${y}`);
    const A = S.filter((T) => T != null), O = A.length > 0 ? sr({}, y, ...A) : ya(y), C = o(y.request, O);
    y.respondWith(C);
  }
  function p(y, ...S) {
    const A = S.filter((_) => _ != null);
    let O;
    const C = A.length > 1 ? sr({}, ...A) : ya(A[0], A[0] == null || A[0].waitUntil == null ? O = [] : void 0), T = o(y, C);
    return O != null && O.length ? Wp(O).then(() => T) : T;
  }
  const w = (y, ...S) => {
    if (typeof y == "string" || "href" in y) {
      const [O, ...C] = S;
      if (Bp(O)) {
        const _ = new n.Request(y, O), m = p(_, ...C);
        return ba(m, O == null ? void 0 : O.signal);
      }
      const T = new n.Request(y);
      return p(T, ...S);
    }
    const A = p(y, ...S);
    return ba(A, y._signal);
  }, E = (y, ...S) => {
    const [A, ...O] = S;
    if (jp(y)) {
      if (!pa(A))
        throw new TypeError(`Expected ServerResponse, got ${A}`);
      return c(y, A, ...O);
    }
    if (qp(y))
      return f(y, A, ...O);
    if (pa(A))
      throw new TypeError("Got Node response without Node request");
    return Yp(y) ? Mp(y) ? g(y, ...S) : p(y.request, y, ...S) : w(y, ...S);
  }, R = {
    handleRequest: p,
    fetch: w,
    handleNodeRequest: a,
    handleNodeRequestAndResponse: u,
    requestListener: c,
    handleEvent: g,
    handleUWS: f,
    handle: E
  }, x = new Proxy(E, {
    // It should have all the attributes of the handler function and the server instance
    has: (y, S) => S in R || S in E || t && S in t,
    get: (y, S) => {
      const A = R[S];
      if (A)
        return A.bind ? A.bind(R) : A;
      const O = E[S];
      if (O)
        return O.bind ? O.bind(E) : O;
      if (t) {
        const C = t[S];
        if (C)
          return C.bind ? function(...T) {
            const _ = t[S](...T);
            return _ === t ? x : _;
          } : C;
      }
    },
    apply(y, S, A) {
      return E(...A);
    }
  });
  return x;
}
function Kp(t, e) {
  var r, s;
  const n = t.headers.get("origin");
  if (e === !1 || n == null)
    return null;
  const i = {};
  if (e.origin == null || e.origin.length === 0 || e.origin.includes("*") ? (i["Access-Control-Allow-Origin"] = n, i.Vary = "Origin") : typeof e.origin == "string" ? i["Access-Control-Allow-Origin"] = e.origin : Array.isArray(e.origin) && (e.origin.length === 1 ? i["Access-Control-Allow-Origin"] = e.origin[0] : e.origin.includes(n) ? (i["Access-Control-Allow-Origin"] = n, i.Vary = "Origin") : i["Access-Control-Allow-Origin"] = "null"), (r = e.methods) != null && r.length)
    i["Access-Control-Allow-Methods"] = e.methods.join(", ");
  else {
    const o = t.headers.get("access-control-request-method");
    o && (i["Access-Control-Allow-Methods"] = o);
  }
  if ((s = e.allowedHeaders) != null && s.length)
    i["Access-Control-Allow-Headers"] = e.allowedHeaders.join(", ");
  else {
    const o = t.headers.get("access-control-request-headers");
    o && (i["Access-Control-Allow-Headers"] = o, i.Vary ? i.Vary += ", Access-Control-Request-Headers" : i.Vary = "Access-Control-Request-Headers");
  }
  return e.credentials != null ? e.credentials === !0 && (i["Access-Control-Allow-Credentials"] = "true") : i["Access-Control-Allow-Origin"] !== "*" && (i["Access-Control-Allow-Credentials"] = "true"), e.exposedHeaders && (i["Access-Control-Expose-Headers"] = e.exposedHeaders.join(", ")), e.maxAge && (i["Access-Control-Max-Age"] = e.maxAge.toString()), i;
}
async function Xp(t, e, n) {
  const i = await e(t, n);
  return Kp(t, i);
}
function Zp(t) {
  let e = () => ({});
  if (t != null)
    if (typeof t == "function")
      e = t;
    else if (typeof t == "object") {
      const n = {
        ...t
      };
      e = () => n;
    } else t === !1 && (e = () => !1);
  return {
    onRequest({ request: n, fetchAPI: i, endResponse: r }) {
      if (n.method.toUpperCase() === "OPTIONS") {
        const s = new i.Response(null, {
          status: 204,
          // Safari (and potentially other browsers) need content-length 0,
          // for 204 or they just hang waiting for a body
          // see: https://github.com/expressjs/cors/blob/master/lib/index.js#L176
          headers: {
            "Content-Length": "0"
          }
        });
        r(s);
      }
    },
    async onResponse({ request: n, serverContext: i, response: r }) {
      const s = await Xp(n, e, i);
      if (s != null)
        for (const o in s)
          r.headers.set(o, s[o]);
    }
  };
}
function eg(t = Ku) {
  return function(n) {
    return n.details || n.status || n.headers || n.name === "HTTPError" ? new t(typeof n.details == "object" ? JSON.stringify(n.details) : n.message, {
      status: n.status,
      headers: n.headers || {}
    }) : (console.error(n), Ss(t));
  };
}
function Ss(t) {
  return t.error ? t.error() : new t(null, { status: 500 });
}
function tg(t) {
  return {
    onRequest({ requestHandler: e, setRequestHandler: n, fetchAPI: i }) {
      const r = t || eg(i.Response);
      n(function(o, a) {
        try {
          const u = e(o, a);
          return hn(u) ? u.catch((c) => r(c, o, a) || Ss(i.Response)) : u;
        } catch (u) {
          return r(u, o, a) || Ss(i.Response);
        }
      });
    }
  };
}
function nl(t) {
  const e = t.get("operationName") || void 0, n = t.get("query") || void 0, i = t.get("variables") || void 0, r = t.get("extensions") || void 0;
  return {
    operationName: e,
    query: n,
    variables: i ? JSON.parse(i) : void 0,
    extensions: r ? JSON.parse(r) : void 0
  };
}
function ng(t) {
  const e = new to(t);
  return nl(e);
}
function Fi(t, e) {
  let n = t.headers.get("content-type");
  return n = (n == null ? void 0 : n.split(",")[0]) || null, n === e || !!(n != null && n.startsWith(`${e};`));
}
function ig(t) {
  return t.method === "GET";
}
function rg(t) {
  const [, e = ""] = t.url.split("?"), n = new to(e);
  return nl(n);
}
function sg(t) {
  return t.method === "POST" && Fi(t, "application/x-www-form-urlencoded");
}
async function og(t) {
  const e = await t.text();
  return ng(e);
}
function ag(t) {
  return t.method === "POST" && Fi(t, "application/graphql");
}
async function ug(t) {
  return {
    query: await t.text()
  };
}
function lg(t) {
  return t.method === "POST" && (Fi(t, "application/json") || Fi(t, "application/graphql+json"));
}
async function cg(t) {
  let e;
  try {
    e = await t.json();
  } catch (i) {
    const r = {
      http: {
        spec: !0,
        status: 400
      }
    };
    throw i instanceof Error && (r.originalError = {
      name: i.name,
      message: i.message
    }), X("POST body sent invalid JSON.", {
      extensions: r
    });
  }
  if (e == null)
    throw X(`POST body is expected to be object but received ${e}`, {
      extensions: {
        http: {
          status: 400
        }
      }
    });
  const n = typeof e;
  if (n !== "object")
    throw X(`POST body is expected to be object but received ${n}`, {
      extensions: {
        http: {
          status: 400
        }
      }
    });
  return e;
}
function fg(t, e, n) {
  e.split && (e = e.split("."));
  for (var i = 0, r = e.length, s = t, o, a; i < r && (a = "" + e[i++], !(a === "__proto__" || a === "constructor" || a === "prototype")); )
    s = s[a] = i === r ? n : typeof (o = s[a]) == typeof e ? o : e[i] * 0 !== 0 || ~("" + e[i]).indexOf(".") ? {} : [];
}
function dg(t) {
  return t.method === "POST" && Fi(t, "multipart/form-data");
}
async function hg(t) {
  let e;
  try {
    e = await t.formData();
  } catch (s) {
    throw s instanceof Error && s.message.startsWith("File size limit exceeded: ") ? X(s.message, {
      extensions: {
        http: {
          status: 413
        }
      }
    }) : s;
  }
  const n = e.get("operations");
  if (!n)
    throw X('Missing multipart form field "operations"');
  if (typeof n != "string")
    throw X('Multipart form field "operations" must be a string');
  let i;
  try {
    i = JSON.parse(n);
  } catch {
    throw X('Multipart form field "operations" must be a valid JSON string');
  }
  const r = e.get("map");
  if (r != null) {
    if (typeof r != "string")
      throw X('Multipart form field "map" must be a string');
    let s;
    try {
      s = JSON.parse(r);
    } catch {
      throw X('Multipart form field "map" must be a valid JSON string');
    }
    for (const o in s) {
      const a = e.get(o), u = s[o];
      for (const c of u)
        fg(i, c, a);
    }
  }
  return i;
}
const pg = /* @__PURE__ */ new Set(["query", "variables", "operationName", "extensions"]);
function gg(t, e) {
  if (t == null || typeof t != "object")
    throw X('Invalid "params" in the request body', {
      extensions: {
        http: {
          spec: !0,
          status: 400
        }
      }
    });
  for (const n in t)
    if (t[n] != null && !pg.has(n)) {
      if (e != null && e.includes(n))
        continue;
      throw X(`Unexpected parameter "${n}" in the request body.`, {
        extensions: {
          http: {
            status: 400
          }
        }
      });
    }
}
function mg(t, e) {
  if (!bg(t))
    throw X(`Expected params to be an object but given ${Si(t)}.`, {
      extensions: {
        http: {
          status: 400,
          headers: {
            Allow: "GET, POST"
          }
        }
      }
    });
  if (gg(t, e), t.query == null)
    throw X("Must provide query string.", {
      extensions: {
        http: {
          spec: !0,
          status: 400,
          headers: {
            Allow: "GET, POST"
          }
        }
      }
    });
  const n = Si(t.query);
  if (n !== "string")
    throw X(`Expected "query" param to be a string, but given ${n}.`, {
      extensions: {
        http: {
          status: 400,
          headers: {
            Allow: "GET, POST"
          }
        }
      }
    });
  const i = Si(t.variables);
  if (!["object", "null", "undefined"].includes(i))
    throw X(`Expected "variables" param to be empty or an object, but given ${i}.`, {
      extensions: {
        http: {
          status: 400,
          headers: {
            Allow: "GET, POST"
          }
        }
      }
    });
  const r = Si(t.extensions);
  if (!["object", "null", "undefined"].includes(r))
    throw X(`Expected "extensions" param to be empty or an object, but given ${r}.`, {
      extensions: {
        http: {
          status: 400,
          headers: {
            Allow: "GET, POST"
          }
        }
      }
    });
  return t;
}
function yg(t) {
  return {
    onParams({ params: e }) {
      mg(e, t);
    }
  };
}
function Si(t) {
  return t === null ? "null" : Array.isArray(t) ? "array" : typeof t;
}
function bg(t) {
  return Si(t) === "object";
}
function Eg(t) {
  return t === "GET" || t === "POST";
}
function vg() {
  return {
    onRequestParse({ request: t }) {
      if (!Eg(t.method))
        throw X("GraphQL only supports GET and POST requests.", {
          extensions: {
            http: {
              status: 405,
              headers: {
                Allow: "GET, POST"
              }
            }
          }
        });
    }
  };
}
function wg() {
  return {
    onValidate() {
      return ({ valid: t, result: e }) => {
        var n, i;
        if (!t)
          for (const r of e)
            r.extensions.http = {
              ...r.extensions.http,
              spec: ((n = r.extensions.http) == null ? void 0 : n.spec) ?? !0,
              status: ((i = r.extensions.http) == null ? void 0 : i.status) ?? 400
            };
      };
    }
  };
}
function Tg(t) {
  return {
    onRequestParse() {
      return {
        onRequestParseDone({ requestParserResult: e }) {
          if (Array.isArray(e)) {
            if (!t)
              throw X("Batching is not supported.", {
                extensions: {
                  http: {
                    status: 400
                  }
                }
              });
            if (e.length > t)
              throw X(`Batching is limited to ${t} operations per request.`, {
                extensions: {
                  http: {
                    status: 413
                  }
                }
              });
          }
        }
      };
    }
  };
}
function Sg(t, e, n) {
  const i = e ? Ys(e, n) ?? void 0 : void 0;
  if (!i)
    throw X("Could not determine what operation to execute.", {
      extensions: {
        http: {
          status: 400
        }
      }
    });
  if (i.operation === "mutation" && t === "GET")
    throw X("Can only perform a mutation operation from a POST request.", {
      extensions: {
        http: {
          status: 405,
          headers: {
            Allow: "POST"
          }
        }
      }
    });
}
function _g() {
  return {
    onParse() {
      return ({ result: t, context: {
        request: e,
        // the `params` might be missing in cases where the user provided
        // malformed context to getEnveloped (like `yoga.getEnveloped({})`)
        params: { operationName: n } = {}
      } }) => {
        if (e) {
          if (t instanceof Error)
            throw t instanceof P && (t.extensions.http = {
              spec: !0,
              status: 400
            }), t;
          Sg(e.method, t, n);
        }
      };
    }
  };
}
function Ig({ id: t = Date.now().toString(), logger: e = console, endpoint: n = "/health" } = {}) {
  return {
    onRequest({ endResponse: i, fetchAPI: r, request: s }) {
      if (s.url.endsWith(n)) {
        e.debug("Responding Health Check");
        const o = new r.Response(null, {
          status: 200,
          headers: {
            "x-yoga-id": t
          }
        });
        i(o);
      }
    }
  };
}
const Vn = typeof performance == "object" && performance && typeof performance.now == "function" ? performance : Date, il = /* @__PURE__ */ new Set(), _s = typeof process == "object" && process ? process : {}, rl = (t, e, n, i) => {
  typeof _s.emitWarning == "function" ? _s.emitWarning(t, e, n, i) : console.error(`[${n}] ${e}: ${t}`);
};
let Ar = globalThis.AbortController, va = globalThis.AbortSignal;
var Ra;
if (typeof Ar > "u") {
  va = class {
    constructor() {
      U(this, "onabort");
      U(this, "_onabort", []);
      U(this, "reason");
      U(this, "aborted", !1);
    }
    addEventListener(i, r) {
      this._onabort.push(r);
    }
  }, Ar = class {
    constructor() {
      U(this, "signal", new va());
      e();
    }
    abort(i) {
      var r, s;
      if (!this.signal.aborted) {
        this.signal.reason = i, this.signal.aborted = !0;
        for (const o of this.signal._onabort)
          o(i);
        (s = (r = this.signal).onabort) == null || s.call(r, i);
      }
    }
  };
  let t = ((Ra = _s.env) == null ? void 0 : Ra.LRU_CACHE_IGNORE_AC_WARNING) !== "1";
  const e = () => {
    t && (t = !1, rl("AbortController is not defined. If using lru-cache in node 14, load an AbortController polyfill from the `node-abort-controller` package. A minimal polyfill is provided for use by LRUCache.fetch(), but it should not be relied upon in other contexts (eg, passing it to other APIs that use AbortController/AbortSignal might have undesirable effects). You may disable this with LRU_CACHE_IGNORE_AC_WARNING=1 in the env.", "NO_ABORT_CONTROLLER", "ENOTSUP", e));
  };
}
const Og = (t) => !il.has(t), rn = (t) => t && t === Math.floor(t) && t > 0 && isFinite(t), sl = (t) => rn(t) ? t <= Math.pow(2, 8) ? Uint8Array : t <= Math.pow(2, 16) ? Uint16Array : t <= Math.pow(2, 32) ? Uint32Array : t <= Number.MAX_SAFE_INTEGER ? hr : null : null;
let hr = class extends Array {
  constructor(e) {
    super(e), this.fill(0);
  }
};
var Wt, Yn;
let Ng = (Wt = class {
  constructor(e, n) {
    U(this, "heap");
    U(this, "length");
    if (!l(Wt, Yn))
      throw new TypeError("instantiate Stack using Stack.create(n)");
    this.heap = new n(e), this.length = 0;
  }
  static create(e) {
    const n = sl(e);
    if (!n)
      return [];
    $(Wt, Yn, !0);
    const i = new Wt(e, n);
    return $(Wt, Yn, !1), i;
  }
  push(e) {
    this.heap[this.length++] = e;
  }
  pop() {
    return this.heap[--this.length];
  }
}, Yn = new WeakMap(), // private constructor
Y(Wt, Yn, !1), Wt);
var La, Ca, vt, rt, wt, Tt, Hn, Jn, Ie, St, Te, de, ee, Qe, st, Ge, Re, _t, Le, It, Ot, ot, Nt, pn, We, V, Is, An, Zt, Li, at, ol, xn, Kn, Ci, sn, on, Os, pr, gr, ce, Ns, _i, an, As, Xn;
let Ag = (Xn = class {
  constructor(e) {
    Y(this, V);
    // options that cannot be changed without disaster
    Y(this, vt);
    Y(this, rt);
    Y(this, wt);
    Y(this, Tt);
    Y(this, Hn);
    Y(this, Jn);
    /**
     * {@link LRUCache.OptionsBase.ttl}
     */
    U(this, "ttl");
    /**
     * {@link LRUCache.OptionsBase.ttlResolution}
     */
    U(this, "ttlResolution");
    /**
     * {@link LRUCache.OptionsBase.ttlAutopurge}
     */
    U(this, "ttlAutopurge");
    /**
     * {@link LRUCache.OptionsBase.updateAgeOnGet}
     */
    U(this, "updateAgeOnGet");
    /**
     * {@link LRUCache.OptionsBase.updateAgeOnHas}
     */
    U(this, "updateAgeOnHas");
    /**
     * {@link LRUCache.OptionsBase.allowStale}
     */
    U(this, "allowStale");
    /**
     * {@link LRUCache.OptionsBase.noDisposeOnSet}
     */
    U(this, "noDisposeOnSet");
    /**
     * {@link LRUCache.OptionsBase.noUpdateTTL}
     */
    U(this, "noUpdateTTL");
    /**
     * {@link LRUCache.OptionsBase.maxEntrySize}
     */
    U(this, "maxEntrySize");
    /**
     * {@link LRUCache.OptionsBase.sizeCalculation}
     */
    U(this, "sizeCalculation");
    /**
     * {@link LRUCache.OptionsBase.noDeleteOnFetchRejection}
     */
    U(this, "noDeleteOnFetchRejection");
    /**
     * {@link LRUCache.OptionsBase.noDeleteOnStaleGet}
     */
    U(this, "noDeleteOnStaleGet");
    /**
     * {@link LRUCache.OptionsBase.allowStaleOnFetchAbort}
     */
    U(this, "allowStaleOnFetchAbort");
    /**
     * {@link LRUCache.OptionsBase.allowStaleOnFetchRejection}
     */
    U(this, "allowStaleOnFetchRejection");
    /**
     * {@link LRUCache.OptionsBase.ignoreFetchAbort}
     */
    U(this, "ignoreFetchAbort");
    // computed properties
    Y(this, Ie);
    Y(this, St);
    Y(this, Te);
    Y(this, de);
    Y(this, ee);
    Y(this, Qe);
    Y(this, st);
    Y(this, Ge);
    Y(this, Re);
    Y(this, _t);
    Y(this, Le);
    Y(this, It);
    Y(this, Ot);
    Y(this, ot);
    Y(this, Nt);
    Y(this, pn);
    Y(this, We);
    // conditionally set private methods related to TTL
    Y(this, An, () => {
    });
    Y(this, Zt, () => {
    });
    Y(this, Li, () => {
    });
    /* c8 ignore stop */
    Y(this, at, () => !1);
    Y(this, xn, (e) => {
    });
    Y(this, Kn, (e, n, i) => {
    });
    Y(this, Ci, (e, n, i, r) => {
      if (i || r)
        throw new TypeError("cannot set size without setting maxSize or maxEntrySize on cache");
      return 0;
    });
    /**
     * A String value that is used in the creation of the default string
     * description of an object. Called by the built-in method
     * `Object.prototype.toString`.
     */
    U(this, La, "LRUCache");
    const { max: n = 0, ttl: i, ttlResolution: r = 1, ttlAutopurge: s, updateAgeOnGet: o, updateAgeOnHas: a, allowStale: u, dispose: c, disposeAfter: f, noDisposeOnSet: g, noUpdateTTL: p, maxSize: w = 0, maxEntrySize: E = 0, sizeCalculation: R, fetchMethod: x, memoMethod: y, noDeleteOnFetchRejection: S, noDeleteOnStaleGet: A, allowStaleOnFetchRejection: O, allowStaleOnFetchAbort: C, ignoreFetchAbort: T } = e;
    if (n !== 0 && !rn(n))
      throw new TypeError("max option must be a nonnegative integer");
    const _ = n ? sl(n) : Array;
    if (!_)
      throw new Error("invalid max value: " + n);
    if ($(this, vt, n), $(this, rt, w), this.maxEntrySize = E || l(this, rt), this.sizeCalculation = R, this.sizeCalculation) {
      if (!l(this, rt) && !this.maxEntrySize)
        throw new TypeError("cannot set sizeCalculation without setting maxSize or maxEntrySize");
      if (typeof this.sizeCalculation != "function")
        throw new TypeError("sizeCalculation set to non-function");
    }
    if (y !== void 0 && typeof y != "function")
      throw new TypeError("memoMethod must be a function if defined");
    if ($(this, Jn, y), x !== void 0 && typeof x != "function")
      throw new TypeError("fetchMethod must be a function if specified");
    if ($(this, Hn, x), $(this, pn, !!x), $(this, Te, /* @__PURE__ */ new Map()), $(this, de, new Array(n).fill(void 0)), $(this, ee, new Array(n).fill(void 0)), $(this, Qe, new _(n)), $(this, st, new _(n)), $(this, Ge, 0), $(this, Re, 0), $(this, _t, Ng.create(n)), $(this, Ie, 0), $(this, St, 0), typeof c == "function" && $(this, wt, c), typeof f == "function" ? ($(this, Tt, f), $(this, Le, [])) : ($(this, Tt, void 0), $(this, Le, void 0)), $(this, Nt, !!l(this, wt)), $(this, We, !!l(this, Tt)), this.noDisposeOnSet = !!g, this.noUpdateTTL = !!p, this.noDeleteOnFetchRejection = !!S, this.allowStaleOnFetchRejection = !!O, this.allowStaleOnFetchAbort = !!C, this.ignoreFetchAbort = !!T, this.maxEntrySize !== 0) {
      if (l(this, rt) !== 0 && !rn(l(this, rt)))
        throw new TypeError("maxSize must be a positive integer if specified");
      if (!rn(this.maxEntrySize))
        throw new TypeError("maxEntrySize must be a positive integer if specified");
      k(this, V, ol).call(this);
    }
    if (this.allowStale = !!u, this.noDeleteOnStaleGet = !!A, this.updateAgeOnGet = !!o, this.updateAgeOnHas = !!a, this.ttlResolution = rn(r) || r === 0 ? r : 1, this.ttlAutopurge = !!s, this.ttl = i || 0, this.ttl) {
      if (!rn(this.ttl))
        throw new TypeError("ttl must be a positive integer if specified");
      k(this, V, Is).call(this);
    }
    if (l(this, vt) === 0 && this.ttl === 0 && l(this, rt) === 0)
      throw new TypeError("At least one of max, maxSize, or ttl is required");
    if (!this.ttlAutopurge && !l(this, vt) && !l(this, rt)) {
      const m = "LRU_CACHE_UNBOUNDED";
      Og(m) && (il.add(m), rl("TTL caching without ttlAutopurge, max, or maxSize can result in unbounded memory consumption.", "UnboundedCacheWarning", m, Xn));
    }
  }
  /**
   * Do not call this method unless you need to inspect the
   * inner workings of the cache.  If anything returned by this
   * object is modified in any way, strange breakage may occur.
   *
   * These fields are private for a reason!
   *
   * @internal
   */
  static unsafeExposeInternals(e) {
    return {
      // properties
      starts: l(e, Ot),
      ttls: l(e, ot),
      sizes: l(e, It),
      keyMap: l(e, Te),
      keyList: l(e, de),
      valList: l(e, ee),
      next: l(e, Qe),
      prev: l(e, st),
      get head() {
        return l(e, Ge);
      },
      get tail() {
        return l(e, Re);
      },
      free: l(e, _t),
      // methods
      isBackgroundFetch: (n) => {
        var i;
        return k(i = e, V, ce).call(i, n);
      },
      backgroundFetch: (n, i, r, s) => {
        var o;
        return k(o = e, V, gr).call(o, n, i, r, s);
      },
      moveToTail: (n) => {
        var i;
        return k(i = e, V, _i).call(i, n);
      },
      indexes: (n) => {
        var i;
        return k(i = e, V, sn).call(i, n);
      },
      rindexes: (n) => {
        var i;
        return k(i = e, V, on).call(i, n);
      },
      isStale: (n) => {
        var i;
        return l(i = e, at).call(i, n);
      }
    };
  }
  // Protected read-only members
  /**
   * {@link LRUCache.OptionsBase.max} (read-only)
   */
  get max() {
    return l(this, vt);
  }
  /**
   * {@link LRUCache.OptionsBase.maxSize} (read-only)
   */
  get maxSize() {
    return l(this, rt);
  }
  /**
   * The total computed size of items in the cache (read-only)
   */
  get calculatedSize() {
    return l(this, St);
  }
  /**
   * The number of items stored in the cache (read-only)
   */
  get size() {
    return l(this, Ie);
  }
  /**
   * {@link LRUCache.OptionsBase.fetchMethod} (read-only)
   */
  get fetchMethod() {
    return l(this, Hn);
  }
  get memoMethod() {
    return l(this, Jn);
  }
  /**
   * {@link LRUCache.OptionsBase.dispose} (read-only)
   */
  get dispose() {
    return l(this, wt);
  }
  /**
   * {@link LRUCache.OptionsBase.disposeAfter} (read-only)
   */
  get disposeAfter() {
    return l(this, Tt);
  }
  /**
   * Return the number of ms left in the item's TTL. If item is not in cache,
   * returns `0`. Returns `Infinity` if item is in cache without a defined TTL.
   */
  getRemainingTTL(e) {
    return l(this, Te).has(e) ? 1 / 0 : 0;
  }
  /**
   * Return a generator yielding `[key, value]` pairs,
   * in order from most recently used to least recently used.
   */
  *entries() {
    for (const e of k(this, V, sn).call(this))
      l(this, ee)[e] !== void 0 && l(this, de)[e] !== void 0 && !k(this, V, ce).call(this, l(this, ee)[e]) && (yield [l(this, de)[e], l(this, ee)[e]]);
  }
  /**
   * Inverse order version of {@link LRUCache.entries}
   *
   * Return a generator yielding `[key, value]` pairs,
   * in order from least recently used to most recently used.
   */
  *rentries() {
    for (const e of k(this, V, on).call(this))
      l(this, ee)[e] !== void 0 && l(this, de)[e] !== void 0 && !k(this, V, ce).call(this, l(this, ee)[e]) && (yield [l(this, de)[e], l(this, ee)[e]]);
  }
  /**
   * Return a generator yielding the keys in the cache,
   * in order from most recently used to least recently used.
   */
  *keys() {
    for (const e of k(this, V, sn).call(this)) {
      const n = l(this, de)[e];
      n !== void 0 && !k(this, V, ce).call(this, l(this, ee)[e]) && (yield n);
    }
  }
  /**
   * Inverse order version of {@link LRUCache.keys}
   *
   * Return a generator yielding the keys in the cache,
   * in order from least recently used to most recently used.
   */
  *rkeys() {
    for (const e of k(this, V, on).call(this)) {
      const n = l(this, de)[e];
      n !== void 0 && !k(this, V, ce).call(this, l(this, ee)[e]) && (yield n);
    }
  }
  /**
   * Return a generator yielding the values in the cache,
   * in order from most recently used to least recently used.
   */
  *values() {
    for (const e of k(this, V, sn).call(this))
      l(this, ee)[e] !== void 0 && !k(this, V, ce).call(this, l(this, ee)[e]) && (yield l(this, ee)[e]);
  }
  /**
   * Inverse order version of {@link LRUCache.values}
   *
   * Return a generator yielding the values in the cache,
   * in order from least recently used to most recently used.
   */
  *rvalues() {
    for (const e of k(this, V, on).call(this))
      l(this, ee)[e] !== void 0 && !k(this, V, ce).call(this, l(this, ee)[e]) && (yield l(this, ee)[e]);
  }
  /**
   * Iterating over the cache itself yields the same results as
   * {@link LRUCache.entries}
   */
  [(Ca = Symbol.iterator, La = Symbol.toStringTag, Ca)]() {
    return this.entries();
  }
  /**
   * Find a value for which the supplied fn method returns a truthy value,
   * similar to `Array.find()`. fn is called as `fn(value, key, cache)`.
   */
  find(e, n = {}) {
    for (const i of k(this, V, sn).call(this)) {
      const r = l(this, ee)[i], s = k(this, V, ce).call(this, r) ? r.__staleWhileFetching : r;
      if (s !== void 0 && e(s, l(this, de)[i], this))
        return this.get(l(this, de)[i], n);
    }
  }
  /**
   * Call the supplied function on each item in the cache, in order from most
   * recently used to least recently used.
   *
   * `fn` is called as `fn(value, key, cache)`.
   *
   * If `thisp` is provided, function will be called in the `this`-context of
   * the provided object, or the cache if no `thisp` object is provided.
   *
   * Does not update age or recenty of use, or iterate over stale values.
   */
  forEach(e, n = this) {
    for (const i of k(this, V, sn).call(this)) {
      const r = l(this, ee)[i], s = k(this, V, ce).call(this, r) ? r.__staleWhileFetching : r;
      s !== void 0 && e.call(n, s, l(this, de)[i], this);
    }
  }
  /**
   * The same as {@link LRUCache.forEach} but items are iterated over in
   * reverse order.  (ie, less recently used items are iterated over first.)
   */
  rforEach(e, n = this) {
    for (const i of k(this, V, on).call(this)) {
      const r = l(this, ee)[i], s = k(this, V, ce).call(this, r) ? r.__staleWhileFetching : r;
      s !== void 0 && e.call(n, s, l(this, de)[i], this);
    }
  }
  /**
   * Delete any stale entries. Returns true if anything was removed,
   * false otherwise.
   */
  purgeStale() {
    let e = !1;
    for (const n of k(this, V, on).call(this, { allowStale: !0 }))
      l(this, at).call(this, n) && (k(this, V, an).call(this, l(this, de)[n], "expire"), e = !0);
    return e;
  }
  /**
   * Get the extended info about a given entry, to get its value, size, and
   * TTL info simultaneously. Returns `undefined` if the key is not present.
   *
   * Unlike {@link LRUCache#dump}, which is designed to be portable and survive
   * serialization, the `start` value is always the current timestamp, and the
   * `ttl` is a calculated remaining time to live (negative if expired).
   *
   * Always returns stale values, if their info is found in the cache, so be
   * sure to check for expirations (ie, a negative {@link LRUCache.Entry#ttl})
   * if relevant.
   */
  info(e) {
    const n = l(this, Te).get(e);
    if (n === void 0)
      return;
    const i = l(this, ee)[n], r = k(this, V, ce).call(this, i) ? i.__staleWhileFetching : i;
    if (r === void 0)
      return;
    const s = { value: r };
    if (l(this, ot) && l(this, Ot)) {
      const o = l(this, ot)[n], a = l(this, Ot)[n];
      if (o && a) {
        const u = o - (Vn.now() - a);
        s.ttl = u, s.start = Date.now();
      }
    }
    return l(this, It) && (s.size = l(this, It)[n]), s;
  }
  /**
   * Return an array of [key, {@link LRUCache.Entry}] tuples which can be
   * passed to {@link LRLUCache#load}.
   *
   * The `start` fields are calculated relative to a portable `Date.now()`
   * timestamp, even if `performance.now()` is available.
   *
   * Stale entries are always included in the `dump`, even if
   * {@link LRUCache.OptionsBase.allowStale} is false.
   *
   * Note: this returns an actual array, not a generator, so it can be more
   * easily passed around.
   */
  dump() {
    const e = [];
    for (const n of k(this, V, sn).call(this, { allowStale: !0 })) {
      const i = l(this, de)[n], r = l(this, ee)[n], s = k(this, V, ce).call(this, r) ? r.__staleWhileFetching : r;
      if (s === void 0 || i === void 0)
        continue;
      const o = { value: s };
      if (l(this, ot) && l(this, Ot)) {
        o.ttl = l(this, ot)[n];
        const a = Vn.now() - l(this, Ot)[n];
        o.start = Math.floor(Date.now() - a);
      }
      l(this, It) && (o.size = l(this, It)[n]), e.unshift([i, o]);
    }
    return e;
  }
  /**
   * Reset the cache and load in the items in entries in the order listed.
   *
   * The shape of the resulting cache may be different if the same options are
   * not used in both caches.
   *
   * The `start` fields are assumed to be calculated relative to a portable
   * `Date.now()` timestamp, even if `performance.now()` is available.
   */
  load(e) {
    this.clear();
    for (const [n, i] of e) {
      if (i.start) {
        const r = Date.now() - i.start;
        i.start = Vn.now() - r;
      }
      this.set(n, i.value, i);
    }
  }
  /**
   * Add a value to the cache.
   *
   * Note: if `undefined` is specified as a value, this is an alias for
   * {@link LRUCache#delete}
   *
   * Fields on the {@link LRUCache.SetOptions} options param will override
   * their corresponding values in the constructor options for the scope
   * of this single `set()` operation.
   *
   * If `start` is provided, then that will set the effective start
   * time for the TTL calculation. Note that this must be a previous
   * value of `performance.now()` if supported, or a previous value of
   * `Date.now()` if not.
   *
   * Options object may also include `size`, which will prevent
   * calling the `sizeCalculation` function and just use the specified
   * number if it is a positive integer, and `noDisposeOnSet` which
   * will prevent calling a `dispose` function in the case of
   * overwrites.
   *
   * If the `size` (or return value of `sizeCalculation`) for a given
   * entry is greater than `maxEntrySize`, then the item will not be
   * added to the cache.
   *
   * Will update the recency of the entry.
   *
   * If the value is `undefined`, then this is an alias for
   * `cache.delete(key)`. `undefined` is never stored in the cache.
   */
  set(e, n, i = {}) {
    var p, w, E, R, x;
    if (n === void 0)
      return this.delete(e), this;
    const { ttl: r = this.ttl, start: s, noDisposeOnSet: o = this.noDisposeOnSet, sizeCalculation: a = this.sizeCalculation, status: u } = i;
    let { noUpdateTTL: c = this.noUpdateTTL } = i;
    const f = l(this, Ci).call(this, e, n, i.size || 0, a);
    if (this.maxEntrySize && f > this.maxEntrySize)
      return u && (u.set = "miss", u.maxEntrySizeExceeded = !0), k(this, V, an).call(this, e, "set"), this;
    let g = l(this, Ie) === 0 ? void 0 : l(this, Te).get(e);
    if (g === void 0)
      g = l(this, Ie) === 0 ? l(this, Re) : l(this, _t).length !== 0 ? l(this, _t).pop() : l(this, Ie) === l(this, vt) ? k(this, V, pr).call(this, !1) : l(this, Ie), l(this, de)[g] = e, l(this, ee)[g] = n, l(this, Te).set(e, g), l(this, Qe)[l(this, Re)] = g, l(this, st)[g] = l(this, Re), $(this, Re, g), Tn(this, Ie)._++, l(this, Kn).call(this, g, f, u), u && (u.set = "add"), c = !1;
    else {
      k(this, V, _i).call(this, g);
      const y = l(this, ee)[g];
      if (n !== y) {
        if (l(this, pn) && k(this, V, ce).call(this, y)) {
          y.__abortController.abort(new Error("replaced"));
          const { __staleWhileFetching: S } = y;
          S !== void 0 && !o && (l(this, Nt) && ((p = l(this, wt)) == null || p.call(this, S, e, "set")), l(this, We) && ((w = l(this, Le)) == null || w.push([S, e, "set"])));
        } else o || (l(this, Nt) && ((E = l(this, wt)) == null || E.call(this, y, e, "set")), l(this, We) && ((R = l(this, Le)) == null || R.push([y, e, "set"])));
        if (l(this, xn).call(this, g), l(this, Kn).call(this, g, f, u), l(this, ee)[g] = n, u) {
          u.set = "replace";
          const S = y && k(this, V, ce).call(this, y) ? y.__staleWhileFetching : y;
          S !== void 0 && (u.oldValue = S);
        }
      } else u && (u.set = "update");
    }
    if (r !== 0 && !l(this, ot) && k(this, V, Is).call(this), l(this, ot) && (c || l(this, Li).call(this, g, r, s), u && l(this, Zt).call(this, u, g)), !o && l(this, We) && l(this, Le)) {
      const y = l(this, Le);
      let S;
      for (; S = y == null ? void 0 : y.shift(); )
        (x = l(this, Tt)) == null || x.call(this, ...S);
    }
    return this;
  }
  /**
   * Evict the least recently used item, returning its value or
   * `undefined` if cache is empty.
   */
  pop() {
    var e;
    try {
      for (; l(this, Ie); ) {
        const n = l(this, ee)[l(this, Ge)];
        if (k(this, V, pr).call(this, !0), k(this, V, ce).call(this, n)) {
          if (n.__staleWhileFetching)
            return n.__staleWhileFetching;
        } else if (n !== void 0)
          return n;
      }
    } finally {
      if (l(this, We) && l(this, Le)) {
        const n = l(this, Le);
        let i;
        for (; i = n == null ? void 0 : n.shift(); )
          (e = l(this, Tt)) == null || e.call(this, ...i);
      }
    }
  }
  /**
   * Check if a key is in the cache, without updating the recency of use.
   * Will return false if the item is stale, even though it is technically
   * in the cache.
   *
   * Check if a key is in the cache, without updating the recency of
   * use. Age is updated if {@link LRUCache.OptionsBase.updateAgeOnHas} is set
   * to `true` in either the options or the constructor.
   *
   * Will return `false` if the item is stale, even though it is technically in
   * the cache. The difference can be determined (if it matters) by using a
   * `status` argument, and inspecting the `has` field.
   *
   * Will not update item age unless
   * {@link LRUCache.OptionsBase.updateAgeOnHas} is set.
   */
  has(e, n = {}) {
    const { updateAgeOnHas: i = this.updateAgeOnHas, status: r } = n, s = l(this, Te).get(e);
    if (s !== void 0) {
      const o = l(this, ee)[s];
      if (k(this, V, ce).call(this, o) && o.__staleWhileFetching === void 0)
        return !1;
      if (l(this, at).call(this, s))
        r && (r.has = "stale", l(this, Zt).call(this, r, s));
      else return i && l(this, An).call(this, s), r && (r.has = "hit", l(this, Zt).call(this, r, s)), !0;
    } else r && (r.has = "miss");
    return !1;
  }
  /**
   * Like {@link LRUCache#get} but doesn't update recency or delete stale
   * items.
   *
   * Returns `undefined` if the item is stale, unless
   * {@link LRUCache.OptionsBase.allowStale} is set.
   */
  peek(e, n = {}) {
    const { allowStale: i = this.allowStale } = n, r = l(this, Te).get(e);
    if (r === void 0 || !i && l(this, at).call(this, r))
      return;
    const s = l(this, ee)[r];
    return k(this, V, ce).call(this, s) ? s.__staleWhileFetching : s;
  }
  async fetch(e, n = {}) {
    const {
      // get options
      allowStale: i = this.allowStale,
      updateAgeOnGet: r = this.updateAgeOnGet,
      noDeleteOnStaleGet: s = this.noDeleteOnStaleGet,
      // set options
      ttl: o = this.ttl,
      noDisposeOnSet: a = this.noDisposeOnSet,
      size: u = 0,
      sizeCalculation: c = this.sizeCalculation,
      noUpdateTTL: f = this.noUpdateTTL,
      // fetch exclusive options
      noDeleteOnFetchRejection: g = this.noDeleteOnFetchRejection,
      allowStaleOnFetchRejection: p = this.allowStaleOnFetchRejection,
      ignoreFetchAbort: w = this.ignoreFetchAbort,
      allowStaleOnFetchAbort: E = this.allowStaleOnFetchAbort,
      context: R,
      forceRefresh: x = !1,
      status: y,
      signal: S
    } = n;
    if (!l(this, pn))
      return y && (y.fetch = "get"), this.get(e, {
        allowStale: i,
        updateAgeOnGet: r,
        noDeleteOnStaleGet: s,
        status: y
      });
    const A = {
      allowStale: i,
      updateAgeOnGet: r,
      noDeleteOnStaleGet: s,
      ttl: o,
      noDisposeOnSet: a,
      size: u,
      sizeCalculation: c,
      noUpdateTTL: f,
      noDeleteOnFetchRejection: g,
      allowStaleOnFetchRejection: p,
      allowStaleOnFetchAbort: E,
      ignoreFetchAbort: w,
      status: y,
      signal: S
    };
    let O = l(this, Te).get(e);
    if (O === void 0) {
      y && (y.fetch = "miss");
      const C = k(this, V, gr).call(this, e, O, A, R);
      return C.__returned = C;
    } else {
      const C = l(this, ee)[O];
      if (k(this, V, ce).call(this, C)) {
        const d = i && C.__staleWhileFetching !== void 0;
        return y && (y.fetch = "inflight", d && (y.returnedStale = !0)), d ? C.__staleWhileFetching : C.__returned = C;
      }
      const T = l(this, at).call(this, O);
      if (!x && !T)
        return y && (y.fetch = "hit"), k(this, V, _i).call(this, O), r && l(this, An).call(this, O), y && l(this, Zt).call(this, y, O), C;
      const _ = k(this, V, gr).call(this, e, O, A, R), b = _.__staleWhileFetching !== void 0 && i;
      return y && (y.fetch = T ? "stale" : "refresh", b && T && (y.returnedStale = !0)), b ? _.__staleWhileFetching : _.__returned = _;
    }
  }
  async forceFetch(e, n = {}) {
    const i = await this.fetch(e, n);
    if (i === void 0)
      throw new Error("fetch() returned undefined");
    return i;
  }
  memo(e, n = {}) {
    const i = l(this, Jn);
    if (!i)
      throw new Error("no memoMethod provided to constructor");
    const { context: r, forceRefresh: s, ...o } = n, a = this.get(e, o);
    if (!s && a !== void 0)
      return a;
    const u = i(e, a, {
      options: o,
      context: r
    });
    return this.set(e, u, o), u;
  }
  /**
   * Return a value from the cache. Will update the recency of the cache
   * entry found.
   *
   * If the key is not found, get() will return `undefined`.
   */
  get(e, n = {}) {
    const { allowStale: i = this.allowStale, updateAgeOnGet: r = this.updateAgeOnGet, noDeleteOnStaleGet: s = this.noDeleteOnStaleGet, status: o } = n, a = l(this, Te).get(e);
    if (a !== void 0) {
      const u = l(this, ee)[a], c = k(this, V, ce).call(this, u);
      return o && l(this, Zt).call(this, o, a), l(this, at).call(this, a) ? (o && (o.get = "stale"), c ? (o && i && u.__staleWhileFetching !== void 0 && (o.returnedStale = !0), i ? u.__staleWhileFetching : void 0) : (s || k(this, V, an).call(this, e, "expire"), o && i && (o.returnedStale = !0), i ? u : void 0)) : (o && (o.get = "hit"), c ? u.__staleWhileFetching : (k(this, V, _i).call(this, a), r && l(this, An).call(this, a), u));
    } else o && (o.get = "miss");
  }
  /**
   * Deletes a key out of the cache.
   *
   * Returns true if the key was deleted, false otherwise.
   */
  delete(e) {
    return k(this, V, an).call(this, e, "delete");
  }
  /**
   * Clear the cache entirely, throwing away all values.
   */
  clear() {
    return k(this, V, As).call(this, "delete");
  }
}, vt = new WeakMap(), rt = new WeakMap(), wt = new WeakMap(), Tt = new WeakMap(), Hn = new WeakMap(), Jn = new WeakMap(), Ie = new WeakMap(), St = new WeakMap(), Te = new WeakMap(), de = new WeakMap(), ee = new WeakMap(), Qe = new WeakMap(), st = new WeakMap(), Ge = new WeakMap(), Re = new WeakMap(), _t = new WeakMap(), Le = new WeakMap(), It = new WeakMap(), Ot = new WeakMap(), ot = new WeakMap(), Nt = new WeakMap(), pn = new WeakMap(), We = new WeakMap(), V = new WeakSet(), Is = function() {
  const e = new hr(l(this, vt)), n = new hr(l(this, vt));
  $(this, ot, e), $(this, Ot, n), $(this, Li, (s, o, a = Vn.now()) => {
    if (n[s] = o !== 0 ? a : 0, e[s] = o, o !== 0 && this.ttlAutopurge) {
      const u = setTimeout(() => {
        l(this, at).call(this, s) && k(this, V, an).call(this, l(this, de)[s], "expire");
      }, o + 1);
      u.unref && u.unref();
    }
  }), $(this, An, (s) => {
    n[s] = e[s] !== 0 ? Vn.now() : 0;
  }), $(this, Zt, (s, o) => {
    if (e[o]) {
      const a = e[o], u = n[o];
      if (!a || !u)
        return;
      s.ttl = a, s.start = u, s.now = i || r();
      const c = s.now - u;
      s.remainingTTL = a - c;
    }
  });
  let i = 0;
  const r = () => {
    const s = Vn.now();
    if (this.ttlResolution > 0) {
      i = s;
      const o = setTimeout(() => i = 0, this.ttlResolution);
      o.unref && o.unref();
    }
    return s;
  };
  this.getRemainingTTL = (s) => {
    const o = l(this, Te).get(s);
    if (o === void 0)
      return 0;
    const a = e[o], u = n[o];
    if (!a || !u)
      return 1 / 0;
    const c = (i || r()) - u;
    return a - c;
  }, $(this, at, (s) => {
    const o = n[s], a = e[s];
    return !!a && !!o && (i || r()) - o > a;
  });
}, An = new WeakMap(), Zt = new WeakMap(), Li = new WeakMap(), at = new WeakMap(), ol = function() {
  const e = new hr(l(this, vt));
  $(this, St, 0), $(this, It, e), $(this, xn, (n) => {
    $(this, St, l(this, St) - e[n]), e[n] = 0;
  }), $(this, Ci, (n, i, r, s) => {
    if (k(this, V, ce).call(this, i))
      return 0;
    if (!rn(r))
      if (s) {
        if (typeof s != "function")
          throw new TypeError("sizeCalculation must be a function");
        if (r = s(i, n), !rn(r))
          throw new TypeError("sizeCalculation return invalid (expect positive integer)");
      } else
        throw new TypeError("invalid size value (must be positive integer). When maxSize or maxEntrySize is used, sizeCalculation or size must be set.");
    return r;
  }), $(this, Kn, (n, i, r) => {
    if (e[n] = i, l(this, rt)) {
      const s = l(this, rt) - e[n];
      for (; l(this, St) > s; )
        k(this, V, pr).call(this, !0);
    }
    $(this, St, l(this, St) + e[n]), r && (r.entrySize = i, r.totalCalculatedSize = l(this, St));
  });
}, xn = new WeakMap(), Kn = new WeakMap(), Ci = new WeakMap(), sn = function* ({ allowStale: e = this.allowStale } = {}) {
  if (l(this, Ie))
    for (let n = l(this, Re); !(!k(this, V, Os).call(this, n) || ((e || !l(this, at).call(this, n)) && (yield n), n === l(this, Ge))); )
      n = l(this, st)[n];
}, on = function* ({ allowStale: e = this.allowStale } = {}) {
  if (l(this, Ie))
    for (let n = l(this, Ge); !(!k(this, V, Os).call(this, n) || ((e || !l(this, at).call(this, n)) && (yield n), n === l(this, Re))); )
      n = l(this, Qe)[n];
}, Os = function(e) {
  return e !== void 0 && l(this, Te).get(l(this, de)[e]) === e;
}, pr = function(e) {
  var s, o;
  const n = l(this, Ge), i = l(this, de)[n], r = l(this, ee)[n];
  return l(this, pn) && k(this, V, ce).call(this, r) ? r.__abortController.abort(new Error("evicted")) : (l(this, Nt) || l(this, We)) && (l(this, Nt) && ((s = l(this, wt)) == null || s.call(this, r, i, "evict")), l(this, We) && ((o = l(this, Le)) == null || o.push([r, i, "evict"]))), l(this, xn).call(this, n), e && (l(this, de)[n] = void 0, l(this, ee)[n] = void 0, l(this, _t).push(n)), l(this, Ie) === 1 ? ($(this, Ge, $(this, Re, 0)), l(this, _t).length = 0) : $(this, Ge, l(this, Qe)[n]), l(this, Te).delete(i), Tn(this, Ie)._--, n;
}, gr = function(e, n, i, r) {
  const s = n === void 0 ? void 0 : l(this, ee)[n];
  if (k(this, V, ce).call(this, s))
    return s;
  const o = new Ar(), { signal: a } = i;
  a == null || a.addEventListener("abort", () => o.abort(a.reason), {
    signal: o.signal
  });
  const u = {
    signal: o.signal,
    options: i,
    context: r
  }, c = (R, x = !1) => {
    const { aborted: y } = o.signal, S = i.ignoreFetchAbort && R !== void 0;
    if (i.status && (y && !x ? (i.status.fetchAborted = !0, i.status.fetchError = o.signal.reason, S && (i.status.fetchAbortIgnored = !0)) : i.status.fetchResolved = !0), y && !S && !x)
      return g(o.signal.reason);
    const A = w;
    return l(this, ee)[n] === w && (R === void 0 ? A.__staleWhileFetching ? l(this, ee)[n] = A.__staleWhileFetching : k(this, V, an).call(this, e, "fetch") : (i.status && (i.status.fetchUpdated = !0), this.set(e, R, u.options))), R;
  }, f = (R) => (i.status && (i.status.fetchRejected = !0, i.status.fetchError = R), g(R)), g = (R) => {
    const { aborted: x } = o.signal, y = x && i.allowStaleOnFetchAbort, S = y || i.allowStaleOnFetchRejection, A = S || i.noDeleteOnFetchRejection, O = w;
    if (l(this, ee)[n] === w && (!A || O.__staleWhileFetching === void 0 ? k(this, V, an).call(this, e, "fetch") : y || (l(this, ee)[n] = O.__staleWhileFetching)), S)
      return i.status && O.__staleWhileFetching !== void 0 && (i.status.returnedStale = !0), O.__staleWhileFetching;
    if (O.__returned === O)
      throw R;
  }, p = (R, x) => {
    var S;
    const y = (S = l(this, Hn)) == null ? void 0 : S.call(this, e, s, u);
    y && y instanceof Promise && y.then((A) => R(A === void 0 ? void 0 : A), x), o.signal.addEventListener("abort", () => {
      (!i.ignoreFetchAbort || i.allowStaleOnFetchAbort) && (R(void 0), i.allowStaleOnFetchAbort && (R = (A) => c(A, !0)));
    });
  };
  i.status && (i.status.fetchDispatched = !0);
  const w = new Promise(p).then(c, f), E = Object.assign(w, {
    __abortController: o,
    __staleWhileFetching: s,
    __returned: void 0
  });
  return n === void 0 ? (this.set(e, E, { ...u.options, status: void 0 }), n = l(this, Te).get(e)) : l(this, ee)[n] = E, E;
}, ce = function(e) {
  if (!l(this, pn))
    return !1;
  const n = e;
  return !!n && n instanceof Promise && n.hasOwnProperty("__staleWhileFetching") && n.__abortController instanceof Ar;
}, Ns = function(e, n) {
  l(this, st)[n] = e, l(this, Qe)[e] = n;
}, _i = function(e) {
  e !== l(this, Re) && (e === l(this, Ge) ? $(this, Ge, l(this, Qe)[e]) : k(this, V, Ns).call(this, l(this, st)[e], l(this, Qe)[e]), k(this, V, Ns).call(this, l(this, Re), e), $(this, Re, e));
}, an = function(e, n) {
  var r, s, o, a;
  let i = !1;
  if (l(this, Ie) !== 0) {
    const u = l(this, Te).get(e);
    if (u !== void 0)
      if (i = !0, l(this, Ie) === 1)
        k(this, V, As).call(this, n);
      else {
        l(this, xn).call(this, u);
        const c = l(this, ee)[u];
        if (k(this, V, ce).call(this, c) ? c.__abortController.abort(new Error("deleted")) : (l(this, Nt) || l(this, We)) && (l(this, Nt) && ((r = l(this, wt)) == null || r.call(this, c, e, n)), l(this, We) && ((s = l(this, Le)) == null || s.push([c, e, n]))), l(this, Te).delete(e), l(this, de)[u] = void 0, l(this, ee)[u] = void 0, u === l(this, Re))
          $(this, Re, l(this, st)[u]);
        else if (u === l(this, Ge))
          $(this, Ge, l(this, Qe)[u]);
        else {
          const f = l(this, st)[u];
          l(this, Qe)[f] = l(this, Qe)[u];
          const g = l(this, Qe)[u];
          l(this, st)[g] = l(this, st)[u];
        }
        Tn(this, Ie)._--, l(this, _t).push(u);
      }
  }
  if (l(this, We) && ((o = l(this, Le)) != null && o.length)) {
    const u = l(this, Le);
    let c;
    for (; c = u == null ? void 0 : u.shift(); )
      (a = l(this, Tt)) == null || a.call(this, ...c);
  }
  return i;
}, As = function(e) {
  var n, i, r;
  for (const s of k(this, V, on).call(this, { allowStale: !0 })) {
    const o = l(this, ee)[s];
    if (k(this, V, ce).call(this, o))
      o.__abortController.abort(new Error("deleted"));
    else {
      const a = l(this, de)[s];
      l(this, Nt) && ((n = l(this, wt)) == null || n.call(this, o, a, e)), l(this, We) && ((i = l(this, Le)) == null || i.push([o, a, e]));
    }
  }
  if (l(this, Te).clear(), l(this, ee).fill(void 0), l(this, de).fill(void 0), l(this, ot) && l(this, Ot) && (l(this, ot).fill(0), l(this, Ot).fill(0)), l(this, It) && l(this, It).fill(0), $(this, Ge, 0), $(this, Re, 0), l(this, _t).length = 0, $(this, St, 0), $(this, Ie, 0), l(this, We) && l(this, Le)) {
    const s = l(this, Le);
    let o;
    for (; o = s == null ? void 0 : s.shift(); )
      (r = l(this, Tt)) == null || r.call(this, ...o);
  }
}, Xn);
const xg = 1024, Fg = 36e5;
function rs({ max: t = xg, ttl: e = Fg } = {}) {
  return new Ag({ max: t, ttl: e });
}
function Rg({ documentCache: t = rs(), errorCache: e = rs(), validationCache: n = !0 }) {
  const i = rs();
  return {
    onParse({ params: r, setParsedDocument: s }) {
      const o = r.source.toString(), a = t.get(o);
      if (a) {
        s(a);
        return;
      }
      const u = e.get(o);
      if (u)
        throw u;
      return ({ result: c }) => {
        c != null && (c instanceof Error ? e.set(o, c) : t.set(o, c));
      };
    },
    onValidate({
      params: { schema: r, documentAST: s, rules: o },
      setResult: a
      // eslint-disable-next-line @typescript-eslint/ban-types
    }) {
      if (r != null && n !== !1) {
        const u = (o == null ? void 0 : o.map((p) => p.name).join(",")) || "";
        let c = i.get(u);
        c || (c = /* @__PURE__ */ new WeakMap(), i.set(u, c));
        let f = c.get(r);
        f || (f = /* @__PURE__ */ new WeakMap(), c.set(r, f));
        const g = f.get(s);
        if (g) {
          a(g);
          return;
        }
        return ({ result: p }) => {
          p != null && (f == null || f.set(s, p));
        };
      }
    }
  };
}
const Lg = () => !0;
function mi(t) {
  const e = t.match || Lg;
  return {
    onRequestParse({ request: n, setRequestParser: i }) {
      e(n) && i(t.parse);
    }
  };
}
function Cg(t) {
  const e = (t.headers.get("accept") || "*/*").replace(/\s/g, "").toLowerCase().split(","), n = [];
  for (const i of e) {
    const [r, ...s] = i.split(";");
    ((s == null ? void 0 : s.find((a) => a.includes("charset="))) || "charset=utf-8") === "charset=utf-8" && n.push(r);
  }
  return n.reverse();
}
function kg(t, e) {
  const [n, i] = t.split("/"), [r, s] = e.split("/");
  return (r === "*" || r === n) && (s === "*" || s === i);
}
function io(t) {
  if (Array.isArray(t))
    return `[${t.map((i) => {
      const r = wa(i);
      return (i.stringify || JSON.stringify)(r);
    }).join(",")}]`;
  const e = wa(t);
  return (t.stringify || JSON.stringify)(e);
}
function wa(t) {
  var e, n;
  if ((e = t.errors) != null && e.length || (n = t.extensions) != null && n.http) {
    const i = { ...t };
    if (i.errors && (i.errors = i.errors.map(al)), i.extensions) {
      const { http: r, ...s } = t.extensions;
      i.extensions = Object.keys(s).length ? s : void 0;
    }
    return i;
  }
  return t;
}
function al(t) {
  if (oi(t)) {
    const e = "toJSON" in t && typeof t.toJSON == "function" ? t.toJSON() : Object(t), { http: n, unexpected: i, ...r } = e.extensions || {};
    return X(t.message, {
      nodes: t.nodes,
      source: t.source,
      positions: t.positions,
      path: t.path,
      originalError: al(t.originalError || void 0),
      extensions: Object.keys(r).length ? r : void 0
    });
  }
  return t;
}
function Dg(t, e) {
  const i = Xs(t, {
    Connection: "keep-alive",
    "Content-Type": 'multipart/mixed; boundary="-"',
    "Transfer-Encoding": "chunked"
  });
  let r;
  const s = new e.TextEncoder(), o = new e.ReadableStream({
    start(a) {
      if (zt(t))
        r = t[Symbol.asyncIterator]();
      else {
        let u = !1;
        r = {
          next: () => u ? Promise.resolve({ done: !0, value: null }) : (u = !0, Promise.resolve({ done: !1, value: t }))
        };
      }
      a.enqueue(s.encode(`\r
`)), a.enqueue(s.encode("---"));
    },
    async pull(a) {
      try {
        const { done: u, value: c } = await r.next();
        if (c != null) {
          a.enqueue(s.encode(`\r
`)), a.enqueue(s.encode("Content-Type: application/json; charset=utf-8")), a.enqueue(s.encode(`\r
`));
          const f = io(c), g = s.encode(f);
          a.enqueue(s.encode("Content-Length: " + g.byteLength)), a.enqueue(s.encode(`\r
`)), a.enqueue(s.encode(`\r
`)), a.enqueue(g), a.enqueue(s.encode(`\r
`)), a.enqueue(s.encode("---"));
        }
        u && (a.enqueue(s.encode(`--\r
`)), a.close());
      } catch (u) {
        a.error(u);
      }
    },
    async cancel(a) {
      var u;
      await ((u = r.return) == null ? void 0 : u.call(r, a));
    }
  });
  return new e.Response(o, i);
}
function $g(t, e, n) {
  if (Ur(t))
    return new e.Response(null, {
      status: 406,
      statusText: "Not Acceptable",
      headers: {
        accept: "application/json; charset=utf-8, application/graphql-response+json; charset=utf-8"
      }
    });
  const i = {
    "Content-Type": n + "; charset=utf-8"
  }, r = Xs(
    t,
    i,
    // prefer 200 only if accepting application/json and all errors are exclusively GraphQL errors
    n === "application/json" && !Array.isArray(t) && Lh(t.errors) && t.errors.some((o) => {
      var a;
      return !((a = o.extensions) != null && a.originalError) || oi(o.extensions.originalError);
    })
  ), s = io(t);
  return new e.Response(s, r);
}
function Pg() {
  return function(e, n) {
    var f, g;
    let i = 12e3;
    ((g = (f = globalThis.process) == null ? void 0 : f.env) == null ? void 0 : g.NODE_ENV) === "test" && (i = 300);
    const s = Xs(e, {
      "Content-Type": "text/event-stream",
      Connection: "keep-alive",
      "Cache-Control": "no-cache",
      "Content-Encoding": "none"
    }, !0);
    let o, a;
    const u = new n.TextEncoder(), c = new n.ReadableStream({
      start(p) {
        if (p.enqueue(u.encode(`:

`)), a = setInterval(() => {
          if (!p.desiredSize) {
            clearInterval(a);
            return;
          }
          p.enqueue(u.encode(`:

`));
        }, i), zt(e))
          o = e[Symbol.asyncIterator]();
        else {
          let w = !1;
          o = {
            next: () => w ? Promise.resolve({ done: !0, value: null }) : (w = !0, Promise.resolve({ done: !1, value: e }))
          };
        }
      },
      async pull(p) {
        try {
          const w = await o.next();
          if (w.value != null) {
            p.enqueue(u.encode(`event: next
`));
            const E = io(w.value);
            p.enqueue(u.encode(`data: ${E}

`));
          }
          w.done && (p.enqueue(u.encode(`event: complete
`)), p.enqueue(u.encode(`data:

`)), clearInterval(a), p.close());
        } catch (w) {
          p.error(w);
        }
      },
      async cancel(p) {
        var w;
        clearInterval(a), await ((w = o.return) == null ? void 0 : w.call(o, p));
      }
    });
    return new n.Response(c, s);
  };
}
const jg = {
  mediaTypes: ["multipart/mixed"],
  asyncIterables: !0,
  processResult: Dg
};
function Mg() {
  return {
    mediaTypes: ["text/event-stream"],
    asyncIterables: !0,
    processResult: Pg()
  };
}
const Ta = {
  mediaTypes: ["application/graphql-response+json", "application/json"],
  asyncIterables: !1,
  processResult: $g
};
function Ug() {
  const t = /* @__PURE__ */ new WeakMap(), e = Mg(), n = [e, jg, Ta], i = [e, Ta];
  return {
    onSubscribe({ args: { contextValue: r } }) {
      r.request && t.set(r.request, !0);
    },
    onResultProcess({ request: r, result: s, acceptableMediaTypes: o, setResultProcessor: a }) {
      const c = t.get(r) ? i : n, f = Cg(r), g = zt(s);
      for (const p of c)
        for (const w of f)
          if (!(g && !p.asyncIterables))
            for (const E of p.mediaTypes)
              o.push(E), kg(E, w) && a(p.processResult, E);
    }
  };
}
var Vg = `<!doctype html><html lang=en><head><meta charset=utf-8><title>Welcome to GraphQL Yoga</title><link rel=icon href=https://raw.githubusercontent.com/dotansimha/graphql-yoga/main/website/public/favicon.ico><style>body,html{padding:0;margin:0;height:100%;font-family:Inter,-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,Oxygen,Ubuntu,Cantarell,'Fira Sans','Droid Sans','Helvetica Neue',sans-serif;color:#fff;background-color:#000}main>section.hero{display:flex;height:90vh;justify-content:center;align-items:center;flex-direction:column}.logo{display:flex;align-items:center}.buttons{margin-top:24px}h1{font-size:80px}h2{color:#888;max-width:50%;margin-top:0;text-align:center}a{color:#fff;text-decoration:none;margin-left:10px;margin-right:10px;font-weight:700;transition:color .3s ease;padding:4px;overflow:visible}a.graphiql:hover{color:rgba(255,0,255,.7)}a.docs:hover{color:rgba(28,200,238,.7)}a.tutorial:hover{color:rgba(125,85,245,.7)}svg{margin-right:24px}.not-what-your-looking-for{margin-top:5vh}.not-what-your-looking-for>*{margin-left:auto;margin-right:auto}.not-what-your-looking-for>p{text-align:center}.not-what-your-looking-for>h2{color:#464646}.not-what-your-looking-for>p{max-width:600px;line-height:1.3em}.not-what-your-looking-for>pre{max-width:300px}</style></head><body id=body><main><section class=hero><div class=logo><div><svg xmlns=http://www.w3.org/2000/svg viewBox="-0.41 0.445 472.812 499.811" height=150><defs><linearGradient id=paint0_linear_1677_11483 x1=16 y1=14 x2=87.2132 y2=44.5982 gradientUnits=userSpaceOnUse gradientTransform="matrix(8.139854, 0, 0, 8.139854, -130.346407, -113.25101)"><stop stop-color=#7433FF /><stop offset=1 stop-color=#FFA3FD /></linearGradient><linearGradient id=paint1_linear_1677_11483 x1=16 y1=14 x2=87.2132 y2=44.5982 gradientUnits=userSpaceOnUse gradientTransform="matrix(8.139854, 0, 0, 8.139854, -130.346407, -113.25101)"><stop stop-color=#7433FF /><stop offset=1 stop-color=#FFA3FD /></linearGradient><linearGradient id=paint2_linear_1677_11483 x1=16 y1=14 x2=87.2132 y2=44.5982 gradientUnits=userSpaceOnUse gradientTransform="matrix(8.139854, 0, 0, 8.139854, -130.346407, -113.25101)"><stop stop-color=#7433FF /><stop offset=1 stop-color=#FFA3FD /></linearGradient><linearGradient id=paint3_linear_1677_11483 x1=16 y1=14 x2=87.2132 y2=44.5982 gradientUnits=userSpaceOnUse><stop stop-color=#7433FF /><stop offset=1 stop-color=#FFA3FD /></linearGradient><linearGradient id=paint4_linear_1677_11483 x1=16 y1=14 x2=87.2132 y2=44.5982 gradientUnits=userSpaceOnUse><stop stop-color=#7433FF /><stop offset=1 stop-color=#FFA3FD /></linearGradient><linearGradient id=paint5_linear_1677_11483 x1=16 y1=14 x2=87.2132 y2=44.5982 gradientUnits=userSpaceOnUse><stop stop-color=#7433FF /><stop offset=1 stop-color=#FFA3FD /></linearGradient><filter id=filter0_f_1677_11483 x=23 y=-25 width=100 height=100 filterUnits=userSpaceOnUse color-interpolation-filters=sRGB><feFlood flood-opacity=0 result=BackgroundImageFix /><feBlend mode=normal in=SourceGraphic in2=BackgroundImageFix result=shape /><feGaussianBlur stdDeviation=12 result=effect1_foregroundBlur_1677_11483 /></filter><filter id=filter1_f_1677_11483 x=-24 y=19 width=100 height=100 filterUnits=userSpaceOnUse color-interpolation-filters=sRGB><feFlood flood-opacity=0 result=BackgroundImageFix /><feBlend mode=normal in=SourceGraphic in2=BackgroundImageFix result=shape /><feGaussianBlur stdDeviation=12 result=effect1_foregroundBlur_1677_11483 /></filter><linearGradient id=paint6_linear_1677_11483 x1=30 y1=28 x2=66.1645 y2=44.4363 gradientUnits=userSpaceOnUse gradientTransform="matrix(8.139854, 0, 0, 8.139854, -130.346407, -113.25101)"><stop stop-color=#7433FF /><stop offset=1 stop-color=#FFA3FD /></linearGradient><filter id=filter2_f_1677_11483 x=-12 y=-44 width=100 height=100 filterUnits=userSpaceOnUse color-interpolation-filters=sRGB><feFlood flood-opacity=0 result=BackgroundImageFix /><feBlend mode=normal in=SourceGraphic in2=BackgroundImageFix result=shape /><feGaussianBlur stdDeviation=12 result=effect1_foregroundBlur_1677_11483 /></filter><filter id=filter3_f_1677_11483 x=13 y=19 width=100 height=100 filterUnits=userSpaceOnUse color-interpolation-filters=sRGB><feFlood flood-opacity=0 result=BackgroundImageFix /><feBlend mode=normal in=SourceGraphic in2=BackgroundImageFix result=shape /><feGaussianBlur stdDeviation=12 result=effect1_foregroundBlur_1677_11483 /></filter></defs><mask id=mask0_1677_11483 style=mask-type:alpha maskUnits=userSpaceOnUse x=16 y=14 width=58 height=62><path d="M21 25.3501C21.7279 25.3501 22.4195 25.5056 23.0433 25.7853L42.1439 14.8C43.0439 14.3 44.1439 14 45.1439 14C46.2439 14 47.2439 14.3 48.1439 14.8L64.5439 24.3C63.3439 25.1 62.4439 26.3 61.8439 27.7L45.9438 18.5C45.6439 18.3 45.344 18.3 45.0441 18.3C44.7441 18.3 44.4439 18.4 44.1439 18.5L25.8225 29.0251C25.9382 29.4471 26 29.8914 26 30.3501C26 33.1115 23.7614 35.3501 21 35.3501C18.2386 35.3501 16 33.1115 16 30.3501C16 27.5887 18.2386 25.3501 21 25.3501Z" fill=url(#paint3_linear_1677_11483) /><path d="M67.2438 35.0329C65.3487 34.3219 64 32.4934 64 30.35C64 27.5886 66.2386 25.35 69 25.35C71.7614 25.35 74 27.5886 74 30.35C74 32.1825 73.0142 33.7848 71.5439 34.6554V55.2C71.5439 57.4 70.3439 59.4 68.5439 60.5L52.1439 69.9C52.1439 68.4 51.6438 66.9 50.7438 65.8L66.3439 56.8C66.9439 56.5 67.2438 55.9 67.2438 55.2V35.0329Z" fill=url(#paint4_linear_1677_11483) /><path d="M49.8439 69.1055C49.9458 69.5034 50 69.9204 50 70.3501C50 73.1115 47.7614 75.3501 45 75.3501C42.5102 75.3501 40.4454 73.5302 40.0633 71.1481L21.8439 60.6C19.9439 59.5 18.8439 57.5 18.8439 55.3V36.8C19.5439 37 20.3439 37.2 21.0439 37.2C21.7439 37.2 22.4439 37.1 23.0439 36.9V55.3C23.0439 56 23.4438 56.6 23.9438 56.9L41.3263 66.9583C42.2398 65.9694 43.5476 65.3501 45 65.3501C47.3291 65.3501 49.2862 66.9426 49.8419 69.0981L49.8436 69.0997L49.8439 69.1055Z" fill=url(#paint5_linear_1677_11483) /></mask><mask id=mask1_1677_11483 style=mask-type:alpha maskUnits=userSpaceOnUse x=30 y=28 width=30 height=30><path fill-rule=evenodd clip-rule=evenodd d="M49.3945 32.3945C49.3945 34.7088 47.5796 38.5469 45 38.5469C42.4271 38.5469 40.6055 34.7112 40.6055 32.3945C40.6055 29.9714 42.5769 28 45 28C47.4231 28 49.3945 29.9714 49.3945 32.3945ZM35.332 49.0433V48.2148C35.332 42.8117 37.8535 41.0004 39.8796 39.545L39.8801 39.5447C40.3928 39.1767 40.8604 38.8404 41.2488 38.4742C42.3293 39.6642 43.626 40.3047 45 40.3047C46.3752 40.3047 47.6725 39.6642 48.7529 38.4754C49.1408 38.841 49.6078 39.1773 50.1199 39.5447L50.1204 39.545C52.1465 41.0004 54.668 42.8117 54.668 48.2148V49.0433L53.8406 49.092C49.9848 49.3185 46.8646 46.9002 45 43.5777C43.1159 46.935 39.9847 49.318 36.1594 49.092L35.332 49.0433ZM58.1463 51.0747L58.1463 51.0746C57.0179 50.891 50.0128 49.7507 45.0007 55.693C40.0116 49.7553 33.1965 50.8592 31.9095 51.0677L31.9095 51.0677C31.7906 51.087 31.7189 51.0986 31.7002 51.0963C31.7005 51.0969 31.7011 51.1045 31.7023 51.1187C31.726 51.4003 31.9682 54.2745 34.0566 56.2422L30 58H60L55.8956 56.2422C57.8537 54.4764 58.1396 52.2685 58.2508 51.4092V51.4091C58.2697 51.2628 58.2836 51.1556 58.2998 51.0963C58.2881 51.0977 58.2356 51.0892 58.1463 51.0747ZM40.4836 50.104C42.3956 49.3212 43.6746 48.1737 45 46.61C46.332 48.1841 47.6159 49.3259 49.5164 50.104C49.5356 50.1425 49.5557 50.1805 49.5756 50.2182C49.5793 50.2253 49.583 50.2323 49.5867 50.2393C48.0911 50.8127 46.4264 51.825 45.0047 53.1444C43.5906 51.8221 41.9673 50.8196 40.4256 50.2153C40.4455 50.1784 40.4648 50.1415 40.4836 50.104Z" fill=black /></mask><path d="M 40.59 93.095 C 46.517 93.095 52.14 94.365 57.22 96.635 L 212.7 7.22 C 220.025 3.149 228.978 0.706 237.12 0.706 C 246.073 0.706 254.213 3.149 261.54 7.22 L 395.032 84.547 C 385.264 91.059 377.939 100.827 373.055 112.224 L 243.631 37.338 C 241.19 35.71 238.747 35.71 236.305 35.71 C 233.863 35.71 231.42 36.523 228.978 37.338 L 79.84 123.009 C 80.786 126.443 81.29 130.058 81.29 133.793 C 81.29 156.269 63.065 174.493 40.59 174.493 C 18.116 174.493 -0.109 156.269 -0.109 133.793 C -0.109 111.32 18.116 93.095 40.59 93.095 Z" fill=url(#paint0_linear_1677_11483) /><path d="M 417.01 171.913 C 401.585 166.126 390.603 151.238 390.603 133.793 C 390.603 111.32 408.83 93.095 431.303 93.095 C 453.777 93.095 472.001 111.32 472.001 133.793 C 472.001 148.706 463.976 161.755 452.011 168.835 L 452.011 336.07 C 452.011 353.977 442.243 370.258 427.591 379.21 L 294.098 455.726 C 294.098 443.516 290.029 431.306 282.703 422.353 L 409.683 349.093 C 414.568 346.651 417.01 341.767 417.01 336.07 L 417.01 171.913 Z" fill=url(#paint1_linear_1677_11483) /><path d="M 275.376 449.253 C 276.206 452.495 276.646 455.889 276.646 459.389 C 276.646 481.863 258.422 500.087 235.947 500.087 C 215.679 500.087 198.87 485.272 195.761 465.883 L 47.46 380.025 C 31.995 371.071 23.041 354.792 23.041 336.884 L 23.041 186.296 C 28.738 187.923 35.25 189.553 40.948 189.553 C 46.646 189.553 52.345 188.738 57.228 187.111 L 57.228 336.884 C 57.228 342.582 60.485 347.465 64.554 349.908 L 206.042 431.777 C 213.481 423.728 224.127 418.689 235.947 418.689 C 254.905 418.689 270.833 431.656 275.36 449.196 L 275.376 449.214 L 275.376 449.253 Z" fill=url(#paint2_linear_1677_11483) /><g mask=url(#mask0_1677_11483) transform="matrix(8.139854, 0, 0, 8.139854, -130.346375, -113.251038)"><g filter=url(#filter0_f_1677_11483)><circle cx=73 cy=25 r=26 fill=#ED2E7E /></g><g filter=url(#filter1_f_1677_11483)><circle cx=26 cy=69 r=26 fill=#1CC8EE /></g></g><path fill-rule=evenodd clip-rule=evenodd d="M 271.713 150.431 C 271.713 169.275 256.948 200.517 235.947 200.517 C 215.003 200.517 200.172 169.292 200.172 150.431 C 200.172 130.708 216.225 114.666 235.947 114.666 C 255.67 114.666 271.713 130.708 271.713 150.431 Z M 157.251 285.952 L 157.251 279.212 C 157.251 235.233 177.771 220.485 194.27 208.641 C 198.447 205.644 202.247 202.901 205.414 199.923 C 214.204 209.608 224.763 214.826 235.947 214.826 C 247.138 214.826 257.697 209.608 266.496 199.931 C 269.653 202.911 273.456 205.644 277.622 208.641 C 294.114 220.485 314.642 235.233 314.642 279.212 L 314.642 285.952 L 307.912 286.351 C 276.525 288.191 251.128 268.509 235.947 241.468 C 220.611 268.795 195.126 288.191 163.981 286.351 L 157.251 285.952 Z M 342.953 302.492 C 333.771 300.994 276.751 291.715 235.955 340.082 C 195.345 291.749 139.865 300.734 129.389 302.436 C 128.428 302.59 127.841 302.688 127.687 302.665 C 127.687 302.673 127.695 302.729 127.702 302.85 C 127.897 305.138 129.867 328.532 146.872 344.55 L 113.849 358.862 L 358.044 358.862 L 324.639 344.55 C 340.576 330.177 342.905 312.202 343.807 305.212 C 343.962 304.022 344.077 303.153 344.206 302.665 C 344.108 302.68 343.686 302.606 342.953 302.492 Z M 199.188 294.59 C 214.751 288.215 225.161 278.879 235.947 266.15 C 246.788 278.96 257.241 288.255 272.707 294.59 C 272.869 294.898 273.031 295.207 273.196 295.518 C 273.219 295.574 273.252 295.631 273.285 295.688 C 261.107 300.361 247.555 308.598 235.989 319.334 C 224.477 308.573 211.258 300.417 198.715 295.493 C 198.87 295.191 199.033 294.891 199.188 294.59 Z" fill=url(#paint6_linear_1677_11483) /><g mask=url(#mask1_1677_11483) transform="matrix(8.139854, 0, 0, 8.139854, -130.346375, -113.251038)"><g filter=url(#filter2_f_1677_11483)><circle cx=38 cy=6 r=26 fill=#ED2E7E /></g><g filter=url(#filter3_f_1677_11483)><circle cx=63 cy=69 r=26 fill=#1CC8EE /></g></g></svg></div><h1>GraphQL Yoga</h1></div><h2>The batteries-included cross-platform GraphQL Server.</h2><div class=buttons><a href=https://www.the-guild.dev/graphql/yoga-server/docs class=docs>Read the Docs</a> <a href=https://www.the-guild.dev/graphql/yoga-server/tutorial/basic class=tutorial>Start the Tutorial </a><a href=__GRAPHIQL_LINK__ class=graphiql>Visit GraphiQL</a></div></section><section class=not-what-your-looking-for><h2>Not the page you are looking for? 👀</h2><p>This page is shown be default whenever a 404 is hit.<br>You can disable this by behavior via the <code>landingPage</code> option.</p><pre>
          <code>
import { createYoga } from 'graphql-yoga';

const yoga = createYoga({
  landingPage: false
})
          </code>
        </pre><p>If you expected this page to be the GraphQL route, you need to configure Yoga. Currently, the GraphQL route is configured to be on <code>__GRAPHIQL_LINK__</code>.</p><pre>
          <code>
import { createYoga } from 'graphql-yoga';

const yoga = createYoga({
  graphqlEndpoint: '__REQUEST_PATH__',
})
          </code>
        </pre></section></main></body></html>`;
const Bg = function(e) {
  return new e.fetchAPI.Response(Vg.replace(/__GRAPHIQL_LINK__/g, e.graphqlEndpoint).replace(/__REQUEST_PATH__/g, e.url.pathname), {
    status: 200,
    statusText: "OK",
    headers: {
      "Content-Type": "text/html"
    }
  });
};
function Gg(t) {
  let e;
  function n({ URLPattern: r }) {
    return e || (e = new r({
      pathname: t.graphqlEndpoint
    })), e;
  }
  const i = t.landingPageRenderer || Bg;
  return {
    onRequest({ request: r, fetchAPI: s, endResponse: o, url: a }) {
      var u, c;
      if (!r.url.endsWith(t.graphqlEndpoint) && !r.url.endsWith(`${t.graphqlEndpoint}/`) && a.pathname !== t.graphqlEndpoint && a.pathname !== `${t.graphqlEndpoint}/` && !n(s).test(a)) {
        if (t.showLandingPage === !0 && r.method === "GET" && ((c = (u = r.headers) == null ? void 0 : u.get("accept")) != null && c.includes("text/html"))) {
          const f = i({
            request: r,
            fetchAPI: s,
            url: a,
            graphqlEndpoint: t.graphqlEndpoint,
            get urlPattern() {
              return n(s);
            }
          });
          if (Ae(f))
            return f.then(o);
          o(f);
          return;
        }
        o(new s.Response("", {
          status: 404,
          statusText: "Not Found"
        }));
      }
    }
  };
}
async function Sa({ request: t, result: e, fetchAPI: n, onResultProcessHooks: i, serverContext: r }) {
  let s;
  const o = [];
  let a = "*/*";
  for (const u of i)
    await u({
      request: t,
      acceptableMediaTypes: o,
      result: e,
      setResult(c) {
        e = c;
      },
      resultProcessor: s,
      setResultProcessor(c, f) {
        s = c, a = f;
      },
      serverContext: r
    });
  return s ? s(e, n, a) : new n.Response(null, {
    status: 406,
    statusText: "Not Acceptable",
    headers: {
      accept: o.join("; charset=utf-8, ")
    }
  });
}
async function qg({ params: t, enveloped: e }) {
  const n = e.parse(t.query), i = e.validate(e.schema, n);
  if (i.length > 0)
    return { errors: i };
  const r = await e.contextFactory(), s = {
    schema: e.schema,
    document: n,
    contextValue: r,
    variableValues: t.variables,
    operationName: t.operationName
  }, o = Ys(n, t.operationName);
  return ((o == null ? void 0 : o.operation) === "subscription" ? e.subscribe : e.execute)(s);
}
const zg = (t, e, n = ((r) => (r = ((i) => (i = globalThis.process) == null ? void 0 : i.env)()) == null ? void 0 : r.NODE_ENV)() === "development") => {
  if (oi(t)) {
    if (t.originalError) {
      if (t.originalError.name === "GraphQLError")
        return t;
      const s = {
        ...t.extensions,
        unexpected: !0
      };
      return n && (s.originalError = {
        message: t.originalError.message,
        stack: t.originalError.stack
      }), X(e, {
        nodes: t.nodes,
        source: t.source,
        positions: t.positions,
        path: t.path,
        extensions: s
      });
    }
    return t;
  }
  return X(e, {
    extensions: {
      unexpected: !0,
      originalError: n ? t instanceof Error ? {
        message: t.message,
        stack: t.stack
      } : t : void 0
    }
  });
};
class Qg {
  constructor(e) {
    /**
     * Instance of envelop
     */
    U(this, "getEnveloped");
    U(this, "logger");
    U(this, "graphqlEndpoint");
    U(this, "fetchAPI");
    U(this, "plugins");
    U(this, "onRequestParseHooks");
    U(this, "onParamsHooks");
    U(this, "onExecutionResultHooks");
    U(this, "onResultProcessHooks");
    U(this, "maskedErrorsOpts");
    U(this, "id");
    U(this, "handle", async (e, n) => {
      let i = new Proxy({}, {
        get: (u, c, f) => (i = new this.fetchAPI.URL(e.url, "http://localhost"), Reflect.get(i, c, i))
      }), r;
      const s = [];
      for (const u of this.onRequestParseHooks) {
        const c = await u({
          request: e,
          url: i,
          requestParser: r,
          serverContext: n,
          setRequestParser(f) {
            r = f;
          }
        });
        (c == null ? void 0 : c.onRequestParseDone) != null && s.push(c.onRequestParseDone);
      }
      if (this.logger.debug("Parsing request to extract GraphQL parameters"), !r)
        return new this.fetchAPI.Response(null, {
          status: 415,
          statusText: "Unsupported Media Type"
        });
      let o = await r(e);
      for (const u of s)
        await u({
          requestParserResult: o,
          setRequestParserResult(c) {
            o = c;
          }
        });
      const a = await (Array.isArray(o) ? Promise.all(o.map((u) => this.getResultForParams({
        params: u,
        request: e,
        batched: !0
      }, n))) : this.getResultForParams({
        params: o,
        request: e,
        batched: !1
      }, n));
      return Sa({
        request: e,
        result: a,
        fetchAPI: this.fetchAPI,
        onResultProcessHooks: this.onResultProcessHooks,
        serverContext: n
      });
    });
    if (this.id = (e == null ? void 0 : e.id) ?? "yoga", this.fetchAPI = {
      ...Zu
    }, e != null && e.fetchAPI)
      for (const u in e.fetchAPI)
        e.fetchAPI[u] && (this.fetchAPI[u] = e.fetchAPI[u]);
    const n = (e == null ? void 0 : e.logging) == null ? !0 : e.logging;
    this.logger = typeof n == "boolean" ? n === !0 ? is() : is("silent") : typeof n == "string" ? is(n) : n;
    const i = typeof (e == null ? void 0 : e.maskedErrors) == "object" && e.maskedErrors.maskError || zg, r = /* @__PURE__ */ new WeakSet();
    this.maskedErrorsOpts = (e == null ? void 0 : e.maskedErrors) === !1 ? null : {
      errorMessage: "Unexpected error.",
      ...typeof (e == null ? void 0 : e.maskedErrors) == "object" ? e.maskedErrors : {},
      maskError: (u, c) => {
        var g;
        if (r.has(u))
          return u;
        const f = i(u, c, (g = this.maskedErrorsOpts) == null ? void 0 : g.isDev);
        return f !== u && this.logger.error(u), r.add(f), f;
      }
    };
    const s = this.maskedErrorsOpts == null ? null : this.maskedErrorsOpts;
    let o = 0;
    e != null && e.batching && (typeof e.batching == "boolean" ? o = 10 : o = e.batching.limit ?? 10), this.graphqlEndpoint = (e == null ? void 0 : e.graphqlEndpoint) || "/graphql";
    const a = this.graphqlEndpoint;
    this.plugins = [
      Bl({
        parse: yc,
        validate: rd,
        execute: da,
        subscribe: da,
        specifiedRules: _u
      }),
      // Use the schema provided by the user
      !!(e != null && e.schema) && Vh(e.schema),
      (e == null ? void 0 : e.context) != null && Vl((u) => e != null && e.context ? typeof e.context == "function" ? e.context(u) : e.context : {}),
      // Middlewares before processing the incoming HTTP request
      Ig({
        id: this.id,
        logger: this.logger,
        endpoint: e == null ? void 0 : e.healthCheckEndpoint
      }),
      (e == null ? void 0 : e.cors) !== !1 && Zp(e == null ? void 0 : e.cors),
      (e == null ? void 0 : e.graphiql) !== !1 && Uh({
        graphqlEndpoint: a,
        options: e == null ? void 0 : e.graphiql,
        render: e == null ? void 0 : e.renderGraphiQL,
        logger: this.logger
      }),
      // Middlewares before the GraphQL execution
      mi({
        match: ig,
        parse: rg
      }),
      mi({
        match: lg,
        parse: cg
      }),
      (e == null ? void 0 : e.multipart) !== !1 && mi({
        match: dg,
        parse: hg
      }),
      mi({
        match: ag,
        parse: ug
      }),
      mi({
        match: sg,
        parse: og
      }),
      // Middlewares after the GraphQL execution
      Ug(),
      tg((u, c, f) => {
        const p = {
          errors: fr(u, this.maskedErrorsOpts, this.logger)
        };
        return Sa({
          request: c,
          result: p,
          fetchAPI: this.fetchAPI,
          onResultProcessHooks: this.onResultProcessHooks,
          serverContext: f
        });
      }),
      ...(e == null ? void 0 : e.plugins) ?? [],
      // To make sure those are called at the end
      {
        onPluginInit({ addPlugin: u }) {
          (e == null ? void 0 : e.parserAndValidationCache) !== !1 && u(
            // @ts-expect-error Add plugins has context but this hook doesn't care
            Rg(!(e != null && e.parserAndValidationCache) || (e == null ? void 0 : e.parserAndValidationCache) === !0 ? {} : e == null ? void 0 : e.parserAndValidationCache)
          ), u(Tg(o)), u(yg(e == null ? void 0 : e.extraParamNames));
          const c = !!((e == null ? void 0 : e.landingPage) ?? !0);
          u(
            // @ts-expect-error Add plugins has context but this hook doesn't care
            Gg({
              graphqlEndpoint: a,
              showLandingPage: c,
              landingPageRenderer: typeof (e == null ? void 0 : e.landingPage) == "function" ? e.landingPage : void 0
            })
          ), u(vg()), u(_g()), s && (u({
            onSubscribe() {
              return {
                onSubscribeError({ error: f }) {
                  if (Uu(f))
                    throw f;
                }
              };
            }
          }), u(Ul(s))), u(
            // We handle validation errors at the end
            wg()
          );
        }
      }
    ], this.getEnveloped = Rl({
      plugins: this.plugins
    }), this.plugins = this.getEnveloped._plugins, this.onRequestParseHooks = [], this.onParamsHooks = [], this.onExecutionResultHooks = [], this.onResultProcessHooks = [];
    for (const u of this.plugins)
      u && (u.onYogaInit && u.onYogaInit({
        yoga: this
      }), u.onRequestParse && this.onRequestParseHooks.push(u.onRequestParse), u.onParams && this.onParamsHooks.push(u.onParams), u.onExecutionResult && this.onExecutionResultHooks.push(u.onExecutionResult), u.onResultProcess && this.onResultProcessHooks.push(u.onResultProcess));
  }
  async getResultForParams({ params: e, request: n, batched: i }, r) {
    let s, o = r;
    try {
      for (const a of this.onParamsHooks)
        await a({
          params: e,
          request: n,
          setParams(u) {
            e = u;
          },
          setResult(u) {
            s = u;
          },
          fetchAPI: this.fetchAPI
        });
      if (s == null) {
        const a = r.request === n ? {
          params: e
        } : {
          request: n,
          params: e
        };
        o = Object.assign(i ? Object.create(r) : r, a);
        const u = this.getEnveloped(o);
        this.logger.debug("Processing GraphQL Parameters"), s = await qg({
          params: e,
          enveloped: u
        }), this.logger.debug("Processing GraphQL Parameters done.");
      }
      if (zt(s)) {
        const a = s[Symbol.asyncIterator]();
        s = Pu(a, (u) => u, (u) => {
          if (u.name === "AbortError")
            throw this.logger.debug("Request aborted"), u;
          return {
            errors: fr(u, this.maskedErrorsOpts, this.logger)
          };
        });
      }
    } catch (a) {
      s = {
        errors: fr(a, this.maskedErrorsOpts, this.logger)
      };
    }
    for (const a of this.onExecutionResultHooks)
      await a({
        result: s,
        setResult(u) {
          s = u;
        },
        request: n,
        context: o
      });
    return s;
  }
}
function Wg(t) {
  const e = new Qg(t);
  return Jp(e, {
    fetchAPI: e.fetchAPI,
    plugins: e.plugins
  });
}
const Bn = typeof performance == "object" && performance && typeof performance.now == "function" ? performance : Date, ul = /* @__PURE__ */ new Set(), xs = typeof process == "object" && process ? process : {}, ll = (t, e, n, i) => {
  typeof xs.emitWarning == "function" ? xs.emitWarning(t, e, n, i) : console.error(`[${n}] ${e}: ${t}`);
};
let xr = globalThis.AbortController, _a = globalThis.AbortSignal;
var ka;
if (typeof xr > "u") {
  _a = class {
    constructor() {
      U(this, "onabort");
      U(this, "_onabort", []);
      U(this, "reason");
      U(this, "aborted", !1);
    }
    addEventListener(i, r) {
      this._onabort.push(r);
    }
  }, xr = class {
    constructor() {
      U(this, "signal", new _a());
      e();
    }
    abort(i) {
      var r, s;
      if (!this.signal.aborted) {
        this.signal.reason = i, this.signal.aborted = !0;
        for (const o of this.signal._onabort)
          o(i);
        (s = (r = this.signal).onabort) == null || s.call(r, i);
      }
    }
  };
  let t = ((ka = xs.env) == null ? void 0 : ka.LRU_CACHE_IGNORE_AC_WARNING) !== "1";
  const e = () => {
    t && (t = !1, ll("AbortController is not defined. If using lru-cache in node 14, load an AbortController polyfill from the `node-abort-controller` package. A minimal polyfill is provided for use by LRUCache.fetch(), but it should not be relied upon in other contexts (eg, passing it to other APIs that use AbortController/AbortSignal might have undesirable effects). You may disable this with LRU_CACHE_IGNORE_AC_WARNING=1 in the env.", "NO_ABORT_CONTROLLER", "ENOTSUP", e));
  };
}
const Yg = (t) => !ul.has(t), un = (t) => t && t === Math.floor(t) && t > 0 && isFinite(t), cl = (t) => un(t) ? t <= Math.pow(2, 8) ? Uint8Array : t <= Math.pow(2, 16) ? Uint16Array : t <= Math.pow(2, 32) ? Uint32Array : t <= Number.MAX_SAFE_INTEGER ? mr : null : null;
class mr extends Array {
  constructor(e) {
    super(e), this.fill(0);
  }
}
var Zn;
const On = class On {
  constructor(e, n) {
    U(this, "heap");
    U(this, "length");
    if (!l(On, Zn))
      throw new TypeError("instantiate Stack using Stack.create(n)");
    this.heap = new n(e), this.length = 0;
  }
  static create(e) {
    const n = cl(e);
    if (!n)
      return [];
    $(On, Zn, !0);
    const i = new On(e, n);
    return $(On, Zn, !1), i;
  }
  push(e) {
    this.heap[this.length++] = e;
  }
  pop() {
    return this.heap[--this.length];
  }
};
Zn = new WeakMap(), // private constructor
Y(On, Zn, !1);
let Fs = On;
var Da, $a, At, ut, xt, Ft, ei, ti, Oe, Rt, Se, he, te, Ye, lt, qe, Ce, Lt, ke, Ct, kt, ct, Dt, gn, He, B, Ls, Fn, en, ki, ft, fl, Rn, ni, Di, ln, cn, Cs, yr, br, fe, ks, Ii, fn, Ds;
const fo = class fo {
  constructor(e) {
    Y(this, B);
    // options that cannot be changed without disaster
    Y(this, At);
    Y(this, ut);
    Y(this, xt);
    Y(this, Ft);
    Y(this, ei);
    Y(this, ti);
    /**
     * {@link LRUCache.OptionsBase.ttl}
     */
    U(this, "ttl");
    /**
     * {@link LRUCache.OptionsBase.ttlResolution}
     */
    U(this, "ttlResolution");
    /**
     * {@link LRUCache.OptionsBase.ttlAutopurge}
     */
    U(this, "ttlAutopurge");
    /**
     * {@link LRUCache.OptionsBase.updateAgeOnGet}
     */
    U(this, "updateAgeOnGet");
    /**
     * {@link LRUCache.OptionsBase.updateAgeOnHas}
     */
    U(this, "updateAgeOnHas");
    /**
     * {@link LRUCache.OptionsBase.allowStale}
     */
    U(this, "allowStale");
    /**
     * {@link LRUCache.OptionsBase.noDisposeOnSet}
     */
    U(this, "noDisposeOnSet");
    /**
     * {@link LRUCache.OptionsBase.noUpdateTTL}
     */
    U(this, "noUpdateTTL");
    /**
     * {@link LRUCache.OptionsBase.maxEntrySize}
     */
    U(this, "maxEntrySize");
    /**
     * {@link LRUCache.OptionsBase.sizeCalculation}
     */
    U(this, "sizeCalculation");
    /**
     * {@link LRUCache.OptionsBase.noDeleteOnFetchRejection}
     */
    U(this, "noDeleteOnFetchRejection");
    /**
     * {@link LRUCache.OptionsBase.noDeleteOnStaleGet}
     */
    U(this, "noDeleteOnStaleGet");
    /**
     * {@link LRUCache.OptionsBase.allowStaleOnFetchAbort}
     */
    U(this, "allowStaleOnFetchAbort");
    /**
     * {@link LRUCache.OptionsBase.allowStaleOnFetchRejection}
     */
    U(this, "allowStaleOnFetchRejection");
    /**
     * {@link LRUCache.OptionsBase.ignoreFetchAbort}
     */
    U(this, "ignoreFetchAbort");
    // computed properties
    Y(this, Oe);
    Y(this, Rt);
    Y(this, Se);
    Y(this, he);
    Y(this, te);
    Y(this, Ye);
    Y(this, lt);
    Y(this, qe);
    Y(this, Ce);
    Y(this, Lt);
    Y(this, ke);
    Y(this, Ct);
    Y(this, kt);
    Y(this, ct);
    Y(this, Dt);
    Y(this, gn);
    Y(this, He);
    // conditionally set private methods related to TTL
    Y(this, Fn, () => {
    });
    Y(this, en, () => {
    });
    Y(this, ki, () => {
    });
    /* c8 ignore stop */
    Y(this, ft, () => !1);
    Y(this, Rn, (e) => {
    });
    Y(this, ni, (e, n, i) => {
    });
    Y(this, Di, (e, n, i, r) => {
      if (i || r)
        throw new TypeError("cannot set size without setting maxSize or maxEntrySize on cache");
      return 0;
    });
    /**
     * A String value that is used in the creation of the default string
     * description of an object. Called by the built-in method
     * `Object.prototype.toString`.
     */
    U(this, Da, "LRUCache");
    const { max: n = 0, ttl: i, ttlResolution: r = 1, ttlAutopurge: s, updateAgeOnGet: o, updateAgeOnHas: a, allowStale: u, dispose: c, disposeAfter: f, noDisposeOnSet: g, noUpdateTTL: p, maxSize: w = 0, maxEntrySize: E = 0, sizeCalculation: R, fetchMethod: x, memoMethod: y, noDeleteOnFetchRejection: S, noDeleteOnStaleGet: A, allowStaleOnFetchRejection: O, allowStaleOnFetchAbort: C, ignoreFetchAbort: T } = e;
    if (n !== 0 && !un(n))
      throw new TypeError("max option must be a nonnegative integer");
    const _ = n ? cl(n) : Array;
    if (!_)
      throw new Error("invalid max value: " + n);
    if ($(this, At, n), $(this, ut, w), this.maxEntrySize = E || l(this, ut), this.sizeCalculation = R, this.sizeCalculation) {
      if (!l(this, ut) && !this.maxEntrySize)
        throw new TypeError("cannot set sizeCalculation without setting maxSize or maxEntrySize");
      if (typeof this.sizeCalculation != "function")
        throw new TypeError("sizeCalculation set to non-function");
    }
    if (y !== void 0 && typeof y != "function")
      throw new TypeError("memoMethod must be a function if defined");
    if ($(this, ti, y), x !== void 0 && typeof x != "function")
      throw new TypeError("fetchMethod must be a function if specified");
    if ($(this, ei, x), $(this, gn, !!x), $(this, Se, /* @__PURE__ */ new Map()), $(this, he, new Array(n).fill(void 0)), $(this, te, new Array(n).fill(void 0)), $(this, Ye, new _(n)), $(this, lt, new _(n)), $(this, qe, 0), $(this, Ce, 0), $(this, Lt, Fs.create(n)), $(this, Oe, 0), $(this, Rt, 0), typeof c == "function" && $(this, xt, c), typeof f == "function" ? ($(this, Ft, f), $(this, ke, [])) : ($(this, Ft, void 0), $(this, ke, void 0)), $(this, Dt, !!l(this, xt)), $(this, He, !!l(this, Ft)), this.noDisposeOnSet = !!g, this.noUpdateTTL = !!p, this.noDeleteOnFetchRejection = !!S, this.allowStaleOnFetchRejection = !!O, this.allowStaleOnFetchAbort = !!C, this.ignoreFetchAbort = !!T, this.maxEntrySize !== 0) {
      if (l(this, ut) !== 0 && !un(l(this, ut)))
        throw new TypeError("maxSize must be a positive integer if specified");
      if (!un(this.maxEntrySize))
        throw new TypeError("maxEntrySize must be a positive integer if specified");
      k(this, B, fl).call(this);
    }
    if (this.allowStale = !!u, this.noDeleteOnStaleGet = !!A, this.updateAgeOnGet = !!o, this.updateAgeOnHas = !!a, this.ttlResolution = un(r) || r === 0 ? r : 1, this.ttlAutopurge = !!s, this.ttl = i || 0, this.ttl) {
      if (!un(this.ttl))
        throw new TypeError("ttl must be a positive integer if specified");
      k(this, B, Ls).call(this);
    }
    if (l(this, At) === 0 && this.ttl === 0 && l(this, ut) === 0)
      throw new TypeError("At least one of max, maxSize, or ttl is required");
    if (!this.ttlAutopurge && !l(this, At) && !l(this, ut)) {
      const m = "LRU_CACHE_UNBOUNDED";
      Yg(m) && (ul.add(m), ll("TTL caching without ttlAutopurge, max, or maxSize can result in unbounded memory consumption.", "UnboundedCacheWarning", m, fo));
    }
  }
  /**
   * Do not call this method unless you need to inspect the
   * inner workings of the cache.  If anything returned by this
   * object is modified in any way, strange breakage may occur.
   *
   * These fields are private for a reason!
   *
   * @internal
   */
  static unsafeExposeInternals(e) {
    return {
      // properties
      starts: l(e, kt),
      ttls: l(e, ct),
      sizes: l(e, Ct),
      keyMap: l(e, Se),
      keyList: l(e, he),
      valList: l(e, te),
      next: l(e, Ye),
      prev: l(e, lt),
      get head() {
        return l(e, qe);
      },
      get tail() {
        return l(e, Ce);
      },
      free: l(e, Lt),
      // methods
      isBackgroundFetch: (n) => {
        var i;
        return k(i = e, B, fe).call(i, n);
      },
      backgroundFetch: (n, i, r, s) => {
        var o;
        return k(o = e, B, br).call(o, n, i, r, s);
      },
      moveToTail: (n) => {
        var i;
        return k(i = e, B, Ii).call(i, n);
      },
      indexes: (n) => {
        var i;
        return k(i = e, B, ln).call(i, n);
      },
      rindexes: (n) => {
        var i;
        return k(i = e, B, cn).call(i, n);
      },
      isStale: (n) => {
        var i;
        return l(i = e, ft).call(i, n);
      }
    };
  }
  // Protected read-only members
  /**
   * {@link LRUCache.OptionsBase.max} (read-only)
   */
  get max() {
    return l(this, At);
  }
  /**
   * {@link LRUCache.OptionsBase.maxSize} (read-only)
   */
  get maxSize() {
    return l(this, ut);
  }
  /**
   * The total computed size of items in the cache (read-only)
   */
  get calculatedSize() {
    return l(this, Rt);
  }
  /**
   * The number of items stored in the cache (read-only)
   */
  get size() {
    return l(this, Oe);
  }
  /**
   * {@link LRUCache.OptionsBase.fetchMethod} (read-only)
   */
  get fetchMethod() {
    return l(this, ei);
  }
  get memoMethod() {
    return l(this, ti);
  }
  /**
   * {@link LRUCache.OptionsBase.dispose} (read-only)
   */
  get dispose() {
    return l(this, xt);
  }
  /**
   * {@link LRUCache.OptionsBase.disposeAfter} (read-only)
   */
  get disposeAfter() {
    return l(this, Ft);
  }
  /**
   * Return the number of ms left in the item's TTL. If item is not in cache,
   * returns `0`. Returns `Infinity` if item is in cache without a defined TTL.
   */
  getRemainingTTL(e) {
    return l(this, Se).has(e) ? 1 / 0 : 0;
  }
  /**
   * Return a generator yielding `[key, value]` pairs,
   * in order from most recently used to least recently used.
   */
  *entries() {
    for (const e of k(this, B, ln).call(this))
      l(this, te)[e] !== void 0 && l(this, he)[e] !== void 0 && !k(this, B, fe).call(this, l(this, te)[e]) && (yield [l(this, he)[e], l(this, te)[e]]);
  }
  /**
   * Inverse order version of {@link LRUCache.entries}
   *
   * Return a generator yielding `[key, value]` pairs,
   * in order from least recently used to most recently used.
   */
  *rentries() {
    for (const e of k(this, B, cn).call(this))
      l(this, te)[e] !== void 0 && l(this, he)[e] !== void 0 && !k(this, B, fe).call(this, l(this, te)[e]) && (yield [l(this, he)[e], l(this, te)[e]]);
  }
  /**
   * Return a generator yielding the keys in the cache,
   * in order from most recently used to least recently used.
   */
  *keys() {
    for (const e of k(this, B, ln).call(this)) {
      const n = l(this, he)[e];
      n !== void 0 && !k(this, B, fe).call(this, l(this, te)[e]) && (yield n);
    }
  }
  /**
   * Inverse order version of {@link LRUCache.keys}
   *
   * Return a generator yielding the keys in the cache,
   * in order from least recently used to most recently used.
   */
  *rkeys() {
    for (const e of k(this, B, cn).call(this)) {
      const n = l(this, he)[e];
      n !== void 0 && !k(this, B, fe).call(this, l(this, te)[e]) && (yield n);
    }
  }
  /**
   * Return a generator yielding the values in the cache,
   * in order from most recently used to least recently used.
   */
  *values() {
    for (const e of k(this, B, ln).call(this))
      l(this, te)[e] !== void 0 && !k(this, B, fe).call(this, l(this, te)[e]) && (yield l(this, te)[e]);
  }
  /**
   * Inverse order version of {@link LRUCache.values}
   *
   * Return a generator yielding the values in the cache,
   * in order from least recently used to most recently used.
   */
  *rvalues() {
    for (const e of k(this, B, cn).call(this))
      l(this, te)[e] !== void 0 && !k(this, B, fe).call(this, l(this, te)[e]) && (yield l(this, te)[e]);
  }
  /**
   * Iterating over the cache itself yields the same results as
   * {@link LRUCache.entries}
   */
  [($a = Symbol.iterator, Da = Symbol.toStringTag, $a)]() {
    return this.entries();
  }
  /**
   * Find a value for which the supplied fn method returns a truthy value,
   * similar to `Array.find()`. fn is called as `fn(value, key, cache)`.
   */
  find(e, n = {}) {
    for (const i of k(this, B, ln).call(this)) {
      const r = l(this, te)[i], s = k(this, B, fe).call(this, r) ? r.__staleWhileFetching : r;
      if (s !== void 0 && e(s, l(this, he)[i], this))
        return this.get(l(this, he)[i], n);
    }
  }
  /**
   * Call the supplied function on each item in the cache, in order from most
   * recently used to least recently used.
   *
   * `fn` is called as `fn(value, key, cache)`.
   *
   * If `thisp` is provided, function will be called in the `this`-context of
   * the provided object, or the cache if no `thisp` object is provided.
   *
   * Does not update age or recenty of use, or iterate over stale values.
   */
  forEach(e, n = this) {
    for (const i of k(this, B, ln).call(this)) {
      const r = l(this, te)[i], s = k(this, B, fe).call(this, r) ? r.__staleWhileFetching : r;
      s !== void 0 && e.call(n, s, l(this, he)[i], this);
    }
  }
  /**
   * The same as {@link LRUCache.forEach} but items are iterated over in
   * reverse order.  (ie, less recently used items are iterated over first.)
   */
  rforEach(e, n = this) {
    for (const i of k(this, B, cn).call(this)) {
      const r = l(this, te)[i], s = k(this, B, fe).call(this, r) ? r.__staleWhileFetching : r;
      s !== void 0 && e.call(n, s, l(this, he)[i], this);
    }
  }
  /**
   * Delete any stale entries. Returns true if anything was removed,
   * false otherwise.
   */
  purgeStale() {
    let e = !1;
    for (const n of k(this, B, cn).call(this, { allowStale: !0 }))
      l(this, ft).call(this, n) && (k(this, B, fn).call(this, l(this, he)[n], "expire"), e = !0);
    return e;
  }
  /**
   * Get the extended info about a given entry, to get its value, size, and
   * TTL info simultaneously. Returns `undefined` if the key is not present.
   *
   * Unlike {@link LRUCache#dump}, which is designed to be portable and survive
   * serialization, the `start` value is always the current timestamp, and the
   * `ttl` is a calculated remaining time to live (negative if expired).
   *
   * Always returns stale values, if their info is found in the cache, so be
   * sure to check for expirations (ie, a negative {@link LRUCache.Entry#ttl})
   * if relevant.
   */
  info(e) {
    const n = l(this, Se).get(e);
    if (n === void 0)
      return;
    const i = l(this, te)[n], r = k(this, B, fe).call(this, i) ? i.__staleWhileFetching : i;
    if (r === void 0)
      return;
    const s = { value: r };
    if (l(this, ct) && l(this, kt)) {
      const o = l(this, ct)[n], a = l(this, kt)[n];
      if (o && a) {
        const u = o - (Bn.now() - a);
        s.ttl = u, s.start = Date.now();
      }
    }
    return l(this, Ct) && (s.size = l(this, Ct)[n]), s;
  }
  /**
   * Return an array of [key, {@link LRUCache.Entry}] tuples which can be
   * passed to {@link LRLUCache#load}.
   *
   * The `start` fields are calculated relative to a portable `Date.now()`
   * timestamp, even if `performance.now()` is available.
   *
   * Stale entries are always included in the `dump`, even if
   * {@link LRUCache.OptionsBase.allowStale} is false.
   *
   * Note: this returns an actual array, not a generator, so it can be more
   * easily passed around.
   */
  dump() {
    const e = [];
    for (const n of k(this, B, ln).call(this, { allowStale: !0 })) {
      const i = l(this, he)[n], r = l(this, te)[n], s = k(this, B, fe).call(this, r) ? r.__staleWhileFetching : r;
      if (s === void 0 || i === void 0)
        continue;
      const o = { value: s };
      if (l(this, ct) && l(this, kt)) {
        o.ttl = l(this, ct)[n];
        const a = Bn.now() - l(this, kt)[n];
        o.start = Math.floor(Date.now() - a);
      }
      l(this, Ct) && (o.size = l(this, Ct)[n]), e.unshift([i, o]);
    }
    return e;
  }
  /**
   * Reset the cache and load in the items in entries in the order listed.
   *
   * The shape of the resulting cache may be different if the same options are
   * not used in both caches.
   *
   * The `start` fields are assumed to be calculated relative to a portable
   * `Date.now()` timestamp, even if `performance.now()` is available.
   */
  load(e) {
    this.clear();
    for (const [n, i] of e) {
      if (i.start) {
        const r = Date.now() - i.start;
        i.start = Bn.now() - r;
      }
      this.set(n, i.value, i);
    }
  }
  /**
   * Add a value to the cache.
   *
   * Note: if `undefined` is specified as a value, this is an alias for
   * {@link LRUCache#delete}
   *
   * Fields on the {@link LRUCache.SetOptions} options param will override
   * their corresponding values in the constructor options for the scope
   * of this single `set()` operation.
   *
   * If `start` is provided, then that will set the effective start
   * time for the TTL calculation. Note that this must be a previous
   * value of `performance.now()` if supported, or a previous value of
   * `Date.now()` if not.
   *
   * Options object may also include `size`, which will prevent
   * calling the `sizeCalculation` function and just use the specified
   * number if it is a positive integer, and `noDisposeOnSet` which
   * will prevent calling a `dispose` function in the case of
   * overwrites.
   *
   * If the `size` (or return value of `sizeCalculation`) for a given
   * entry is greater than `maxEntrySize`, then the item will not be
   * added to the cache.
   *
   * Will update the recency of the entry.
   *
   * If the value is `undefined`, then this is an alias for
   * `cache.delete(key)`. `undefined` is never stored in the cache.
   */
  set(e, n, i = {}) {
    var p, w, E, R, x;
    if (n === void 0)
      return this.delete(e), this;
    const { ttl: r = this.ttl, start: s, noDisposeOnSet: o = this.noDisposeOnSet, sizeCalculation: a = this.sizeCalculation, status: u } = i;
    let { noUpdateTTL: c = this.noUpdateTTL } = i;
    const f = l(this, Di).call(this, e, n, i.size || 0, a);
    if (this.maxEntrySize && f > this.maxEntrySize)
      return u && (u.set = "miss", u.maxEntrySizeExceeded = !0), k(this, B, fn).call(this, e, "set"), this;
    let g = l(this, Oe) === 0 ? void 0 : l(this, Se).get(e);
    if (g === void 0)
      g = l(this, Oe) === 0 ? l(this, Ce) : l(this, Lt).length !== 0 ? l(this, Lt).pop() : l(this, Oe) === l(this, At) ? k(this, B, yr).call(this, !1) : l(this, Oe), l(this, he)[g] = e, l(this, te)[g] = n, l(this, Se).set(e, g), l(this, Ye)[l(this, Ce)] = g, l(this, lt)[g] = l(this, Ce), $(this, Ce, g), Tn(this, Oe)._++, l(this, ni).call(this, g, f, u), u && (u.set = "add"), c = !1;
    else {
      k(this, B, Ii).call(this, g);
      const y = l(this, te)[g];
      if (n !== y) {
        if (l(this, gn) && k(this, B, fe).call(this, y)) {
          y.__abortController.abort(new Error("replaced"));
          const { __staleWhileFetching: S } = y;
          S !== void 0 && !o && (l(this, Dt) && ((p = l(this, xt)) == null || p.call(this, S, e, "set")), l(this, He) && ((w = l(this, ke)) == null || w.push([S, e, "set"])));
        } else o || (l(this, Dt) && ((E = l(this, xt)) == null || E.call(this, y, e, "set")), l(this, He) && ((R = l(this, ke)) == null || R.push([y, e, "set"])));
        if (l(this, Rn).call(this, g), l(this, ni).call(this, g, f, u), l(this, te)[g] = n, u) {
          u.set = "replace";
          const S = y && k(this, B, fe).call(this, y) ? y.__staleWhileFetching : y;
          S !== void 0 && (u.oldValue = S);
        }
      } else u && (u.set = "update");
    }
    if (r !== 0 && !l(this, ct) && k(this, B, Ls).call(this), l(this, ct) && (c || l(this, ki).call(this, g, r, s), u && l(this, en).call(this, u, g)), !o && l(this, He) && l(this, ke)) {
      const y = l(this, ke);
      let S;
      for (; S = y == null ? void 0 : y.shift(); )
        (x = l(this, Ft)) == null || x.call(this, ...S);
    }
    return this;
  }
  /**
   * Evict the least recently used item, returning its value or
   * `undefined` if cache is empty.
   */
  pop() {
    var e;
    try {
      for (; l(this, Oe); ) {
        const n = l(this, te)[l(this, qe)];
        if (k(this, B, yr).call(this, !0), k(this, B, fe).call(this, n)) {
          if (n.__staleWhileFetching)
            return n.__staleWhileFetching;
        } else if (n !== void 0)
          return n;
      }
    } finally {
      if (l(this, He) && l(this, ke)) {
        const n = l(this, ke);
        let i;
        for (; i = n == null ? void 0 : n.shift(); )
          (e = l(this, Ft)) == null || e.call(this, ...i);
      }
    }
  }
  /**
   * Check if a key is in the cache, without updating the recency of use.
   * Will return false if the item is stale, even though it is technically
   * in the cache.
   *
   * Check if a key is in the cache, without updating the recency of
   * use. Age is updated if {@link LRUCache.OptionsBase.updateAgeOnHas} is set
   * to `true` in either the options or the constructor.
   *
   * Will return `false` if the item is stale, even though it is technically in
   * the cache. The difference can be determined (if it matters) by using a
   * `status` argument, and inspecting the `has` field.
   *
   * Will not update item age unless
   * {@link LRUCache.OptionsBase.updateAgeOnHas} is set.
   */
  has(e, n = {}) {
    const { updateAgeOnHas: i = this.updateAgeOnHas, status: r } = n, s = l(this, Se).get(e);
    if (s !== void 0) {
      const o = l(this, te)[s];
      if (k(this, B, fe).call(this, o) && o.__staleWhileFetching === void 0)
        return !1;
      if (l(this, ft).call(this, s))
        r && (r.has = "stale", l(this, en).call(this, r, s));
      else return i && l(this, Fn).call(this, s), r && (r.has = "hit", l(this, en).call(this, r, s)), !0;
    } else r && (r.has = "miss");
    return !1;
  }
  /**
   * Like {@link LRUCache#get} but doesn't update recency or delete stale
   * items.
   *
   * Returns `undefined` if the item is stale, unless
   * {@link LRUCache.OptionsBase.allowStale} is set.
   */
  peek(e, n = {}) {
    const { allowStale: i = this.allowStale } = n, r = l(this, Se).get(e);
    if (r === void 0 || !i && l(this, ft).call(this, r))
      return;
    const s = l(this, te)[r];
    return k(this, B, fe).call(this, s) ? s.__staleWhileFetching : s;
  }
  async fetch(e, n = {}) {
    const {
      // get options
      allowStale: i = this.allowStale,
      updateAgeOnGet: r = this.updateAgeOnGet,
      noDeleteOnStaleGet: s = this.noDeleteOnStaleGet,
      // set options
      ttl: o = this.ttl,
      noDisposeOnSet: a = this.noDisposeOnSet,
      size: u = 0,
      sizeCalculation: c = this.sizeCalculation,
      noUpdateTTL: f = this.noUpdateTTL,
      // fetch exclusive options
      noDeleteOnFetchRejection: g = this.noDeleteOnFetchRejection,
      allowStaleOnFetchRejection: p = this.allowStaleOnFetchRejection,
      ignoreFetchAbort: w = this.ignoreFetchAbort,
      allowStaleOnFetchAbort: E = this.allowStaleOnFetchAbort,
      context: R,
      forceRefresh: x = !1,
      status: y,
      signal: S
    } = n;
    if (!l(this, gn))
      return y && (y.fetch = "get"), this.get(e, {
        allowStale: i,
        updateAgeOnGet: r,
        noDeleteOnStaleGet: s,
        status: y
      });
    const A = {
      allowStale: i,
      updateAgeOnGet: r,
      noDeleteOnStaleGet: s,
      ttl: o,
      noDisposeOnSet: a,
      size: u,
      sizeCalculation: c,
      noUpdateTTL: f,
      noDeleteOnFetchRejection: g,
      allowStaleOnFetchRejection: p,
      allowStaleOnFetchAbort: E,
      ignoreFetchAbort: w,
      status: y,
      signal: S
    };
    let O = l(this, Se).get(e);
    if (O === void 0) {
      y && (y.fetch = "miss");
      const C = k(this, B, br).call(this, e, O, A, R);
      return C.__returned = C;
    } else {
      const C = l(this, te)[O];
      if (k(this, B, fe).call(this, C)) {
        const d = i && C.__staleWhileFetching !== void 0;
        return y && (y.fetch = "inflight", d && (y.returnedStale = !0)), d ? C.__staleWhileFetching : C.__returned = C;
      }
      const T = l(this, ft).call(this, O);
      if (!x && !T)
        return y && (y.fetch = "hit"), k(this, B, Ii).call(this, O), r && l(this, Fn).call(this, O), y && l(this, en).call(this, y, O), C;
      const _ = k(this, B, br).call(this, e, O, A, R), b = _.__staleWhileFetching !== void 0 && i;
      return y && (y.fetch = T ? "stale" : "refresh", b && T && (y.returnedStale = !0)), b ? _.__staleWhileFetching : _.__returned = _;
    }
  }
  async forceFetch(e, n = {}) {
    const i = await this.fetch(e, n);
    if (i === void 0)
      throw new Error("fetch() returned undefined");
    return i;
  }
  memo(e, n = {}) {
    const i = l(this, ti);
    if (!i)
      throw new Error("no memoMethod provided to constructor");
    const { context: r, forceRefresh: s, ...o } = n, a = this.get(e, o);
    if (!s && a !== void 0)
      return a;
    const u = i(e, a, {
      options: o,
      context: r
    });
    return this.set(e, u, o), u;
  }
  /**
   * Return a value from the cache. Will update the recency of the cache
   * entry found.
   *
   * If the key is not found, get() will return `undefined`.
   */
  get(e, n = {}) {
    const { allowStale: i = this.allowStale, updateAgeOnGet: r = this.updateAgeOnGet, noDeleteOnStaleGet: s = this.noDeleteOnStaleGet, status: o } = n, a = l(this, Se).get(e);
    if (a !== void 0) {
      const u = l(this, te)[a], c = k(this, B, fe).call(this, u);
      return o && l(this, en).call(this, o, a), l(this, ft).call(this, a) ? (o && (o.get = "stale"), c ? (o && i && u.__staleWhileFetching !== void 0 && (o.returnedStale = !0), i ? u.__staleWhileFetching : void 0) : (s || k(this, B, fn).call(this, e, "expire"), o && i && (o.returnedStale = !0), i ? u : void 0)) : (o && (o.get = "hit"), c ? u.__staleWhileFetching : (k(this, B, Ii).call(this, a), r && l(this, Fn).call(this, a), u));
    } else o && (o.get = "miss");
  }
  /**
   * Deletes a key out of the cache.
   *
   * Returns true if the key was deleted, false otherwise.
   */
  delete(e) {
    return k(this, B, fn).call(this, e, "delete");
  }
  /**
   * Clear the cache entirely, throwing away all values.
   */
  clear() {
    return k(this, B, Ds).call(this, "delete");
  }
};
At = new WeakMap(), ut = new WeakMap(), xt = new WeakMap(), Ft = new WeakMap(), ei = new WeakMap(), ti = new WeakMap(), Oe = new WeakMap(), Rt = new WeakMap(), Se = new WeakMap(), he = new WeakMap(), te = new WeakMap(), Ye = new WeakMap(), lt = new WeakMap(), qe = new WeakMap(), Ce = new WeakMap(), Lt = new WeakMap(), ke = new WeakMap(), Ct = new WeakMap(), kt = new WeakMap(), ct = new WeakMap(), Dt = new WeakMap(), gn = new WeakMap(), He = new WeakMap(), B = new WeakSet(), Ls = function() {
  const e = new mr(l(this, At)), n = new mr(l(this, At));
  $(this, ct, e), $(this, kt, n), $(this, ki, (s, o, a = Bn.now()) => {
    if (n[s] = o !== 0 ? a : 0, e[s] = o, o !== 0 && this.ttlAutopurge) {
      const u = setTimeout(() => {
        l(this, ft).call(this, s) && k(this, B, fn).call(this, l(this, he)[s], "expire");
      }, o + 1);
      u.unref && u.unref();
    }
  }), $(this, Fn, (s) => {
    n[s] = e[s] !== 0 ? Bn.now() : 0;
  }), $(this, en, (s, o) => {
    if (e[o]) {
      const a = e[o], u = n[o];
      if (!a || !u)
        return;
      s.ttl = a, s.start = u, s.now = i || r();
      const c = s.now - u;
      s.remainingTTL = a - c;
    }
  });
  let i = 0;
  const r = () => {
    const s = Bn.now();
    if (this.ttlResolution > 0) {
      i = s;
      const o = setTimeout(() => i = 0, this.ttlResolution);
      o.unref && o.unref();
    }
    return s;
  };
  this.getRemainingTTL = (s) => {
    const o = l(this, Se).get(s);
    if (o === void 0)
      return 0;
    const a = e[o], u = n[o];
    if (!a || !u)
      return 1 / 0;
    const c = (i || r()) - u;
    return a - c;
  }, $(this, ft, (s) => {
    const o = n[s], a = e[s];
    return !!a && !!o && (i || r()) - o > a;
  });
}, Fn = new WeakMap(), en = new WeakMap(), ki = new WeakMap(), ft = new WeakMap(), fl = function() {
  const e = new mr(l(this, At));
  $(this, Rt, 0), $(this, Ct, e), $(this, Rn, (n) => {
    $(this, Rt, l(this, Rt) - e[n]), e[n] = 0;
  }), $(this, Di, (n, i, r, s) => {
    if (k(this, B, fe).call(this, i))
      return 0;
    if (!un(r))
      if (s) {
        if (typeof s != "function")
          throw new TypeError("sizeCalculation must be a function");
        if (r = s(i, n), !un(r))
          throw new TypeError("sizeCalculation return invalid (expect positive integer)");
      } else
        throw new TypeError("invalid size value (must be positive integer). When maxSize or maxEntrySize is used, sizeCalculation or size must be set.");
    return r;
  }), $(this, ni, (n, i, r) => {
    if (e[n] = i, l(this, ut)) {
      const s = l(this, ut) - e[n];
      for (; l(this, Rt) > s; )
        k(this, B, yr).call(this, !0);
    }
    $(this, Rt, l(this, Rt) + e[n]), r && (r.entrySize = i, r.totalCalculatedSize = l(this, Rt));
  });
}, Rn = new WeakMap(), ni = new WeakMap(), Di = new WeakMap(), ln = function* ({ allowStale: e = this.allowStale } = {}) {
  if (l(this, Oe))
    for (let n = l(this, Ce); !(!k(this, B, Cs).call(this, n) || ((e || !l(this, ft).call(this, n)) && (yield n), n === l(this, qe))); )
      n = l(this, lt)[n];
}, cn = function* ({ allowStale: e = this.allowStale } = {}) {
  if (l(this, Oe))
    for (let n = l(this, qe); !(!k(this, B, Cs).call(this, n) || ((e || !l(this, ft).call(this, n)) && (yield n), n === l(this, Ce))); )
      n = l(this, Ye)[n];
}, Cs = function(e) {
  return e !== void 0 && l(this, Se).get(l(this, he)[e]) === e;
}, yr = function(e) {
  var s, o;
  const n = l(this, qe), i = l(this, he)[n], r = l(this, te)[n];
  return l(this, gn) && k(this, B, fe).call(this, r) ? r.__abortController.abort(new Error("evicted")) : (l(this, Dt) || l(this, He)) && (l(this, Dt) && ((s = l(this, xt)) == null || s.call(this, r, i, "evict")), l(this, He) && ((o = l(this, ke)) == null || o.push([r, i, "evict"]))), l(this, Rn).call(this, n), e && (l(this, he)[n] = void 0, l(this, te)[n] = void 0, l(this, Lt).push(n)), l(this, Oe) === 1 ? ($(this, qe, $(this, Ce, 0)), l(this, Lt).length = 0) : $(this, qe, l(this, Ye)[n]), l(this, Se).delete(i), Tn(this, Oe)._--, n;
}, br = function(e, n, i, r) {
  const s = n === void 0 ? void 0 : l(this, te)[n];
  if (k(this, B, fe).call(this, s))
    return s;
  const o = new xr(), { signal: a } = i;
  a == null || a.addEventListener("abort", () => o.abort(a.reason), {
    signal: o.signal
  });
  const u = {
    signal: o.signal,
    options: i,
    context: r
  }, c = (R, x = !1) => {
    const { aborted: y } = o.signal, S = i.ignoreFetchAbort && R !== void 0;
    if (i.status && (y && !x ? (i.status.fetchAborted = !0, i.status.fetchError = o.signal.reason, S && (i.status.fetchAbortIgnored = !0)) : i.status.fetchResolved = !0), y && !S && !x)
      return g(o.signal.reason);
    const A = w;
    return l(this, te)[n] === w && (R === void 0 ? A.__staleWhileFetching ? l(this, te)[n] = A.__staleWhileFetching : k(this, B, fn).call(this, e, "fetch") : (i.status && (i.status.fetchUpdated = !0), this.set(e, R, u.options))), R;
  }, f = (R) => (i.status && (i.status.fetchRejected = !0, i.status.fetchError = R), g(R)), g = (R) => {
    const { aborted: x } = o.signal, y = x && i.allowStaleOnFetchAbort, S = y || i.allowStaleOnFetchRejection, A = S || i.noDeleteOnFetchRejection, O = w;
    if (l(this, te)[n] === w && (!A || O.__staleWhileFetching === void 0 ? k(this, B, fn).call(this, e, "fetch") : y || (l(this, te)[n] = O.__staleWhileFetching)), S)
      return i.status && O.__staleWhileFetching !== void 0 && (i.status.returnedStale = !0), O.__staleWhileFetching;
    if (O.__returned === O)
      throw R;
  }, p = (R, x) => {
    var S;
    const y = (S = l(this, ei)) == null ? void 0 : S.call(this, e, s, u);
    y && y instanceof Promise && y.then((A) => R(A === void 0 ? void 0 : A), x), o.signal.addEventListener("abort", () => {
      (!i.ignoreFetchAbort || i.allowStaleOnFetchAbort) && (R(void 0), i.allowStaleOnFetchAbort && (R = (A) => c(A, !0)));
    });
  };
  i.status && (i.status.fetchDispatched = !0);
  const w = new Promise(p).then(c, f), E = Object.assign(w, {
    __abortController: o,
    __staleWhileFetching: s,
    __returned: void 0
  });
  return n === void 0 ? (this.set(e, E, { ...u.options, status: void 0 }), n = l(this, Se).get(e)) : l(this, te)[n] = E, E;
}, fe = function(e) {
  if (!l(this, gn))
    return !1;
  const n = e;
  return !!n && n instanceof Promise && n.hasOwnProperty("__staleWhileFetching") && n.__abortController instanceof xr;
}, ks = function(e, n) {
  l(this, lt)[n] = e, l(this, Ye)[e] = n;
}, Ii = function(e) {
  e !== l(this, Ce) && (e === l(this, qe) ? $(this, qe, l(this, Ye)[e]) : k(this, B, ks).call(this, l(this, lt)[e], l(this, Ye)[e]), k(this, B, ks).call(this, l(this, Ce), e), $(this, Ce, e));
}, fn = function(e, n) {
  var r, s, o, a;
  let i = !1;
  if (l(this, Oe) !== 0) {
    const u = l(this, Se).get(e);
    if (u !== void 0)
      if (i = !0, l(this, Oe) === 1)
        k(this, B, Ds).call(this, n);
      else {
        l(this, Rn).call(this, u);
        const c = l(this, te)[u];
        if (k(this, B, fe).call(this, c) ? c.__abortController.abort(new Error("deleted")) : (l(this, Dt) || l(this, He)) && (l(this, Dt) && ((r = l(this, xt)) == null || r.call(this, c, e, n)), l(this, He) && ((s = l(this, ke)) == null || s.push([c, e, n]))), l(this, Se).delete(e), l(this, he)[u] = void 0, l(this, te)[u] = void 0, u === l(this, Ce))
          $(this, Ce, l(this, lt)[u]);
        else if (u === l(this, qe))
          $(this, qe, l(this, Ye)[u]);
        else {
          const f = l(this, lt)[u];
          l(this, Ye)[f] = l(this, Ye)[u];
          const g = l(this, Ye)[u];
          l(this, lt)[g] = l(this, lt)[u];
        }
        Tn(this, Oe)._--, l(this, Lt).push(u);
      }
  }
  if (l(this, He) && ((o = l(this, ke)) != null && o.length)) {
    const u = l(this, ke);
    let c;
    for (; c = u == null ? void 0 : u.shift(); )
      (a = l(this, Ft)) == null || a.call(this, ...c);
  }
  return i;
}, Ds = function(e) {
  var n, i, r;
  for (const s of k(this, B, cn).call(this, { allowStale: !0 })) {
    const o = l(this, te)[s];
    if (k(this, B, fe).call(this, o))
      o.__abortController.abort(new Error("deleted"));
    else {
      const a = l(this, he)[s];
      l(this, Dt) && ((n = l(this, xt)) == null || n.call(this, o, a, e)), l(this, He) && ((i = l(this, ke)) == null || i.push([o, a, e]));
    }
  }
  if (l(this, Se).clear(), l(this, te).fill(void 0), l(this, he).fill(void 0), l(this, ct) && l(this, kt) && (l(this, ct).fill(0), l(this, kt).fill(0)), l(this, Ct) && l(this, Ct).fill(0), $(this, qe, 0), $(this, Ce, 0), l(this, Lt).length = 0, $(this, Rt, 0), $(this, Oe, 0), l(this, He) && l(this, ke)) {
    const s = l(this, ke);
    let o;
    for (; o = s == null ? void 0 : s.shift(); )
      (r = l(this, Ft)) == null || r.call(this, ...o);
  }
};
let Rs = fo;
function ar(t) {
  throw new Error('Could not dynamically require "' + t + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}
var dl = { exports: {} };
(function(t, e) {
  (function(n) {
    t.exports = n();
  })(function() {
    return function n(i, r, s) {
      function o(c, f) {
        if (!r[c]) {
          if (!i[c]) {
            var g = typeof ar == "function" && ar;
            if (!f && g) return g(c, !0);
            if (a) return a(c, !0);
            throw new Error("Cannot find module '" + c + "'");
          }
          f = r[c] = { exports: {} }, i[c][0].call(f.exports, function(p) {
            var w = i[c][1][p];
            return o(w || p);
          }, f, f.exports, n, i, r, s);
        }
        return r[c].exports;
      }
      for (var a = typeof ar == "function" && ar, u = 0; u < s.length; u++) o(s[u]);
      return o;
    }({ 1: [function(n, i, r) {
      (function(s, o, a, u, c, f, g, p, w) {
        var E = n("crypto");
        function R(T, _) {
          _ = S(T, _);
          var m;
          return (m = _.algorithm !== "passthrough" ? E.createHash(_.algorithm) : new C()).write === void 0 && (m.write = m.update, m.end = m.update), O(_, m).dispatch(T), m.update || m.end(""), m.digest ? m.digest(_.encoding === "buffer" ? void 0 : _.encoding) : (T = m.read(), _.encoding !== "buffer" ? T.toString(_.encoding) : T);
        }
        (r = i.exports = R).sha1 = function(T) {
          return R(T);
        }, r.keys = function(T) {
          return R(T, { excludeValues: !0, algorithm: "sha1", encoding: "hex" });
        }, r.MD5 = function(T) {
          return R(T, { algorithm: "md5", encoding: "hex" });
        }, r.keysMD5 = function(T) {
          return R(T, { algorithm: "md5", encoding: "hex", excludeValues: !0 });
        };
        var x = E.getHashes ? E.getHashes().slice() : ["sha1", "md5"], y = (x.push("passthrough"), ["buffer", "hex", "binary", "base64"]);
        function S(T, _) {
          var m = {};
          if (m.algorithm = (_ = _ || {}).algorithm || "sha1", m.encoding = _.encoding || "hex", m.excludeValues = !!_.excludeValues, m.algorithm = m.algorithm.toLowerCase(), m.encoding = m.encoding.toLowerCase(), m.ignoreUnknown = _.ignoreUnknown === !0, m.respectType = _.respectType !== !1, m.respectFunctionNames = _.respectFunctionNames !== !1, m.respectFunctionProperties = _.respectFunctionProperties !== !1, m.unorderedArrays = _.unorderedArrays === !0, m.unorderedSets = _.unorderedSets !== !1, m.unorderedObjects = _.unorderedObjects !== !1, m.replacer = _.replacer || void 0, m.excludeKeys = _.excludeKeys || void 0, T === void 0) throw new Error("Object argument required.");
          for (var b = 0; b < x.length; ++b) x[b].toLowerCase() === m.algorithm.toLowerCase() && (m.algorithm = x[b]);
          if (x.indexOf(m.algorithm) === -1) throw new Error('Algorithm "' + m.algorithm + '"  not supported. supported values: ' + x.join(", "));
          if (y.indexOf(m.encoding) === -1 && m.algorithm !== "passthrough") throw new Error('Encoding "' + m.encoding + '"  not supported. supported values: ' + y.join(", "));
          return m;
        }
        function A(T) {
          if (typeof T == "function") return /^function\s+\w*\s*\(\s*\)\s*{\s+\[native code\]\s+}$/i.exec(Function.prototype.toString.call(T)) != null;
        }
        function O(T, _, m) {
          m = m || [];
          function b(d) {
            return _.update ? _.update(d, "utf8") : _.write(d, "utf8");
          }
          return { dispatch: function(d) {
            return this["_" + ((d = T.replacer ? T.replacer(d) : d) === null ? "null" : typeof d)](d);
          }, _object: function(d) {
            var N, L = Object.prototype.toString.call(d), J = /\[object (.*)\]/i.exec(L);
            if (J = (J = J ? J[1] : "unknown:[" + L + "]").toLowerCase(), 0 <= (L = m.indexOf(d))) return this.dispatch("[CIRCULAR:" + L + "]");
            if (m.push(d), a !== void 0 && a.isBuffer && a.isBuffer(d)) return b("buffer:"), b(d);
            if (J === "object" || J === "function" || J === "asyncfunction") return L = Object.keys(d), T.unorderedObjects && (L = L.sort()), T.respectType === !1 || A(d) || L.splice(0, 0, "prototype", "__proto__", "constructor"), T.excludeKeys && (L = L.filter(function(q) {
              return !T.excludeKeys(q);
            })), b("object:" + L.length + ":"), N = this, L.forEach(function(q) {
              N.dispatch(q), b(":"), T.excludeValues || N.dispatch(d[q]), b(",");
            });
            if (!this["_" + J]) {
              if (T.ignoreUnknown) return b("[" + J + "]");
              throw new Error('Unknown object type "' + J + '"');
            }
            this["_" + J](d);
          }, _array: function(d, q) {
            q = q !== void 0 ? q : T.unorderedArrays !== !1;
            var L = this;
            if (b("array:" + d.length + ":"), !q || d.length <= 1) return d.forEach(function(Z) {
              return L.dispatch(Z);
            });
            var J = [], q = d.map(function(Z) {
              var W = new C(), ge = m.slice();
              return O(T, W, ge).dispatch(Z), J = J.concat(ge.slice(m.length)), W.read().toString();
            });
            return m = m.concat(J), q.sort(), this._array(q, !1);
          }, _date: function(d) {
            return b("date:" + d.toJSON());
          }, _symbol: function(d) {
            return b("symbol:" + d.toString());
          }, _error: function(d) {
            return b("error:" + d.toString());
          }, _boolean: function(d) {
            return b("bool:" + d.toString());
          }, _string: function(d) {
            b("string:" + d.length + ":"), b(d.toString());
          }, _function: function(d) {
            b("fn:"), A(d) ? this.dispatch("[native]") : this.dispatch(d.toString()), T.respectFunctionNames !== !1 && this.dispatch("function-name:" + String(d.name)), T.respectFunctionProperties && this._object(d);
          }, _number: function(d) {
            return b("number:" + d.toString());
          }, _xml: function(d) {
            return b("xml:" + d.toString());
          }, _null: function() {
            return b("Null");
          }, _undefined: function() {
            return b("Undefined");
          }, _regexp: function(d) {
            return b("regex:" + d.toString());
          }, _uint8array: function(d) {
            return b("uint8array:"), this.dispatch(Array.prototype.slice.call(d));
          }, _uint8clampedarray: function(d) {
            return b("uint8clampedarray:"), this.dispatch(Array.prototype.slice.call(d));
          }, _int8array: function(d) {
            return b("int8array:"), this.dispatch(Array.prototype.slice.call(d));
          }, _uint16array: function(d) {
            return b("uint16array:"), this.dispatch(Array.prototype.slice.call(d));
          }, _int16array: function(d) {
            return b("int16array:"), this.dispatch(Array.prototype.slice.call(d));
          }, _uint32array: function(d) {
            return b("uint32array:"), this.dispatch(Array.prototype.slice.call(d));
          }, _int32array: function(d) {
            return b("int32array:"), this.dispatch(Array.prototype.slice.call(d));
          }, _float32array: function(d) {
            return b("float32array:"), this.dispatch(Array.prototype.slice.call(d));
          }, _float64array: function(d) {
            return b("float64array:"), this.dispatch(Array.prototype.slice.call(d));
          }, _arraybuffer: function(d) {
            return b("arraybuffer:"), this.dispatch(new Uint8Array(d));
          }, _url: function(d) {
            return b("url:" + d.toString());
          }, _map: function(d) {
            return b("map:"), d = Array.from(d), this._array(d, T.unorderedSets !== !1);
          }, _set: function(d) {
            return b("set:"), d = Array.from(d), this._array(d, T.unorderedSets !== !1);
          }, _file: function(d) {
            return b("file:"), this.dispatch([d.name, d.size, d.type, d.lastModfied]);
          }, _blob: function() {
            if (T.ignoreUnknown) return b("[blob]");
            throw Error(`Hashing Blob objects is currently not supported
(see https://github.com/puleos/object-hash/issues/26)
Use "options.replacer" or "options.ignoreUnknown"
`);
          }, _domwindow: function() {
            return b("domwindow");
          }, _bigint: function(d) {
            return b("bigint:" + d.toString());
          }, _process: function() {
            return b("process");
          }, _timer: function() {
            return b("timer");
          }, _pipe: function() {
            return b("pipe");
          }, _tcp: function() {
            return b("tcp");
          }, _udp: function() {
            return b("udp");
          }, _tty: function() {
            return b("tty");
          }, _statwatcher: function() {
            return b("statwatcher");
          }, _securecontext: function() {
            return b("securecontext");
          }, _connection: function() {
            return b("connection");
          }, _zlib: function() {
            return b("zlib");
          }, _context: function() {
            return b("context");
          }, _nodescript: function() {
            return b("nodescript");
          }, _httpparser: function() {
            return b("httpparser");
          }, _dataview: function() {
            return b("dataview");
          }, _signal: function() {
            return b("signal");
          }, _fsevent: function() {
            return b("fsevent");
          }, _tlswrap: function() {
            return b("tlswrap");
          } };
        }
        function C() {
          return { buf: "", write: function(T) {
            this.buf += T;
          }, end: function(T) {
            this.buf += T;
          }, read: function() {
            return this.buf;
          } };
        }
        r.writeToStream = function(T, _, m) {
          return m === void 0 && (m = _, _ = {}), O(_ = S(T, _), m).dispatch(T);
        };
      }).call(this, n("lYpoI2"), typeof self < "u" ? self : typeof window < "u" ? window : {}, n("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/fake_9a5aa49d.js", "/");
    }, { buffer: 3, crypto: 5, lYpoI2: 11 }], 2: [function(n, i, r) {
      (function(s, o, a, u, c, f, g, p, w) {
        (function(E) {
          var R = typeof Uint8Array < "u" ? Uint8Array : Array, x = 43, y = 47, S = 48, A = 97, O = 65, C = 45, T = 95;
          function _(m) {
            return m = m.charCodeAt(0), m === x || m === C ? 62 : m === y || m === T ? 63 : m < S ? -1 : m < S + 10 ? m - S + 26 + 26 : m < O + 26 ? m - O : m < A + 26 ? m - A + 26 : void 0;
          }
          E.toByteArray = function(m) {
            var b, d;
            if (0 < m.length % 4) throw new Error("Invalid string. Length must be a multiple of 4");
            var N = m.length, N = m.charAt(N - 2) === "=" ? 2 : m.charAt(N - 1) === "=" ? 1 : 0, L = new R(3 * m.length / 4 - N), J = 0 < N ? m.length - 4 : m.length, q = 0;
            function Z(W) {
              L[q++] = W;
            }
            for (b = 0; b < J; b += 4, 0) Z((16711680 & (d = _(m.charAt(b)) << 18 | _(m.charAt(b + 1)) << 12 | _(m.charAt(b + 2)) << 6 | _(m.charAt(b + 3)))) >> 16), Z((65280 & d) >> 8), Z(255 & d);
            return N == 2 ? Z(255 & (d = _(m.charAt(b)) << 2 | _(m.charAt(b + 1)) >> 4)) : N == 1 && (Z((d = _(m.charAt(b)) << 10 | _(m.charAt(b + 1)) << 4 | _(m.charAt(b + 2)) >> 2) >> 8 & 255), Z(255 & d)), L;
          }, E.fromByteArray = function(m) {
            var b, d, N, L, J = m.length % 3, q = "";
            function Z(W) {
              return "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(W);
            }
            for (b = 0, N = m.length - J; b < N; b += 3) d = (m[b] << 16) + (m[b + 1] << 8) + m[b + 2], q += Z((L = d) >> 18 & 63) + Z(L >> 12 & 63) + Z(L >> 6 & 63) + Z(63 & L);
            switch (J) {
              case 1:
                q = (q += Z((d = m[m.length - 1]) >> 2)) + Z(d << 4 & 63) + "==";
                break;
              case 2:
                q = (q = (q += Z((d = (m[m.length - 2] << 8) + m[m.length - 1]) >> 10)) + Z(d >> 4 & 63)) + Z(d << 2 & 63) + "=";
            }
            return q;
          };
        })(r === void 0 ? this.base64js = {} : r);
      }).call(this, n("lYpoI2"), typeof self < "u" ? self : typeof window < "u" ? window : {}, n("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/base64-js/lib/b64.js", "/node_modules/gulp-browserify/node_modules/base64-js/lib");
    }, { buffer: 3, lYpoI2: 11 }], 3: [function(n, i, r) {
      (function(s, o, x, u, c, f, g, p, w) {
        var E = n("base64-js"), R = n("ieee754");
        function x(h, v, F) {
          if (!(this instanceof x)) return new x(h, v, F);
          var M, j, Q, oe, ye = typeof h;
          if (v === "base64" && ye == "string") for (h = (oe = h).trim ? oe.trim() : oe.replace(/^\s+|\s+$/g, ""); h.length % 4 != 0; ) h += "=";
          if (ye == "number") M = Be(h);
          else if (ye == "string") M = x.byteLength(h, v);
          else {
            if (ye != "object") throw new Error("First argument needs to be a number, array or string.");
            M = Be(h.length);
          }
          if (x._useTypedArrays ? j = x._augment(new Uint8Array(M)) : ((j = this).length = M, j._isBuffer = !0), x._useTypedArrays && typeof h.byteLength == "number") j._set(h);
          else if (me(oe = h) || x.isBuffer(oe) || oe && typeof oe == "object" && typeof oe.length == "number") for (Q = 0; Q < M; Q++) x.isBuffer(h) ? j[Q] = h.readUInt8(Q) : j[Q] = h[Q];
          else if (ye == "string") j.write(h, 0, v);
          else if (ye == "number" && !x._useTypedArrays && !F) for (Q = 0; Q < M; Q++) j[Q] = 0;
          return j;
        }
        function y(h, v, F, M) {
          return x._charsWritten = qi(function(j) {
            for (var Q = [], oe = 0; oe < j.length; oe++) Q.push(255 & j.charCodeAt(oe));
            return Q;
          }(v), h, F, M);
        }
        function S(h, v, F, M) {
          return x._charsWritten = qi(function(j) {
            for (var Q, oe, ye = [], xe = 0; xe < j.length; xe++) oe = j.charCodeAt(xe), Q = oe >> 8, oe = oe % 256, ye.push(oe), ye.push(Q);
            return ye;
          }(v), h, F, M);
        }
        function A(h, v, F) {
          var M = "";
          F = Math.min(h.length, F);
          for (var j = v; j < F; j++) M += String.fromCharCode(h[j]);
          return M;
        }
        function O(h, v, F, Q) {
          Q || (z(typeof F == "boolean", "missing or invalid endian"), z(v != null, "missing offset"), z(v + 1 < h.length, "Trying to read beyond buffer length"));
          var j, Q = h.length;
          if (!(Q <= v)) return F ? (j = h[v], v + 1 < Q && (j |= h[v + 1] << 8)) : (j = h[v] << 8, v + 1 < Q && (j |= h[v + 1])), j;
        }
        function C(h, v, F, Q) {
          Q || (z(typeof F == "boolean", "missing or invalid endian"), z(v != null, "missing offset"), z(v + 3 < h.length, "Trying to read beyond buffer length"));
          var j, Q = h.length;
          if (!(Q <= v)) return F ? (v + 2 < Q && (j = h[v + 2] << 16), v + 1 < Q && (j |= h[v + 1] << 8), j |= h[v], v + 3 < Q && (j += h[v + 3] << 24 >>> 0)) : (v + 1 < Q && (j = h[v + 1] << 16), v + 2 < Q && (j |= h[v + 2] << 8), v + 3 < Q && (j |= h[v + 3]), j += h[v] << 24 >>> 0), j;
        }
        function T(h, v, F, M) {
          if (M || (z(typeof F == "boolean", "missing or invalid endian"), z(v != null, "missing offset"), z(v + 1 < h.length, "Trying to read beyond buffer length")), !(h.length <= v)) return M = O(h, v, F, !0), 32768 & M ? -1 * (65535 - M + 1) : M;
        }
        function _(h, v, F, M) {
          if (M || (z(typeof F == "boolean", "missing or invalid endian"), z(v != null, "missing offset"), z(v + 3 < h.length, "Trying to read beyond buffer length")), !(h.length <= v)) return M = C(h, v, F, !0), 2147483648 & M ? -1 * (4294967295 - M + 1) : M;
        }
        function m(h, v, F, M) {
          return M || (z(typeof F == "boolean", "missing or invalid endian"), z(v + 3 < h.length, "Trying to read beyond buffer length")), R.read(h, v, F, 23, 4);
        }
        function b(h, v, F, M) {
          return M || (z(typeof F == "boolean", "missing or invalid endian"), z(v + 7 < h.length, "Trying to read beyond buffer length")), R.read(h, v, F, 52, 8);
        }
        function d(h, v, F, M, j) {
          if (j || (z(v != null, "missing value"), z(typeof M == "boolean", "missing or invalid endian"), z(F != null, "missing offset"), z(F + 1 < h.length, "trying to write beyond buffer length"), zr(v, 65535)), j = h.length, !(j <= F)) for (var Q = 0, oe = Math.min(j - F, 2); Q < oe; Q++) h[F + Q] = (v & 255 << 8 * (M ? Q : 1 - Q)) >>> 8 * (M ? Q : 1 - Q);
        }
        function N(h, v, F, M, j) {
          if (j || (z(v != null, "missing value"), z(typeof M == "boolean", "missing or invalid endian"), z(F != null, "missing offset"), z(F + 3 < h.length, "trying to write beyond buffer length"), zr(v, 4294967295)), j = h.length, !(j <= F)) for (var Q = 0, oe = Math.min(j - F, 4); Q < oe; Q++) h[F + Q] = v >>> 8 * (M ? Q : 3 - Q) & 255;
        }
        function L(h, v, F, M, j) {
          j || (z(v != null, "missing value"), z(typeof M == "boolean", "missing or invalid endian"), z(F != null, "missing offset"), z(F + 1 < h.length, "Trying to write beyond buffer length"), Qr(v, 32767, -32768)), h.length <= F || d(h, 0 <= v ? v : 65535 + v + 1, F, M, j);
        }
        function J(h, v, F, M, j) {
          j || (z(v != null, "missing value"), z(typeof M == "boolean", "missing or invalid endian"), z(F != null, "missing offset"), z(F + 3 < h.length, "Trying to write beyond buffer length"), Qr(v, 2147483647, -2147483648)), h.length <= F || N(h, 0 <= v ? v : 4294967295 + v + 1, F, M, j);
        }
        function q(h, v, F, M, j) {
          j || (z(v != null, "missing value"), z(typeof M == "boolean", "missing or invalid endian"), z(F != null, "missing offset"), z(F + 3 < h.length, "Trying to write beyond buffer length"), go(v, 34028234663852886e22, -34028234663852886e22)), h.length <= F || R.write(h, v, F, M, 23, 4);
        }
        function Z(h, v, F, M, j) {
          j || (z(v != null, "missing value"), z(typeof M == "boolean", "missing or invalid endian"), z(F != null, "missing offset"), z(F + 7 < h.length, "Trying to write beyond buffer length"), go(v, 17976931348623157e292, -17976931348623157e292)), h.length <= F || R.write(h, v, F, M, 52, 8);
        }
        r.Buffer = x, r.SlowBuffer = x, r.INSPECT_MAX_BYTES = 50, x.poolSize = 8192, x._useTypedArrays = function() {
          try {
            var h = new ArrayBuffer(0), v = new Uint8Array(h);
            return v.foo = function() {
              return 42;
            }, v.foo() === 42 && typeof v.subarray == "function";
          } catch {
            return !1;
          }
        }(), x.isEncoding = function(h) {
          switch (String(h).toLowerCase()) {
            case "hex":
            case "utf8":
            case "utf-8":
            case "ascii":
            case "binary":
            case "base64":
            case "raw":
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return !0;
            default:
              return !1;
          }
        }, x.isBuffer = function(h) {
          return !(h == null || !h._isBuffer);
        }, x.byteLength = function(h, v) {
          var F;
          switch (h += "", v || "utf8") {
            case "hex":
              F = h.length / 2;
              break;
            case "utf8":
            case "utf-8":
              F = Jt(h).length;
              break;
            case "ascii":
            case "binary":
            case "raw":
              F = h.length;
              break;
            case "base64":
              F = ho(h).length;
              break;
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              F = 2 * h.length;
              break;
            default:
              throw new Error("Unknown encoding");
          }
          return F;
        }, x.concat = function(h, v) {
          if (z(me(h), `Usage: Buffer.concat(list, [totalLength])
list should be an Array.`), h.length === 0) return new x(0);
          if (h.length === 1) return h[0];
          if (typeof v != "number") for (j = v = 0; j < h.length; j++) v += h[j].length;
          for (var F = new x(v), M = 0, j = 0; j < h.length; j++) {
            var Q = h[j];
            Q.copy(F, M), M += Q.length;
          }
          return F;
        }, x.prototype.write = function(h, v, F, M) {
          isFinite(v) ? isFinite(F) || (M = F, F = void 0) : (xe = M, M = v, v = F, F = xe), v = Number(v) || 0;
          var j, Q, oe, ye, xe = this.length - v;
          switch ((!F || xe < (F = Number(F))) && (F = xe), M = String(M || "utf8").toLowerCase()) {
            case "hex":
              j = function(yt, Ke, Xe, Fe) {
                Xe = Number(Xe) || 0;
                var we = yt.length - Xe;
                (!Fe || we < (Fe = Number(Fe))) && (Fe = we), z((we = Ke.length) % 2 == 0, "Invalid hex string"), we / 2 < Fe && (Fe = we / 2);
                for (var Pn = 0; Pn < Fe; Pn++) {
                  var mo = parseInt(Ke.substr(2 * Pn, 2), 16);
                  z(!isNaN(mo), "Invalid hex string"), yt[Xe + Pn] = mo;
                }
                return x._charsWritten = 2 * Pn, Pn;
              }(this, h, v, F);
              break;
            case "utf8":
            case "utf-8":
              Q = this, oe = v, ye = F, j = x._charsWritten = qi(Jt(h), Q, oe, ye);
              break;
            case "ascii":
            case "binary":
              j = y(this, h, v, F);
              break;
            case "base64":
              Q = this, oe = v, ye = F, j = x._charsWritten = qi(ho(h), Q, oe, ye);
              break;
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              j = S(this, h, v, F);
              break;
            default:
              throw new Error("Unknown encoding");
          }
          return j;
        }, x.prototype.toString = function(h, v, F) {
          var M, j, Q, oe, ye = this;
          if (h = String(h || "utf8").toLowerCase(), v = Number(v) || 0, (F = F !== void 0 ? Number(F) : ye.length) === v) return "";
          switch (h) {
            case "hex":
              M = function(xe, yt, Ke) {
                var Xe = xe.length;
                (!yt || yt < 0) && (yt = 0), (!Ke || Ke < 0 || Xe < Ke) && (Ke = Xe);
                for (var Fe = "", we = yt; we < Ke; we++) Fe += le(xe[we]);
                return Fe;
              }(ye, v, F);
              break;
            case "utf8":
            case "utf-8":
              M = function(xe, yt, Ke) {
                var Xe = "", Fe = "";
                Ke = Math.min(xe.length, Ke);
                for (var we = yt; we < Ke; we++) xe[we] <= 127 ? (Xe += po(Fe) + String.fromCharCode(xe[we]), Fe = "") : Fe += "%" + xe[we].toString(16);
                return Xe + po(Fe);
              }(ye, v, F);
              break;
            case "ascii":
            case "binary":
              M = A(ye, v, F);
              break;
            case "base64":
              j = ye, oe = F, M = (Q = v) === 0 && oe === j.length ? E.fromByteArray(j) : E.fromByteArray(j.slice(Q, oe));
              break;
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              M = function(xe, yt, Ke) {
                for (var Xe = xe.slice(yt, Ke), Fe = "", we = 0; we < Xe.length; we += 2) Fe += String.fromCharCode(Xe[we] + 256 * Xe[we + 1]);
                return Fe;
              }(ye, v, F);
              break;
            default:
              throw new Error("Unknown encoding");
          }
          return M;
        }, x.prototype.toJSON = function() {
          return { type: "Buffer", data: Array.prototype.slice.call(this._arr || this, 0) };
        }, x.prototype.copy = function(h, v, F, M) {
          if (v = v || 0, (M = M || M === 0 ? M : this.length) !== (F = F || 0) && h.length !== 0 && this.length !== 0) {
            z(F <= M, "sourceEnd < sourceStart"), z(0 <= v && v < h.length, "targetStart out of bounds"), z(0 <= F && F < this.length, "sourceStart out of bounds"), z(0 <= M && M <= this.length, "sourceEnd out of bounds"), M > this.length && (M = this.length);
            var j = (M = h.length - v < M - F ? h.length - v + F : M) - F;
            if (j < 100 || !x._useTypedArrays) for (var Q = 0; Q < j; Q++) h[Q + v] = this[Q + F];
            else h._set(this.subarray(F, F + j), v);
          }
        }, x.prototype.slice = function(h, v) {
          var F = this.length;
          if (h = ge(h, F, 0), v = ge(v, F, F), x._useTypedArrays) return x._augment(this.subarray(h, v));
          for (var M = v - h, j = new x(M, void 0, !0), Q = 0; Q < M; Q++) j[Q] = this[Q + h];
          return j;
        }, x.prototype.get = function(h) {
          return console.log(".get() is deprecated. Access using array indexes instead."), this.readUInt8(h);
        }, x.prototype.set = function(h, v) {
          return console.log(".set() is deprecated. Access using array indexes instead."), this.writeUInt8(h, v);
        }, x.prototype.readUInt8 = function(h, v) {
          if (v || (z(h != null, "missing offset"), z(h < this.length, "Trying to read beyond buffer length")), !(h >= this.length)) return this[h];
        }, x.prototype.readUInt16LE = function(h, v) {
          return O(this, h, !0, v);
        }, x.prototype.readUInt16BE = function(h, v) {
          return O(this, h, !1, v);
        }, x.prototype.readUInt32LE = function(h, v) {
          return C(this, h, !0, v);
        }, x.prototype.readUInt32BE = function(h, v) {
          return C(this, h, !1, v);
        }, x.prototype.readInt8 = function(h, v) {
          if (v || (z(h != null, "missing offset"), z(h < this.length, "Trying to read beyond buffer length")), !(h >= this.length)) return 128 & this[h] ? -1 * (255 - this[h] + 1) : this[h];
        }, x.prototype.readInt16LE = function(h, v) {
          return T(this, h, !0, v);
        }, x.prototype.readInt16BE = function(h, v) {
          return T(this, h, !1, v);
        }, x.prototype.readInt32LE = function(h, v) {
          return _(this, h, !0, v);
        }, x.prototype.readInt32BE = function(h, v) {
          return _(this, h, !1, v);
        }, x.prototype.readFloatLE = function(h, v) {
          return m(this, h, !0, v);
        }, x.prototype.readFloatBE = function(h, v) {
          return m(this, h, !1, v);
        }, x.prototype.readDoubleLE = function(h, v) {
          return b(this, h, !0, v);
        }, x.prototype.readDoubleBE = function(h, v) {
          return b(this, h, !1, v);
        }, x.prototype.writeUInt8 = function(h, v, F) {
          F || (z(h != null, "missing value"), z(v != null, "missing offset"), z(v < this.length, "trying to write beyond buffer length"), zr(h, 255)), v >= this.length || (this[v] = h);
        }, x.prototype.writeUInt16LE = function(h, v, F) {
          d(this, h, v, !0, F);
        }, x.prototype.writeUInt16BE = function(h, v, F) {
          d(this, h, v, !1, F);
        }, x.prototype.writeUInt32LE = function(h, v, F) {
          N(this, h, v, !0, F);
        }, x.prototype.writeUInt32BE = function(h, v, F) {
          N(this, h, v, !1, F);
        }, x.prototype.writeInt8 = function(h, v, F) {
          F || (z(h != null, "missing value"), z(v != null, "missing offset"), z(v < this.length, "Trying to write beyond buffer length"), Qr(h, 127, -128)), v >= this.length || (0 <= h ? this.writeUInt8(h, v, F) : this.writeUInt8(255 + h + 1, v, F));
        }, x.prototype.writeInt16LE = function(h, v, F) {
          L(this, h, v, !0, F);
        }, x.prototype.writeInt16BE = function(h, v, F) {
          L(this, h, v, !1, F);
        }, x.prototype.writeInt32LE = function(h, v, F) {
          J(this, h, v, !0, F);
        }, x.prototype.writeInt32BE = function(h, v, F) {
          J(this, h, v, !1, F);
        }, x.prototype.writeFloatLE = function(h, v, F) {
          q(this, h, v, !0, F);
        }, x.prototype.writeFloatBE = function(h, v, F) {
          q(this, h, v, !1, F);
        }, x.prototype.writeDoubleLE = function(h, v, F) {
          Z(this, h, v, !0, F);
        }, x.prototype.writeDoubleBE = function(h, v, F) {
          Z(this, h, v, !1, F);
        }, x.prototype.fill = function(h, v, F) {
          if (v = v || 0, F = F || this.length, z(typeof (h = typeof (h = h || 0) == "string" ? h.charCodeAt(0) : h) == "number" && !isNaN(h), "value is not a number"), z(v <= F, "end < start"), F !== v && this.length !== 0) {
            z(0 <= v && v < this.length, "start out of bounds"), z(0 <= F && F <= this.length, "end out of bounds");
            for (var M = v; M < F; M++) this[M] = h;
          }
        }, x.prototype.inspect = function() {
          for (var h = [], v = this.length, F = 0; F < v; F++) if (h[F] = le(this[F]), F === r.INSPECT_MAX_BYTES) {
            h[F + 1] = "...";
            break;
          }
          return "<Buffer " + h.join(" ") + ">";
        }, x.prototype.toArrayBuffer = function() {
          if (typeof Uint8Array > "u") throw new Error("Buffer.toArrayBuffer not supported in this browser");
          if (x._useTypedArrays) return new x(this).buffer;
          for (var h = new Uint8Array(this.length), v = 0, F = h.length; v < F; v += 1) h[v] = this[v];
          return h.buffer;
        };
        var W = x.prototype;
        function ge(h, v, F) {
          return typeof h != "number" ? F : v <= (h = ~~h) ? v : 0 <= h || 0 <= (h += v) ? h : 0;
        }
        function Be(h) {
          return (h = ~~Math.ceil(+h)) < 0 ? 0 : h;
        }
        function me(h) {
          return (Array.isArray || function(v) {
            return Object.prototype.toString.call(v) === "[object Array]";
          })(h);
        }
        function le(h) {
          return h < 16 ? "0" + h.toString(16) : h.toString(16);
        }
        function Jt(h) {
          for (var v = [], F = 0; F < h.length; F++) {
            var M = h.charCodeAt(F);
            if (M <= 127) v.push(h.charCodeAt(F));
            else for (var j = F, Q = (55296 <= M && M <= 57343 && F++, encodeURIComponent(h.slice(j, F + 1)).substr(1).split("%")), oe = 0; oe < Q.length; oe++) v.push(parseInt(Q[oe], 16));
          }
          return v;
        }
        function ho(h) {
          return E.toByteArray(h);
        }
        function qi(h, v, F, M) {
          for (var j = 0; j < M && !(j + F >= v.length || j >= h.length); j++) v[j + F] = h[j];
          return j;
        }
        function po(h) {
          try {
            return decodeURIComponent(h);
          } catch {
            return "�";
          }
        }
        function zr(h, v) {
          z(typeof h == "number", "cannot write a non-number as a number"), z(0 <= h, "specified a negative value for writing an unsigned value"), z(h <= v, "value is larger than maximum value for type"), z(Math.floor(h) === h, "value has a fractional component");
        }
        function Qr(h, v, F) {
          z(typeof h == "number", "cannot write a non-number as a number"), z(h <= v, "value larger than maximum allowed value"), z(F <= h, "value smaller than minimum allowed value"), z(Math.floor(h) === h, "value has a fractional component");
        }
        function go(h, v, F) {
          z(typeof h == "number", "cannot write a non-number as a number"), z(h <= v, "value larger than maximum allowed value"), z(F <= h, "value smaller than minimum allowed value");
        }
        function z(h, v) {
          if (!h) throw new Error(v || "Failed assertion");
        }
        x._augment = function(h) {
          return h._isBuffer = !0, h._get = h.get, h._set = h.set, h.get = W.get, h.set = W.set, h.write = W.write, h.toString = W.toString, h.toLocaleString = W.toString, h.toJSON = W.toJSON, h.copy = W.copy, h.slice = W.slice, h.readUInt8 = W.readUInt8, h.readUInt16LE = W.readUInt16LE, h.readUInt16BE = W.readUInt16BE, h.readUInt32LE = W.readUInt32LE, h.readUInt32BE = W.readUInt32BE, h.readInt8 = W.readInt8, h.readInt16LE = W.readInt16LE, h.readInt16BE = W.readInt16BE, h.readInt32LE = W.readInt32LE, h.readInt32BE = W.readInt32BE, h.readFloatLE = W.readFloatLE, h.readFloatBE = W.readFloatBE, h.readDoubleLE = W.readDoubleLE, h.readDoubleBE = W.readDoubleBE, h.writeUInt8 = W.writeUInt8, h.writeUInt16LE = W.writeUInt16LE, h.writeUInt16BE = W.writeUInt16BE, h.writeUInt32LE = W.writeUInt32LE, h.writeUInt32BE = W.writeUInt32BE, h.writeInt8 = W.writeInt8, h.writeInt16LE = W.writeInt16LE, h.writeInt16BE = W.writeInt16BE, h.writeInt32LE = W.writeInt32LE, h.writeInt32BE = W.writeInt32BE, h.writeFloatLE = W.writeFloatLE, h.writeFloatBE = W.writeFloatBE, h.writeDoubleLE = W.writeDoubleLE, h.writeDoubleBE = W.writeDoubleBE, h.fill = W.fill, h.inspect = W.inspect, h.toArrayBuffer = W.toArrayBuffer, h;
        };
      }).call(this, n("lYpoI2"), typeof self < "u" ? self : typeof window < "u" ? window : {}, n("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/buffer/index.js", "/node_modules/gulp-browserify/node_modules/buffer");
    }, { "base64-js": 2, buffer: 3, ieee754: 10, lYpoI2: 11 }], 4: [function(n, i, r) {
      (function(s, o, E, u, c, f, g, p, w) {
        var E = n("buffer").Buffer, R = 4, x = new E(R);
        x.fill(0), i.exports = { hash: function(y, S, A, O) {
          for (var C = S(function(d, N) {
            d.length % R != 0 && (L = d.length + (R - d.length % R), d = E.concat([d, x], L));
            for (var L, J = [], q = N ? d.readInt32BE : d.readInt32LE, Z = 0; Z < d.length; Z += R) J.push(q.call(d, Z));
            return J;
          }(y = E.isBuffer(y) ? y : new E(y), O), 8 * y.length), S = O, T = new E(A), _ = S ? T.writeInt32BE : T.writeInt32LE, m = 0; m < C.length; m++) _.call(T, C[m], 4 * m, !0);
          return T;
        } };
      }).call(this, n("lYpoI2"), typeof self < "u" ? self : typeof window < "u" ? window : {}, n("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/crypto-browserify/helpers.js", "/node_modules/gulp-browserify/node_modules/crypto-browserify");
    }, { buffer: 3, lYpoI2: 11 }], 5: [function(n, i, r) {
      (function(s, o, E, u, c, f, g, p, w) {
        var E = n("buffer").Buffer, R = n("./sha"), x = n("./sha256"), y = n("./rng"), S = { sha1: R, sha256: x, md5: n("./md5") }, A = 64, O = new E(A);
        function C(d, N) {
          var L = S[d = d || "sha1"], J = [];
          return L || T("algorithm:", d, "is not yet supported"), { update: function(q) {
            return E.isBuffer(q) || (q = new E(q)), J.push(q), q.length, this;
          }, digest: function(q) {
            var Z = E.concat(J), Z = N ? function(W, ge, Be) {
              E.isBuffer(ge) || (ge = new E(ge)), E.isBuffer(Be) || (Be = new E(Be)), ge.length > A ? ge = W(ge) : ge.length < A && (ge = E.concat([ge, O], A));
              for (var me = new E(A), le = new E(A), Jt = 0; Jt < A; Jt++) me[Jt] = 54 ^ ge[Jt], le[Jt] = 92 ^ ge[Jt];
              return Be = W(E.concat([me, Be])), W(E.concat([le, Be]));
            }(L, N, Z) : L(Z);
            return J = null, q ? Z.toString(q) : Z;
          } };
        }
        function T() {
          var d = [].slice.call(arguments).join(" ");
          throw new Error([d, "we accept pull requests", "http://github.com/dominictarr/crypto-browserify"].join(`
`));
        }
        O.fill(0), r.createHash = function(d) {
          return C(d);
        }, r.createHmac = C, r.randomBytes = function(d, N) {
          if (!N || !N.call) return new E(y(d));
          try {
            N.call(this, void 0, new E(y(d)));
          } catch (L) {
            N(L);
          }
        };
        var _, m = ["createCredentials", "createCipher", "createCipheriv", "createDecipher", "createDecipheriv", "createSign", "createVerify", "createDiffieHellman", "pbkdf2"], b = function(d) {
          r[d] = function() {
            T("sorry,", d, "is not implemented yet");
          };
        };
        for (_ in m) b(m[_]);
      }).call(this, n("lYpoI2"), typeof self < "u" ? self : typeof window < "u" ? window : {}, n("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/crypto-browserify/index.js", "/node_modules/gulp-browserify/node_modules/crypto-browserify");
    }, { "./md5": 6, "./rng": 7, "./sha": 8, "./sha256": 9, buffer: 3, lYpoI2: 11 }], 6: [function(n, i, r) {
      (function(s, o, a, u, c, f, g, p, w) {
        var E = n("./helpers");
        function R(T, _) {
          T[_ >> 5] |= 128 << _ % 32, T[14 + (_ + 64 >>> 9 << 4)] = _;
          for (var m = 1732584193, b = -271733879, d = -1732584194, N = 271733878, L = 0; L < T.length; L += 16) {
            var J = m, q = b, Z = d, W = N, m = y(m, b, d, N, T[L + 0], 7, -680876936), N = y(N, m, b, d, T[L + 1], 12, -389564586), d = y(d, N, m, b, T[L + 2], 17, 606105819), b = y(b, d, N, m, T[L + 3], 22, -1044525330);
            m = y(m, b, d, N, T[L + 4], 7, -176418897), N = y(N, m, b, d, T[L + 5], 12, 1200080426), d = y(d, N, m, b, T[L + 6], 17, -1473231341), b = y(b, d, N, m, T[L + 7], 22, -45705983), m = y(m, b, d, N, T[L + 8], 7, 1770035416), N = y(N, m, b, d, T[L + 9], 12, -1958414417), d = y(d, N, m, b, T[L + 10], 17, -42063), b = y(b, d, N, m, T[L + 11], 22, -1990404162), m = y(m, b, d, N, T[L + 12], 7, 1804603682), N = y(N, m, b, d, T[L + 13], 12, -40341101), d = y(d, N, m, b, T[L + 14], 17, -1502002290), m = S(m, b = y(b, d, N, m, T[L + 15], 22, 1236535329), d, N, T[L + 1], 5, -165796510), N = S(N, m, b, d, T[L + 6], 9, -1069501632), d = S(d, N, m, b, T[L + 11], 14, 643717713), b = S(b, d, N, m, T[L + 0], 20, -373897302), m = S(m, b, d, N, T[L + 5], 5, -701558691), N = S(N, m, b, d, T[L + 10], 9, 38016083), d = S(d, N, m, b, T[L + 15], 14, -660478335), b = S(b, d, N, m, T[L + 4], 20, -405537848), m = S(m, b, d, N, T[L + 9], 5, 568446438), N = S(N, m, b, d, T[L + 14], 9, -1019803690), d = S(d, N, m, b, T[L + 3], 14, -187363961), b = S(b, d, N, m, T[L + 8], 20, 1163531501), m = S(m, b, d, N, T[L + 13], 5, -1444681467), N = S(N, m, b, d, T[L + 2], 9, -51403784), d = S(d, N, m, b, T[L + 7], 14, 1735328473), m = A(m, b = S(b, d, N, m, T[L + 12], 20, -1926607734), d, N, T[L + 5], 4, -378558), N = A(N, m, b, d, T[L + 8], 11, -2022574463), d = A(d, N, m, b, T[L + 11], 16, 1839030562), b = A(b, d, N, m, T[L + 14], 23, -35309556), m = A(m, b, d, N, T[L + 1], 4, -1530992060), N = A(N, m, b, d, T[L + 4], 11, 1272893353), d = A(d, N, m, b, T[L + 7], 16, -155497632), b = A(b, d, N, m, T[L + 10], 23, -1094730640), m = A(m, b, d, N, T[L + 13], 4, 681279174), N = A(N, m, b, d, T[L + 0], 11, -358537222), d = A(d, N, m, b, T[L + 3], 16, -722521979), b = A(b, d, N, m, T[L + 6], 23, 76029189), m = A(m, b, d, N, T[L + 9], 4, -640364487), N = A(N, m, b, d, T[L + 12], 11, -421815835), d = A(d, N, m, b, T[L + 15], 16, 530742520), m = O(m, b = A(b, d, N, m, T[L + 2], 23, -995338651), d, N, T[L + 0], 6, -198630844), N = O(N, m, b, d, T[L + 7], 10, 1126891415), d = O(d, N, m, b, T[L + 14], 15, -1416354905), b = O(b, d, N, m, T[L + 5], 21, -57434055), m = O(m, b, d, N, T[L + 12], 6, 1700485571), N = O(N, m, b, d, T[L + 3], 10, -1894986606), d = O(d, N, m, b, T[L + 10], 15, -1051523), b = O(b, d, N, m, T[L + 1], 21, -2054922799), m = O(m, b, d, N, T[L + 8], 6, 1873313359), N = O(N, m, b, d, T[L + 15], 10, -30611744), d = O(d, N, m, b, T[L + 6], 15, -1560198380), b = O(b, d, N, m, T[L + 13], 21, 1309151649), m = O(m, b, d, N, T[L + 4], 6, -145523070), N = O(N, m, b, d, T[L + 11], 10, -1120210379), d = O(d, N, m, b, T[L + 2], 15, 718787259), b = O(b, d, N, m, T[L + 9], 21, -343485551), m = C(m, J), b = C(b, q), d = C(d, Z), N = C(N, W);
          }
          return Array(m, b, d, N);
        }
        function x(T, _, m, b, d, N) {
          return C((_ = C(C(_, T), C(b, N))) << d | _ >>> 32 - d, m);
        }
        function y(T, _, m, b, d, N, L) {
          return x(_ & m | ~_ & b, T, _, d, N, L);
        }
        function S(T, _, m, b, d, N, L) {
          return x(_ & b | m & ~b, T, _, d, N, L);
        }
        function A(T, _, m, b, d, N, L) {
          return x(_ ^ m ^ b, T, _, d, N, L);
        }
        function O(T, _, m, b, d, N, L) {
          return x(m ^ (_ | ~b), T, _, d, N, L);
        }
        function C(T, _) {
          var m = (65535 & T) + (65535 & _);
          return (T >> 16) + (_ >> 16) + (m >> 16) << 16 | 65535 & m;
        }
        i.exports = function(T) {
          return E.hash(T, R, 16);
        };
      }).call(this, n("lYpoI2"), typeof self < "u" ? self : typeof window < "u" ? window : {}, n("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/crypto-browserify/md5.js", "/node_modules/gulp-browserify/node_modules/crypto-browserify");
    }, { "./helpers": 4, buffer: 3, lYpoI2: 11 }], 7: [function(n, i, r) {
      (function(s, o, a, u, c, f, g, p, w) {
        i.exports = function(E) {
          for (var R, x = new Array(E), y = 0; y < E; y++) !(3 & y) && (R = 4294967296 * Math.random()), x[y] = R >>> ((3 & y) << 3) & 255;
          return x;
        };
      }).call(this, n("lYpoI2"), typeof self < "u" ? self : typeof window < "u" ? window : {}, n("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/crypto-browserify/rng.js", "/node_modules/gulp-browserify/node_modules/crypto-browserify");
    }, { buffer: 3, lYpoI2: 11 }], 8: [function(n, i, r) {
      (function(s, o, a, u, c, f, g, p, w) {
        var E = n("./helpers");
        function R(S, A) {
          S[A >> 5] |= 128 << 24 - A % 32, S[15 + (A + 64 >> 9 << 4)] = A;
          for (var O, C, T, _ = Array(80), m = 1732584193, b = -271733879, d = -1732584194, N = 271733878, L = -1009589776, J = 0; J < S.length; J += 16) {
            for (var q = m, Z = b, W = d, ge = N, Be = L, me = 0; me < 80; me++) {
              _[me] = me < 16 ? S[J + me] : y(_[me - 3] ^ _[me - 8] ^ _[me - 14] ^ _[me - 16], 1);
              var le = x(x(y(m, 5), (le = b, C = d, T = N, (O = me) < 20 ? le & C | ~le & T : !(O < 40) && O < 60 ? le & C | le & T | C & T : le ^ C ^ T)), x(x(L, _[me]), (O = me) < 20 ? 1518500249 : O < 40 ? 1859775393 : O < 60 ? -1894007588 : -899497514)), L = N, N = d, d = y(b, 30), b = m, m = le;
            }
            m = x(m, q), b = x(b, Z), d = x(d, W), N = x(N, ge), L = x(L, Be);
          }
          return Array(m, b, d, N, L);
        }
        function x(S, A) {
          var O = (65535 & S) + (65535 & A);
          return (S >> 16) + (A >> 16) + (O >> 16) << 16 | 65535 & O;
        }
        function y(S, A) {
          return S << A | S >>> 32 - A;
        }
        i.exports = function(S) {
          return E.hash(S, R, 20, !0);
        };
      }).call(this, n("lYpoI2"), typeof self < "u" ? self : typeof window < "u" ? window : {}, n("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/crypto-browserify/sha.js", "/node_modules/gulp-browserify/node_modules/crypto-browserify");
    }, { "./helpers": 4, buffer: 3, lYpoI2: 11 }], 9: [function(n, i, r) {
      (function(s, o, a, u, c, f, g, p, w) {
        function E(A, O) {
          var C = (65535 & A) + (65535 & O);
          return (A >> 16) + (O >> 16) + (C >> 16) << 16 | 65535 & C;
        }
        function R(A, O) {
          var C, T = new Array(1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298), _ = new Array(1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225), m = new Array(64);
          A[O >> 5] |= 128 << 24 - O % 32, A[15 + (O + 64 >> 9 << 4)] = O;
          for (var b, d, N = 0; N < A.length; N += 16) {
            for (var L = _[0], J = _[1], q = _[2], Z = _[3], W = _[4], ge = _[5], Be = _[6], me = _[7], le = 0; le < 64; le++) m[le] = le < 16 ? A[le + N] : E(E(E((d = m[le - 2], y(d, 17) ^ y(d, 19) ^ S(d, 10)), m[le - 7]), (d = m[le - 15], y(d, 7) ^ y(d, 18) ^ S(d, 3))), m[le - 16]), C = E(E(E(E(me, y(d = W, 6) ^ y(d, 11) ^ y(d, 25)), W & ge ^ ~W & Be), T[le]), m[le]), b = E(y(b = L, 2) ^ y(b, 13) ^ y(b, 22), L & J ^ L & q ^ J & q), me = Be, Be = ge, ge = W, W = E(Z, C), Z = q, q = J, J = L, L = E(C, b);
            _[0] = E(L, _[0]), _[1] = E(J, _[1]), _[2] = E(q, _[2]), _[3] = E(Z, _[3]), _[4] = E(W, _[4]), _[5] = E(ge, _[5]), _[6] = E(Be, _[6]), _[7] = E(me, _[7]);
          }
          return _;
        }
        var x = n("./helpers"), y = function(A, O) {
          return A >>> O | A << 32 - O;
        }, S = function(A, O) {
          return A >>> O;
        };
        i.exports = function(A) {
          return x.hash(A, R, 32, !0);
        };
      }).call(this, n("lYpoI2"), typeof self < "u" ? self : typeof window < "u" ? window : {}, n("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/crypto-browserify/sha256.js", "/node_modules/gulp-browserify/node_modules/crypto-browserify");
    }, { "./helpers": 4, buffer: 3, lYpoI2: 11 }], 10: [function(n, i, r) {
      (function(s, o, a, u, c, f, g, p, w) {
        r.read = function(E, R, x, y, N) {
          var A, O, C = 8 * N - y - 1, T = (1 << C) - 1, _ = T >> 1, m = -7, b = x ? N - 1 : 0, d = x ? -1 : 1, N = E[R + b];
          for (b += d, A = N & (1 << -m) - 1, N >>= -m, m += C; 0 < m; A = 256 * A + E[R + b], b += d, m -= 8) ;
          for (O = A & (1 << -m) - 1, A >>= -m, m += y; 0 < m; O = 256 * O + E[R + b], b += d, m -= 8) ;
          if (A === 0) A = 1 - _;
          else {
            if (A === T) return O ? NaN : 1 / 0 * (N ? -1 : 1);
            O += Math.pow(2, y), A -= _;
          }
          return (N ? -1 : 1) * O * Math.pow(2, A - y);
        }, r.write = function(E, R, x, y, S, L) {
          var O, C, T = 8 * L - S - 1, _ = (1 << T) - 1, m = _ >> 1, b = S === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, d = y ? 0 : L - 1, N = y ? 1 : -1, L = R < 0 || R === 0 && 1 / R < 0 ? 1 : 0;
          for (R = Math.abs(R), isNaN(R) || R === 1 / 0 ? (C = isNaN(R) ? 1 : 0, O = _) : (O = Math.floor(Math.log(R) / Math.LN2), R * (y = Math.pow(2, -O)) < 1 && (O--, y *= 2), 2 <= (R += 1 <= O + m ? b / y : b * Math.pow(2, 1 - m)) * y && (O++, y /= 2), _ <= O + m ? (C = 0, O = _) : 1 <= O + m ? (C = (R * y - 1) * Math.pow(2, S), O += m) : (C = R * Math.pow(2, m - 1) * Math.pow(2, S), O = 0)); 8 <= S; E[x + d] = 255 & C, d += N, C /= 256, S -= 8) ;
          for (O = O << S | C, T += S; 0 < T; E[x + d] = 255 & O, d += N, O /= 256, T -= 8) ;
          E[x + d - N] |= 128 * L;
        };
      }).call(this, n("lYpoI2"), typeof self < "u" ? self : typeof window < "u" ? window : {}, n("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/ieee754/index.js", "/node_modules/gulp-browserify/node_modules/ieee754");
    }, { buffer: 3, lYpoI2: 11 }], 11: [function(n, i, r) {
      (function(s, o, a, u, c, f, g, p, w) {
        var E, R, x;
        function y() {
        }
        (s = i.exports = {}).nextTick = (R = typeof window < "u" && window.setImmediate, x = typeof window < "u" && window.postMessage && window.addEventListener, R ? function(S) {
          return window.setImmediate(S);
        } : x ? (E = [], window.addEventListener("message", function(S) {
          var A = S.source;
          A !== window && A !== null || S.data !== "process-tick" || (S.stopPropagation(), 0 < E.length && E.shift()());
        }, !0), function(S) {
          E.push(S), window.postMessage("process-tick", "*");
        }) : function(S) {
          setTimeout(S, 0);
        }), s.title = "browser", s.browser = !0, s.env = {}, s.argv = [], s.on = y, s.addListener = y, s.once = y, s.off = y, s.removeListener = y, s.removeAllListeners = y, s.emit = y, s.binding = function(S) {
          throw new Error("process.binding is not supported");
        }, s.cwd = function() {
          return "/";
        }, s.chdir = function(S) {
          throw new Error("process.chdir is not supported");
        };
      }).call(this, n("lYpoI2"), typeof self < "u" ? self : typeof window < "u" ? window : {}, n("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/process/browser.js", "/node_modules/gulp-browserify/node_modules/process");
    }, { buffer: 3, lYpoI2: 11 }] }, {}, [1])(1);
  });
})(dl);
var Hg = dl.exports, Jg = /* @__PURE__ */ gp(Hg), In = {}, wn = {}, ro = {};
Object.defineProperty(ro, "__esModule", {
  value: !0
});
ro.isObjectLike = Kg;
function Kg(t) {
  return typeof t == "object" && t !== null;
}
var Br = {}, so = {};
Object.defineProperty(so, "__esModule", {
  value: !0
});
so.invariant = Xg;
function Xg(t, e) {
  if (!!!t)
    throw new Error(
      e ?? "Unexpected invariant triggered."
    );
}
Object.defineProperty(Br, "__esModule", {
  value: !0
});
Br.getLocation = tm;
var Zg = so;
const em = /\r\n|[\n\r]/g;
function tm(t, e) {
  let n = 0, i = 1;
  for (const r of t.body.matchAll(em)) {
    if (typeof r.index == "number" || (0, Zg.invariant)(!1), r.index >= e)
      break;
    n = r.index + r[0].length, i += 1;
  }
  return {
    line: i,
    column: e + 1 - n
  };
}
var Gr = {};
Object.defineProperty(Gr, "__esModule", {
  value: !0
});
Gr.printLocation = im;
Gr.printSourceLocation = hl;
var nm = Br;
function im(t) {
  return hl(
    t.source,
    (0, nm.getLocation)(t.source, t.start)
  );
}
function hl(t, e) {
  const n = t.locationOffset.column - 1, i = "".padStart(n) + t.body, r = e.line - 1, s = t.locationOffset.line - 1, o = e.line + s, a = e.line === 1 ? n : 0, u = e.column + a, c = `${t.name}:${o}:${u}
`, f = i.split(/\r\n|[\n\r]/g), g = f[r];
  if (g.length > 120) {
    const p = Math.floor(u / 80), w = u % 80, E = [];
    for (let R = 0; R < g.length; R += 80)
      E.push(g.slice(R, R + 80));
    return c + Ia([
      [`${o} |`, E[0]],
      ...E.slice(1, p + 1).map((R) => ["|", R]),
      ["|", "^".padStart(w)],
      ["|", E[p + 1]]
    ]);
  }
  return c + Ia([
    // Lines specified like this: ["prefix", "string"],
    [`${o - 1} |`, f[r - 1]],
    [`${o} |`, g],
    ["|", "^".padStart(u)],
    [`${o + 1} |`, f[r + 1]]
  ]);
}
function Ia(t) {
  const e = t.filter(([i, r]) => r !== void 0), n = Math.max(...e.map(([i]) => i.length));
  return e.map(([i, r]) => i.padStart(n) + (r ? " " + r : "")).join(`
`);
}
Object.defineProperty(wn, "__esModule", {
  value: !0
});
wn.GraphQLError = void 0;
wn.formatError = am;
wn.printError = om;
var rm = ro, Oa = Br, Na = Gr;
function sm(t) {
  const e = t[0];
  return e == null || "kind" in e || "length" in e ? {
    nodes: e,
    source: t[1],
    positions: t[2],
    path: t[3],
    originalError: t[4],
    extensions: t[5]
  } : e;
}
class oo extends Error {
  /**
   * An array of `{ line, column }` locations within the source GraphQL document
   * which correspond to this error.
   *
   * Errors during validation often contain multiple locations, for example to
   * point out two things with the same name. Errors during execution include a
   * single location, the field which produced the error.
   *
   * Enumerable, and appears in the result of JSON.stringify().
   */
  /**
   * An array describing the JSON-path into the execution response which
   * corresponds to this error. Only included for errors during execution.
   *
   * Enumerable, and appears in the result of JSON.stringify().
   */
  /**
   * An array of GraphQL AST Nodes corresponding to this error.
   */
  /**
   * The source GraphQL document for the first location of this error.
   *
   * Note that if this Error represents more than one node, the source may not
   * represent nodes after the first node.
   */
  /**
   * An array of character offsets within the source GraphQL document
   * which correspond to this error.
   */
  /**
   * The original error thrown from a field resolver during execution.
   */
  /**
   * Extension fields to add to the formatted error.
   */
  /**
   * @deprecated Please use the `GraphQLErrorOptions` constructor overload instead.
   */
  constructor(e, ...n) {
    var i, r, s;
    const { nodes: o, source: a, positions: u, path: c, originalError: f, extensions: g } = sm(n);
    super(e), this.name = "GraphQLError", this.path = c ?? void 0, this.originalError = f ?? void 0, this.nodes = Aa(
      Array.isArray(o) ? o : o ? [o] : void 0
    );
    const p = Aa(
      (i = this.nodes) === null || i === void 0 ? void 0 : i.map((E) => E.loc).filter((E) => E != null)
    );
    this.source = a ?? (p == null || (r = p[0]) === null || r === void 0 ? void 0 : r.source), this.positions = u ?? (p == null ? void 0 : p.map((E) => E.start)), this.locations = u && a ? u.map((E) => (0, Oa.getLocation)(a, E)) : p == null ? void 0 : p.map(
      (E) => (0, Oa.getLocation)(E.source, E.start)
    );
    const w = (0, rm.isObjectLike)(
      f == null ? void 0 : f.extensions
    ) ? f == null ? void 0 : f.extensions : void 0;
    this.extensions = (s = g ?? w) !== null && s !== void 0 ? s : /* @__PURE__ */ Object.create(null), Object.defineProperties(this, {
      message: {
        writable: !0,
        enumerable: !0
      },
      name: {
        enumerable: !1
      },
      nodes: {
        enumerable: !1
      },
      source: {
        enumerable: !1
      },
      positions: {
        enumerable: !1
      },
      originalError: {
        enumerable: !1
      }
    }), f != null && f.stack ? Object.defineProperty(this, "stack", {
      value: f.stack,
      writable: !0,
      configurable: !0
    }) : Error.captureStackTrace ? Error.captureStackTrace(this, oo) : Object.defineProperty(this, "stack", {
      value: Error().stack,
      writable: !0,
      configurable: !0
    });
  }
  get [Symbol.toStringTag]() {
    return "GraphQLError";
  }
  toString() {
    let e = this.message;
    if (this.nodes)
      for (const n of this.nodes)
        n.loc && (e += `

` + (0, Na.printLocation)(n.loc));
    else if (this.source && this.locations)
      for (const n of this.locations)
        e += `

` + (0, Na.printSourceLocation)(this.source, n);
    return e;
  }
  toJSON() {
    const e = {
      message: this.message
    };
    return this.locations != null && (e.locations = this.locations), this.path != null && (e.path = this.path), this.extensions != null && Object.keys(this.extensions).length > 0 && (e.extensions = this.extensions), e;
  }
}
wn.GraphQLError = oo;
function Aa(t) {
  return t === void 0 || t.length === 0 ? void 0 : t;
}
function om(t) {
  return t.toString();
}
function am(t) {
  return t.toJSON();
}
var ao = {};
Object.defineProperty(ao, "__esModule", {
  value: !0
});
ao.syntaxError = lm;
var um = wn;
function lm(t, e, n) {
  return new um.GraphQLError(`Syntax Error: ${n}`, {
    source: t,
    positions: [e]
  });
}
var uo = {}, lo = {}, co = {};
Object.defineProperty(co, "__esModule", {
  value: !0
});
co.inspect = fm;
const cm = 10, pl = 2;
function fm(t) {
  return qr(t, []);
}
function qr(t, e) {
  switch (typeof t) {
    case "string":
      return JSON.stringify(t);
    case "function":
      return t.name ? `[function ${t.name}]` : "[function]";
    case "object":
      return dm(t, e);
    default:
      return String(t);
  }
}
function dm(t, e) {
  if (t === null)
    return "null";
  if (e.includes(t))
    return "[Circular]";
  const n = [...e, t];
  if (hm(t)) {
    const i = t.toJSON();
    if (i !== t)
      return typeof i == "string" ? i : qr(i, n);
  } else if (Array.isArray(t))
    return gm(t, n);
  return pm(t, n);
}
function hm(t) {
  return typeof t.toJSON == "function";
}
function pm(t, e) {
  const n = Object.entries(t);
  return n.length === 0 ? "{}" : e.length > pl ? "[" + mm(t) + "]" : "{ " + n.map(
    ([r, s]) => r + ": " + qr(s, e)
  ).join(", ") + " }";
}
function gm(t, e) {
  if (t.length === 0)
    return "[]";
  if (e.length > pl)
    return "[Array]";
  const n = Math.min(cm, t.length), i = t.length - n, r = [];
  for (let s = 0; s < n; ++s)
    r.push(qr(t[s], e));
  return i === 1 ? r.push("... 1 more item") : i > 1 && r.push(`... ${i} more items`), "[" + r.join(", ") + "]";
}
function mm(t) {
  const e = Object.prototype.toString.call(t).replace(/^\[object /, "").replace(/]$/, "");
  if (e === "Object" && typeof t.constructor == "function") {
    const n = t.constructor.name;
    if (typeof n == "string" && n !== "")
      return n;
  }
  return e;
}
Object.defineProperty(lo, "__esModule", {
  value: !0
});
lo.toError = bm;
var ym = co;
function bm(t) {
  return t instanceof Error ? t : new Em(t);
}
class Em extends Error {
  constructor(e) {
    super("Unexpected error value: " + (0, ym.inspect)(e)), this.name = "NonErrorThrown", this.thrownValue = e;
  }
}
Object.defineProperty(uo, "__esModule", {
  value: !0
});
uo.locatedError = Tm;
var vm = lo, wm = wn;
function Tm(t, e, n) {
  var i;
  const r = (0, vm.toError)(t);
  return Sm(r) ? r : new wm.GraphQLError(r.message, {
    nodes: (i = r.nodes) !== null && i !== void 0 ? i : e,
    source: r.source,
    positions: r.positions,
    path: n,
    originalError: r
  });
}
function Sm(t) {
  return Array.isArray(t.path);
}
(function(t) {
  Object.defineProperty(t, "__esModule", {
    value: !0
  }), Object.defineProperty(t, "GraphQLError", {
    enumerable: !0,
    get: function() {
      return e.GraphQLError;
    }
  }), Object.defineProperty(t, "formatError", {
    enumerable: !0,
    get: function() {
      return e.formatError;
    }
  }), Object.defineProperty(t, "locatedError", {
    enumerable: !0,
    get: function() {
      return i.locatedError;
    }
  }), Object.defineProperty(t, "printError", {
    enumerable: !0,
    get: function() {
      return e.printError;
    }
  }), Object.defineProperty(t, "syntaxError", {
    enumerable: !0,
    get: function() {
      return n.syntaxError;
    }
  });
  var e = wn, n = ao, i = uo;
})(In);
var gl = {};
(function(t) {
  t.__esModule = !0, t.OpenAPIV2 = t.OpenAPIV3 = void 0, function(e) {
    (function(n) {
      n.GET = "get", n.PUT = "put", n.POST = "post", n.DELETE = "delete", n.OPTIONS = "options", n.HEAD = "head", n.PATCH = "patch", n.TRACE = "trace";
    })(e.HttpMethods || (e.HttpMethods = {}));
  }(t.OpenAPIV3 || (t.OpenAPIV3 = {})), function(e) {
    (function(n) {
      n.GET = "get", n.PUT = "put", n.POST = "post", n.DELETE = "delete", n.OPTIONS = "options", n.HEAD = "head", n.PATCH = "patch";
    })(e.HttpMethods || (e.HttpMethods = {}));
  }(t.OpenAPIV2 || (t.OpenAPIV2 = {}));
})(gl);
const ss = /* @__PURE__ */ new Map(), _m = (t, e) => {
  ss.has(t) || ss.set(t, /* @__PURE__ */ new Map());
  const n = ss.get(t);
  if (n.has(e))
    return n.get(e);
  const i = e.split("/").slice(1);
  let r = t;
  for (const s of i)
    (!r || typeof r != "object") && (r = null), r = r[s] ?? null;
  return n.set(e, r), r;
}, os = /* @__PURE__ */ new Map(), Im = (t) => t !== null && typeof t == "object", Om = async (t, e = []) => {
  if (os.has(t))
    return os.get(t);
  const n = structuredClone(t), i = /* @__PURE__ */ new Set(), r = async (o, a) => {
    if (Im(o)) {
      if (i.has(o))
        return o;
      if (i.add(o), Array.isArray(o))
        for (let u = 0; u < o.length; u++)
          o[u] = await r(o[u]);
      else {
        if ("$ref" in o && typeof o.$ref == "string") {
          for (const u of e) {
            const c = await u(o.$ref);
            if (c) return c;
          }
          return await _m(n, o.$ref);
        }
        for (const u in o)
          o[u] = await r(o[u]);
      }
    }
    return o;
  }, s = await r(n);
  return os.set(t, s), s;
};
function dn(t, e) {
  const n = {};
  for (const [i, r] of Object.entries(t))
    Array.isArray(r) ? n[i] = r.map(
      (s) => typeof s == "object" && s !== null ? dn(s, e) : s
    ) : typeof r == "object" && r !== null ? n[i] = dn(r, e) : n[i] = r;
  return e(n);
}
const Nm = (t) => {
  var e;
  return (e = t.openapi) != null && e.startsWith("3.0") && (t.openapi = "3.1.0"), t = dn(t, (n) => (n.type !== "undefined" && n.nullable === !0 && (n.type = ["null", n.type], delete n.nullable), n)), t = dn(t, (n) => (n.exclusiveMinimum === !0 ? (n.exclusiveMinimum = n.minimum, delete n.minimum) : n.exclusiveMinimum === !1 && delete n.exclusiveMinimum, n.exclusiveMaximum === !0 ? (n.exclusiveMaximum = n.maximum, delete n.maximum) : n.exclusiveMaximum === !1 && delete n.exclusiveMaximum, n)), t = dn(t, (n) => (n.example !== void 0 && (n.examples = {
    default: n.example
  }, delete n.example), n)), t = dn(t, (n) => {
    if (n.type === "object" && n.properties !== void 0)
      for (const [, i] of Object.entries(n.properties)) {
        const r = i ?? {};
        r.type === "string" && r.format === "binary" && (r.contentEncoding = "application/octet-stream", delete r.format);
      }
    return n;
  }), t = dn(t, (n) => {
    if (!(n.type === "string" && n.format === "binary"))
      return n;
  }), t = dn(t, (n) => n.type === "string" && n.format === "base64" ? {
    type: "string",
    contentEncoding: "base64"
  } : n), t;
}, Am = Object.values(gl.OpenAPIV3.HttpMethods), xm = async (t) => {
  if (typeof t == "string") {
    if (t.trim().startsWith("{"))
      try {
        return JSON.parse(t);
      } catch (i) {
        throw new In.GraphQLError("Invalid JSON schema", {
          originalError: i
        });
      }
    if (t.includes("://")) {
      let i;
      try {
        i = await fetch(t, {
          cache: "force-cache"
        });
      } catch (s) {
        throw new In.GraphQLError("Failed to fetch schema", {
          originalError: s
        });
      }
      if (!i.ok)
        throw new In.GraphQLError(
          `Failed to fetch schema: ${i.statusText}`
        );
      const r = await i.text();
      try {
        return r.trim().startsWith("{") ? JSON.parse(r) : (await import("./index-B_Jk_Yzp.js")).parse(r);
      } catch (s) {
        throw new In.GraphQLError("Fetched invalid schema", {
          originalError: s
        });
      }
    }
    const n = (await import("./index-B_Jk_Yzp.js")).parse(t);
    if (typeof n == "object") return n;
  }
  if (typeof t == "object") return t;
  throw new In.GraphQLError("Unsupported schema input: " + t);
}, Fm = async (t) => {
  const e = await xm(t);
  if (!e.openapi)
    throw new In.GraphQLError("OpenAPI version is not defined");
  const n = await Om(e);
  return Nm(n);
}, Rm = (t, e, n) => {
  const i = (e.summary ?? "") + (e.operationId ? "-" + e.operationId.slice(0, (e.summary, 1 / 0)) : "");
  return t(
    (n ? n + "-" : "") + (i || `${e.method}-${e.path}`)
  );
}, Lm = new Rs({
  ttl: 60 * 10 * 1e3,
  ttlAutopurge: !0,
  fetchMethod: (t, e, { context: n }) => Fm(n)
}), Me = new th({}), Ri = Me.addScalarType("JSON", fh), Cm = Me.addScalarType("JSONObject", dh), ml = (t) => {
  const e = t.tags ?? [], n = Object.values(t.paths ?? {}).flatMap((r) => Object.values(r ?? {})).flatMap(
    (r) => typeof r == "object" && "tags" in r ? r.tags ?? [] : []
  ), i = [...new Set(n)].filter(
    (r) => !e.some((s) => s.name === r)
  );
  return [...e, ...i.map((r) => ({ name: r }))];
}, yl = (t, e) => {
  const n = ch();
  return Object.entries(t ?? {}).flatMap(
    ([i, r]) => Am.flatMap((s) => {
      if (!(r != null && r[s])) return [];
      const o = r[s], a = r.parameters ?? [], u = o.parameters ?? [], c = [
        ...a.filter(
          // remove path parameters that are already defined in the operation
          (g) => !u.some(
            (p) => p.name === g.name && p.in === g.in
          )
        ),
        ...u
      ], f = {
        summary: o.summary,
        operationId: o.operationId,
        path: i,
        method: s
      };
      return {
        ...o,
        method: s,
        path: i,
        parameters: c,
        tags: o.tags ?? [],
        slug: Rm(n, f, e)
      };
    })
  );
}, km = Me.objectRef("SchemaTag").implement({
  fields: (t) => ({
    name: t.exposeString("name", { nullable: !0 }),
    description: t.exposeString("description", { nullable: !0 }),
    operations: t.field({
      type: [vl],
      resolve: (e, n, i) => {
        const r = ml(i.schema).map((s) => s.name);
        return yl(i.schema.paths, e.name).filter(
          (s) => e.name ? s.tags.includes(e.name) : s.tags.length === 0 || // If none of the tags are present in the root tags, then show them here
          s.tags.every((o) => !r.includes(o))
        );
      }
    })
  })
}), Dm = Me.objectRef("Server").implement({
  fields: (t) => ({
    url: t.exposeString("url"),
    description: t.exposeString("description", { nullable: !0 })
  })
}), $m = Me.objectRef("PathItem").implement({
  fields: (t) => ({
    path: t.exposeString("path"),
    methods: t.exposeStringList("methods")
  })
}), Pm = Me.objectRef("TagItem").implement({
  fields: (t) => ({
    name: t.exposeString("name"),
    description: t.exposeString("description", { nullable: !0 })
  })
}), jm = Me.objectRef("EncodingItem").implement({
  fields: (t) => ({
    name: t.exposeString("name"),
    contentType: t.exposeString("contentType", { nullable: !0 }),
    headers: t.expose("headers", { type: Cm, nullable: !0 }),
    style: t.exposeString("style", { nullable: !0 }),
    explode: t.exposeBoolean("explode", { nullable: !0 }),
    allowReserved: t.exposeBoolean("allowReserved", { nullable: !0 })
  })
}), bl = Me.objectRef("ExampleItem").implement({
  fields: (t) => ({
    name: t.exposeString("name"),
    summary: t.exposeString("summary", { nullable: !0 }),
    description: t.exposeString("description", { nullable: !0 }),
    value: t.exposeString("value", { nullable: !0 }),
    externalValue: t.exposeString("externalValue", { nullable: !0 })
  })
}), Mm = Me.enumType("ParameterIn", {
  values: ["query", "header", "path", "cookie"]
}), Um = Me.objectRef("ParameterItem").implement({
  fields: (t) => ({
    name: t.exposeString("name"),
    in: t.field({
      type: Mm,
      resolve: (e) => e.in
    }),
    description: t.exposeString("description", { nullable: !0 }),
    required: t.exposeBoolean("required", { nullable: !0 }),
    deprecated: t.exposeBoolean("deprecated", { nullable: !0 }),
    allowEmptyValue: t.exposeBoolean("allowEmptyValue", { nullable: !0 }),
    style: t.exposeString("style", { nullable: !0 }),
    explode: t.exposeBoolean("explode", { nullable: !0 }),
    allowReserved: t.exposeBoolean("allowReserved", { nullable: !0 }),
    examples: t.field({
      type: [bl],
      resolve: (e) => Object.entries(e.examples ?? {}).map(([n, i]) => ({
        name: n,
        ...typeof i == "string" ? { value: i } : i
      })),
      nullable: !0
    }),
    schema: t.expose("schema", { type: Ri, nullable: !0 })
  })
}), El = Me.objectRef("MediaTypeObject").implement({
  fields: (t) => ({
    mediaType: t.exposeString("mediaType"),
    schema: t.expose("schema", { type: Ri, nullable: !0 }),
    examples: t.expose("examples", { type: [bl], nullable: !0 }),
    encoding: t.expose("encoding", { type: [jm], nullable: !0 })
  })
}), Vm = Me.objectRef("RequestBodyObject").implement({
  fields: (t) => ({
    description: t.exposeString("description", { nullable: !0 }),
    content: t.expose("content", { type: [El], nullable: !0 }),
    required: t.exposeBoolean("required", { nullable: !0 })
  })
}), Bm = Me.objectRef("ResponseItem").implement({
  fields: (t) => ({
    statusCode: t.exposeString("statusCode"),
    description: t.exposeString("description", { nullable: !0 }),
    content: t.expose("content", { type: [El], nullable: !0 }),
    headers: t.expose("headers", { type: Ri, nullable: !0 }),
    links: t.expose("links", { type: Ri, nullable: !0 })
  })
}), vl = Me.objectRef("OperationItem").implement({
  fields: (t) => ({
    slug: t.exposeString("slug"),
    path: t.exposeString("path"),
    method: t.exposeString("method"),
    operationId: t.exposeString("operationId", { nullable: !0 }),
    summary: t.exposeString("summary", { nullable: !0 }),
    description: t.exposeString("description", { nullable: !0 }),
    contentTypes: t.stringList({
      resolve: (e) => {
        var n;
        return Object.keys(((n = e.requestBody) == null ? void 0 : n.content) ?? {});
      }
    }),
    parameters: t.expose("parameters", {
      type: [Um],
      nullable: !0
    }),
    requestBody: t.field({
      type: Vm,
      resolve: (e) => {
        var n, i, r;
        return {
          description: (n = e.requestBody) == null ? void 0 : n.description,
          required: (i = e.requestBody) == null ? void 0 : i.required,
          content: Object.entries(((r = e.requestBody) == null ? void 0 : r.content) ?? {}).map(
            ([s, o]) => ({
              mediaType: s,
              schema: o.schema,
              examples: Object.entries(o.examples ?? {}).map(
                ([a, u]) => ({ name: a, ...u })
              ),
              encoding: Object.entries(o.encoding ?? {}).map(
                ([a, u]) => ({ name: a, ...u })
              )
            })
          )
        };
      },
      nullable: !0
    }),
    responses: t.field({
      type: [Bm],
      resolve: (e) => Object.entries(e.responses ?? {}).map(
        ([n, i]) => ({
          statusCode: n,
          description: i.description,
          content: Object.entries(i.content ?? {}).map(
            ([r, s]) => ({
              mediaType: r,
              schema: s.schema,
              examples: Object.entries(s.examples ?? {}).map(
                ([o, a]) => ({ name: o, ...a })
              )
            })
          ),
          headers: i.headers,
          links: i.links
        })
      )
    }),
    tags: t.field({
      type: [Pm],
      resolve: (e, n, i) => {
        var r;
        return (r = e.tags) == null ? void 0 : r.map((s) => {
          var o, a;
          return {
            name: s,
            description: (a = (o = i.schema.tags) == null ? void 0 : o.find((u) => u.name === s)) == null ? void 0 : a.description
          };
        });
      },
      nullable: !0
    }),
    deprecated: t.exposeBoolean("deprecated", { nullable: !0 })
  })
}), Gm = Me.objectRef("Schema").implement({
  fields: (t) => ({
    openapi: t.string({ resolve: (e) => e.openapi }),
    url: t.string({ resolve: (e) => {
      var n, i;
      return ((i = (n = e.servers) == null ? void 0 : n.at(0)) == null ? void 0 : i.url) ?? "/";
    } }),
    servers: t.field({
      type: [Dm],
      resolve: (e) => e.servers ?? []
    }),
    title: t.string({ resolve: (e) => e.info.title }),
    version: t.string({ resolve: (e) => e.info.version }),
    description: t.string({
      resolve: (e) => e.info.description,
      nullable: !0
    }),
    paths: t.field({
      type: [$m],
      resolve: (e) => Object.entries(e.paths ?? {}).map(([n, i]) => ({
        path: n,
        methods: Object.keys(i)
      }))
    }),
    tags: t.field({
      args: {
        name: t.arg.string()
      },
      type: [km],
      resolve: (e, n) => {
        const i = [...ml(e), { name: "" }];
        return n.name ? i.filter((r) => r.name === n.name) : i;
      }
    }),
    operations: t.field({
      type: [vl],
      args: {
        path: t.arg.string(),
        method: t.arg.string(),
        operationId: t.arg.string(),
        tag: t.arg.string()
      },
      resolve: (e, n) => yl(e.paths).filter(
        (i) => (!n.operationId || i.operationId === n.operationId) && (!n.path || i.path === n.path) && (!n.method || i.method === n.method) && (!n.tag || i.tags.includes(n.tag))
      )
    })
  })
}), qm = async (t) => {
  const e = Jg(t);
  return await Lm.forceFetch(e, { context: t });
}, zm = Me.enumType("SchemaType", {
  values: ["url", "file", "raw"]
});
Me.queryType({
  fields: (t) => ({
    // https://tan-cow-main-bce8a06.d2.zuplo.dev/openapi
    schema: t.field({
      type: Gm,
      args: {
        type: t.arg({ type: zm, required: !0 }),
        input: t.arg({ type: Ri, required: !0 })
      },
      resolve: async (e, n, i) => {
        const r = await qm(n.input);
        return i.schema = r, r;
      }
    })
  })
});
const Qm = Me.toSchema(), Wm = (t) => Wg({ schema: Qm, ...t }), Ym = () => Wm({
  plugins: [
    // eslint-disable-next-line react-hooks/rules-of-hooks
    Ll({
      logFn: (t, { args: e }) => {
      }
    })
  ]
}), Hm = Ym(), Jm = self;
Jm.addEventListener(
  "connect",
  function(t) {
    const e = t.ports[0];
    e.onmessage = async function(n) {
      const i = await Hm.fetch(
        new Request("/__z/graphql", {
          method: "POST",
          body: n.data.body,
          headers: {
            "Content-Type": "application/json"
          }
        })
      );
      e.postMessage({
        id: n.data.id,
        body: await i.text()
      });
    };
  }
);
//# sourceMappingURL=worker-Bf8vjASY.js.map
