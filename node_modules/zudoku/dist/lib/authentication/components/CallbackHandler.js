import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import logger from "loglevel";
import { useEffect, useRef, useState } from "react";
import { useNavigate } from "react-router-dom";
import { DeveloperHint } from "../../components/DeveloperHint.js";
import { ErrorPage } from "../../components/ErrorPage.js";
import { Spinner } from "../../components/Spinner.js";
import { SyntaxHighlight } from "../../components/SyntaxHighlight.js";
export function CallbackHandler({ handleCallback, }) {
    const [error, setError] = useState(null);
    const navigate = useNavigate();
    // Deal with double mount in dev mode which will break
    // the OAuth flow because you can only use the code once
    const didInitialize = useRef(false);
    useEffect(() => {
        if (didInitialize.current) {
            return;
        }
        didInitialize.current = true;
        handleCallback()
            .then((redirect) => {
            navigate(redirect);
        })
            .catch((err) => {
            logger.error(err);
            setError(err);
        });
    }, [navigate, handleCallback]);
    if (error) {
        return (_jsx(ErrorPage, { category: "Error", title: "Authentication Error", message: _jsxs(_Fragment, { children: [_jsx(DeveloperHint, { className: "mb-4", children: "Check the configuration of your authorization provider and ensure all settings such as the callback URL are configured correctly." }), "An error occurred while authorizing the user.", _jsx(SyntaxHighlight, { code: error.toString(), language: "plain" })] }) }));
    }
    return (_jsx("div", { className: "grid h-full place-items-center", children: _jsx(Spinner, {}) }));
}
//# sourceMappingURL=CallbackHandler.js.map