import { resolveLocalRef } from "./resolveRef.js";
const cache = new Map();
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const isIndexableObject = (obj) => obj !== null && typeof obj === "object";
// Taken and inspired from `dereference-json-schema` package.
export const dereference = async (schema, resolvers = []) => {
    if (cache.has(schema)) {
        return cache.get(schema);
    }
    const cloned = structuredClone(schema);
    const visited = new Set();
    const resolve = async (current, path) => {
        if (isIndexableObject(current)) {
            if (visited.has(current)) {
                return current;
            }
            visited.add(current);
            if (Array.isArray(current)) {
                for (let index = 0; index < current.length; index++) {
                    current[index] = await resolve(current[index], `${path}/${index}`);
                }
            }
            else {
                if ("$ref" in current && typeof current.$ref === "string") {
                    for (const resolver of resolvers) {
                        const resolved = await resolver(current.$ref);
                        if (resolved)
                            return resolved;
                    }
                    return await resolveLocalRef(cloned, current.$ref);
                }
                for (const key in current) {
                    current[key] = await resolve(current[key], `${path}/${key}`);
                }
            }
        }
        return current;
    };
    const result = (await resolve(cloned, "#"));
    cache.set(schema, result);
    return result;
};
//# sourceMappingURL=index.js.map