import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { EraserIcon } from "lucide-react";
import { Controller, useFieldArray, useFormContext, } from "react-hook-form";
import { Button } from "../../../ui/Button.js";
import { Input } from "../../../ui/Input.js";
import { cn } from "../../../util/cn.js";
import { InlineInput } from "./InlineInput.js";
import { NO_IDENTITY, } from "./Playground.js";
export const QueryParams = ({ control, queryParams, }) => {
    const { fields } = useFieldArray({
        control,
        name: "queryParams",
    });
    const form = useFormContext();
    const requiredFields = queryParams.map((param) => Boolean(param.isRequired));
    const selectedIdentity = form.watch("identity");
    const hasSelectedIdentity = selectedIdentity !== NO_IDENTITY;
    return (_jsx("div", { className: "", children: _jsx("table", { className: "w-full [&_td]:border [&_td]:p-1.5 [&_td]:px-2", children: _jsx("tbody", { children: fields
                    .filter(
                // TODO remove this hack for Accu or make it more generic
                (field) => !(hasSelectedIdentity && field.name === "apikey"))
                    .map((field, i) => (_jsxs("tr", { className: "hover:bg-accent/40", children: [_jsx("td", { className: "text-center", children: _jsx(Controller, { control: control, name: `queryParams.${i}.active`, render: ({ field }) => (_jsx("input", { type: "checkbox", id: `queryParams.${i}.active`, checked: field.value, onChange: field.onChange })) }) }), _jsx("td", { children: _jsx(Controller, { control: control, render: ({ field }) => (_jsx(InlineInput, { asChild: true, children: _jsxs("label", { className: "flex items-center cursor-pointer", htmlFor: `queryParams.${i}.active`, title: requiredFields[i] ? "Required field" : undefined, children: [field.value, requiredFields[i] && _jsx("sup", { children: "\u00A0*" })] }) })), name: `queryParams.${i}.name` }) }), _jsx("td", { children: _jsxs("div", { className: "flex justify-between items-center", children: [_jsx(Controller, { control: control, render: ({ field }) => (_jsx(Input, { ...field, onChange: (e) => {
                                                field.onChange(e.target.value);
                                                if (e.target.value.length > 0) {
                                                    form.setValue(`queryParams.${i}.active`, true);
                                                }
                                            }, placeholder: "Enter value", className: "w-full border-0 shadow-none text-xs font-mono" })), name: `queryParams.${i}.value` }), _jsx(Controller, { control: control, render: ({ field }) => (_jsx(Button, { size: "icon", type: "button", variant: "ghost", "aria-label": "Clear value", className: cn("ms-2", field.value.length === 0
                                                ? "opacity-0 pointer-events-none"
                                                : "opacity-100"), title: "Clear value", onClick: () => field.onChange(""), children: _jsx(EraserIcon, { size: 16 }) })), name: `queryParams.${i}.value` })] }) })] }, field.id))) }) }) }));
};
//# sourceMappingURL=QueryParams.js.map