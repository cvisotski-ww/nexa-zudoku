import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useMutation } from "@tanstack/react-query";
import { Fragment, useEffect, useRef, useTransition } from "react";
import { FormProvider, useForm } from "react-hook-form";
import { useSelectedServerStore } from "../../../authentication/state.js";
import { useApiIdentities } from "../../../components/context/ZudokuContext.js";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue, } from "../../../components/Select.js";
import { Spinner } from "../../../components/Spinner.js";
import { Button } from "../../../ui/Button.js";
import { Callout } from "../../../ui/Callout.js";
import { Card, CardContent, CardHeader, CardTitle } from "../../../ui/Card.js";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "../../../ui/Tabs.js";
import { ColorizedParam } from "../ColorizedParam.js";
import { createUrl } from "./createUrl.js";
import { Headers } from "./Headers.js";
import { PathParams } from "./PathParams.js";
import { QueryParams } from "./QueryParams.js";
import { ResponseTab } from "./ResponseTab.js";
export const NO_IDENTITY = "__none";
const statusCodeMap = {
    200: "OK",
    201: "Created",
    202: "Accepted",
    204: "No Content",
    400: "Bad Request",
    401: "Unauthorized",
    403: "Forbidden",
    404: "Not Found",
    405: "Method Not Allowed",
    500: "Internal Server Error",
};
export const Playground = ({ server, servers, url, method, headers = [], queryParams = [], pathParams = [], defaultBody = "", }) => {
    const { selectedServer, setSelectedServer } = useSelectedServerStore();
    const [, startTransition] = useTransition();
    const { register, control, handleSubmit, watch, setValue, ...form } = useForm({
        defaultValues: {
            body: defaultBody,
            queryParams: queryParams.map((param) => ({
                name: param.name,
                value: param.defaultValue ?? "",
                active: param.defaultActive ?? false,
            })),
            pathParams: pathParams.map((param) => ({
                name: param.name,
                value: param.defaultValue ?? "",
            })),
            headers: headers.map((header) => ({
                name: header.name,
                value: header.defaultValue ?? "",
            })),
            identity: NO_IDENTITY,
        },
    });
    const formState = watch();
    const identities = useApiIdentities();
    const setOnce = useRef(false);
    useEffect(() => {
        if (setOnce.current)
            return;
        const firstIdentity = identities.data?.at(0);
        if (firstIdentity) {
            setValue("identity", firstIdentity.id);
            setOnce.current = true;
        }
    }, [setValue, identities.data]);
    const queryMutation = useMutation({
        mutationFn: async (data) => {
            const requestUrl = createUrl(selectedServer ?? server, url, data);
            const start = performance.now();
            const request = new Request(requestUrl, {
                method: method.toUpperCase(),
                headers: Object.fromEntries(data.headers
                    .filter((h) => h.name)
                    .map((header) => [header.name, header.value])),
            });
            if (data.identity !== NO_IDENTITY) {
                identities.data
                    ?.find((i) => i.id === data.identity)
                    ?.authorizeRequest(request);
            }
            try {
                const response = await fetch(request, {
                    signal: AbortSignal.timeout(5000),
                });
                const time = performance.now() - start;
                const body = await response.text();
                return {
                    status: response.status,
                    headers: response.headers,
                    size: body.length,
                    body,
                    time,
                };
            }
            catch (error) {
                if (error instanceof TypeError) {
                    throw new Error("The request failed, possibly due to network issues or CORS policy.");
                }
                else {
                    throw error;
                }
            }
        },
    });
    const path = url.split("/").map((part, i, arr) => {
        const isPathParam = (part.startsWith("{") && part.endsWith("}")) || part.startsWith(":");
        const replaced = part.replace(/[:{}]/g, "");
        const value = formState.pathParams.find((p) => p.name === replaced)?.value;
        const pathParamValue = value ? (_jsx(ColorizedParam, { backgroundOpacity: "25%", name: part, slug: part, children: encodeURIComponent(value) })) : (_jsx("span", { className: "underline decoration-wavy decoration-red-500", title: `Missing value for path parameter \`${replaced}\``, children: part }));
        return (
        // eslint-disable-next-line react/no-array-index-key
        _jsxs(Fragment, { children: [isPathParam ? pathParamValue : part, i < arr.length - 1 && "/", _jsx("wbr", {})] }, part + i));
    });
    const headerEntries = Array.from(queryMutation.data?.headers.entries() ?? []);
    const urlQueryParams = formState.queryParams
        .filter((p) => p.active)
        .map((p, i, arr) => (_jsxs(Fragment, { children: [p.name, "=", encodeURIComponent(p.value).replaceAll("%20", "+"), i < arr.length - 1 && "&", _jsx("wbr", {})] }, p.name)));
    const serverSelect = (_jsx("div", { className: "inline-block opacity-50 hover:opacity-100 transition", children: servers && servers.length > 1 ? (_jsxs(Select, { onValueChange: (value) => {
                startTransition(() => {
                    setSelectedServer(value);
                });
            }, value: selectedServer, children: [_jsx(SelectTrigger, { className: "p-0 border-none flex-row-reverse bg-transparent text-xs gap-0.5 h-auto", children: _jsx(SelectValue, {}) }), _jsx(SelectContent, { children: servers.map((s) => (_jsx(SelectItem, { value: s, children: s.replace(/^https?:\/\//, "") }, s))) })] })) : (_jsx("span", { children: server.replace(/^https?:\/\//, "") })) }));
    return (_jsx(FormProvider, { register, control, handleSubmit, watch, setValue, ...form, children: _jsx("form", { onSubmit: handleSubmit((data) => queryMutation.mutateAsync(data)), children: _jsxs("div", { className: "grid grid-cols-[8fr_7fr] text-sm h-full", children: [_jsxs("div", { className: "flex flex-col gap-4 p-8 bg-muted/50 after:bg-muted-foreground/20 relative after:absolute after:w-px after:inset-0 after:left-auto", children: [_jsxs("div", { className: "flex gap-2 items-stretch", children: [_jsxs("div", { className: "flex flex-1 items-center w-full border rounded-md", children: [_jsx("div", { className: "border-r p-2 bg-muted rounded-l-md self-stretch font-semibold font-mono", children: method.toUpperCase() }), _jsxs("div", { className: "flex items-center flex-wrap p-2 font-mono text-xs", children: [serverSelect, path, urlQueryParams.length > 0 ? "?" : "", urlQueryParams] })] }), _jsx(Button, { type: "submit", className: "h-auto flex gap-1", children: "Send" })] }), _jsxs(Tabs, { defaultValue: queryParams.length + pathParams.length > 0
                                    ? "parameters"
                                    : "headers", children: [_jsxs("div", { className: "flex flex-wrap gap-1 justify-between", children: [_jsxs(TabsList, { children: [queryParams.length + pathParams.length > 0 && (_jsx(TabsTrigger, { value: "parameters", children: "Parameters" })), _jsxs(TabsTrigger, { value: "headers", children: ["Headers", " ", formState.headers.length > 0 &&
                                                                `(${formState.headers.length})`] }), _jsx(TabsTrigger, { value: "body", disabled: !["POST", "PUT", "PATCH", "DELETE"].includes(method.toUpperCase()), children: "Body" })] }), _jsxs("div", { className: "flex gap-2 items-center", children: ["Auth:", _jsxs(Select, { onValueChange: (value) => setValue("identity", value), value: formState.identity, defaultValue: formState.identity, children: [_jsx(SelectTrigger, { className: "w-[180px] flex", children: identities.isPending ? _jsx(Spinner, {}) : _jsx(SelectValue, {}) }), _jsxs(SelectContent, { align: "center", children: [_jsx(SelectItem, { value: NO_IDENTITY, children: "None" }), identities.data?.map((identity) => (_jsx(SelectItem, { value: identity.id, children: identity.label }, identity.id)))] })] })] })] }), _jsx(TabsContent, { value: "headers", children: _jsx(Headers, { control: control, register: register }) }), _jsxs(TabsContent, { value: "parameters", children: [pathParams.length > 0 && (_jsxs("div", { className: "flex flex-col gap-4 my-4", children: [_jsx("span", { className: "font-semibold", children: "Path Parameters" }), _jsx(PathParams, { control: control })] })), queryParams.length > 0 && (_jsxs("div", { className: "flex flex-col gap-4 my-4", children: [_jsx("span", { className: "font-semibold", children: "Query Parameters" }), _jsx(QueryParams, { control: control, queryParams: queryParams })] }))] }), _jsx(TabsContent, { value: "body", children: _jsx("textarea", { ...register("body"), className: "border w-full rounded p-2 bg-muted h-40" }) })] })] }), _jsx("div", { className: "min-w-0 p-8 bg-muted/70", children: queryMutation.error ? (_jsxs("div", { className: "flex flex-col gap-2", children: [formState.pathParams.some((p) => p.value === "") && (_jsx(Callout, { type: "caution", children: "Some path parameters are missing values. Please fill them in to ensure the request is sent correctly." })), _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx(CardTitle, { children: "Request failed" }) }), _jsxs(CardContent, { children: ["Error:", " ", queryMutation.error.message ||
                                                    String(queryMutation.error) ||
                                                    "Unexpected error"] })] })] })) : queryMutation.data ? (_jsxs("div", { className: "flex flex-col gap-2", children: [_jsx("div", { className: "flex gap-2", children: _jsxs("div", { className: "flex text-xs gap-6", children: [_jsxs("div", { children: ["Status: ", queryMutation.data.status, " ", statusCodeMap[queryMutation.data.status] ?? ""] }), _jsxs("div", { children: ["Time: ", queryMutation.data.time.toFixed(0), "ms"] }), _jsxs("div", { children: ["Size: ", queryMutation.data.size, " B"] })] }) }), _jsxs(Tabs, { defaultValue: "response", children: [_jsxs(TabsList, { children: [_jsx(TabsTrigger, { value: "response", children: "Response" }), _jsx(TabsTrigger, { value: "headers", children: headerEntries.length
                                                        ? `Headers (${headerEntries.length})`
                                                        : "No headers" })] }), _jsx(TabsContent, { value: "response", children: _jsx(ResponseTab, { headers: queryMutation.data.headers, body: queryMutation.data.body }) }), _jsx(TabsContent, { value: "headers", children: _jsxs(Card
                                            // playground dialog has h-5/6 ≈ 83.333vh
                                            , { 
                                                // playground dialog has h-5/6 ≈ 83.333vh
                                                className: "max-h-[calc(83.333vh-140px)] overflow-y-auto grid grid-cols-2 w-full gap-2.5 font-mono text-xs shadow-none p-4", children: [_jsx("div", { className: "font-semibold", children: "Key" }), _jsx("div", { className: "font-semibold", children: "Value" }), headerEntries.map(([key, value]) => (_jsxs(Fragment, { children: [_jsx("div", { children: key }), _jsx("div", { className: "break-words", children: value })] }, key)))] }) })] })] })) : (_jsx("div", { className: "grid place-items-center h-full", children: _jsx("span", { className: "text-[16px] font-semibold text-muted-foreground", children: queryMutation.isPending ? (_jsx(Spinner, {})) : ("Send a request first to see the response here") }) })) })] }) }) }));
};
export default Playground;
//# sourceMappingURL=Playground.js.map