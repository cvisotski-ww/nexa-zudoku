import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { CheckIcon, CopyIcon } from "lucide-react";
import { useState, useTransition } from "react";
import { useQuery } from "urql";
import { useSelectedServerStore } from "../../authentication/state.js";
import { InlineCode } from "../../components/InlineCode.js";
import { Button } from "../../ui/Button.js";
import { useOasConfig } from "./context.js";
import { graphql } from "./graphql/index.js";
import { SimpleSelect } from "./SimpleSelect.js";
const ServersQuery = graphql(/* GraphQL */ `
  query ServersQuery($input: JSON!, $type: SchemaType!) {
    schema(input: $input, type: $type) {
      url
      servers {
        url
      }
    }
  }
`);
const CopyButton = ({ url }) => {
    const [isCopied, setIsCopied] = useState(false);
    return (_jsx(Button, { onClick: () => {
            void navigator.clipboard.writeText(url).then(() => {
                setIsCopied(true);
                setTimeout(() => setIsCopied(false), 2000);
            });
        }, variant: "ghost", size: "icon", children: isCopied ? (_jsx(CheckIcon, { className: "text-green-600", size: 14 })) : (_jsx(CopyIcon, { size: 14, strokeWidth: 1.3 })) }));
};
const context = { suspense: true };
export const Endpoint = () => {
    const [result] = useQuery({
        query: ServersQuery,
        variables: useOasConfig(),
        context,
    });
    const [, startTransition] = useTransition();
    const { selectedServer, setSelectedServer } = useSelectedServerStore();
    if (!result.data)
        return null;
    const { servers } = result.data.schema;
    if (servers.length === 1) {
        return (_jsxs("div", { className: "flex items-center gap-2", children: [_jsx("span", { className: "font-medium text-sm", children: "Endpoint:" }), _jsx(InlineCode, { className: "text-xs px-2 py-1.5", selectOnClick: true, children: servers[0].url }), _jsx(CopyButton, { url: servers[0].url })] }));
    }
    return (_jsxs("div", { className: "flex flex-wrap items-center gap-2", children: [_jsxs("span", { className: "font-medium text-sm", children: [servers.length > 1 ? "Endpoints" : "Endpoint", ":"] }), _jsx(SimpleSelect, { className: "font-mono text-xs bg-border/50 dark:bg-border/70 py-1.5 max-w-[450px] truncate", onChange: (e) => startTransition(() => {
                    setSelectedServer(e.target.value);
                }), value: selectedServer ?? result.data.schema.url, showChevrons: servers.length > 1, options: servers.map((server) => ({
                    value: server.url,
                    label: server.url,
                })) }), _jsx(CopyButton, { url: selectedServer ?? result.data.schema.url })] }));
};
//# sourceMappingURL=Endpoint.js.map