import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import * as Collapsible from "@radix-ui/react-collapsible";
import { ListPlusIcon } from "lucide-react";
import { useCallback, useState } from "react";
import { Markdown, ProseClasses } from "../../../components/Markdown.js";
import { Button } from "../../../ui/Button.js";
import { cn } from "../../../util/cn.js";
import { objectEntries } from "../../../util/objectEntries.js";
import { LogicalGroup } from "./LogicalGroup/LogicalGroup.js";
import { SchemaView } from "./SchemaView.js";
import { hasLogicalGroupings, isComplexType, LogicalSchemaTypeMap, } from "./utils.js";
export const SchemaLogicalGroup = ({ schema, level, }) => {
    const [isOpen, setIsOpen] = useState(true);
    const toggleOpen = useCallback(() => setIsOpen((prev) => !prev), []);
    for (const [key, type] of objectEntries(LogicalSchemaTypeMap)) {
        if (!schema[key])
            continue;
        return (_jsx(LogicalGroup, { schemas: schema[key], type: type, isOpen: isOpen, toggleOpen: toggleOpen, level: level }));
    }
};
export const SchemaPropertyItem = ({ name, schema, group, level, defaultOpen = false, showCollapseButton = true, }) => {
    const [isOpen, setIsOpen] = useState(defaultOpen);
    return (_jsx("li", { className: "p-4 bg-border/20 hover:bg-border/30", children: _jsxs("div", { className: "flex flex-col gap-1 justify-between text-sm", children: [_jsxs("div", { className: "flex gap-2 items-center", children: [_jsx("code", { children: name }), _jsx("span", { className: "text-muted-foreground", children: schema.type === "array" && schema.items.type ? (_jsxs("span", { children: [schema.items.type, "[]"] })) : Array.isArray(schema.type) ? (_jsx("span", { children: schema.type.join(" | ") })) : (_jsx("span", { children: schema.type })) }), group === "optional" && (_jsx("span", { className: "py-px px-1.5 font-medium border rounded-lg", children: "optional" }))] }), schema.description && (_jsx(Markdown, { className: cn(ProseClasses, "text-sm leading-normal line-clamp-4"), content: schema.description })), (hasLogicalGroupings(schema) || isComplexType(schema)) && (_jsxs(Collapsible.Root, { defaultOpen: defaultOpen, open: isOpen, onOpenChange: () => setIsOpen(!isOpen), children: [showCollapseButton && (_jsx(Collapsible.Trigger, { asChild: true, children: _jsxs(Button, { variant: "outline", size: "sm", className: "mt-2 flex gap-1.5", children: [_jsx(ListPlusIcon, { size: 18 }), !isOpen
                                        ? "Show nested properties"
                                        : "Hide nested properties"] }) })), _jsx(Collapsible.Content, { children: _jsx("div", { className: "mt-2", children: hasLogicalGroupings(schema) ? (_jsx(SchemaLogicalGroup, { schema: schema, level: level + 1 })) : schema.type === "object" ? (_jsx(SchemaView, { schema: schema, level: level + 1 })) : (schema.type === "array" &&
                                    typeof schema.items === "object" && (_jsx(SchemaView, { schema: schema.items, level: level + 1 }))) }) })] }))] }) }));
};
//# sourceMappingURL=SchemaComponents.js.map