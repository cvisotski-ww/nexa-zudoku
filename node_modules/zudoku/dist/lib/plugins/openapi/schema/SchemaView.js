import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { Markdown, ProseClasses } from "../../../components/Markdown.js";
import { Card, CardContent, CardHeader, CardTitle } from "../../../ui/Card.js";
import { cn } from "../../../util/cn.js";
import { groupBy } from "../../../util/groupBy.js";
import { SchemaLogicalGroup, SchemaPropertyItem } from "./SchemaComponents.js";
import { hasLogicalGroupings } from "./utils.js";
export const SchemaView = ({ schema, level = 0, defaultOpen = false, }) => {
    if (!schema || Object.keys(schema).length === 0) {
        return (_jsx(Card, { className: "p-4", children: _jsx("span", { className: "text-sm text-muted-foreground italic", children: "No response specified" }) }));
    }
    const renderSchema = (schema, level) => {
        if (hasLogicalGroupings(schema)) {
            return _jsx(SchemaLogicalGroup, { schema: schema, level: level });
        }
        // Sometimes items is not defined
        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
        if (schema.type === "array" && schema.items) {
            const itemsSchema = schema.items;
            if (typeof itemsSchema.type === "string" &&
                ["string", "number", "boolean", "integer"].includes(itemsSchema.type)) {
                return (_jsxs(Card, { className: "p-4", children: [_jsxs("span", { className: "text-sm text-muted-foreground", children: [itemsSchema.type, "[]"] }), schema.description && (_jsx(Markdown, { className: cn(ProseClasses, "text-sm leading-normal line-clamp-4"), content: schema.description }))] }));
            }
            else if (itemsSchema.type === "object") {
                return (_jsxs(Card, { className: "flex flex-col gap-2 bg-border/30 p-4", children: [_jsx("span", { className: "text-sm text-muted-foreground", children: "object[]" }), renderSchema(itemsSchema, level + 1)] }));
            }
            else {
                return renderSchema(itemsSchema, level + 1);
            }
        }
        if (schema.type === "object" && !schema.properties) {
            return (_jsxs(Card, { className: "p-4 flex gap-2 items-center", children: ["name" in schema && _jsx(_Fragment, { children: schema.name }), _jsx("span", { className: "text-sm text-muted-foreground", children: "object" }), schema.description && (_jsx(Markdown, { className: cn(ProseClasses, "text-sm leading-normal line-clamp-4"), content: schema.description }))] }));
        }
        if (schema.properties) {
            const groupedProperties = groupBy(Object.entries(schema.properties), ([propertyName, property]) => {
                return property.deprecated
                    ? "deprecated"
                    : schema.required?.includes(propertyName)
                        ? "required"
                        : "optional";
            });
            const groupNames = ["required", "optional", "deprecated"];
            return (_jsx(Card, { className: "divide-y overflow-hidden", children: groupNames.map((group) => groupedProperties[group] && (_jsx("ul", { className: "divide-y", children: groupedProperties[group].map(([name, schema]) => (_jsx(SchemaPropertyItem, { name: name, schema: schema, group: group, level: level, defaultOpen: defaultOpen }, name))) }, group))) }));
        }
        if (typeof schema.type === "string" &&
            ["string", "number", "boolean", "integer", "null"].includes(schema.type)) {
            return (_jsxs(Card, { className: "p-4", children: [_jsx("span", { className: "text-sm text-muted-foreground", children: schema.type }), schema.description && (_jsx(Markdown, { className: cn(ProseClasses, "text-sm leading-normal line-clamp-4"), content: schema.description }))] }));
        }
        if (schema.additionalProperties) {
            return (_jsxs(Card, { className: "my-2", children: [_jsx(CardHeader, { children: _jsx(CardTitle, { children: "Additional Properties:" }) }), _jsx(CardContent, { children: renderSchema(schema.additionalProperties, level + 1) })] }));
        }
        return null;
    };
    return renderSchema(schema, level);
};
//# sourceMappingURL=SchemaView.js.map