import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { HTTPSnippet } from "@zudoku/httpsnippet";
import { Fragment, useMemo, useTransition } from "react";
import { useSearchParams } from "react-router-dom";
import { useQuery } from "urql";
import { useSelectedServerStore } from "../../authentication/state.js";
import { TextColorMap } from "../../components/navigation/SidebarBadge.js";
import { SyntaxHighlight } from "../../components/SyntaxHighlight.js";
import { cn } from "../../util/cn.js";
import { ColorizedParam } from "./ColorizedParam.js";
import { useOasConfig } from "./context.js";
import { graphql } from "./graphql/index.js";
import { PlaygroundDialogWrapper } from "./PlaygroundDialogWrapper.js";
import { RequestBodySidecarBox } from "./RequestBodySidecarBox.js";
import { ResponsesSidecarBox } from "./ResponsesSidecarBox.js";
import * as SidecarBox from "./SidecarBox.js";
import { SimpleSelect } from "./SimpleSelect.js";
import { generateSchemaExample } from "./util/generateSchemaExample.js";
const getConverted = (snippet, option) => {
    let converted;
    switch (option) {
        case "shell":
            converted = snippet.convert("shell", "curl");
            break;
        case "js":
            converted = snippet.convert("javascript", "fetch");
            break;
        case "python":
            converted = snippet.convert("python", "requests");
            break;
        case "java":
            converted = snippet.convert("java", "okhttp");
            break;
        case "go":
            converted = snippet.convert("go", "native");
            break;
        case "csharp":
            converted = snippet.convert("csharp", "httpclient");
            break;
        case "kotlin":
            converted = snippet.convert("kotlin", "okhttp");
            break;
        case "objc":
            converted = snippet.convert("objc", "nsurlsession");
            break;
        case "php":
            converted = snippet.convert("php", "http2");
            break;
        case "ruby":
            converted = snippet.convert("ruby");
            break;
        case "swift":
            converted = snippet.convert("swift");
            break;
        default:
            converted = snippet.convert("shell");
            break;
    }
    return converted ? converted[0] : "";
};
export const GetServerQuery = graphql(/* GraphQL */ `
  query getServerQuery($input: JSON!, $type: SchemaType!) {
    schema(input: $input, type: $type) {
      url
      servers {
        url
      }
    }
  }
`);
const context = { suspense: true };
const methodToColor = {
    get: TextColorMap.green,
    post: TextColorMap.blue,
    put: TextColorMap.yellow,
    delete: TextColorMap.red,
    patch: TextColorMap.purple,
    options: TextColorMap.indigo,
    head: TextColorMap.gray,
    trace: TextColorMap.gray,
};
export const Sidecar = ({ operation, selectedResponse, onSelectResponse, }) => {
    const oasConfig = useOasConfig();
    const [result] = useQuery({
        query: GetServerQuery,
        variables: oasConfig,
        context,
    });
    const methodTextColor = methodToColor[operation.method.toLocaleLowerCase()] ?? TextColorMap.gray;
    const [searchParams, setSearchParams] = useSearchParams();
    const [, startTransition] = useTransition();
    const selectedLang = searchParams.get("lang") ?? "shell";
    const requestBodyContent = operation.requestBody?.content;
    const path = operation.path.split("/").map((part, i, arr) => {
        const isParam = (part.startsWith("{") && part.endsWith("}")) || part.startsWith(":");
        const paramName = isParam ? part.replace(/[:{}]/g, "") : undefined;
        return (
        // eslint-disable-next-line react/no-array-index-key
        _jsxs(Fragment, { children: [paramName ? (_jsx(ColorizedParam, { name: paramName, backgroundOpacity: "0", 
                    // same as in `ParameterListItem`
                    slug: `${operation.slug}-${paramName.toLocaleLowerCase()}`, children: part })) : (part), i < arr.length - 1 ? "/" : null, _jsx("wbr", {})] }, part + i));
    });
    const { selectedServer } = useSelectedServerStore();
    const code = useMemo(() => {
        const example = requestBodyContent?.[0]?.schema
            ? generateSchemaExample(requestBodyContent[0].schema)
            : undefined;
        const snippet = new HTTPSnippet({
            method: operation.method.toLocaleUpperCase(),
            url: (selectedServer ?? result.data?.schema.url ?? "") +
                operation.path.replaceAll("{", ":").replaceAll("}", ""),
            postData: example
                ? {
                    text: JSON.stringify(example, null, 2),
                    mimeType: "application/json",
                }
                : {},
            headers: [],
            queryString: [],
            httpVersion: "",
            cookies: [],
            headersSize: 0,
            bodySize: 0,
        });
        return getConverted(snippet, selectedLang);
    }, [
        selectedServer,
        selectedLang,
        operation.method,
        operation.path,
        requestBodyContent,
    ]);
    return (_jsxs("aside", { className: "flex flex-col overflow-hidden sticky top-[--scroll-padding] gap-4", children: [_jsxs(SidecarBox.Root, { children: [_jsxs(SidecarBox.Head, { className: "flex justify-between items-center flex-nowrap py-3 gap-2 text-xs", children: [_jsxs("span", { className: "font-mono break-words", children: [_jsx("span", { className: cn("font-semibold", methodTextColor), children: operation.method.toLocaleUpperCase() }), "\u00A0", path] }), _jsx(PlaygroundDialogWrapper, { server: result.data?.schema.url ?? "", servers: result.data?.schema.servers.map((server) => server.url) ?? [], operation: operation })] }), _jsx(SidecarBox.Body, { className: "max-h-[480px] p-0", children: _jsx(SyntaxHighlight, { language: selectedLang, noBackground: true, className: "text-xs p-2", code: code }) }), _jsxs(SidecarBox.Footer, { className: "flex items-center text-xs gap-2 justify-end py-1", children: [_jsx("span", { children: "Show example in" }), _jsx(SimpleSelect, { className: "self-start max-w-[150px]", value: selectedLang, onChange: (e) => {
                                    startTransition(() => {
                                        setSearchParams((prev) => {
                                            prev.set("lang", e.target.value);
                                            return prev;
                                        });
                                    });
                                }, options: [
                                    { value: "shell", label: "cURL" },
                                    { value: "js", label: "Javascript" },
                                    { value: "python", label: "Python" },
                                    { value: "java", label: "Java" },
                                    { value: "go", label: "Go" },
                                    { value: "csharp", label: "C#" },
                                    { value: "kotlin", label: "Kotlin" },
                                    { value: "objc", label: "Objective C" },
                                    { value: "php", label: "PHP" },
                                    { value: "ruby", label: "Ruby" },
                                    { value: "swift", label: "Swift" },
                                ] })] })] }), requestBodyContent && (_jsx(RequestBodySidecarBox, { content: requestBodyContent })), operation.responses.length > 0 && (_jsx(ResponsesSidecarBox, { selectedResponse: selectedResponse, onSelectResponse: onSelectResponse, responses: operation.responses }))] }));
};
//# sourceMappingURL=Sidecar.js.map