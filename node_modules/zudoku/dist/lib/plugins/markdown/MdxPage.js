import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useMDXComponents } from "@mdx-js/react";
import slugify from "@sindresorhus/slugify";
import { Helmet } from "@zudoku/react-helmet-async";
import { Link } from "react-router-dom";
import { CategoryHeading } from "../../components/CategoryHeading.js";
import { Heading } from "../../components/Heading.js";
import { ProseClasses } from "../../components/Markdown.js";
import { useCurrentItem, usePrevNext, } from "../../components/navigation/utils.js";
import { cn } from "../../util/cn.js";
import { Toc } from "./Toc.js";
const MarkdownHeadings = {
    h2: ({ children, id }) => (_jsx(Heading, { level: 2, id: id, registerSidebarAnchor: true, children: children })),
    h3: ({ children, id }) => (_jsx(Heading, { level: 3, id: id, registerSidebarAnchor: true, children: children })),
};
export const MdxPage = ({ mdxComponent: MdxComponent, frontmatter = {}, defaultOptions, tableOfContents, }) => {
    const categoryTitle = useCurrentItem()?.categoryLabel;
    const title = frontmatter.title;
    const category = frontmatter.category ?? categoryTitle;
    const hideToc = frontmatter.toc === false || defaultOptions?.toc === false;
    const pageTitle = tableOfContents.find((item) => item.depth === 1)?.value ?? title;
    const hidePager = frontmatter.disablePager ?? defaultOptions?.disablePager ?? false;
    const tocEntries = tableOfContents.find((item) => item.depth === 1)?.children ??
        // if `title` is provided by frontmatter it does not appear in the table of contents
        tableOfContents.filter((item) => item.depth === 2);
    const showToc = !hideToc && tocEntries.length > 0;
    const { prev, next } = usePrevNext();
    return (_jsxs("div", { className: "xl:grid grid-cols-[--sidecar-grid-cols] gap-8 justify-between", children: [_jsx(Helmet, { children: _jsx("title", { children: pageTitle }) }), _jsxs("div", { className: cn(ProseClasses, "max-w-full xl:w-full xl:max-w-prose flex-1 flex-shrink pt-[--padding-content-top] pb-[--padding-content-bottom]"), children: [_jsxs("header", { children: [category && _jsx(CategoryHeading, { children: category }), title && (_jsx(Heading, { level: 1, id: slugify(title), children: title }))] }), _jsx(MdxComponent, { components: { ...useMDXComponents(), ...MarkdownHeadings } }), !hidePager && (_jsxs(_Fragment, { children: [_jsx("hr", {}), _jsxs("div", { className: "not-prose flex flex-wrap items-center justify-between gap-2 lg:gap-8", children: [prev ? (_jsxs(Link, { to: prev.id, className: "flex flex-col items-stretch gap-2 flex-1 min-w-max border rounded px-6 py-4 text-start hover:border-primary/85 transition shadow-sm hover:shadow-md", title: prev.label, children: [_jsx("div", { className: "text-sm text-muted-foreground", children: "\u2190 Previous page" }), _jsx("div", { className: "text-lg text-primary truncate", children: prev.label })] })) : (_jsx("div", { className: "flex-1" })), next ? (_jsxs(Link, { to: next.id, className: "flex flex-col items-stretch gap-2 flex-1 min-w-max border rounded px-6 py-4 text-end hover:border-primary/85 transition shadow-sm hover:shadow-md", title: next.label, children: [_jsx("div", { className: "text-sm text-muted-foreground", children: "Next page \u2192" }), _jsx("div", { className: "text-lg text-primary truncate", children: next.label })] })) : (_jsx("div", { className: "flex-1" }))] })] }))] }), _jsx("div", { className: "hidden xl:block", children: showToc && _jsx(Toc, { entries: tocEntries }) })] }));
};
//# sourceMappingURL=MdxPage.js.map