import { QueryClient } from "@tanstack/react-query";
import { ReactNode } from "react";
import type { SidebarConfig } from "../../config/validators/SidebarSchema.js";
import { type AuthenticationProvider } from "../authentication/authentication.js";
import type { ComponentsContextType } from "../components/context/ComponentsContext.js";
import { Slotlets } from "../components/SlotletProvider.js";
import type { MdxComponentsType } from "../util/MdxComponents.js";
import { type DevPortalPlugin } from "./plugins.js";
export interface ApiIdentity {
    authorizeRequest: (request: Request) => Request;
    label: string;
    id: string;
}
export declare const queryClient: QueryClient;
export type ApiKeyCache = "api-keys";
export type DevPortalCacheKey = ApiKeyCache | string;
type Metadata = Partial<{
    title: string;
    description: string;
    logo: string;
    favicon: string;
    generator: string;
    applicationName: string;
    referrer: string;
    keywords: string[];
    authors: string[];
    creator: string;
    publisher: string;
}>;
type Page = Partial<{
    pageTitle?: string;
    logo?: {
        src: {
            light: string;
            dark: string;
        };
        width?: string;
        alt?: string;
    };
    banner?: {
        message: ReactNode;
        color?: "note" | "tip" | "info" | "caution" | "danger" | (string & {});
        dismissible?: boolean;
    };
}>;
export type ZudokuContextOptions = {
    metadata?: Metadata;
    page?: Page;
    authentication?: AuthenticationProvider;
    topNavigation?: Array<{
        id: string;
        label: string;
        default?: string;
    }>;
    sidebars?: SidebarConfig;
    plugins?: DevPortalPlugin[];
    slotlets?: Slotlets;
    mdx?: {
        components?: MdxComponentsType;
    };
    overrides?: ComponentsContextType;
};
export declare class DevPortalContext {
    plugins: NonNullable<ZudokuContextOptions["plugins"]>;
    sidebars: NonNullable<ZudokuContextOptions["sidebars"]>;
    topNavigation: NonNullable<ZudokuContextOptions["topNavigation"]>;
    meta: ZudokuContextOptions["metadata"];
    page: ZudokuContextOptions["page"];
    authentication?: ZudokuContextOptions["authentication"];
    private navigationPlugins;
    constructor(config: ZudokuContextOptions);
    initialize: () => Promise<void>;
    invalidateCache: (key: DevPortalCacheKey[]) => Promise<void>;
    getApiIdentities: () => Promise<ApiIdentity[]>;
    getPluginSidebar: (path: string) => Promise<import("../../config/validators/SidebarSchema.js").SidebarItem[]>;
    signRequest: (request: Request) => Promise<Request>;
}
export {};
