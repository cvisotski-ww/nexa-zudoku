import { QueryClient } from "@tanstack/react-query";
import { joinPath } from "../util/joinPath.js";
import { isApiIdentityPlugin, isNavigationPlugin, needsInitialization, } from "./plugins.js";
export const queryClient = new QueryClient();
export class DevPortalContext {
    plugins;
    sidebars;
    topNavigation;
    meta;
    page;
    authentication;
    navigationPlugins;
    constructor(config) {
        this.plugins = config.plugins ?? [];
        this.topNavigation = config.topNavigation ?? [];
        this.sidebars = config.sidebars ?? {};
        this.navigationPlugins = this.plugins.filter(isNavigationPlugin);
        this.authentication = config.authentication;
        this.meta = config.metadata;
        this.page = config.page;
    }
    initialize = async () => {
        await Promise.all(this.plugins
            .filter(needsInitialization)
            .map((plugin) => plugin.initialize?.(this)));
    };
    invalidateCache = async (key) => {
        await queryClient.invalidateQueries({ queryKey: key });
    };
    getApiIdentities = async () => {
        const keys = await Promise.all(this.plugins
            .filter(isApiIdentityPlugin)
            .map((plugin) => plugin.getIdentities(this)));
        return keys.flat();
    };
    getPluginSidebar = async (path) => {
        const navigations = await Promise.all(this.navigationPlugins.map((plugin) => plugin.getSidebar?.(joinPath(path))));
        return navigations.flatMap((nav) => nav ?? []);
    };
    signRequest = async (request) => {
        if (!this.authentication) {
            throw new Error("No authentication provider configured");
        }
        const accessToken = await this.authentication.getAccessToken();
        request.headers.set("Authorization", `Bearer ${accessToken}`);
        return request;
    };
}
//# sourceMappingURL=DevPortalContext.js.map