import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { cva } from "class-variance-authority";
import { ExternalLinkIcon } from "lucide-react";
import { NavLink, useSearchParams } from "react-router-dom";
import { cn } from "../../util/cn.js";
import { joinPath } from "../../util/joinPath.js";
import { AnchorLink } from "../AnchorLink.js";
import { useViewportAnchor } from "../context/ViewportAnchorContext.js";
import { useTopNavigationItem } from "../context/ZudokuContext.js";
import { SidebarBadge } from "./SidebarBadge.js";
import { SidebarCategory } from "./SidebarCategory.js";
export const navigationListItem = cva("flex items-center gap-2 px-[--padding-nav-item] py-1.5 rounded-lg hover:bg-accent transition-colors duration-300", {
    variants: {
        isTopLevel: {
            true: "font-semibold",
        },
        isActive: {
            true: "text-primary font-medium",
            false: "text-foreground/80",
        },
        isMuted: {
            true: "text-foreground/30",
            false: "",
        },
    },
});
export const DATA_ANCHOR_ATTR = "data-anchor";
export const SidebarItem = ({ item, level = 0, }) => {
    const topNavItem = useTopNavigationItem();
    const { activeAnchor } = useViewportAnchor();
    const [searchParams] = useSearchParams();
    switch (item.type) {
        case "category":
            return _jsx(SidebarCategory, { category: item, level: level });
        case "doc":
            return (_jsxs(NavLink, { className: ({ isActive }) => navigationListItem({ isActive, isTopLevel: level === 0 }), to: joinPath(topNavItem?.id, item.id), children: [item.icon && _jsx(item.icon, { size: 16, className: "align-[-0.125em]" }), item.badge ? (_jsxs(_Fragment, { children: [_jsx("span", { className: "truncate", title: item.label, children: item.label }), _jsx(SidebarBadge, { ...item.badge })] })) : (item.label)] }));
        case "link":
            return item.href.startsWith("#") ? (_jsx(AnchorLink, { to: { hash: item.href, search: searchParams.toString() }, [DATA_ANCHOR_ATTR]: item.href.slice(1), className: cn("flex gap-2.5 justify-between", level === 0 && "-mx-[--padding-nav-item]", navigationListItem({
                    isActive: item.href.slice(1) === activeAnchor,
                })), children: item.badge ? (_jsxs(_Fragment, { children: [_jsx("span", { className: "truncate", title: item.label, children: item.label }), _jsx(SidebarBadge, { ...item.badge })] })) : (_jsx("span", { className: "break-all", children: item.label })) })) : !item.href.startsWith("http") ? (_jsx(NavLink, { className: cn("flex gap-2.5 justify-between", navigationListItem()), to: item.href, children: item.badge ? (_jsxs(_Fragment, { children: [_jsx("span", { className: "truncate", title: item.label, children: item.label }), _jsx(SidebarBadge, { ...item.badge })] })) : (_jsx("span", { className: "break-all", children: item.label })) })) : (_jsxs("a", { className: cn(navigationListItem({ isTopLevel: level === 0 }), "block"), href: item.href, target: "_blank", rel: "noopener noreferrer", children: [_jsx("span", { className: "whitespace-normal", children: item.label }), _jsxs("span", { className: "whitespace-nowrap", children: ["\u00A0", _jsx(ExternalLinkIcon, { className: "inline ml-1", size: 12 })] })] }));
    }
};
//# sourceMappingURL=SidebarItem.js.map