import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import * as Collapsible from "@radix-ui/react-collapsible";
import { ChevronRightIcon } from "lucide-react";
import { useEffect, useState } from "react";
import { NavLink } from "react-router-dom";
import { cn } from "../../util/cn.js";
import { joinPath } from "../../util/joinPath.js";
import { useTopNavigationItem } from "../context/ZudokuContext.js";
import { navigationListItem, SidebarItem } from "./SidebarItem.js";
import { useIsCategoryOpen } from "./utils.js";
export const SidebarCategory = ({ category, level, }) => {
    const topNavItem = useTopNavigationItem();
    const isCategoryOpen = useIsCategoryOpen(category);
    const [hasInteracted, setHasInteracted] = useState(false);
    const isCollapsible = category.collapsible ?? true;
    const isCollapsed = category.collapsed ?? true;
    const isDefaultOpen = Boolean(!isCollapsible || !isCollapsed || isCategoryOpen);
    const [open, setOpen] = useState(isDefaultOpen);
    useEffect(() => {
        // this is triggered when an item from the sidebar is clicked
        // and the sidebar, enclosing this item, is not opened
        if (isCategoryOpen) {
            setOpen(true);
        }
    }, [isCategoryOpen]);
    const ToggleButton = isCollapsible && (_jsx("button", { type: "button", onClick: (e) => {
            e.preventDefault();
            setOpen((prev) => !prev);
            setHasInteracted(true);
        }, children: _jsx(ChevronRightIcon, { size: 16, className: cn(hasInteracted && "transition", "shrink-0 group-data-[state=open]:rotate-90") }) }));
    return (_jsxs(Collapsible.Root, { className: cn("flex flex-col", level === 0 && "-mx-[--padding-nav-item]"), defaultOpen: isDefaultOpen, open: open, onOpenChange: () => setOpen(true), children: [_jsx(Collapsible.Trigger, { className: "group", asChild: true, disabled: !isCollapsible, children: _jsxs("div", { className: cn("text-start", navigationListItem({ isActive: false, isTopLevel: level === 0 }), isCollapsible
                        ? "cursor-pointer"
                        : "cursor-default hover:bg-transparent"), children: [category.icon && (_jsx(category.icon, { size: 16, className: "align-[-0.125em] -translate-x-1" })), category.link?.type === "doc" ? (_jsx(NavLink, { to: joinPath(topNavItem?.id, category.link.id), className: "flex-1", onClick: () => setHasInteracted(true), children: ({ isActive }) => (_jsxs("div", { className: cn("flex items-center gap-2 justify-between w-full", isActive
                                    ? "text-primary font-medium"
                                    : "text-foreground/80"), children: [_jsx("div", { className: "truncate", children: category.label }), ToggleButton] })) })) : (_jsxs("div", { className: "flex items-center justify-between w-full", children: [_jsx("div", { className: "flex gap-2 truncate w-full", children: category.label }), ToggleButton] }))] }) }), _jsx(Collapsible.Content, { className: cn(
                // CollapsibleContent class is used to animate and it should only be applied when the user has triggered the toggle
                hasInteracted && "CollapsibleContent", "ms-[calc(var(--padding-nav-item)*1.125)]"), children: _jsx("ul", { className: "mt-1 border-l ps-2", children: category.items.map((item) => (_jsx(SidebarItem, { level: level + 1, item: item }, ("id" in item ? item.id : "") +
                        ("href" in item ? item.href : "") +
                        item.label))) }) })] }));
};
//# sourceMappingURL=SidebarCategory.js.map