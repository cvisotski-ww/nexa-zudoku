import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { MDXProvider } from "@mdx-js/react";
import { QueryClientProvider } from "@tanstack/react-query";
import { Helmet } from "@zudoku/react-helmet-async";
import { Fragment, memo, useContext, useEffect, useMemo, useState, } from "react";
import { ErrorBoundary } from "react-error-boundary";
import { Outlet, useNavigation } from "react-router-dom";
import { DevPortalContext, queryClient, } from "../core/DevPortalContext.js";
import { hasHead, isMdxProviderPlugin } from "../core/plugins.js";
import { TopLevelError } from "../errors/TopLevelError.js";
import { StaggeredRenderContext } from "../plugins/openapi/StaggeredRender.js";
import { MdxComponents } from "../util/MdxComponents.js";
import "../util/requestIdleCallbackPolyfill.js";
import { ComponentsProvider, DEFAULT_COMPONENTS, } from "./context/ComponentsContext.js";
import { ThemeProvider } from "./context/ThemeProvider.js";
import { ViewportAnchorProvider } from "./context/ViewportAnchorContext.js";
import { ZudokuProvider } from "./context/ZudokuProvider.js";
import { SlotletProvider } from "./SlotletProvider.js";
const DevPortalInner = ({ children, ...props }) => {
    const components = useMemo(() => ({ ...DEFAULT_COMPONENTS, ...props.overrides }), [props.overrides]);
    const mdxComponents = useMemo(() => {
        const componentsFromPlugins = (props.plugins ?? [])
            .filter(isMdxProviderPlugin)
            .flatMap((plugin) => plugin.getMdxComponents ? [plugin.getMdxComponents()] : []);
        return {
            ...componentsFromPlugins.reduce((acc, curr) => ({ ...acc, ...curr }), {}),
            ...MdxComponents,
            ...props.mdx?.components,
        };
    }, [props.mdx?.components, props.plugins]);
    const { stagger } = useContext(StaggeredRenderContext);
    const [didNavigate, setDidNavigate] = useState(false);
    const staggeredValue = useMemo(() => (didNavigate ? { stagger: true } : { stagger }), [stagger, didNavigate]);
    const navigation = useNavigation();
    useEffect(() => {
        if (didNavigate) {
            return;
        }
        setDidNavigate(true);
    }, [didNavigate, navigation.location]);
    const [devPortalContext] = useState(() => new DevPortalContext(props));
    const heads = props.plugins
        ?.filter(hasHead)
        // eslint-disable-next-line react/no-array-index-key
        .map((plugin, i) => _jsx(Fragment, { children: plugin.getHead?.() }, i));
    return (_jsxs(QueryClientProvider, { client: queryClient, children: [_jsx(Helmet, { children: heads }), _jsx(StaggeredRenderContext.Provider, { value: staggeredValue, children: _jsx(ZudokuProvider, { context: devPortalContext, children: _jsx(MDXProvider, { components: mdxComponents, children: _jsx(ThemeProvider, { children: _jsx(ComponentsProvider, { value: components, children: _jsx(SlotletProvider, { slotlets: props.slotlets, children: _jsx(ViewportAnchorProvider, { children: children ?? _jsx(Outlet, {}) }) }) }) }) }) }) })] }));
};
const Inner = memo(DevPortalInner);
const DevPortal = (props) => {
    return (_jsx(ErrorBoundary, { FallbackComponent: TopLevelError, children: _jsx(Inner, { ...props }) }));
};
DevPortal.displayName = "DevPortal";
export { DevPortal };
//# sourceMappingURL=DevPortal.js.map