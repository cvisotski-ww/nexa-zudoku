import { useMDXComponents as useMDXComponentsImport } from "@mdx-js/react";
import { Helmet } from "@zudoku/react-helmet-async";
import { Link as LinkImport } from "react-router-dom";
import { RouterError as RouterErrorImport } from "../errors/RouterError.js";
import { ServerError as ServerErrorImport } from "../errors/ServerError.js";
export declare const useMDXComponents: typeof useMDXComponentsImport;
export declare const Callout: ({ type, children, title, className }: {
    type: "note" | "tip" | "info" | "caution" | "danger";
    title?: string;
    children: import("react").ReactNode;
    className?: string;
}) => import("react/jsx-runtime").JSX.Element;
export declare const DevPortal: {
    (props: import("../core/DevPortalContext.js").ZudokuContextOptions): import("react/jsx-runtime").JSX.Element;
    displayName: string;
};
export declare const Layout: ({ children }: {
    children?: import("react").ReactNode;
}) => import("react/jsx-runtime").JSX.Element;
export declare const Link: typeof LinkImport;
export declare const RouterError: typeof RouterErrorImport;
export declare const ServerError: typeof ServerErrorImport;
export declare const Bootstrap: ({ router, hydrate, }: {
    hydrate?: boolean;
    router: ReturnType<typeof import("react-router-dom").createBrowserRouter>;
}) => import("react/jsx-runtime").JSX.Element;
export declare const BootstrapStatic: ({ router, context, helmetContext, }: {
    helmetContext: HelmetData;
    context: import("react-router-dom/server.js").StaticHandlerContext;
    router: ReturnType<typeof import("react-router-dom/server.js").createStaticRouter>;
}) => import("react/jsx-runtime").JSX.Element;
export declare const Button: import("react").ForwardRefExoticComponent<import("../ui/Button.js").ButtonProps & import("react").RefAttributes<HTMLButtonElement>>;
export declare const Head: typeof Helmet;
