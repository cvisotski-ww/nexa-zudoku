import type { Options } from "@mdx-js/rollup";
import type { ComponentType, ReactNode } from "react";
import type { DevPortalPlugin } from "src/lib/core/plugins.js";
import z, { type ZodEnumDef, ZodOptional, ZodString, ZodType, ZodUnion } from "zod";
import type { ExposedComponentProps } from "../../lib/components/SlotletProvider.js";
import { DevPortalContext } from "../../lib/core/DevPortalContext.js";
import type { ApiKey } from "../../lib/plugins/api-keys/index.js";
declare const ApiSchema: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
    type: z.ZodLiteral<"url">;
    input: z.ZodString;
}, {
    server: z.ZodOptional<z.ZodString>;
    navigationId: z.ZodOptional<z.ZodString>;
}>, "strip", z.ZodTypeAny, {
    type: "url";
    input: string;
    server?: string | undefined;
    navigationId?: string | undefined;
}, {
    type: "url";
    input: string;
    server?: string | undefined;
    navigationId?: string | undefined;
}>, z.ZodObject<z.objectUtil.extendShape<{
    type: z.ZodLiteral<"file">;
    input: z.ZodString;
}, {
    server: z.ZodOptional<z.ZodString>;
    navigationId: z.ZodOptional<z.ZodString>;
}>, "strip", z.ZodTypeAny, {
    type: "file";
    input: string;
    server?: string | undefined;
    navigationId?: string | undefined;
}, {
    type: "file";
    input: string;
    server?: string | undefined;
    navigationId?: string | undefined;
}>, z.ZodObject<z.objectUtil.extendShape<{
    type: z.ZodLiteral<"raw">;
    input: z.ZodString;
}, {
    server: z.ZodOptional<z.ZodString>;
    navigationId: z.ZodOptional<z.ZodString>;
}>, "strip", z.ZodTypeAny, {
    type: "raw";
    input: string;
    server?: string | undefined;
    navigationId?: string | undefined;
}, {
    type: "raw";
    input: string;
    server?: string | undefined;
    navigationId?: string | undefined;
}>]>;
declare const SiteMapSchema: z.ZodOptional<z.ZodObject<{
    /**
     * Base url of your website
     */
    siteUrl: z.ZodString;
    /**
     * Change frequency.
     * @default 'daily'
     */
    changefreq: z.ZodOptional<z.ZodEnum<["always", "hourly", "daily", "weekly", "monthly", "yearly", "never"]>>;
    /**
     * Priority
     * @default 0.7
     */
    priority: z.ZodOptional<z.ZodNumber>;
    outDir: z.ZodOptional<z.ZodString>;
    /**
     * Add <lastmod/> property.
     * @default true
     */
    autoLastmod: z.ZodOptional<z.ZodBoolean>;
    /**
     * Array of relative paths to exclude from listing on sitemap.xml or sitemap-*.xml.
     * @example ['/page-0', '/page/example']
     */
    exclude: z.ZodOptional<z.ZodUnion<[z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodPromise<z.ZodArray<z.ZodString, "many">>>, z.ZodArray<z.ZodString, "many">]>>;
}, "strip", z.ZodTypeAny, {
    siteUrl: string;
    changefreq?: "never" | "always" | "hourly" | "daily" | "weekly" | "monthly" | "yearly" | undefined;
    priority?: number | undefined;
    outDir?: string | undefined;
    autoLastmod?: boolean | undefined;
    exclude?: string[] | ((...args: unknown[]) => Promise<string[]>) | undefined;
}, {
    siteUrl: string;
    changefreq?: "never" | "always" | "hourly" | "daily" | "weekly" | "monthly" | "yearly" | undefined;
    priority?: number | undefined;
    outDir?: string | undefined;
    autoLastmod?: boolean | undefined;
    exclude?: string[] | ((...args: unknown[]) => Promise<string[]>) | undefined;
}>>;
declare const DocsConfigSchema: z.ZodObject<{
    files: z.ZodString;
    defaultOptions: z.ZodOptional<z.ZodObject<{
        toc: z.ZodOptional<z.ZodBoolean>;
        disablePager: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        toc?: boolean | undefined;
        disablePager?: boolean | undefined;
    }, {
        toc?: boolean | undefined;
        disablePager?: boolean | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    files: string;
    defaultOptions?: {
        toc?: boolean | undefined;
        disablePager?: boolean | undefined;
    } | undefined;
}, {
    files: string;
    defaultOptions?: {
        toc?: boolean | undefined;
        disablePager?: boolean | undefined;
    } | undefined;
}>;
type BannerColorType = ZodOptional<ZodUnion<[
    ZodType<"note" | "tip" | "info" | "caution" | "danger" | (string & {}), ZodEnumDef>,
    ZodString
]>>;
declare const ConfigSchema: z.ZodEffects<z.ZodObject<{
    basePath: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    page: z.ZodOptional<z.ZodObject<{
        pageTitle: z.ZodOptional<z.ZodString>;
        logoUrl: z.ZodOptional<z.ZodString>;
        logo: z.ZodOptional<z.ZodObject<{
            src: z.ZodObject<{
                light: z.ZodString;
                dark: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                light: string;
                dark: string;
            }, {
                light: string;
                dark: string;
            }>;
            alt: z.ZodOptional<z.ZodString>;
            width: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            src: {
                light: string;
                dark: string;
            };
            width?: string | undefined;
            alt?: string | undefined;
        }, {
            src: {
                light: string;
                dark: string;
            };
            width?: string | undefined;
            alt?: string | undefined;
        }>>;
        banner: z.ZodOptional<z.ZodOptional<z.ZodObject<{
            message: z.ZodType<NonNullable<ReactNode>, z.ZodTypeDef, NonNullable<ReactNode>>;
            color: BannerColorType;
            dismissible: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            message: NonNullable<ReactNode>;
            color?: string | (string & {}) | undefined;
            dismissible?: boolean | undefined;
        }, {
            message: NonNullable<ReactNode>;
            color?: string | (string & {}) | undefined;
            dismissible?: boolean | undefined;
        }>>>;
    }, "strip", z.ZodTypeAny, {
        banner?: {
            message: NonNullable<ReactNode>;
            color?: string | (string & {}) | undefined;
            dismissible?: boolean | undefined;
        } | undefined;
        pageTitle?: string | undefined;
        logo?: {
            src: {
                light: string;
                dark: string;
            };
            width?: string | undefined;
            alt?: string | undefined;
        } | undefined;
        logoUrl?: string | undefined;
    }, {
        banner?: {
            message: NonNullable<ReactNode>;
            color?: string | (string & {}) | undefined;
            dismissible?: boolean | undefined;
        } | undefined;
        pageTitle?: string | undefined;
        logo?: {
            src: {
                light: string;
                dark: string;
            };
            width?: string | undefined;
            alt?: string | undefined;
        } | undefined;
        logoUrl?: string | undefined;
    }>>;
    topNavigation: z.ZodOptional<z.ZodArray<z.ZodObject<{
        label: z.ZodString;
        id: z.ZodString;
        default: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        label: string;
        default?: string | undefined;
    }, {
        id: string;
        label: string;
        default?: string | undefined;
    }>, "many">>;
    sidebar: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodArray<z.ZodType<import("./InputSidebarSchema.js").InputSidebarItem, z.ZodTypeDef, import("./InputSidebarSchema.js").InputSidebarItem>, "many">>>;
    UNSAFE_slotlets: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<ReactNode | ComponentType<ExposedComponentProps>, z.ZodTypeDef, ReactNode | ComponentType<ExposedComponentProps>>>>;
    theme: z.ZodOptional<z.ZodObject<{
        light: z.ZodOptional<z.ZodObject<{
            background: z.ZodOptional<z.ZodString>;
            foreground: z.ZodOptional<z.ZodString>;
            card: z.ZodOptional<z.ZodString>;
            cardForeground: z.ZodOptional<z.ZodString>;
            popover: z.ZodOptional<z.ZodString>;
            popoverForeground: z.ZodOptional<z.ZodString>;
            primary: z.ZodOptional<z.ZodString>;
            primaryForeground: z.ZodOptional<z.ZodString>;
            secondary: z.ZodOptional<z.ZodString>;
            secondaryForeground: z.ZodOptional<z.ZodString>;
            muted: z.ZodOptional<z.ZodString>;
            mutedForeground: z.ZodOptional<z.ZodString>;
            accent: z.ZodOptional<z.ZodString>;
            accentForeground: z.ZodOptional<z.ZodString>;
            destructive: z.ZodOptional<z.ZodString>;
            destructiveForeground: z.ZodOptional<z.ZodString>;
            border: z.ZodOptional<z.ZodString>;
            input: z.ZodOptional<z.ZodString>;
            ring: z.ZodOptional<z.ZodString>;
            radius: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            input?: string | undefined;
            radius?: string | undefined;
            border?: string | undefined;
            destructive?: string | undefined;
            secondary?: string | undefined;
            muted?: string | undefined;
            background?: string | undefined;
            foreground?: string | undefined;
            card?: string | undefined;
            cardForeground?: string | undefined;
            popover?: string | undefined;
            popoverForeground?: string | undefined;
            primary?: string | undefined;
            primaryForeground?: string | undefined;
            secondaryForeground?: string | undefined;
            mutedForeground?: string | undefined;
            accent?: string | undefined;
            accentForeground?: string | undefined;
            destructiveForeground?: string | undefined;
            ring?: string | undefined;
        }, {
            input?: string | undefined;
            radius?: string | undefined;
            border?: string | undefined;
            destructive?: string | undefined;
            secondary?: string | undefined;
            muted?: string | undefined;
            background?: string | undefined;
            foreground?: string | undefined;
            card?: string | undefined;
            cardForeground?: string | undefined;
            popover?: string | undefined;
            popoverForeground?: string | undefined;
            primary?: string | undefined;
            primaryForeground?: string | undefined;
            secondaryForeground?: string | undefined;
            mutedForeground?: string | undefined;
            accent?: string | undefined;
            accentForeground?: string | undefined;
            destructiveForeground?: string | undefined;
            ring?: string | undefined;
        }>>;
        dark: z.ZodOptional<z.ZodObject<{
            background: z.ZodOptional<z.ZodString>;
            foreground: z.ZodOptional<z.ZodString>;
            card: z.ZodOptional<z.ZodString>;
            cardForeground: z.ZodOptional<z.ZodString>;
            popover: z.ZodOptional<z.ZodString>;
            popoverForeground: z.ZodOptional<z.ZodString>;
            primary: z.ZodOptional<z.ZodString>;
            primaryForeground: z.ZodOptional<z.ZodString>;
            secondary: z.ZodOptional<z.ZodString>;
            secondaryForeground: z.ZodOptional<z.ZodString>;
            muted: z.ZodOptional<z.ZodString>;
            mutedForeground: z.ZodOptional<z.ZodString>;
            accent: z.ZodOptional<z.ZodString>;
            accentForeground: z.ZodOptional<z.ZodString>;
            destructive: z.ZodOptional<z.ZodString>;
            destructiveForeground: z.ZodOptional<z.ZodString>;
            border: z.ZodOptional<z.ZodString>;
            input: z.ZodOptional<z.ZodString>;
            ring: z.ZodOptional<z.ZodString>;
            radius: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            input?: string | undefined;
            radius?: string | undefined;
            border?: string | undefined;
            destructive?: string | undefined;
            secondary?: string | undefined;
            muted?: string | undefined;
            background?: string | undefined;
            foreground?: string | undefined;
            card?: string | undefined;
            cardForeground?: string | undefined;
            popover?: string | undefined;
            popoverForeground?: string | undefined;
            primary?: string | undefined;
            primaryForeground?: string | undefined;
            secondaryForeground?: string | undefined;
            mutedForeground?: string | undefined;
            accent?: string | undefined;
            accentForeground?: string | undefined;
            destructiveForeground?: string | undefined;
            ring?: string | undefined;
        }, {
            input?: string | undefined;
            radius?: string | undefined;
            border?: string | undefined;
            destructive?: string | undefined;
            secondary?: string | undefined;
            muted?: string | undefined;
            background?: string | undefined;
            foreground?: string | undefined;
            card?: string | undefined;
            cardForeground?: string | undefined;
            popover?: string | undefined;
            popoverForeground?: string | undefined;
            primary?: string | undefined;
            primaryForeground?: string | undefined;
            secondaryForeground?: string | undefined;
            mutedForeground?: string | undefined;
            accent?: string | undefined;
            accentForeground?: string | undefined;
            destructiveForeground?: string | undefined;
            ring?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        light?: {
            input?: string | undefined;
            radius?: string | undefined;
            border?: string | undefined;
            destructive?: string | undefined;
            secondary?: string | undefined;
            muted?: string | undefined;
            background?: string | undefined;
            foreground?: string | undefined;
            card?: string | undefined;
            cardForeground?: string | undefined;
            popover?: string | undefined;
            popoverForeground?: string | undefined;
            primary?: string | undefined;
            primaryForeground?: string | undefined;
            secondaryForeground?: string | undefined;
            mutedForeground?: string | undefined;
            accent?: string | undefined;
            accentForeground?: string | undefined;
            destructiveForeground?: string | undefined;
            ring?: string | undefined;
        } | undefined;
        dark?: {
            input?: string | undefined;
            radius?: string | undefined;
            border?: string | undefined;
            destructive?: string | undefined;
            secondary?: string | undefined;
            muted?: string | undefined;
            background?: string | undefined;
            foreground?: string | undefined;
            card?: string | undefined;
            cardForeground?: string | undefined;
            popover?: string | undefined;
            popoverForeground?: string | undefined;
            primary?: string | undefined;
            primaryForeground?: string | undefined;
            secondaryForeground?: string | undefined;
            mutedForeground?: string | undefined;
            accent?: string | undefined;
            accentForeground?: string | undefined;
            destructiveForeground?: string | undefined;
            ring?: string | undefined;
        } | undefined;
    }, {
        light?: {
            input?: string | undefined;
            radius?: string | undefined;
            border?: string | undefined;
            destructive?: string | undefined;
            secondary?: string | undefined;
            muted?: string | undefined;
            background?: string | undefined;
            foreground?: string | undefined;
            card?: string | undefined;
            cardForeground?: string | undefined;
            popover?: string | undefined;
            popoverForeground?: string | undefined;
            primary?: string | undefined;
            primaryForeground?: string | undefined;
            secondaryForeground?: string | undefined;
            mutedForeground?: string | undefined;
            accent?: string | undefined;
            accentForeground?: string | undefined;
            destructiveForeground?: string | undefined;
            ring?: string | undefined;
        } | undefined;
        dark?: {
            input?: string | undefined;
            radius?: string | undefined;
            border?: string | undefined;
            destructive?: string | undefined;
            secondary?: string | undefined;
            muted?: string | undefined;
            background?: string | undefined;
            foreground?: string | undefined;
            card?: string | undefined;
            cardForeground?: string | undefined;
            popover?: string | undefined;
            popoverForeground?: string | undefined;
            primary?: string | undefined;
            primaryForeground?: string | undefined;
            secondaryForeground?: string | undefined;
            mutedForeground?: string | undefined;
            accent?: string | undefined;
            accentForeground?: string | undefined;
            destructiveForeground?: string | undefined;
            ring?: string | undefined;
        } | undefined;
    }>>;
    metadata: z.ZodOptional<z.ZodObject<{
        title: z.ZodOptional<z.ZodString>;
        description: z.ZodOptional<z.ZodString>;
        logo: z.ZodOptional<z.ZodString>;
        favicon: z.ZodOptional<z.ZodString>;
        generator: z.ZodOptional<z.ZodString>;
        applicationName: z.ZodOptional<z.ZodString>;
        referrer: z.ZodOptional<z.ZodString>;
        keywords: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        creator: z.ZodOptional<z.ZodString>;
        publisher: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        description?: string | undefined;
        title?: string | undefined;
        logo?: string | undefined;
        favicon?: string | undefined;
        generator?: string | undefined;
        applicationName?: string | undefined;
        referrer?: string | undefined;
        keywords?: string[] | undefined;
        authors?: string[] | undefined;
        creator?: string | undefined;
        publisher?: string | undefined;
    }, {
        description?: string | undefined;
        title?: string | undefined;
        logo?: string | undefined;
        favicon?: string | undefined;
        generator?: string | undefined;
        applicationName?: string | undefined;
        referrer?: string | undefined;
        keywords?: string[] | undefined;
        authors?: string[] | undefined;
        creator?: string | undefined;
        publisher?: string | undefined;
    }>>;
    mdx: z.ZodOptional<z.ZodObject<{
        components: z.ZodOptional<z.ZodType<Readonly<import("mdx/types.js").MDXComponents> | import("node_modules/@mdx-js/react/lib/index.js").MergeComponents | null | undefined, z.ZodTypeDef, Readonly<import("mdx/types.js").MDXComponents> | import("node_modules/@mdx-js/react/lib/index.js").MergeComponents | null | undefined>>;
    }, "strip", z.ZodTypeAny, {
        components?: Readonly<import("mdx/types.js").MDXComponents> | import("node_modules/@mdx-js/react/lib/index.js").MergeComponents | null | undefined;
    }, {
        components?: Readonly<import("mdx/types.js").MDXComponents> | import("node_modules/@mdx-js/react/lib/index.js").MergeComponents | null | undefined;
    }>>;
    authentication: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"clerk">;
        clerkPubKey: z.ZodType<`pk_test_${string}` | `pk_live_${string}`, z.ZodTypeDef, `pk_test_${string}` | `pk_live_${string}`>;
        redirectToAfterSignUp: z.ZodOptional<z.ZodString>;
        redirectToAfterSignIn: z.ZodOptional<z.ZodString>;
        redirectToAfterSignOut: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        type: "clerk";
        clerkPubKey: `pk_test_${string}` | `pk_live_${string}`;
        redirectToAfterSignUp?: string | undefined;
        redirectToAfterSignIn?: string | undefined;
        redirectToAfterSignOut?: string | undefined;
    }, {
        type: "clerk";
        clerkPubKey: `pk_test_${string}` | `pk_live_${string}`;
        redirectToAfterSignUp?: string | undefined;
        redirectToAfterSignIn?: string | undefined;
        redirectToAfterSignOut?: string | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"auth0">;
        clientId: z.ZodString;
        domain: z.ZodString;
        audience: z.ZodOptional<z.ZodString>;
        redirectToAfterSignUp: z.ZodOptional<z.ZodString>;
        redirectToAfterSignIn: z.ZodOptional<z.ZodString>;
        redirectToAfterSignOut: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        type: "auth0";
        clientId: string;
        domain: string;
        redirectToAfterSignUp?: string | undefined;
        redirectToAfterSignIn?: string | undefined;
        redirectToAfterSignOut?: string | undefined;
        audience?: string | undefined;
    }, {
        type: "auth0";
        clientId: string;
        domain: string;
        redirectToAfterSignUp?: string | undefined;
        redirectToAfterSignIn?: string | undefined;
        redirectToAfterSignOut?: string | undefined;
        audience?: string | undefined;
    }>]>>;
    search: z.ZodOptional<z.ZodObject<{
        type: z.ZodLiteral<"inkeep">;
        apiKey: z.ZodString;
        integrationId: z.ZodString;
        organizationId: z.ZodString;
        primaryBrandColor: z.ZodString;
        organizationDisplayName: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "inkeep";
        apiKey: string;
        integrationId: string;
        organizationId: string;
        primaryBrandColor: string;
        organizationDisplayName: string;
    }, {
        type: "inkeep";
        apiKey: string;
        integrationId: string;
        organizationId: string;
        primaryBrandColor: string;
        organizationDisplayName: string;
    }>>;
    docs: z.ZodOptional<z.ZodObject<{
        files: z.ZodString;
        defaultOptions: z.ZodOptional<z.ZodObject<{
            toc: z.ZodOptional<z.ZodBoolean>;
            disablePager: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            toc?: boolean | undefined;
            disablePager?: boolean | undefined;
        }, {
            toc?: boolean | undefined;
            disablePager?: boolean | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        files: string;
        defaultOptions?: {
            toc?: boolean | undefined;
            disablePager?: boolean | undefined;
        } | undefined;
    }, {
        files: string;
        defaultOptions?: {
            toc?: boolean | undefined;
            disablePager?: boolean | undefined;
        } | undefined;
    }>>;
    apis: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
        type: z.ZodLiteral<"url">;
        input: z.ZodString;
    }, {
        server: z.ZodOptional<z.ZodString>;
        navigationId: z.ZodOptional<z.ZodString>;
    }>, "strip", z.ZodTypeAny, {
        type: "url";
        input: string;
        server?: string | undefined;
        navigationId?: string | undefined;
    }, {
        type: "url";
        input: string;
        server?: string | undefined;
        navigationId?: string | undefined;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        type: z.ZodLiteral<"file">;
        input: z.ZodString;
    }, {
        server: z.ZodOptional<z.ZodString>;
        navigationId: z.ZodOptional<z.ZodString>;
    }>, "strip", z.ZodTypeAny, {
        type: "file";
        input: string;
        server?: string | undefined;
        navigationId?: string | undefined;
    }, {
        type: "file";
        input: string;
        server?: string | undefined;
        navigationId?: string | undefined;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        type: z.ZodLiteral<"raw">;
        input: z.ZodString;
    }, {
        server: z.ZodOptional<z.ZodString>;
        navigationId: z.ZodOptional<z.ZodString>;
    }>, "strip", z.ZodTypeAny, {
        type: "raw";
        input: string;
        server?: string | undefined;
        navigationId?: string | undefined;
    }, {
        type: "raw";
        input: string;
        server?: string | undefined;
        navigationId?: string | undefined;
    }>]>, z.ZodArray<z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
        type: z.ZodLiteral<"url">;
        input: z.ZodString;
    }, {
        server: z.ZodOptional<z.ZodString>;
        navigationId: z.ZodOptional<z.ZodString>;
    }>, "strip", z.ZodTypeAny, {
        type: "url";
        input: string;
        server?: string | undefined;
        navigationId?: string | undefined;
    }, {
        type: "url";
        input: string;
        server?: string | undefined;
        navigationId?: string | undefined;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        type: z.ZodLiteral<"file">;
        input: z.ZodString;
    }, {
        server: z.ZodOptional<z.ZodString>;
        navigationId: z.ZodOptional<z.ZodString>;
    }>, "strip", z.ZodTypeAny, {
        type: "file";
        input: string;
        server?: string | undefined;
        navigationId?: string | undefined;
    }, {
        type: "file";
        input: string;
        server?: string | undefined;
        navigationId?: string | undefined;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        type: z.ZodLiteral<"raw">;
        input: z.ZodString;
    }, {
        server: z.ZodOptional<z.ZodString>;
        navigationId: z.ZodOptional<z.ZodString>;
    }>, "strip", z.ZodTypeAny, {
        type: "raw";
        input: string;
        server?: string | undefined;
        navigationId?: string | undefined;
    }, {
        type: "raw";
        input: string;
        server?: string | undefined;
        navigationId?: string | undefined;
    }>]>, "many">]>>;
    apiKeys: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        enabled: z.ZodBoolean;
        endpoint: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        enabled: boolean;
        endpoint: string;
    }, {
        enabled: boolean;
        endpoint: string;
    }>, z.ZodObject<{
        enabled: z.ZodBoolean;
        getKeys: z.ZodType<(context: DevPortalContext) => Promise<ApiKey[]>, z.ZodTypeDef, (context: DevPortalContext) => Promise<ApiKey[]>>;
        rollKey: z.ZodOptional<z.ZodType<(id: string, context: DevPortalContext) => Promise<void>, z.ZodTypeDef, (id: string, context: DevPortalContext) => Promise<void>>>;
        deleteKey: z.ZodOptional<z.ZodType<(id: string, context: DevPortalContext) => Promise<void>, z.ZodTypeDef, (id: string, context: DevPortalContext) => Promise<void>>>;
        updateKeyDescription: z.ZodOptional<z.ZodType<(apiKey: {
            id: string;
            description: string;
        }, context: DevPortalContext) => Promise<void>, z.ZodTypeDef, (apiKey: {
            id: string;
            description: string;
        }, context: DevPortalContext) => Promise<void>>>;
        createKey: z.ZodOptional<z.ZodType<(apiKey: {
            description: string;
            expiresOn?: string;
        }, context: DevPortalContext) => Promise<void>, z.ZodTypeDef, (apiKey: {
            description: string;
            expiresOn?: string;
        }, context: DevPortalContext) => Promise<void>>>;
    }, "strip", z.ZodTypeAny, {
        enabled: boolean;
        getKeys: (context: DevPortalContext) => Promise<ApiKey[]>;
        rollKey?: ((id: string, context: DevPortalContext) => Promise<void>) | undefined;
        deleteKey?: ((id: string, context: DevPortalContext) => Promise<void>) | undefined;
        updateKeyDescription?: ((apiKey: {
            id: string;
            description: string;
        }, context: DevPortalContext) => Promise<void>) | undefined;
        createKey?: ((apiKey: {
            description: string;
            expiresOn?: string;
        }, context: DevPortalContext) => Promise<void>) | undefined;
    }, {
        enabled: boolean;
        getKeys: (context: DevPortalContext) => Promise<ApiKey[]>;
        rollKey?: ((id: string, context: DevPortalContext) => Promise<void>) | undefined;
        deleteKey?: ((id: string, context: DevPortalContext) => Promise<void>) | undefined;
        updateKeyDescription?: ((apiKey: {
            id: string;
            description: string;
        }, context: DevPortalContext) => Promise<void>) | undefined;
        createKey?: ((apiKey: {
            description: string;
            expiresOn?: string;
        }, context: DevPortalContext) => Promise<void>) | undefined;
    }>]>>;
    redirects: z.ZodOptional<z.ZodArray<z.ZodObject<{
        from: z.ZodString;
        to: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        from: string;
        to: string;
    }, {
        from: string;
        to: string;
    }>, "many">>;
    customPages: z.ZodOptional<z.ZodArray<z.ZodObject<{
        path: z.ZodString;
        element: z.ZodOptional<z.ZodType<NonNullable<ReactNode>, z.ZodTypeDef, NonNullable<ReactNode>>>;
        render: z.ZodOptional<z.ZodType<ComponentType<ExposedComponentProps>, z.ZodTypeDef, ComponentType<ExposedComponentProps>>>;
        prose: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        path: string;
        element?: NonNullable<ReactNode> | undefined;
        render?: ComponentType<ExposedComponentProps> | undefined;
        prose?: boolean | undefined;
    }, {
        path: string;
        element?: NonNullable<ReactNode> | undefined;
        render?: ComponentType<ExposedComponentProps> | undefined;
        prose?: boolean | undefined;
    }>, "many">>;
    plugins: z.ZodOptional<z.ZodArray<z.ZodType<DevPortalPlugin, z.ZodTypeDef, DevPortalPlugin>, "many">>;
    sitemap: z.ZodOptional<z.ZodOptional<z.ZodObject<{
        /**
         * Base url of your website
         */
        siteUrl: z.ZodString;
        /**
         * Change frequency.
         * @default 'daily'
         */
        changefreq: z.ZodOptional<z.ZodEnum<["always", "hourly", "daily", "weekly", "monthly", "yearly", "never"]>>;
        /**
         * Priority
         * @default 0.7
         */
        priority: z.ZodOptional<z.ZodNumber>;
        outDir: z.ZodOptional<z.ZodString>;
        /**
         * Add <lastmod/> property.
         * @default true
         */
        autoLastmod: z.ZodOptional<z.ZodBoolean>;
        /**
         * Array of relative paths to exclude from listing on sitemap.xml or sitemap-*.xml.
         * @example ['/page-0', '/page/example']
         */
        exclude: z.ZodOptional<z.ZodUnion<[z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodPromise<z.ZodArray<z.ZodString, "many">>>, z.ZodArray<z.ZodString, "many">]>>;
    }, "strip", z.ZodTypeAny, {
        siteUrl: string;
        changefreq?: "never" | "always" | "hourly" | "daily" | "weekly" | "monthly" | "yearly" | undefined;
        priority?: number | undefined;
        outDir?: string | undefined;
        autoLastmod?: boolean | undefined;
        exclude?: string[] | ((...args: unknown[]) => Promise<string[]>) | undefined;
    }, {
        siteUrl: string;
        changefreq?: "never" | "always" | "hourly" | "daily" | "weekly" | "monthly" | "yearly" | undefined;
        priority?: number | undefined;
        outDir?: string | undefined;
        autoLastmod?: boolean | undefined;
        exclude?: string[] | ((...args: unknown[]) => Promise<string[]>) | undefined;
    }>>>;
    build: z.ZodOptional<z.ZodType<{
        remarkPlugins?: Options["remarkPlugins"];
        rehypePlugins?: Options["rehypePlugins"];
    }, z.ZodTypeDef, {
        remarkPlugins?: Options["remarkPlugins"];
        rehypePlugins?: Options["rehypePlugins"];
    }>>;
}, "strip", z.ZodTypeAny, {
    search?: {
        type: "inkeep";
        apiKey: string;
        integrationId: string;
        organizationId: string;
        primaryBrandColor: string;
        organizationDisplayName: string;
    } | undefined;
    theme?: {
        light?: {
            input?: string | undefined;
            radius?: string | undefined;
            border?: string | undefined;
            destructive?: string | undefined;
            secondary?: string | undefined;
            muted?: string | undefined;
            background?: string | undefined;
            foreground?: string | undefined;
            card?: string | undefined;
            cardForeground?: string | undefined;
            popover?: string | undefined;
            popoverForeground?: string | undefined;
            primary?: string | undefined;
            primaryForeground?: string | undefined;
            secondaryForeground?: string | undefined;
            mutedForeground?: string | undefined;
            accent?: string | undefined;
            accentForeground?: string | undefined;
            destructiveForeground?: string | undefined;
            ring?: string | undefined;
        } | undefined;
        dark?: {
            input?: string | undefined;
            radius?: string | undefined;
            border?: string | undefined;
            destructive?: string | undefined;
            secondary?: string | undefined;
            muted?: string | undefined;
            background?: string | undefined;
            foreground?: string | undefined;
            card?: string | undefined;
            cardForeground?: string | undefined;
            popover?: string | undefined;
            popoverForeground?: string | undefined;
            primary?: string | undefined;
            primaryForeground?: string | undefined;
            secondaryForeground?: string | undefined;
            mutedForeground?: string | undefined;
            accent?: string | undefined;
            accentForeground?: string | undefined;
            destructiveForeground?: string | undefined;
            ring?: string | undefined;
        } | undefined;
    } | undefined;
    metadata?: {
        description?: string | undefined;
        title?: string | undefined;
        logo?: string | undefined;
        favicon?: string | undefined;
        generator?: string | undefined;
        applicationName?: string | undefined;
        referrer?: string | undefined;
        keywords?: string[] | undefined;
        authors?: string[] | undefined;
        creator?: string | undefined;
        publisher?: string | undefined;
    } | undefined;
    page?: {
        banner?: {
            message: NonNullable<ReactNode>;
            color?: string | (string & {}) | undefined;
            dismissible?: boolean | undefined;
        } | undefined;
        pageTitle?: string | undefined;
        logo?: {
            src: {
                light: string;
                dark: string;
            };
            width?: string | undefined;
            alt?: string | undefined;
        } | undefined;
        logoUrl?: string | undefined;
    } | undefined;
    plugins?: DevPortalPlugin[] | undefined;
    topNavigation?: {
        id: string;
        label: string;
        default?: string | undefined;
    }[] | undefined;
    authentication?: {
        type: "clerk";
        clerkPubKey: `pk_test_${string}` | `pk_live_${string}`;
        redirectToAfterSignUp?: string | undefined;
        redirectToAfterSignIn?: string | undefined;
        redirectToAfterSignOut?: string | undefined;
    } | {
        type: "auth0";
        clientId: string;
        domain: string;
        redirectToAfterSignUp?: string | undefined;
        redirectToAfterSignIn?: string | undefined;
        redirectToAfterSignOut?: string | undefined;
        audience?: string | undefined;
    } | undefined;
    basePath?: string | undefined;
    sidebar?: Record<string, import("./InputSidebarSchema.js").InputSidebarItem[]> | undefined;
    UNSAFE_slotlets?: Record<string, ReactNode | ComponentType<ExposedComponentProps>> | undefined;
    mdx?: {
        components?: Readonly<import("mdx/types.js").MDXComponents> | import("node_modules/@mdx-js/react/lib/index.js").MergeComponents | null | undefined;
    } | undefined;
    docs?: {
        files: string;
        defaultOptions?: {
            toc?: boolean | undefined;
            disablePager?: boolean | undefined;
        } | undefined;
    } | undefined;
    apis?: {
        type: "url";
        input: string;
        server?: string | undefined;
        navigationId?: string | undefined;
    } | {
        type: "file";
        input: string;
        server?: string | undefined;
        navigationId?: string | undefined;
    } | {
        type: "raw";
        input: string;
        server?: string | undefined;
        navigationId?: string | undefined;
    } | ({
        type: "url";
        input: string;
        server?: string | undefined;
        navigationId?: string | undefined;
    } | {
        type: "file";
        input: string;
        server?: string | undefined;
        navigationId?: string | undefined;
    } | {
        type: "raw";
        input: string;
        server?: string | undefined;
        navigationId?: string | undefined;
    })[] | undefined;
    apiKeys?: {
        enabled: boolean;
        endpoint: string;
    } | {
        enabled: boolean;
        getKeys: (context: DevPortalContext) => Promise<ApiKey[]>;
        rollKey?: ((id: string, context: DevPortalContext) => Promise<void>) | undefined;
        deleteKey?: ((id: string, context: DevPortalContext) => Promise<void>) | undefined;
        updateKeyDescription?: ((apiKey: {
            id: string;
            description: string;
        }, context: DevPortalContext) => Promise<void>) | undefined;
        createKey?: ((apiKey: {
            description: string;
            expiresOn?: string;
        }, context: DevPortalContext) => Promise<void>) | undefined;
    } | undefined;
    redirects?: {
        from: string;
        to: string;
    }[] | undefined;
    customPages?: {
        path: string;
        element?: NonNullable<ReactNode> | undefined;
        render?: ComponentType<ExposedComponentProps> | undefined;
        prose?: boolean | undefined;
    }[] | undefined;
    sitemap?: {
        siteUrl: string;
        changefreq?: "never" | "always" | "hourly" | "daily" | "weekly" | "monthly" | "yearly" | undefined;
        priority?: number | undefined;
        outDir?: string | undefined;
        autoLastmod?: boolean | undefined;
        exclude?: string[] | ((...args: unknown[]) => Promise<string[]>) | undefined;
    } | undefined;
    build?: {
        remarkPlugins?: Options["remarkPlugins"];
        rehypePlugins?: Options["rehypePlugins"];
    } | undefined;
}, {
    search?: {
        type: "inkeep";
        apiKey: string;
        integrationId: string;
        organizationId: string;
        primaryBrandColor: string;
        organizationDisplayName: string;
    } | undefined;
    theme?: {
        light?: {
            input?: string | undefined;
            radius?: string | undefined;
            border?: string | undefined;
            destructive?: string | undefined;
            secondary?: string | undefined;
            muted?: string | undefined;
            background?: string | undefined;
            foreground?: string | undefined;
            card?: string | undefined;
            cardForeground?: string | undefined;
            popover?: string | undefined;
            popoverForeground?: string | undefined;
            primary?: string | undefined;
            primaryForeground?: string | undefined;
            secondaryForeground?: string | undefined;
            mutedForeground?: string | undefined;
            accent?: string | undefined;
            accentForeground?: string | undefined;
            destructiveForeground?: string | undefined;
            ring?: string | undefined;
        } | undefined;
        dark?: {
            input?: string | undefined;
            radius?: string | undefined;
            border?: string | undefined;
            destructive?: string | undefined;
            secondary?: string | undefined;
            muted?: string | undefined;
            background?: string | undefined;
            foreground?: string | undefined;
            card?: string | undefined;
            cardForeground?: string | undefined;
            popover?: string | undefined;
            popoverForeground?: string | undefined;
            primary?: string | undefined;
            primaryForeground?: string | undefined;
            secondaryForeground?: string | undefined;
            mutedForeground?: string | undefined;
            accent?: string | undefined;
            accentForeground?: string | undefined;
            destructiveForeground?: string | undefined;
            ring?: string | undefined;
        } | undefined;
    } | undefined;
    metadata?: {
        description?: string | undefined;
        title?: string | undefined;
        logo?: string | undefined;
        favicon?: string | undefined;
        generator?: string | undefined;
        applicationName?: string | undefined;
        referrer?: string | undefined;
        keywords?: string[] | undefined;
        authors?: string[] | undefined;
        creator?: string | undefined;
        publisher?: string | undefined;
    } | undefined;
    page?: {
        banner?: {
            message: NonNullable<ReactNode>;
            color?: string | (string & {}) | undefined;
            dismissible?: boolean | undefined;
        } | undefined;
        pageTitle?: string | undefined;
        logo?: {
            src: {
                light: string;
                dark: string;
            };
            width?: string | undefined;
            alt?: string | undefined;
        } | undefined;
        logoUrl?: string | undefined;
    } | undefined;
    plugins?: DevPortalPlugin[] | undefined;
    topNavigation?: {
        id: string;
        label: string;
        default?: string | undefined;
    }[] | undefined;
    authentication?: {
        type: "clerk";
        clerkPubKey: `pk_test_${string}` | `pk_live_${string}`;
        redirectToAfterSignUp?: string | undefined;
        redirectToAfterSignIn?: string | undefined;
        redirectToAfterSignOut?: string | undefined;
    } | {
        type: "auth0";
        clientId: string;
        domain: string;
        redirectToAfterSignUp?: string | undefined;
        redirectToAfterSignIn?: string | undefined;
        redirectToAfterSignOut?: string | undefined;
        audience?: string | undefined;
    } | undefined;
    basePath?: string | undefined;
    sidebar?: Record<string, import("./InputSidebarSchema.js").InputSidebarItem[]> | undefined;
    UNSAFE_slotlets?: Record<string, ReactNode | ComponentType<ExposedComponentProps>> | undefined;
    mdx?: {
        components?: Readonly<import("mdx/types.js").MDXComponents> | import("node_modules/@mdx-js/react/lib/index.js").MergeComponents | null | undefined;
    } | undefined;
    docs?: {
        files: string;
        defaultOptions?: {
            toc?: boolean | undefined;
            disablePager?: boolean | undefined;
        } | undefined;
    } | undefined;
    apis?: {
        type: "url";
        input: string;
        server?: string | undefined;
        navigationId?: string | undefined;
    } | {
        type: "file";
        input: string;
        server?: string | undefined;
        navigationId?: string | undefined;
    } | {
        type: "raw";
        input: string;
        server?: string | undefined;
        navigationId?: string | undefined;
    } | ({
        type: "url";
        input: string;
        server?: string | undefined;
        navigationId?: string | undefined;
    } | {
        type: "file";
        input: string;
        server?: string | undefined;
        navigationId?: string | undefined;
    } | {
        type: "raw";
        input: string;
        server?: string | undefined;
        navigationId?: string | undefined;
    })[] | undefined;
    apiKeys?: {
        enabled: boolean;
        endpoint: string;
    } | {
        enabled: boolean;
        getKeys: (context: DevPortalContext) => Promise<ApiKey[]>;
        rollKey?: ((id: string, context: DevPortalContext) => Promise<void>) | undefined;
        deleteKey?: ((id: string, context: DevPortalContext) => Promise<void>) | undefined;
        updateKeyDescription?: ((apiKey: {
            id: string;
            description: string;
        }, context: DevPortalContext) => Promise<void>) | undefined;
        createKey?: ((apiKey: {
            description: string;
            expiresOn?: string;
        }, context: DevPortalContext) => Promise<void>) | undefined;
    } | undefined;
    redirects?: {
        from: string;
        to: string;
    }[] | undefined;
    customPages?: {
        path: string;
        element?: NonNullable<ReactNode> | undefined;
        render?: ComponentType<ExposedComponentProps> | undefined;
        prose?: boolean | undefined;
    }[] | undefined;
    sitemap?: {
        siteUrl: string;
        changefreq?: "never" | "always" | "hourly" | "daily" | "weekly" | "monthly" | "yearly" | undefined;
        priority?: number | undefined;
        outDir?: string | undefined;
        autoLastmod?: boolean | undefined;
        exclude?: string[] | ((...args: unknown[]) => Promise<string[]>) | undefined;
    } | undefined;
    build?: {
        remarkPlugins?: Options["remarkPlugins"];
        rehypePlugins?: Options["rehypePlugins"];
    } | undefined;
}>, {
    search?: {
        type: "inkeep";
        apiKey: string;
        integrationId: string;
        organizationId: string;
        primaryBrandColor: string;
        organizationDisplayName: string;
    } | undefined;
    theme?: {
        light?: {
            input?: string | undefined;
            radius?: string | undefined;
            border?: string | undefined;
            destructive?: string | undefined;
            secondary?: string | undefined;
            muted?: string | undefined;
            background?: string | undefined;
            foreground?: string | undefined;
            card?: string | undefined;
            cardForeground?: string | undefined;
            popover?: string | undefined;
            popoverForeground?: string | undefined;
            primary?: string | undefined;
            primaryForeground?: string | undefined;
            secondaryForeground?: string | undefined;
            mutedForeground?: string | undefined;
            accent?: string | undefined;
            accentForeground?: string | undefined;
            destructiveForeground?: string | undefined;
            ring?: string | undefined;
        } | undefined;
        dark?: {
            input?: string | undefined;
            radius?: string | undefined;
            border?: string | undefined;
            destructive?: string | undefined;
            secondary?: string | undefined;
            muted?: string | undefined;
            background?: string | undefined;
            foreground?: string | undefined;
            card?: string | undefined;
            cardForeground?: string | undefined;
            popover?: string | undefined;
            popoverForeground?: string | undefined;
            primary?: string | undefined;
            primaryForeground?: string | undefined;
            secondaryForeground?: string | undefined;
            mutedForeground?: string | undefined;
            accent?: string | undefined;
            accentForeground?: string | undefined;
            destructiveForeground?: string | undefined;
            ring?: string | undefined;
        } | undefined;
    } | undefined;
    metadata?: {
        description?: string | undefined;
        title?: string | undefined;
        logo?: string | undefined;
        favicon?: string | undefined;
        generator?: string | undefined;
        applicationName?: string | undefined;
        referrer?: string | undefined;
        keywords?: string[] | undefined;
        authors?: string[] | undefined;
        creator?: string | undefined;
        publisher?: string | undefined;
    } | undefined;
    page?: {
        banner?: {
            message: NonNullable<ReactNode>;
            color?: string | (string & {}) | undefined;
            dismissible?: boolean | undefined;
        } | undefined;
        pageTitle?: string | undefined;
        logo?: {
            src: {
                light: string;
                dark: string;
            };
            width?: string | undefined;
            alt?: string | undefined;
        } | undefined;
        logoUrl?: string | undefined;
    } | undefined;
    plugins?: DevPortalPlugin[] | undefined;
    topNavigation?: {
        id: string;
        label: string;
        default?: string | undefined;
    }[] | undefined;
    authentication?: {
        type: "clerk";
        clerkPubKey: `pk_test_${string}` | `pk_live_${string}`;
        redirectToAfterSignUp?: string | undefined;
        redirectToAfterSignIn?: string | undefined;
        redirectToAfterSignOut?: string | undefined;
    } | {
        type: "auth0";
        clientId: string;
        domain: string;
        redirectToAfterSignUp?: string | undefined;
        redirectToAfterSignIn?: string | undefined;
        redirectToAfterSignOut?: string | undefined;
        audience?: string | undefined;
    } | undefined;
    basePath?: string | undefined;
    sidebar?: Record<string, import("./InputSidebarSchema.js").InputSidebarItem[]> | undefined;
    UNSAFE_slotlets?: Record<string, ReactNode | ComponentType<ExposedComponentProps>> | undefined;
    mdx?: {
        components?: Readonly<import("mdx/types.js").MDXComponents> | import("node_modules/@mdx-js/react/lib/index.js").MergeComponents | null | undefined;
    } | undefined;
    docs?: {
        files: string;
        defaultOptions?: {
            toc?: boolean | undefined;
            disablePager?: boolean | undefined;
        } | undefined;
    } | undefined;
    apis?: {
        type: "url";
        input: string;
        server?: string | undefined;
        navigationId?: string | undefined;
    } | {
        type: "file";
        input: string;
        server?: string | undefined;
        navigationId?: string | undefined;
    } | {
        type: "raw";
        input: string;
        server?: string | undefined;
        navigationId?: string | undefined;
    } | ({
        type: "url";
        input: string;
        server?: string | undefined;
        navigationId?: string | undefined;
    } | {
        type: "file";
        input: string;
        server?: string | undefined;
        navigationId?: string | undefined;
    } | {
        type: "raw";
        input: string;
        server?: string | undefined;
        navigationId?: string | undefined;
    })[] | undefined;
    apiKeys?: {
        enabled: boolean;
        endpoint: string;
    } | {
        enabled: boolean;
        getKeys: (context: DevPortalContext) => Promise<ApiKey[]>;
        rollKey?: ((id: string, context: DevPortalContext) => Promise<void>) | undefined;
        deleteKey?: ((id: string, context: DevPortalContext) => Promise<void>) | undefined;
        updateKeyDescription?: ((apiKey: {
            id: string;
            description: string;
        }, context: DevPortalContext) => Promise<void>) | undefined;
        createKey?: ((apiKey: {
            description: string;
            expiresOn?: string;
        }, context: DevPortalContext) => Promise<void>) | undefined;
    } | undefined;
    redirects?: {
        from: string;
        to: string;
    }[] | undefined;
    customPages?: {
        path: string;
        element?: NonNullable<ReactNode> | undefined;
        render?: ComponentType<ExposedComponentProps> | undefined;
        prose?: boolean | undefined;
    }[] | undefined;
    sitemap?: {
        siteUrl: string;
        changefreq?: "never" | "always" | "hourly" | "daily" | "weekly" | "monthly" | "yearly" | undefined;
        priority?: number | undefined;
        outDir?: string | undefined;
        autoLastmod?: boolean | undefined;
        exclude?: string[] | ((...args: unknown[]) => Promise<string[]>) | undefined;
    } | undefined;
    build?: {
        remarkPlugins?: Options["remarkPlugins"];
        rehypePlugins?: Options["rehypePlugins"];
    } | undefined;
}, {
    search?: {
        type: "inkeep";
        apiKey: string;
        integrationId: string;
        organizationId: string;
        primaryBrandColor: string;
        organizationDisplayName: string;
    } | undefined;
    theme?: {
        light?: {
            input?: string | undefined;
            radius?: string | undefined;
            border?: string | undefined;
            destructive?: string | undefined;
            secondary?: string | undefined;
            muted?: string | undefined;
            background?: string | undefined;
            foreground?: string | undefined;
            card?: string | undefined;
            cardForeground?: string | undefined;
            popover?: string | undefined;
            popoverForeground?: string | undefined;
            primary?: string | undefined;
            primaryForeground?: string | undefined;
            secondaryForeground?: string | undefined;
            mutedForeground?: string | undefined;
            accent?: string | undefined;
            accentForeground?: string | undefined;
            destructiveForeground?: string | undefined;
            ring?: string | undefined;
        } | undefined;
        dark?: {
            input?: string | undefined;
            radius?: string | undefined;
            border?: string | undefined;
            destructive?: string | undefined;
            secondary?: string | undefined;
            muted?: string | undefined;
            background?: string | undefined;
            foreground?: string | undefined;
            card?: string | undefined;
            cardForeground?: string | undefined;
            popover?: string | undefined;
            popoverForeground?: string | undefined;
            primary?: string | undefined;
            primaryForeground?: string | undefined;
            secondaryForeground?: string | undefined;
            mutedForeground?: string | undefined;
            accent?: string | undefined;
            accentForeground?: string | undefined;
            destructiveForeground?: string | undefined;
            ring?: string | undefined;
        } | undefined;
    } | undefined;
    metadata?: {
        description?: string | undefined;
        title?: string | undefined;
        logo?: string | undefined;
        favicon?: string | undefined;
        generator?: string | undefined;
        applicationName?: string | undefined;
        referrer?: string | undefined;
        keywords?: string[] | undefined;
        authors?: string[] | undefined;
        creator?: string | undefined;
        publisher?: string | undefined;
    } | undefined;
    page?: {
        banner?: {
            message: NonNullable<ReactNode>;
            color?: string | (string & {}) | undefined;
            dismissible?: boolean | undefined;
        } | undefined;
        pageTitle?: string | undefined;
        logo?: {
            src: {
                light: string;
                dark: string;
            };
            width?: string | undefined;
            alt?: string | undefined;
        } | undefined;
        logoUrl?: string | undefined;
    } | undefined;
    plugins?: DevPortalPlugin[] | undefined;
    topNavigation?: {
        id: string;
        label: string;
        default?: string | undefined;
    }[] | undefined;
    authentication?: {
        type: "clerk";
        clerkPubKey: `pk_test_${string}` | `pk_live_${string}`;
        redirectToAfterSignUp?: string | undefined;
        redirectToAfterSignIn?: string | undefined;
        redirectToAfterSignOut?: string | undefined;
    } | {
        type: "auth0";
        clientId: string;
        domain: string;
        redirectToAfterSignUp?: string | undefined;
        redirectToAfterSignIn?: string | undefined;
        redirectToAfterSignOut?: string | undefined;
        audience?: string | undefined;
    } | undefined;
    basePath?: string | undefined;
    sidebar?: Record<string, import("./InputSidebarSchema.js").InputSidebarItem[]> | undefined;
    UNSAFE_slotlets?: Record<string, ReactNode | ComponentType<ExposedComponentProps>> | undefined;
    mdx?: {
        components?: Readonly<import("mdx/types.js").MDXComponents> | import("node_modules/@mdx-js/react/lib/index.js").MergeComponents | null | undefined;
    } | undefined;
    docs?: {
        files: string;
        defaultOptions?: {
            toc?: boolean | undefined;
            disablePager?: boolean | undefined;
        } | undefined;
    } | undefined;
    apis?: {
        type: "url";
        input: string;
        server?: string | undefined;
        navigationId?: string | undefined;
    } | {
        type: "file";
        input: string;
        server?: string | undefined;
        navigationId?: string | undefined;
    } | {
        type: "raw";
        input: string;
        server?: string | undefined;
        navigationId?: string | undefined;
    } | ({
        type: "url";
        input: string;
        server?: string | undefined;
        navigationId?: string | undefined;
    } | {
        type: "file";
        input: string;
        server?: string | undefined;
        navigationId?: string | undefined;
    } | {
        type: "raw";
        input: string;
        server?: string | undefined;
        navigationId?: string | undefined;
    })[] | undefined;
    apiKeys?: {
        enabled: boolean;
        endpoint: string;
    } | {
        enabled: boolean;
        getKeys: (context: DevPortalContext) => Promise<ApiKey[]>;
        rollKey?: ((id: string, context: DevPortalContext) => Promise<void>) | undefined;
        deleteKey?: ((id: string, context: DevPortalContext) => Promise<void>) | undefined;
        updateKeyDescription?: ((apiKey: {
            id: string;
            description: string;
        }, context: DevPortalContext) => Promise<void>) | undefined;
        createKey?: ((apiKey: {
            description: string;
            expiresOn?: string;
        }, context: DevPortalContext) => Promise<void>) | undefined;
    } | undefined;
    redirects?: {
        from: string;
        to: string;
    }[] | undefined;
    customPages?: {
        path: string;
        element?: NonNullable<ReactNode> | undefined;
        render?: ComponentType<ExposedComponentProps> | undefined;
        prose?: boolean | undefined;
    }[] | undefined;
    sitemap?: {
        siteUrl: string;
        changefreq?: "never" | "always" | "hourly" | "daily" | "weekly" | "monthly" | "yearly" | undefined;
        priority?: number | undefined;
        outDir?: string | undefined;
        autoLastmod?: boolean | undefined;
        exclude?: string[] | ((...args: unknown[]) => Promise<string[]>) | undefined;
    } | undefined;
    build?: {
        remarkPlugins?: Options["remarkPlugins"];
        rehypePlugins?: Options["rehypePlugins"];
    } | undefined;
}>;
export type ZudokuApiConfig = z.infer<typeof ApiSchema>;
export type ZudokuConfig = z.infer<typeof ConfigSchema>;
export type ZudokuSiteMapConfig = z.infer<typeof SiteMapSchema>;
export type ZudokuDocsConfig = z.infer<typeof DocsConfigSchema>;
export declare function validateConfig(config: unknown): void;
export {};
