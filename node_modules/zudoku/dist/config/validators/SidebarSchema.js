import { glob } from "glob";
import matter from "gray-matter";
import fs from "node:fs/promises";
const extractTitleFromContent = (content) => content.match(/^\s*#\s(.*)$/m)?.at(1);
export const resolveSidebar = async (rootDir, parentId, sidebar) => {
    const resolveDoc = async (globId, categoryLabel) => {
        const foundMatches = await glob(`/**/${globId}.{md,mdx}`, {
            root: rootDir,
        });
        if (foundMatches.length === 0) {
            throw new Error(`File not found for document '${globId}'. Check your sidebar configuration.`);
        }
        // Strip parent id if it's prefixed
        // E.g. docs/introduction should work as well as introduction
        const id = globId.startsWith(parentId)
            ? globId.slice(parentId.length)
            : globId;
        const file = await fs.readFile(foundMatches.at(0));
        const { data, content } = matter(file);
        const label = data.sidebar_label ?? data.title ?? extractTitleFromContent(content);
        const icon = data.sidebar_icon;
        if (typeof label !== "string") {
            throw new Error(`Error determining title for document '${id}'. Check that the document has a H1 header or title frontmatter.`);
        }
        return {
            type: "doc",
            id,
            label,
            icon,
            categoryLabel,
        };
    };
    const resolveLink = async (id) => {
        const doc = await resolveDoc(id);
        return {
            type: "doc",
            id: id,
            label: doc.label,
            icon: doc.icon,
        };
    };
    const resolveSidebarItemCategoryLinkDoc = async (item) => {
        if (typeof item === "string") {
            return resolveLink(item);
        }
        const { label, icon } = await resolveDoc(item.id);
        return { ...item, label, icon };
    };
    const resolveSidebarItemDoc = async (item, categoryLabel) => {
        if (typeof item === "string") {
            return resolveDoc(item, categoryLabel);
        }
        const doc = await resolveDoc(item.id, categoryLabel);
        const label = item.label ?? doc.label;
        return { ...item, label, categoryLabel };
    };
    const resolveSidebarItem = async (item, categoryLabel) => {
        if (typeof item === "string") {
            return resolveDoc(item, categoryLabel);
        }
        switch (item.type) {
            case "doc":
                return resolveSidebarItemDoc(item, categoryLabel);
            case "link":
                return item;
            case "category": {
                const categoryItem = item;
                const items = await Promise.all(categoryItem.items.map((subItem) => resolveSidebarItem(subItem, categoryItem.label)));
                const resolvedLink = categoryItem.link
                    ? await resolveSidebarItemCategoryLinkDoc(categoryItem.link)
                    : undefined;
                return {
                    ...categoryItem,
                    items,
                    link: resolvedLink,
                };
            }
        }
    };
    return Promise.all(sidebar.map((item) => resolveSidebarItem(item)));
};
//# sourceMappingURL=SidebarSchema.js.map