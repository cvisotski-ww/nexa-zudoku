import fs from "node:fs/promises";
import path from "node:path";
import { joinPath } from "../lib/util/joinPath.js";
import { generateSitemap } from "./sitemap.js";
export class FileWritingResponse {
    fileName;
    buffer = "";
    dontSave = false;
    resolve = () => { };
    resolved = new Promise((res) => (this.resolve = res));
    set() { }
    status(status) {
        if (status >= 300) {
            this.dontSave = true;
        }
    }
    on() { }
    constructor(fileName) {
        this.fileName = fileName;
    }
    redirect() {
        this.buffer = "redirected";
        this.dontSave = true;
        this.resolve();
    }
    send = async (chunk) => {
        this.write(chunk);
        await this.end();
    };
    write(chunk, _encoding) {
        this.buffer += chunk;
    }
    async end(chunk = "") {
        if (!this.dontSave) {
            await fs.mkdir(path.dirname(this.fileName), { recursive: true });
            await fs.writeFile(this.fileName, this.buffer + chunk);
        }
        this.resolve();
    }
    isSent() {
        return this.resolved;
    }
}
const routesToPaths = (routes) => {
    const paths = [];
    const addPaths = (routes) => {
        for (const route of routes) {
            if (route.path) {
                paths.push(route.path.startsWith("/") ? route.path : `/${route.path}`);
            }
            if (route.children) {
                addPaths(route.children);
            }
        }
    };
    addPaths(routes);
    return paths;
};
export const prerender = async (html, dir) => {
    // eslint-disable-next-line no-console
    console.log("Prerendering...");
    const config = await import(path.join(dir, "dist/server/zudoku.config.js")).then((m) => m.default);
    const module = await import(path.join(dir, "dist/server/entry.server.js"));
    const render = module.render;
    const getRoutes = module.getRoutesByConfig;
    const routes = getRoutes(config);
    const paths = routesToPaths(routes);
    const writtenFiles = [];
    for (const urlPath of paths) {
        const req = new Request(new URL(joinPath(config.basePath, urlPath), "http://localhost").href);
        const filename = urlPath === "/" ? "/index.html" : `${urlPath}.html`;
        const response = new FileWritingResponse(path.join(dir, "dist/", filename));
        await render({ template: html, request: req, response, config });
        await response.isSent();
        writtenFiles.push(filename);
    }
    await generateSitemap({
        basePath: config.basePath,
        outputUrls: paths,
        config: config.sitemap,
        baseOutputDir: path.join(dir, "dist"),
    });
    // eslint-disable-next-line no-console
    console.log(`Prerendered ${paths.length} pages`);
    return writtenFiles;
};
//# sourceMappingURL=prerender.js.map