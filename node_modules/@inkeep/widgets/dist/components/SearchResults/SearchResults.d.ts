import { GetSearchResultsQuery } from '../../__generated__/graphql';
import { SearchViewTypes } from '../InkeepWidgetProps';
import { type SearchResultsBySourceProps } from './SearchResultsBySource';
export type SearchResultType = GetSearchResultsQuery['search']['searchHits'][number];
export type SearchRecordTypenames = GetSearchResultsQuery['search']['searchHits'][number]['rootRecord']['__typename'];
export type DocumentationHit = Extract<SearchResultType, {
    __typename?: 'DocumentationHit';
}>;
export type DiscourseHit = Extract<SearchResultType, {
    __typename?: 'DiscourseHit';
}>;
export type GitHubIssueHit = Extract<SearchResultType, {
    __typename?: 'GitHubIssueHit';
}>;
export type StackOverflowHit = Extract<SearchResultType, {
    __typename?: 'StackOverflowHit';
}>;
export type DocumentationRecord = Extract<DocumentationHit['rootRecord'], {
    __typename: 'DocumentationRecord';
}>;
export type DiscourseRecord = Extract<DiscourseHit['rootRecord'], {
    __typename: 'DiscourseRecord';
}>;
export type GitHubIssueRecord = Extract<GitHubIssueHit['rootRecord'], {
    __typename: 'GitHubIssueRecord';
}>;
export type StackOverflowRecord = Extract<StackOverflowHit['rootRecord'], {
    __typename: 'StackOverflowRecord';
}>;
interface SearchResultsProps extends Pick<SearchResultsBySourceProps, 'isStacked' | 'partialDivider' | 'spaceBetweenResults'> {
    viewType: SearchViewTypes;
    showTabbed: boolean;
    maxResults?: number;
    query: string;
}
declare const SearchResults: ({ viewType, showTabbed, maxResults, query, ...passthroughProps }: SearchResultsProps) => import("react/jsx-runtime").JSX.Element;
export default SearchResults;
