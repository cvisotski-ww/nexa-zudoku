/* eslint-disable */
import type { ConditionalValue } from '../types/index';
import type { DistributiveOmit, Pretty } from '../types/system-types';

interface SwitchToChatButtonVariant {
  variant: "subtle" | "primary"
}

type SwitchToChatButtonVariantMap = {
  [key in keyof SwitchToChatButtonVariant]: Array<SwitchToChatButtonVariant[key]>
}

export type SwitchToChatButtonVariantProps = {
  [key in keyof SwitchToChatButtonVariant]?: ConditionalValue<SwitchToChatButtonVariant[key]> | undefined
}

export interface SwitchToChatButtonRecipe {
  __type: SwitchToChatButtonVariantProps
  (props?: SwitchToChatButtonVariantProps): Pretty<Record<"wrapper" | "container" | "icon" | "text", string>>
  raw: (props?: SwitchToChatButtonVariantProps) => SwitchToChatButtonVariantProps
  variantMap: SwitchToChatButtonVariantMap
  variantKeys: Array<keyof SwitchToChatButtonVariant>
  splitVariantProps<Props extends SwitchToChatButtonVariantProps>(props: Props): [SwitchToChatButtonVariantProps, Pretty<DistributiveOmit<Props, keyof SwitchToChatButtonVariantProps>>]
}


export declare const switchToChatButton: SwitchToChatButtonRecipe