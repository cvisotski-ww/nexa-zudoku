import {
  X,
  Z,
  ee,
  n,
  te
} from "./chunk-VJPEKYM2.js";
import {
  $r,
  Ac,
  Ce,
  Lt,
  Mr,
  Nr,
  Oe,
  Or,
  Tr,
  ci,
  d,
  du,
  ot,
  rn,
  wn
} from "./chunk-5VAB6D6Y.js";
import {
  A,
  Gn
} from "./chunk-RJUI5L33.js";
import {
  Cb,
  Mb,
  Pb,
  a2 as a,
  bt2 as bt,
  g1,
  ht
} from "./chunk-JRUNZBCC.js";
import "./chunk-5QLD5OAE.js";
import "./chunk-ZOAZAIYS.js";
import {
  dr
} from "./chunk-VJHVP7KM.js";
import {
  Check,
  ChevronDown,
  Circle,
  CircleDot,
  CircleFadingPlus,
  Copy,
  ListPlus,
  SquareMinus,
  SquarePlus
} from "./chunk-7KXO56BK.js";
import {
  require_react
} from "./chunk-DDZAXPWP.js";
import {
  __toESM
} from "./chunk-HXA6O6EE.js";

// node_modules/zudoku/lib/OperationList-BO-ES1C5.js
var import_react = __toESM(require_react(), 1);
function oe(t, s) {
  return s;
}
var le = $r(
  /* GraphQL */
  `
  query ServersQuery($input: JSON!, $type: SchemaType!) {
    schema(input: $input, type: $type) {
      url
      servers {
        url
      }
    }
  }
`
);
var w = ({ url: t }) => {
  const [s, n2] = (0, import_react.useState)(false);
  return dr.jsx(
    Gn,
    {
      onClick: () => {
        navigator.clipboard.writeText(t).then(() => {
          n2(true), setTimeout(() => n2(false), 2e3);
        });
      },
      variant: "ghost",
      size: "icon",
      children: s ? dr.jsx(Check, { className: "text-green-600", size: 14 }) : dr.jsx(Copy, { size: 14, strokeWidth: 1.3 })
    }
  );
};
var ce = { suspense: true };
var de = () => {
  const [t] = ci({
    query: le,
    variables: Ac(),
    context: ce
  }), [, s] = (0, import_react.useTransition)(), { selectedServer: n2, setSelectedServer: i } = A();
  if (!t.data) return null;
  const { servers: r } = t.data.schema;
  return r.length === 1 ? dr.jsxs("div", { className: "flex items-center gap-2", children: [
    dr.jsx("span", { className: "font-medium text-sm", children: "Endpoint:" }),
    dr.jsx(g1, { className: "text-xs px-2 py-1.5", selectOnClick: true, children: r[0].url }),
    dr.jsx(w, { url: r[0].url })
  ] }) : dr.jsxs("div", { className: "flex flex-wrap items-center gap-2", children: [
    dr.jsxs("span", { className: "font-medium text-sm", children: [
      r.length > 1 ? "Endpoints" : "Endpoint",
      ":"
    ] }),
    dr.jsx(
      Mr,
      {
        className: "font-mono text-xs bg-border/50 dark:bg-border/70 py-1.5 max-w-[450px] truncate",
        onChange: (a2) => s(() => {
          i(a2.target.value);
        }),
        value: n2 ?? t.data.schema.url,
        showChevrons: r.length > 1,
        options: r.map((a2) => ({
          value: a2.url,
          label: a2.url
        }))
      }
    ),
    dr.jsx(w, { url: n2 ?? t.data.schema.url })
  ] });
};
var k = (t, s) => t.reduce(
  (n2, i) => {
    const r = s(i);
    return n2[r] || (n2[r] = []), n2[r].push(i), n2;
  },
  {}
);
var pe = (t, s) => t ? s(t) : void 0;
var q = (t) => t.schema != null && typeof t.schema == "object" ? t.schema : {
  type: "string"
};
var me = ({
  parameter: t,
  group: s,
  id: n2
}) => dr.jsxs("li", { className: "p-4 bg-border/20 text-sm flex flex-col gap-1", children: [
  dr.jsxs("div", { className: "flex items-center gap-2", children: [
    dr.jsx("code", { children: s === "path" ? dr.jsx(
      rn,
      {
        name: t.name,
        backgroundOpacity: "15%",
        slug: n2 + "-" + t.name.toLocaleLowerCase()
      }
    ) : t.name }),
    t.required && dr.jsx("span", { className: "py-px px-1.5 font-medium bg-primary/75 text-muted rounded-lg", children: "required" }),
    q(t).type && dr.jsx("span", { className: "text-muted-foreground", children: q(t).type })
  ] }),
  t.description && dr.jsx(
    Mb,
    {
      content: t.description,
      className: "text-sm prose-p:my-1 prose-code:whitespace-pre-line"
    }
  )
] });
var xe = ({
  group: t,
  parameters: s,
  id: n2
}) => dr.jsxs(dr.Fragment, { children: [
  dr.jsx(ht, { level: 3, id: `${n2}/${t}-parameters`, className: "capitalize", children: t === "header" ? "Headers" : `${t} Parameters` }),
  dr.jsx(ot, { children: dr.jsx("ul", { className: "list-none m-0 px-0 divide-y ", children: s.sort((i, r) => i.required === r.required ? 0 : i.required ? -1 : 1).map((i) => dr.jsx(
    me,
    {
      parameter: i,
      id: n2,
      group: t
    },
    `${i.name}-${i.in}`
  )) }) })
] });
var ue = (t) => Object.entries(t);
var je = {
  AND: dr.jsx(CircleFadingPlus, { size: 16, className: "fill-card" }),
  OR: dr.jsx(CircleDot, { size: 16, className: "fill-card" }),
  ONE: dr.jsx(Circle, { size: 14, className: "fill-card" })
};
var he = {
  AND: "text-green-500 dark:text-green-300/60",
  OR: "text-blue-400 dark:text-blue-500",
  ONE: "text-purple-500 dark:text-purple-300/60"
};
var ge = ({
  type: t,
  isOpen: s,
  className: n2
}) => dr.jsx(
  "div",
  {
    className: bt(
      he[t],
      "relative text-sm flex py-2",
      "before:border-l before:absolute before:-top-2 before:-bottom-2 before:border-border before:border-dashed before:content-['']",
      n2
    ),
    children: dr.jsxs("div", { className: "-translate-x-[7px] flex gap-1 items-center", children: [
      je[t],
      dr.jsx(
        "div",
        {
          className: bt(
            "translate-y-px mx-px opacity-0 group-hover:opacity-100 transition",
            !s && "-rotate-90"
          ),
          children: dr.jsx(ChevronDown, { size: 16 })
        }
      )
    ] })
  }
);
var fe = (t) => {
  const [s, n2] = (0, import_react.useState)(true);
  return dr.jsxs(
    Z,
    {
      open: s,
      onOpenChange: () => n2((i) => !i),
      className: "group",
      children: [
        dr.jsx(ee, { children: dr.jsx(ge, { type: t.type, isOpen: s }) }),
        !s && dr.jsx("div", { className: "wavy-line bg-border translate-y-1" }),
        dr.jsx(te, { children: dr.jsx(g, { schema: t.schema, level: t.level + 1 }) })
      ]
    }
  );
};
var ye = {
  AND: "All of",
  OR: "Any of",
  ONE: "One of"
};
var be = ({
  schemas: t,
  type: s,
  isOpen: n2,
  level: i,
  toggleOpen: r
}) => dr.jsx(Z, { open: n2, onOpenChange: r, asChild: true, children: dr.jsxs(ot, { className: "px-6", children: [
  dr.jsxs(ee, { className: "flex gap-2 items-center py-2 w-full text-sm text-muted-foreground -translate-x-1.5", children: [
    n2 ? dr.jsx(SquareMinus, { size: 14 }) : dr.jsx(SquarePlus, { size: 14 }),
    dr.jsx("span", { children: ye[s] })
  ] }),
  dr.jsx(te, { className: "pb-4", children: t.map((a2, l) => (
    // eslint-disable-next-line react/no-array-index-key
    dr.jsx(
      fe,
      {
        type: s,
        schema: a2,
        level: i
      },
      l
    )
  )) })
] }) });
var Ne = (t) => t.type === "object" || t.type === "array" && typeof t.items == "object" && (!t.items.type || t.items.type === "object");
var b = (t) => !!(t.oneOf ?? t.allOf ?? t.anyOf);
var ve = {
  allOf: "AND",
  anyOf: "OR",
  oneOf: "ONE"
};
var $ = ({
  schema: t,
  level: s
}) => {
  const [n2, i] = (0, import_react.useState)(true), r = (0, import_react.useCallback)(() => i((a2) => !a2), []);
  for (const [a2, l] of ue(ve))
    if (t[a2])
      return dr.jsx(
        be,
        {
          schemas: t[a2],
          type: l,
          isOpen: n2,
          toggleOpen: r,
          level: s
        }
      );
};
var Ce2 = ({
  name: t,
  schema: s,
  group: n2,
  level: i,
  defaultOpen: r = false,
  showCollapseButton: a2 = true
}) => {
  const [l, j] = (0, import_react.useState)(r);
  return dr.jsx("li", { className: "p-4 bg-border/20 hover:bg-border/30", children: dr.jsxs("div", { className: "flex flex-col gap-1 justify-between text-sm", children: [
    dr.jsxs("div", { className: "flex gap-2 items-center", children: [
      dr.jsx("code", { children: t }),
      dr.jsx("span", { className: "text-muted-foreground", children: s.type === "array" && s.items.type ? dr.jsxs("span", { children: [
        s.items.type,
        "[]"
      ] }) : Array.isArray(s.type) ? dr.jsx("span", { children: s.type.join(" | ") }) : dr.jsx("span", { children: s.type }) }),
      n2 === "optional" && dr.jsx("span", { className: "py-px px-1.5 font-medium border rounded-lg", children: "optional" })
    ] }),
    s.description && dr.jsx(
      Mb,
      {
        className: bt(Pb, "text-sm leading-normal line-clamp-4"),
        content: s.description
      }
    ),
    (b(s) || Ne(s)) && dr.jsxs(
      Z,
      {
        defaultOpen: r,
        open: l,
        onOpenChange: () => j(!l),
        children: [
          a2 && dr.jsx(ee, { asChild: true, children: dr.jsxs(
            Gn,
            {
              variant: "outline",
              size: "sm",
              className: "mt-2 flex gap-1.5",
              children: [
                dr.jsx(ListPlus, { size: 18 }),
                l ? "Hide nested properties" : "Show nested properties"
              ]
            }
          ) }),
          dr.jsx(te, { children: dr.jsx("div", { className: "mt-2", children: b(s) ? dr.jsx($, { schema: s, level: i + 1 }) : s.type === "object" ? dr.jsx(g, { schema: s, level: i + 1 }) : s.type === "array" && typeof s.items == "object" && dr.jsx(g, { schema: s.items, level: i + 1 }) }) })
        ]
      }
    )
  ] }) });
};
var g = ({
  schema: t,
  level: s = 0,
  defaultOpen: n2 = false
}) => {
  if (!t || Object.keys(t).length === 0)
    return dr.jsx(ot, { className: "p-4", children: dr.jsx("span", { className: "text-sm text-muted-foreground italic", children: "No response specified" }) });
  const i = (r, a2) => {
    if (b(r))
      return dr.jsx($, { schema: r, level: a2 });
    if (r.type === "array" && r.items) {
      const l = r.items;
      return typeof l.type == "string" && ["string", "number", "boolean", "integer"].includes(l.type) ? dr.jsxs(ot, { className: "p-4", children: [
        dr.jsxs("span", { className: "text-sm text-muted-foreground", children: [
          l.type,
          "[]"
        ] }),
        r.description && dr.jsx(
          Mb,
          {
            className: bt(
              Pb,
              "text-sm leading-normal line-clamp-4"
            ),
            content: r.description
          }
        )
      ] }) : l.type === "object" ? dr.jsxs(ot, { className: "flex flex-col gap-2 bg-border/30 p-4", children: [
        dr.jsx("span", { className: "text-sm text-muted-foreground", children: "object[]" }),
        i(l, a2 + 1)
      ] }) : i(l, a2 + 1);
    }
    if (r.type === "object" && !r.properties)
      return dr.jsxs(ot, { className: "p-4 flex gap-2 items-center", children: [
        "name" in r && dr.jsx(dr.Fragment, { children: r.name }),
        dr.jsx("span", { className: "text-sm text-muted-foreground", children: "object" }),
        r.description && dr.jsx(
          Mb,
          {
            className: bt(
              Pb,
              "text-sm leading-normal line-clamp-4"
            ),
            content: r.description
          }
        )
      ] });
    if (r.properties) {
      const l = k(
        Object.entries(r.properties),
        ([d2, o]) => {
          var c;
          return o.deprecated ? "deprecated" : (c = r.required) != null && c.includes(d2) ? "required" : "optional";
        }
      ), j = ["required", "optional", "deprecated"];
      return dr.jsx(ot, { className: "divide-y overflow-hidden", children: j.map(
        (d2) => l[d2] && dr.jsx("ul", { className: "divide-y", children: l[d2].map(([o, c]) => dr.jsx(
          Ce2,
          {
            name: o,
            schema: c,
            group: d2,
            level: a2,
            defaultOpen: n2
          },
          o
        )) }, d2)
      ) });
    }
    return typeof r.type == "string" && ["string", "number", "boolean", "integer", "null"].includes(r.type) ? dr.jsxs(ot, { className: "p-4", children: [
      dr.jsx("span", { className: "text-sm text-muted-foreground", children: r.type }),
      r.description && dr.jsx(
        Mb,
        {
          className: bt(
            Pb,
            "text-sm leading-normal line-clamp-4"
          ),
          content: r.description
        }
      )
    ] }) : r.additionalProperties ? dr.jsxs(ot, { className: "my-2", children: [
      dr.jsx(Nr, { children: dr.jsx(Tr, { children: "Additional Properties:" }) }),
      dr.jsx(Or, { children: i(
        r.additionalProperties,
        a2 + 1
      ) })
    ] }) : null;
  };
  return i(t, s);
};
var Oe2 = ["path", "query", "header", "cookie"];
var Se = ({
  operationFragment: t
}) => {
  var l, j, d2;
  const s = oe(Ie, t), n2 = k(
    s.parameters ?? [],
    (o) => o.in
  ), i = s.responses.at(0), [r, a2] = (0, import_react.useState)(i == null ? void 0 : i.statusCode);
  return dr.jsxs(
    "div",
    {
      className: "grid grid-cols-1 lg:grid-cols-[4fr_3fr] gap-8 items-start border-b-2 mb-16 pb-16",
      children: [
        dr.jsxs("div", { className: "flex flex-col gap-4", children: [
          dr.jsx(ht, { level: 2, id: s.slug, registerSidebarAnchor: true, children: s.summary }),
          s.description && dr.jsx(
            Mb,
            {
              className: `${Pb} max-w-full prose-img:max-w-prose`,
              content: s.description
            }
          ),
          s.parameters && s.parameters.length > 0 && dr.jsx(dr.Fragment, { children: Oe2.flatMap(
            (o) => {
              var c;
              return (c = n2[o]) != null && c.length ? dr.jsx(
                xe,
                {
                  id: s.slug,
                  parameters: n2[o],
                  group: o
                },
                o
              ) : [];
            }
          ) }),
          pe((d2 = (j = (l = s.requestBody) == null ? void 0 : l.content) == null ? void 0 : j.at(0)) == null ? void 0 : d2.schema, (o) => dr.jsxs("div", { className: "mt-4 flex flex-col gap-4", children: [
            dr.jsx(
              ht,
              {
                level: 3,
                className: "capitalize",
                id: `${s.slug}/request-body`,
                registerSidebarAnchor: true,
                children: "Request Body"
              }
            ),
            dr.jsx(g, { schema: o })
          ] })),
          s.responses.length > 0 && dr.jsxs(dr.Fragment, { children: [
            dr.jsx(
              ht,
              {
                level: 3,
                className: "capitalize mt-8 pt-8 border-t",
                id: `${s.slug}/responses`,
                registerSidebarAnchor: true,
                children: "Responses"
              }
            ),
            dr.jsxs(
              wn,
              {
                onValueChange: (o) => a2(o),
                value: r,
                children: [
                  s.responses.length > 1 && dr.jsx(Lt, { children: s.responses.map((o) => dr.jsx(
                    Oe,
                    {
                      value: o.statusCode,
                      title: o.description ?? void 0,
                      children: o.statusCode
                    },
                    o.statusCode
                  )) }),
                  dr.jsx("ul", { className: "list-none m-0 px-0", children: s.responses.map((o) => {
                    var c, S;
                    return dr.jsx(
                      Ce,
                      {
                        value: o.statusCode,
                        children: dr.jsx(
                          g,
                          {
                            schema: (S = (c = o.content) == null ? void 0 : c.find((L) => L.schema)) == null ? void 0 : S.schema
                          }
                        )
                      },
                      o.statusCode
                    );
                  }) })
                ]
              }
            )
          ] })
        ] }),
        dr.jsx(
          du,
          {
            selectedResponse: r,
            onSelectResponse: a2,
            operation: s
          }
        )
      ]
    },
    s.operationId
  );
};
var Ie = $r(
  /* GraphQL */
  `
  fragment OperationsFragment on OperationItem {
    slug
    summary
    method
    description
    operationId
    contentTypes
    path
    parameters {
      name
      in
      description
      required
      schema
      style
      examples {
        name
        description
        externalValue
        value
        summary
      }
    }
    requestBody {
      content {
        mediaType
        encoding {
          name
        }
        schema
      }
      description
      required
    }
    responses {
      statusCode
      links
      description
      content {
        mediaType
        encoding {
          name
        }
        schema
      }
    }
  }
`
);
var we = $r(
  /* GraphQL */
  `
  query AllOperations($input: JSON!, $type: SchemaType!) {
    schema(input: $input, type: $type) {
      description
      title
      url
      version
      tags {
        name
        description
        operations {
          slug
          ...OperationsFragment
        }
      }
    }
  }
`
);
var qe = { suspense: true };
var De = () => {
  var r;
  const { type: t, input: s } = Ac(), [n2] = ci({
    query: we,
    variables: { type: t, input: s },
    context: qe
  }), i = (r = n2.error) == null ? void 0 : r.graphQLErrors.at(0);
  return i ? dr.jsx(
    d,
    {
      category: "Error",
      title: "Schema cannot be displayed",
      message: dr.jsxs(dr.Fragment, { children: [
        dr.jsxs(n, { className: "mb-4", children: [
          "Check your configuration value ",
          dr.jsx(g1, { children: "apis.type" }),
          " ",
          "and ",
          dr.jsx(g1, { children: "apis.input" }),
          " in the Zudoku config."
        ] }),
        "An error occurred while trying to fetch the API reference:",
        dr.jsx(Cb, { code: i.toString(), language: "plain" })
      ] })
    }
  ) : n2.data ? dr.jsxs("div", { className: "pt-[--padding-content-top]", children: [
    dr.jsxs(
      "div",
      {
        className: bt(Pb, "mb-16 max-w-full prose-img:max-w-prose"),
        children: [
          dr.jsx(a, { children: "Overview" }),
          dr.jsx(ht, { level: 1, id: "description", registerSidebarAnchor: true, children: n2.data.schema.title }),
          dr.jsx(Mb, { content: n2.data.schema.description ?? "" })
        ]
      }
    ),
    dr.jsx("hr", {}),
    dr.jsx("div", { className: "my-4 flex justify-end", children: dr.jsx(de, {}) }),
    n2.data.schema.tags.filter((a2) => a2.operations.length > 0).map((a2) => dr.jsxs("div", { children: [
      a2.name && dr.jsx(a, { children: a2.name }),
      a2.description && dr.jsx(
        Mb,
        {
          className: `${Pb} max-w-full prose-img:max-w-prose w-full mt-2 mb-12`,
          content: a2.description
        }
      ),
      dr.jsx("div", { className: "operation mb-12", children: dr.jsx(X, { children: a2.operations.map((l) => dr.jsx(
        Se,
        {
          operationFragment: l
        },
        l.slug
      )) }) })
    ] }, a2.name))
  ] }) : null;
};
export {
  De as OperationList,
  Ie as OperationsFragment
};
//# sourceMappingURL=OperationList-BO-ES1C5-QUJVV3XB.js.map
