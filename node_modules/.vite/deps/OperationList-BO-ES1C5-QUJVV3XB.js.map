{
  "version": 3,
  "sources": ["../../zudoku/src/lib/plugins/openapi/graphql/fragment-masking.ts", "../../zudoku/src/lib/plugins/openapi/Endpoint.tsx", "../../zudoku/src/lib/util/groupBy.ts", "../../zudoku/src/lib/util/renderIf.ts", "../../zudoku/src/lib/plugins/openapi/ParameterListItem.tsx", "../../zudoku/src/lib/plugins/openapi/ParameterList.tsx", "../../zudoku/src/lib/util/objectEntries.ts", "../../zudoku/src/lib/plugins/openapi/schema/LogicalGroup/LogicalGroupConnector.tsx", "../../zudoku/src/lib/plugins/openapi/schema/LogicalGroup/LogicalGroupItem.tsx", "../../zudoku/src/lib/plugins/openapi/schema/LogicalGroup/LogicalGroup.tsx", "../../zudoku/src/lib/plugins/openapi/schema/utils.ts", "../../zudoku/src/lib/plugins/openapi/schema/SchemaComponents.tsx", "../../zudoku/src/lib/plugins/openapi/schema/SchemaView.tsx", "../../zudoku/src/lib/plugins/openapi/OperationListItem.tsx", "../../zudoku/src/lib/plugins/openapi/OperationList.tsx"],
  "sourcesContent": ["/* eslint-disable */\nimport type {\n  DocumentTypeDecoration,\n  ResultOf,\n  TypedDocumentNode,\n} from \"@graphql-typed-document-node/core\";\nimport type { FragmentDefinitionNode } from \"graphql\";\nimport type { Incremental } from \"./graphql.js\";\n\nexport type FragmentType<\n  TDocumentType extends DocumentTypeDecoration<any, any>,\n> =\n  TDocumentType extends DocumentTypeDecoration<infer TType, any>\n    ? [TType] extends [{ \" $fragmentName\"?: infer TKey }]\n      ? TKey extends string\n        ? { \" $fragmentRefs\"?: { [key in TKey]: TType } }\n        : never\n      : never\n    : never;\n\n// return non-nullable if `fragmentType` is non-nullable\nexport function useFragment<TType>(\n  _documentNode: DocumentTypeDecoration<TType, any>,\n  fragmentType: FragmentType<DocumentTypeDecoration<TType, any>>,\n): TType;\n// return nullable if `fragmentType` is undefined\nexport function useFragment<TType>(\n  _documentNode: DocumentTypeDecoration<TType, any>,\n  fragmentType: FragmentType<DocumentTypeDecoration<TType, any>> | undefined,\n): TType | undefined;\n// return nullable if `fragmentType` is nullable\nexport function useFragment<TType>(\n  _documentNode: DocumentTypeDecoration<TType, any>,\n  fragmentType: FragmentType<DocumentTypeDecoration<TType, any>> | null,\n): TType | null;\n// return nullable if `fragmentType` is nullable or undefined\nexport function useFragment<TType>(\n  _documentNode: DocumentTypeDecoration<TType, any>,\n  fragmentType:\n    | FragmentType<DocumentTypeDecoration<TType, any>>\n    | null\n    | undefined,\n): TType | null | undefined;\n// return array of non-nullable if `fragmentType` is array of non-nullable\nexport function useFragment<TType>(\n  _documentNode: DocumentTypeDecoration<TType, any>,\n  fragmentType: Array<FragmentType<DocumentTypeDecoration<TType, any>>>,\n): Array<TType>;\n// return array of nullable if `fragmentType` is array of nullable\nexport function useFragment<TType>(\n  _documentNode: DocumentTypeDecoration<TType, any>,\n  fragmentType:\n    | Array<FragmentType<DocumentTypeDecoration<TType, any>>>\n    | null\n    | undefined,\n): Array<TType> | null | undefined;\n// return readonly array of non-nullable if `fragmentType` is array of non-nullable\nexport function useFragment<TType>(\n  _documentNode: DocumentTypeDecoration<TType, any>,\n  fragmentType: ReadonlyArray<FragmentType<DocumentTypeDecoration<TType, any>>>,\n): ReadonlyArray<TType>;\n// return readonly array of nullable if `fragmentType` is array of nullable\nexport function useFragment<TType>(\n  _documentNode: DocumentTypeDecoration<TType, any>,\n  fragmentType:\n    | ReadonlyArray<FragmentType<DocumentTypeDecoration<TType, any>>>\n    | null\n    | undefined,\n): ReadonlyArray<TType> | null | undefined;\nexport function useFragment<TType>(\n  _documentNode: DocumentTypeDecoration<TType, any>,\n  fragmentType:\n    | FragmentType<DocumentTypeDecoration<TType, any>>\n    | Array<FragmentType<DocumentTypeDecoration<TType, any>>>\n    | ReadonlyArray<FragmentType<DocumentTypeDecoration<TType, any>>>\n    | null\n    | undefined,\n): TType | Array<TType> | ReadonlyArray<TType> | null | undefined {\n  return fragmentType as any;\n}\n\nexport function makeFragmentData<\n  F extends DocumentTypeDecoration<any, any>,\n  FT extends ResultOf<F>,\n>(data: FT, _fragment: F): FragmentType<F> {\n  return data as FragmentType<F>;\n}\nexport function isFragmentReady<TQuery, TFrag>(\n  queryNode: DocumentTypeDecoration<TQuery, any>,\n  fragmentNode: TypedDocumentNode<TFrag>,\n  data:\n    | FragmentType<TypedDocumentNode<Incremental<TFrag>, any>>\n    | null\n    | undefined,\n): data is FragmentType<typeof fragmentNode> {\n  const deferredFields = (\n    queryNode as {\n      __meta__?: { deferredFields: Record<string, (keyof TFrag)[]> };\n    }\n  ).__meta__?.deferredFields;\n\n  if (!deferredFields) return true;\n\n  const fragDef = fragmentNode.definitions[0] as\n    | FragmentDefinitionNode\n    | undefined;\n  const fragName = fragDef?.name?.value;\n\n  const fields = (fragName && deferredFields[fragName]) || [];\n  return fields.length > 0 && fields.every((field) => data && field in data);\n}\n", "import { CheckIcon, CopyIcon } from \"lucide-react\";\nimport { useState, useTransition } from \"react\";\nimport { useQuery } from \"urql\";\nimport { useSelectedServerStore } from \"../../authentication/state.js\";\nimport { InlineCode } from \"../../components/InlineCode.js\";\nimport { Button } from \"../../ui/Button.js\";\nimport { useOasConfig } from \"./context.js\";\nimport { graphql } from \"./graphql/index.js\";\nimport { SimpleSelect } from \"./SimpleSelect.js\";\n\nconst ServersQuery = graphql(/* GraphQL */ `\n  query ServersQuery($input: JSON!, $type: SchemaType!) {\n    schema(input: $input, type: $type) {\n      url\n      servers {\n        url\n      }\n    }\n  }\n`);\n\nconst CopyButton = ({ url }: { url: string }) => {\n  const [isCopied, setIsCopied] = useState(false);\n\n  return (\n    <Button\n      onClick={() => {\n        void navigator.clipboard.writeText(url).then(() => {\n          setIsCopied(true);\n          setTimeout(() => setIsCopied(false), 2000);\n        });\n      }}\n      variant=\"ghost\"\n      size=\"icon\"\n    >\n      {isCopied ? (\n        <CheckIcon className=\"text-green-600\" size={14} />\n      ) : (\n        <CopyIcon size={14} strokeWidth={1.3} />\n      )}\n    </Button>\n  );\n};\n\nconst context = { suspense: true } as const;\n\nexport const Endpoint = () => {\n  const [result] = useQuery({\n    query: ServersQuery,\n    variables: useOasConfig(),\n    context,\n  });\n  const [, startTransition] = useTransition();\n  const { selectedServer, setSelectedServer } = useSelectedServerStore();\n\n  if (!result.data) return null;\n\n  const { servers } = result.data.schema;\n\n  if (servers.length === 1) {\n    return (\n      <div className=\"flex items-center gap-2\">\n        <span className=\"font-medium text-sm\">Endpoint:</span>\n        <InlineCode className=\"text-xs px-2 py-1.5\" selectOnClick>\n          {servers[0].url}\n        </InlineCode>\n        <CopyButton url={servers[0].url} />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex flex-wrap items-center gap-2\">\n      <span className=\"font-medium text-sm\">\n        {servers.length > 1 ? \"Endpoints\" : \"Endpoint\"}:\n      </span>\n\n      <SimpleSelect\n        className=\"font-mono text-xs bg-border/50 dark:bg-border/70 py-1.5 max-w-[450px] truncate\"\n        onChange={(e) =>\n          startTransition(() => {\n            setSelectedServer(e.target.value);\n          })\n        }\n        value={selectedServer ?? result.data.schema.url}\n        showChevrons={servers.length > 1}\n        options={servers.map((server) => ({\n          value: server.url,\n          label: server.url,\n        }))}\n      />\n      <CopyButton url={selectedServer ?? result.data.schema.url} />\n    </div>\n  );\n};\n", "export const groupBy = <\n  T extends Record<PropertyKey, any>,\n  KeySelector extends (item: T) => PropertyKey,\n>(\n  arr: T[],\n  keySelector: KeySelector,\n): Partial<Record<ReturnType<KeySelector>, T[]>> => {\n  return arr.reduce(\n    (accumulator, val) => {\n      const groupedKey = keySelector(val) as ReturnType<KeySelector>;\n      if (!accumulator[groupedKey]) {\n        accumulator[groupedKey] = [];\n      }\n      accumulator[groupedKey].push(val);\n      return accumulator;\n    },\n    {} as Record<ReturnType<KeySelector>, T[]>,\n  );\n};\n", "export const renderIf = <G, R>(\n  variable: G | undefined | null,\n  callback: (variable: G) => R,\n): R | undefined => (variable ? callback(variable) : undefined);\n", "import { Markdown } from \"../../components/Markdown.js\";\nimport { type SchemaObject } from \"../../oas/graphql/index.js\";\nimport { ColorizedParam } from \"./ColorizedParam.js\";\nimport type { OperationListItemResult } from \"./OperationList.js\";\nimport type { ParameterGroup } from \"./OperationListItem.js\";\n\nconst getParameterSchema = (\n  parameter: ParameterListItemResult,\n): SchemaObject => {\n  if (parameter.schema != null && typeof parameter.schema === \"object\") {\n    return parameter.schema;\n  }\n  return {\n    type: \"string\",\n  };\n};\n\nexport type ParameterListItemResult = NonNullable<\n  OperationListItemResult[\"parameters\"]\n>[number];\n\nexport const ParameterListItem = ({\n  parameter,\n  group,\n  id,\n}: {\n  parameter: ParameterListItemResult;\n  group: ParameterGroup;\n  id: string;\n}) => (\n  <li className=\"p-4 bg-border/20 text-sm flex flex-col gap-1\">\n    <div className=\"flex items-center gap-2\">\n      <code>\n        {group === \"path\" ? (\n          <ColorizedParam\n            name={parameter.name}\n            backgroundOpacity=\"15%\"\n            slug={id + \"-\" + parameter.name.toLocaleLowerCase()}\n          />\n        ) : (\n          parameter.name\n        )}\n      </code>\n      {parameter.required && (\n        <span className=\"py-px px-1.5 font-medium bg-primary/75 text-muted rounded-lg\">\n          required\n        </span>\n      )}\n      {getParameterSchema(parameter).type && (\n        <span className=\"text-muted-foreground\">\n          {getParameterSchema(parameter).type}\n        </span>\n      )}\n    </div>\n    {parameter.description && (\n      <Markdown\n        content={parameter.description}\n        className=\"text-sm prose-p:my-1 prose-code:whitespace-pre-line\"\n      />\n    )}\n  </li>\n);\n", "import { Heading } from \"../../components/Heading.js\";\nimport { Card } from \"../../ui/Card.js\";\nimport type { ParameterGroup } from \"./OperationListItem.js\";\nimport {\n  ParameterListItem,\n  type ParameterListItemResult,\n} from \"./ParameterListItem.js\";\n\nexport const ParameterList = ({\n  group,\n  parameters,\n  id,\n}: {\n  group: ParameterGroup;\n  parameters: ParameterListItemResult[];\n  id: string;\n}) => (\n  <>\n    <Heading level={3} id={`${id}/${group}-parameters`} className=\"capitalize\">\n      {group === \"header\" ? \"Headers\" : `${group} Parameters`}\n    </Heading>\n    <Card>\n      <ul className=\"list-none m-0 px-0 divide-y \">\n        {parameters\n          .sort((a, b) => (a.required === b.required ? 0 : a.required ? -1 : 1))\n          .map((parameter) => (\n            <ParameterListItem\n              key={`${parameter.name}-${parameter.in}`}\n              parameter={parameter}\n              id={id}\n              group={group}\n            />\n          ))}\n      </ul>\n    </Card>\n  </>\n);\n", "type ValueOf<T> = T[keyof T];\ntype Entries<T> = [keyof T, ValueOf<T>][];\n\nexport const objectEntries = <T extends object>(obj: T): Entries<T> =>\n  Object.entries(obj) as Entries<T>;\n", "import {\n  ChevronDownIcon,\n  CircleDotIcon,\n  CircleFadingPlusIcon,\n  CircleIcon,\n} from \"lucide-react\";\nimport { cn } from \"../../../../util/cn.js\";\n\nimport type { LogicalGroupType } from \"../utils.js\";\n\nconst iconMap = {\n  AND: <CircleFadingPlusIcon size={16} className=\"fill-card\" />,\n  OR: <CircleDotIcon size={16} className=\"fill-card\" />,\n  ONE: <CircleIcon size={14} className=\"fill-card\" />,\n} as const;\n\nconst colorClass = {\n  AND: \"text-green-500 dark:text-green-300/60\",\n  OR: \"text-blue-400 dark:text-blue-500\",\n  ONE: \"text-purple-500 dark:text-purple-300/60\",\n} as const;\n\nexport const LogicalGroupConnector = ({\n  type,\n  isOpen,\n  className,\n}: {\n  type: LogicalGroupType;\n  isOpen: boolean;\n  className?: string;\n}) => {\n  return (\n    <div\n      className={cn(\n        colorClass[type],\n        \"relative text-sm flex py-2\",\n        \"before:border-l before:absolute before:-top-2 before:-bottom-2 before:border-border before:border-dashed before:content-['']\",\n        className,\n      )}\n    >\n      <div className=\"-translate-x-[7px] flex gap-1 items-center\">\n        {iconMap[type]}\n        <div\n          className={cn(\n            \"translate-y-px mx-px opacity-0 group-hover:opacity-100 transition\",\n            !isOpen && \"-rotate-90\",\n          )}\n        >\n          <ChevronDownIcon size={16} />\n        </div>\n      </div>\n    </div>\n  );\n};\n", "import * as Collapsible from \"@radix-ui/react-collapsible\";\nimport { useState } from \"react\";\nimport type { SchemaObject } from \"../../../../oas/parser/index.js\";\nimport { SchemaView } from \"../SchemaView.js\";\nimport type { LogicalGroupType } from \"../utils.js\";\nimport { LogicalGroupConnector } from \"./LogicalGroupConnector.js\";\n\nexport const LogicalGroupItem = (props: {\n  type: LogicalGroupType;\n  schema: SchemaObject;\n  level: number;\n}) => {\n  const [isOpen, setIsOpen] = useState(true);\n\n  return (\n    <Collapsible.Root\n      open={isOpen}\n      onOpenChange={() => setIsOpen((prev) => !prev)}\n      className=\"group\"\n    >\n      <Collapsible.Trigger>\n        <LogicalGroupConnector type={props.type} isOpen={isOpen} />\n      </Collapsible.Trigger>\n      {!isOpen && <div className=\"wavy-line bg-border translate-y-1\" />}\n      <Collapsible.Content>\n        <SchemaView schema={props.schema} level={props.level + 1} />\n      </Collapsible.Content>\n    </Collapsible.Root>\n  );\n};\n", "import * as Collapsible from \"@radix-ui/react-collapsible\";\nimport { SquareMinusIcon, SquarePlusIcon } from \"lucide-react\";\nimport type { SchemaObject } from \"../../../../oas/parser/index.js\";\nimport { Card } from \"../../../../ui/Card.js\";\nimport type { LogicalGroupType } from \"../utils.js\";\nimport { LogicalGroupItem } from \"./LogicalGroupItem.js\";\n\nconst typeLabel = {\n  AND: \"All of\",\n  OR: \"Any of\",\n  ONE: \"One of\",\n};\n\nexport const LogicalGroup = ({\n  schemas,\n  type,\n  isOpen,\n  level,\n  toggleOpen,\n}: {\n  schemas: SchemaObject[];\n  type: LogicalGroupType;\n  isOpen: boolean;\n  toggleOpen: () => void;\n  level: number;\n}) => (\n  <Collapsible.Root open={isOpen} onOpenChange={toggleOpen} asChild>\n    <Card className=\"px-6\">\n      <Collapsible.Trigger className=\"flex gap-2 items-center py-2 w-full text-sm text-muted-foreground -translate-x-1.5\">\n        {isOpen ? <SquareMinusIcon size={14} /> : <SquarePlusIcon size={14} />}\n        <span>{typeLabel[type]}</span>\n      </Collapsible.Trigger>\n\n      <Collapsible.Content className=\"pb-4\">\n        {schemas.map((subSchema, index) => (\n          // eslint-disable-next-line react/no-array-index-key\n          <LogicalGroupItem\n            key={index}\n            type={type}\n            schema={subSchema}\n            level={level}\n          />\n        ))}\n      </Collapsible.Content>\n    </Card>\n  </Collapsible.Root>\n);\n", "import type { SchemaObject } from \"../../../oas/parser/index.js\";\n\nexport const isComplexType = (value: SchemaObject) =>\n  value.type === \"object\" ||\n  (value.type === \"array\" &&\n    typeof value.items === \"object\" &&\n    (!value.items.type || value.items.type === \"object\"));\n\nexport const hasLogicalGroupings = (value: SchemaObject) =>\n  Boolean(value.oneOf ?? value.allOf ?? value.anyOf);\n\nexport const LogicalSchemaTypeMap = {\n  allOf: \"AND\",\n  anyOf: \"OR\",\n  oneOf: \"ONE\",\n} as const;\n\nexport type LogicalGroupType = \"AND\" | \"OR\" | \"ONE\";\n", "import * as Collapsible from \"@radix-ui/react-collapsible\";\nimport { ListPlusIcon } from \"lucide-react\";\nimport { useCallback, useState } from \"react\";\nimport { Markdown, ProseClasses } from \"../../../components/Markdown.js\";\nimport type { SchemaObject } from \"../../../oas/parser/index.js\";\nimport { Button } from \"../../../ui/Button.js\";\nimport { cn } from \"../../../util/cn.js\";\nimport { objectEntries } from \"../../../util/objectEntries.js\";\nimport { LogicalGroup } from \"./LogicalGroup/LogicalGroup.js\";\nimport { SchemaView } from \"./SchemaView.js\";\nimport {\n  hasLogicalGroupings,\n  isComplexType,\n  LogicalSchemaTypeMap,\n} from \"./utils.js\";\n\nexport const SchemaLogicalGroup = ({\n  schema,\n  level,\n}: {\n  schema: SchemaObject;\n  level: number;\n}) => {\n  const [isOpen, setIsOpen] = useState(true);\n  const toggleOpen = useCallback(() => setIsOpen((prev) => !prev), []);\n\n  for (const [key, type] of objectEntries(LogicalSchemaTypeMap)) {\n    if (!schema[key]) continue;\n\n    return (\n      <LogicalGroup\n        schemas={schema[key]}\n        type={type}\n        isOpen={isOpen}\n        toggleOpen={toggleOpen}\n        level={level}\n      />\n    );\n  }\n};\n\nexport const SchemaPropertyItem = ({\n  name,\n  schema,\n  group,\n  level,\n  defaultOpen = false,\n  showCollapseButton = true,\n}: {\n  name: string;\n  schema: SchemaObject;\n  group: \"required\" | \"optional\" | \"deprecated\";\n  level: number;\n  defaultOpen?: boolean;\n  showCollapseButton?: boolean;\n}) => {\n  const [isOpen, setIsOpen] = useState(defaultOpen);\n\n  return (\n    <li className=\"p-4 bg-border/20 hover:bg-border/30\">\n      <div className=\"flex flex-col gap-1 justify-between text-sm\">\n        <div className=\"flex gap-2 items-center\">\n          <code>{name}</code>\n          <span className=\"text-muted-foreground\">\n            {schema.type === \"array\" && schema.items.type ? (\n              <span>{schema.items.type}[]</span>\n            ) : Array.isArray(schema.type) ? (\n              <span>{schema.type.join(\" | \")}</span>\n            ) : (\n              <span>{schema.type}</span>\n            )}\n          </span>\n          {group === \"optional\" && (\n            <span className=\"py-px px-1.5 font-medium border rounded-lg\">\n              optional\n            </span>\n          )}\n        </div>\n\n        {schema.description && (\n          <Markdown\n            className={cn(ProseClasses, \"text-sm leading-normal line-clamp-4\")}\n            content={schema.description}\n          />\n        )}\n\n        {(hasLogicalGroupings(schema) || isComplexType(schema)) && (\n          <Collapsible.Root\n            defaultOpen={defaultOpen}\n            open={isOpen}\n            onOpenChange={() => setIsOpen(!isOpen)}\n          >\n            {showCollapseButton && (\n              <Collapsible.Trigger asChild>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"mt-2 flex gap-1.5\"\n                >\n                  <ListPlusIcon size={18} />\n                  {!isOpen\n                    ? \"Show nested properties\"\n                    : \"Hide nested properties\"}\n                </Button>\n              </Collapsible.Trigger>\n            )}\n            <Collapsible.Content>\n              <div className=\"mt-2\">\n                {hasLogicalGroupings(schema) ? (\n                  <SchemaLogicalGroup schema={schema} level={level + 1} />\n                ) : schema.type === \"object\" ? (\n                  <SchemaView schema={schema} level={level + 1} />\n                ) : (\n                  schema.type === \"array\" &&\n                  typeof schema.items === \"object\" && (\n                    <SchemaView schema={schema.items} level={level + 1} />\n                  )\n                )}\n              </div>\n            </Collapsible.Content>\n          </Collapsible.Root>\n        )}\n      </div>\n    </li>\n  );\n};\n", "import { Markdown, ProseClasses } from \"../../../components/Markdown.js\";\nimport type { SchemaObject } from \"../../../oas/parser/index.js\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"../../../ui/Card.js\";\nimport { cn } from \"../../../util/cn.js\";\nimport { groupBy } from \"../../../util/groupBy.js\";\nimport { SchemaLogicalGroup, SchemaPropertyItem } from \"./SchemaComponents.js\";\nimport { hasLogicalGroupings } from \"./utils.js\";\n\nexport const SchemaView = ({\n  schema,\n  level = 0,\n  defaultOpen = false,\n}: {\n  schema?: SchemaObject | null;\n  level?: number;\n  defaultOpen?: boolean;\n}) => {\n  if (!schema || Object.keys(schema).length === 0) {\n    return (\n      <Card className=\"p-4\">\n        <span className=\"text-sm text-muted-foreground italic\">\n          No response specified\n        </span>\n      </Card>\n    );\n  }\n\n  const renderSchema = (schema: SchemaObject, level: number) => {\n    if (hasLogicalGroupings(schema)) {\n      return <SchemaLogicalGroup schema={schema} level={level} />;\n    }\n\n    // Sometimes items is not defined\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (schema.type === \"array\" && schema.items) {\n      const itemsSchema = schema.items as SchemaObject;\n\n      if (\n        typeof itemsSchema.type === \"string\" &&\n        [\"string\", \"number\", \"boolean\", \"integer\"].includes(itemsSchema.type)\n      ) {\n        return (\n          <Card className=\"p-4\">\n            <span className=\"text-sm text-muted-foreground\">\n              {itemsSchema.type}[]\n            </span>\n            {schema.description && (\n              <Markdown\n                className={cn(\n                  ProseClasses,\n                  \"text-sm leading-normal line-clamp-4\",\n                )}\n                content={schema.description}\n              />\n            )}\n          </Card>\n        );\n      } else if (itemsSchema.type === \"object\") {\n        return (\n          <Card className=\"flex flex-col gap-2 bg-border/30 p-4\">\n            <span className=\"text-sm text-muted-foreground\">object[]</span>\n            {renderSchema(itemsSchema, level + 1)}\n          </Card>\n        );\n      } else {\n        return renderSchema(itemsSchema, level + 1);\n      }\n    }\n\n    if (schema.type === \"object\" && !schema.properties) {\n      return (\n        <Card className=\"p-4 flex gap-2 items-center\">\n          {\"name\" in schema && <>{schema.name}</>}\n          <span className=\"text-sm text-muted-foreground\">object</span>\n          {schema.description && (\n            <Markdown\n              className={cn(\n                ProseClasses,\n                \"text-sm leading-normal line-clamp-4\",\n              )}\n              content={schema.description}\n            />\n          )}\n        </Card>\n      );\n    }\n\n    if (schema.properties) {\n      const groupedProperties = groupBy(\n        Object.entries(schema.properties),\n        ([propertyName, property]) => {\n          return property.deprecated\n            ? \"deprecated\"\n            : schema.required?.includes(propertyName)\n              ? \"required\"\n              : \"optional\";\n        },\n      );\n\n      const groupNames = [\"required\", \"optional\", \"deprecated\"] as const;\n\n      return (\n        <Card className=\"divide-y overflow-hidden\">\n          {groupNames.map(\n            (group) =>\n              groupedProperties[group] && (\n                <ul key={group} className=\"divide-y\">\n                  {groupedProperties[group].map(([name, schema]) => (\n                    <SchemaPropertyItem\n                      key={name}\n                      name={name}\n                      schema={schema}\n                      group={group}\n                      level={level}\n                      defaultOpen={defaultOpen}\n                    />\n                  ))}\n                </ul>\n              ),\n          )}\n        </Card>\n      );\n    }\n\n    if (\n      typeof schema.type === \"string\" &&\n      [\"string\", \"number\", \"boolean\", \"integer\", \"null\"].includes(schema.type)\n    ) {\n      return (\n        <Card className=\"p-4\">\n          <span className=\"text-sm text-muted-foreground\">{schema.type}</span>\n          {schema.description && (\n            <Markdown\n              className={cn(\n                ProseClasses,\n                \"text-sm leading-normal line-clamp-4\",\n              )}\n              content={schema.description}\n            />\n          )}\n        </Card>\n      );\n    }\n\n    if (schema.additionalProperties) {\n      return (\n        <Card className=\"my-2\">\n          <CardHeader>\n            <CardTitle>Additional Properties:</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {renderSchema(\n              schema.additionalProperties as SchemaObject,\n              level + 1,\n            )}\n          </CardContent>\n        </Card>\n      );\n    }\n\n    return null;\n  };\n\n  return renderSchema(schema, level);\n};\n", "import { useState } from \"react\";\nimport { Heading } from \"../../components/Heading.js\";\nimport { Markdown, ProseClasses } from \"../../components/Markdown.js\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"../../ui/Tabs.js\";\nimport { groupBy } from \"../../util/groupBy.js\";\nimport { renderIf } from \"../../util/renderIf.js\";\nimport { OperationsFragment } from \"./OperationList.js\";\nimport { ParameterList } from \"./ParameterList.js\";\nimport { Sidecar } from \"./Sidecar.js\";\nimport { FragmentType, useFragment } from \"./graphql/index.js\";\nimport { SchemaView } from \"./schema/SchemaView.js\";\n\nexport const PARAM_GROUPS = [\"path\", \"query\", \"header\", \"cookie\"] as const;\nexport type ParameterGroup = (typeof PARAM_GROUPS)[number];\n\nexport const OperationListItem = ({\n  operationFragment,\n}: {\n  operationFragment: FragmentType<typeof OperationsFragment>;\n}) => {\n  const operation = useFragment(OperationsFragment, operationFragment);\n  const groupedParameters = groupBy(\n    operation.parameters ?? [],\n    (param) => param.in,\n  );\n\n  const first = operation.responses.at(0);\n  const [selectedResponse, setSelectedResponse] = useState(first?.statusCode);\n\n  return (\n    <div\n      key={operation.operationId}\n      className=\"grid grid-cols-1 lg:grid-cols-[4fr_3fr] gap-8 items-start border-b-2 mb-16 pb-16\"\n    >\n      <div className=\"flex flex-col gap-4\">\n        <Heading level={2} id={operation.slug} registerSidebarAnchor>\n          {operation.summary}\n        </Heading>\n        {operation.description && (\n          <Markdown\n            className={`${ProseClasses} max-w-full prose-img:max-w-prose`}\n            content={operation.description}\n          />\n        )}\n        {operation.parameters && operation.parameters.length > 0 && (\n          <>\n            {PARAM_GROUPS.flatMap((group) =>\n              groupedParameters[group]?.length ? (\n                <ParameterList\n                  key={group}\n                  id={operation.slug}\n                  parameters={groupedParameters[group]}\n                  group={group}\n                />\n              ) : (\n                []\n              ),\n            )}\n          </>\n        )}\n        {renderIf(operation.requestBody?.content?.at(0)?.schema, (schema) => (\n          <div className=\"mt-4 flex flex-col gap-4\">\n            <Heading\n              level={3}\n              className=\"capitalize\"\n              id={`${operation.slug}/request-body`}\n              registerSidebarAnchor\n            >\n              Request Body\n            </Heading>\n            <SchemaView schema={schema} />\n          </div>\n        ))}\n        {operation.responses.length > 0 && (\n          <>\n            <Heading\n              level={3}\n              className=\"capitalize mt-8 pt-8 border-t\"\n              id={`${operation.slug}/responses`}\n              registerSidebarAnchor\n            >\n              Responses\n            </Heading>\n            <Tabs\n              onValueChange={(value) => setSelectedResponse(value)}\n              value={selectedResponse}\n            >\n              {operation.responses.length > 1 && (\n                <TabsList>\n                  {operation.responses.map((response) => (\n                    <TabsTrigger\n                      value={response.statusCode}\n                      key={response.statusCode}\n                      title={response.description ?? undefined}\n                    >\n                      {response.statusCode}\n                    </TabsTrigger>\n                  ))}\n                </TabsList>\n              )}\n              <ul className=\"list-none m-0 px-0\">\n                {operation.responses.map((response) => (\n                  <TabsContent\n                    value={response.statusCode}\n                    key={response.statusCode}\n                  >\n                    <SchemaView\n                      schema={\n                        response.content?.find((content) => content.schema)\n                          ?.schema\n                      }\n                    />\n                  </TabsContent>\n                ))}\n              </ul>\n            </Tabs>\n          </>\n        )}\n      </div>\n\n      <Sidecar\n        selectedResponse={selectedResponse}\n        onSelectResponse={setSelectedResponse}\n        operation={operation}\n      />\n    </div>\n  );\n};\n", "import { ResultOf } from \"@graphql-typed-document-node/core\";\nimport { useQuery } from \"urql\";\nimport { CategoryHeading } from \"../../components/CategoryHeading.js\";\nimport { DeveloperHint } from \"../../components/DeveloperHint.js\";\nimport { ErrorPage } from \"../../components/ErrorPage.js\";\nimport { Heading } from \"../../components/Heading.js\";\nimport { InlineCode } from \"../../components/InlineCode.js\";\nimport { Markdown, ProseClasses } from \"../../components/Markdown.js\";\nimport { SyntaxHighlight } from \"../../components/SyntaxHighlight.js\";\nimport { cn } from \"../../util/cn.js\";\nimport { Endpoint } from \"./Endpoint.js\";\nimport { OperationListItem } from \"./OperationListItem.js\";\nimport StaggeredRender from \"./StaggeredRender.js\";\nimport { useOasConfig } from \"./context.js\";\nimport { graphql } from \"./graphql/index.js\";\n\nexport const OperationsFragment = graphql(/* GraphQL */ `\n  fragment OperationsFragment on OperationItem {\n    slug\n    summary\n    method\n    description\n    operationId\n    contentTypes\n    path\n    parameters {\n      name\n      in\n      description\n      required\n      schema\n      style\n      examples {\n        name\n        description\n        externalValue\n        value\n        summary\n      }\n    }\n    requestBody {\n      content {\n        mediaType\n        encoding {\n          name\n        }\n        schema\n      }\n      description\n      required\n    }\n    responses {\n      statusCode\n      links\n      description\n      content {\n        mediaType\n        encoding {\n          name\n        }\n        schema\n      }\n    }\n  }\n`);\n\nexport type OperationListItemResult = ResultOf<typeof OperationsFragment>;\n\nconst AllOperationsQuery = graphql(/* GraphQL */ `\n  query AllOperations($input: JSON!, $type: SchemaType!) {\n    schema(input: $input, type: $type) {\n      description\n      title\n      url\n      version\n      tags {\n        name\n        description\n        operations {\n          slug\n          ...OperationsFragment\n        }\n      }\n    }\n  }\n`);\n\nconst suspenseContext = { suspense: true };\n\nexport const OperationList = () => {\n  const { type, input } = useOasConfig();\n\n  const [result] = useQuery({\n    query: AllOperationsQuery,\n    variables: { type, input },\n    context: suspenseContext,\n  });\n\n  const error = result.error?.graphQLErrors.at(0);\n\n  // Looks like there is no Suspense level error handling (yet)?\n  // So we handle the error case in the component directly\n  if (error) {\n    return (\n      <ErrorPage\n        category=\"Error\"\n        title=\"Schema cannot be displayed\"\n        message={\n          <>\n            <DeveloperHint className=\"mb-4\">\n              Check your configuration value <InlineCode>apis.type</InlineCode>{\" \"}\n              and <InlineCode>apis.input</InlineCode> in the Zudoku config.\n            </DeveloperHint>\n            An error occurred while trying to fetch the API reference:\n            <SyntaxHighlight code={error.toString()} language=\"plain\" />\n          </>\n        }\n      />\n    );\n  }\n\n  if (!result.data) return null;\n\n  return (\n    <div className=\"pt-[--padding-content-top]\">\n      <div\n        className={cn(ProseClasses, \"mb-16 max-w-full prose-img:max-w-prose\")}\n      >\n        <CategoryHeading>Overview</CategoryHeading>\n        <Heading level={1} id=\"description\" registerSidebarAnchor>\n          {result.data.schema.title}\n        </Heading>\n        <Markdown content={result.data.schema.description ?? \"\"} />\n      </div>\n      <hr />\n      <div className=\"my-4 flex justify-end\">\n        <Endpoint />\n      </div>\n\n      {result.data.schema.tags\n        .filter((tag) => tag.operations.length > 0)\n        .map((tag) => (\n          <div key={tag.name}>\n            {tag.name && <CategoryHeading>{tag.name}</CategoryHeading>}\n            {tag.description && (\n              <Markdown\n                className={`${ProseClasses} max-w-full prose-img:max-w-prose w-full mt-2 mb-12`}\n                content={tag.description}\n              />\n            )}\n            <div className=\"operation mb-12\">\n              <StaggeredRender>\n                {tag.operations.map((fragment) => (\n                  <OperationListItem\n                    key={fragment.slug}\n                    operationFragment={fragment}\n                  />\n                ))}\n              </StaggeredRender>\n            </div>\n          </div>\n        ))}\n    </div>\n  );\n};\n"],
  "mappings": "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",
  "names": ["useFragment", "_documentNode", "fragmentType", "ServersQuery", "graphql", "CopyButton", "url", "isCopied", "setIsCopied", "useState", "jsx", "Button", "CheckIcon", "CopyIcon", "context", "Endpoint", "result", "useQuery", "useOasConfig", "startTransition", "useTransition", "selectedServer", "setSelectedServer", "useSelectedServerStore", "servers", "jsxs", "InlineCode", "SimpleSelect", "e", "server", "groupBy", "arr", "keySelector", "accumulator", "val", "groupedKey", "renderIf", "variable", "callback", "getParameterSchema", "parameter", "ParameterListItem", "group", "id", "ColorizedParam", "Markdown", "ParameterList", "parameters", "Fragment", "Heading", "Card", "a", "b", "objectEntries", "obj", "iconMap", "CircleFadingPlusIcon", "CircleDotIcon", "CircleIcon", "colorClass", "LogicalGroupConnector", "type", "isOpen", "className", "cn", "ChevronDownIcon", "LogicalGroupItem", "props", "setIsOpen", "Collapsible.Root", "prev", "Collapsible.Trigger", "Collapsible.Content", "SchemaView", "typeLabel", "LogicalGroup", "schemas", "level", "toggleOpen", "SquareMinusIcon", "SquarePlusIcon", "subSchema", "index", "isComplexType", "value", "hasLogicalGroupings", "LogicalSchemaTypeMap", "SchemaLogicalGroup", "schema", "useCallback", "key", "SchemaPropertyItem", "name", "defaultOpen", "showCollapseButton", "ProseClasses", "ListPlusIcon", "renderSchema", "itemsSchema", "groupedProperties", "propertyName", "property", "groupNames", "CardHeader", "CardTitle", "CardContent", "PARAM_GROUPS", "OperationListItem", "operationFragment", "operation", "OperationsFragment", "groupedParameters", "param", "first", "selectedResponse", "setSelectedResponse", "_a", "_c", "_b", "Tabs", "TabsList", "response", "TabsTrigger", "TabsContent", "content", "Sidecar", "AllOperationsQuery", "suspenseContext", "OperationList", "input", "error", "ErrorPage", "DeveloperHint", "SyntaxHighlight", "CategoryHeading", "tag", "StaggeredRender", "fragment"]
}
